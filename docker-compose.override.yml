services:
  backend:
    build:
      context: .
    profiles:
      - minimal_required_node
    command: yarn server
    user: ${CURRENT_USER:-root}
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
    environment:
      - POSTGRES_HOST=postgres_docker
      - REDIS_HOST=redis
      - SMTP_HOST=mailcatcher
      # On an M1 mac, puppeteer install fails with the message:
      # "The chromium binary is not available for arm64"
      #
      # The below instructs the container to skip downloading chromium and use the host's binary instead.
      # If you're not on an M1 mac, you can comment this out or just leave it, the undefined exports will have no effect.
      # I installed chromium with brew: `brew install chromium --no-quarantine`
      #
      # In ~/.zshrc (in my case) add:
      # export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      # export PUPPETEER_EXECUTABLE_PATH=`which chromium`
      - PUPPETEER_EXECUTABLE_PATH
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD
    volumes:
      - ".:/app:rw"
      - "node_modules-backend:/app/node_modules:rw"
      - "yarn-cache:/home/node/.cache/yarn:rw"
  frontend:
    build:
      context: .
    profiles:
      - minimal_required_node
    command: yarn start
    user: ${CURRENT_USER:-root}
    stdin_open: true
    ports:
      - "3000:3000"
    volumes:
      - "./frontend:/app:rw"
      - "./scripts:/app/scripts"
      - "./packages:/packages:ro"
      - "node_modules-frontend:/app/node_modules:rw"
      - "yarn-cache:/home/node/.cache/yarn:rw"
    environment:
      - BACKEND_PROXY=http://backend:8080
      - REACT_APP_WEBSOCKET_URL
  worker:
    build:
      context: .
    profiles:
      - minimal_required_node
    command: yarn worker
    env_file: .env
    depends_on:
      - db
      - redis
    environment:
      - POSTGRES_HOST=postgres_docker
      - REDIS_HOST=redis
      - SMTP_HOST=mailcatcher
    volumes:
      - ".:/app:rw"
      - "node_modules-backend:/app/node_modules:rw"
      - "yarn-cache:/home/node/.cache/yarn:rw"
  owasp_zap_backend:
    image: softwaresecurityproject/zap-stable:latest
    profiles:
      - full_stack_zap
    platform: linux/amd64
    user: zap
    command: zap-full-scan.py -t http://backend:8080 -c zap.conf  -i -r owasp_report_.html
    volumes:
      - ./zap.conf:/zap/wrk/zap.conf:ro
      - ./reports:/zap/wrk:rw
    depends_on:
      - backend