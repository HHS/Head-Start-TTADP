version: "3.7"
services:
  backend:
    build:
      context: .
      dockerfile: ./Dockerfile.dev
      cache_from: 
        - node:18.18.2  # Using the base image as a cache source
        - node:18.18.2-slim
        - node:18.18.2-alpine
        - head-start-ttadp-backend:latest
      target: backend
    command: yarn server
    user: ${CURRENT_USER:-root}
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
    env_file: .env
    # environment:
      # POSTGRES_HOST: postgres_docker
      # REDIS_HOST: redis
      # SMTP_HOST: mailcatcher
      # FONTAWESOME_NPM_AUTH_TOKEN:
      # On an M1 mac, puppeteer install fails with the message:
      # "The chromium binary is not available for arm64"
      #
      # The below instructs the container to skip downloading chromium and use the host's binary instead.
      # If you're not on an M1 mac, you can comment this out or just leave it, the undefined exports will have no effect.
      # I installed chromium with brew: `brew install chromium --no-quarantine`
      #
      # In ~/.zshrc (in my case) add:
      # export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      # export PUPPETEER_EXECUTABLE_PATH=`which chromium`
      # PUPPETEER_EXECUTABLE_PATH:
      # PUPPETEER_SKIP_CHROMIUM_DOWNLOAD:
      # POSTGRES_DB: ${POSTGRES_DB}
      # POSTGRES_USER: ${POSTGRES_USERNAME}
      # POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # BACKEND_PROXY: ${BACKEND_PROXY}
      # AUTH_CLIENT_SECRET: ${AUTH_CLIENT_SECRET}
      # SESSION_SECRET: ${SESSION_SECRET}
      # JWT_SECRET: ${JWT_SECRET}
      # REDIRECT_URI_HOST: ${REDIRECT_URI_HOST}
      # AUTH_BASE: ${AUTH_BASE}
    volumes:
      - "./src/:/app/src/:rw"
      - "./tests/:/app/tests/:rw"
      - "./config/:/app/config:rw"
      - "./packages:/packages:ro"
      - ".env:/app/.env:ro"
  frontend:
    build:
      context: .
      dockerfile: ./Dockerfile.dev
      cache_from: 
        - node:18.18.2  # Using the base image as a cache source
        - node:18.18.2-slim
        - node:18.18.2-alpine
        - head-start-ttadp-frontend:latest
      target: frontend
    env_file: .env
    command: yarn start
    user: ${CURRENT_USER:-root}
    stdin_open: true
    ports:
      - "3000:3000"
    volumes:
      - "./frontend:/app:rw"
      - "./scripts:/app/scripts"
      - "./packages:/packages:ro"
      - ".env:/app/.env:ro"
    # environment:
      # REDIRECT_URI_HOST: ${REDIRECT_URI_HOST}
      # CURRENT_USER_ID: ${CURRENT_USER_ID}
      # BYPASS_AUTH: ${BYPASS_AUTH}
      # FONTAWESOME_NPM_AUTH_TOKEN: ${FONTAWESOME_NPM_AUTH_TOKEN}
      # REACT_APP_WEBSOCKET_URL: REACT_APP_WEBSOCKET_URL
      # BACKEND_PROXY: ${BACKEND_PROXY}
  worker:
    build:
      context: .
      dockerfile: ./Dockerfile.dev
      cache_from: 
        - node:18.18.2  # Using the base image as a cache source
        - node:18.18.2-slim
        - node:18.18.2-alpine
        - head-start-ttadp-worker:latest
      target: backend
    command: yarn worker
    env_file: .env
    depends_on:
      - db
      - redis
    # environment:
    #   - POSTGRES_HOST=postgres_docker
    #   - REDIS_HOST=redis
    #   - SMTP_HOST=mailcatcher
    volumes:
      - "./src/:/app/src/:rw"
      - "./tests/:/app/tests/:rw"
      - "./config/:/app/config:rw"
      - ".env:/app/.env:ro"
  owasp_zap_backend:
    image: owasp/zap2docker-stable:latest
    platform: linux/arm64
    user: zap
    command: zap-full-scan.py -t http://backend:8080 -c zap.conf  -i -r owasp_report.html
    volumes:
      - ./zap.conf:/zap/wrk/zap.conf:ro
      - ./reports:/zap/wrk:rw
    depends_on:
      - backend
  owasp_zap_similarity:
    image: owasp/zap2docker-stable:latest
    platform: linux/arm64
    user: zap
    command: zap-api-scan.py -t http://similarity_api:8080/openapi.json -f openapi -I -i -r owasp_api_report.html
    volumes:
      - ./zap.conf:/zap/wrk/zap.conf:ro
      - ./reports:/zap/wrk:rw
    depends_on:
      - similarity_api
