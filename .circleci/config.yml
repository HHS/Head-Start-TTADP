version: 2.1
orbs:
  node: circleci/node@5.0.2
executors:
  docker-executor:
    # for docker you must specify an image to use for the primary container
    docker:
      - image: cimg/node:18.20.3-browsers
  docker-postgres-executor:
    docker:
      - image: cimg/node:18.20.3-browsers
        environment:
          DATABASE_URL: postgresql://postgres@localhost/ttasmarthub
      - image: cimg/postgres:15.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secretpass
          POSTGRES_DB: ttasmarthub
  docker-python-executor:
    docker:
      - image: cimg/python:3.9.19
  machine-executor:
    machine:
      image: ubuntu-2204:current
  aws-executor:
    docker:
      - image: cimg/aws:2024.03
commands:
  sparse_checkout:
    description: "Checkout a sparse directory from a specific branch."
    parameters:
      directory:
        type: string
        description: "Directory to checkout sparsely"
      branch:
        type: string
        description: "Branch to checkout"
    steps:
      - run:
          name: Install Git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - run:
          name: Clone Repository
          command: |
            git clone --no-checkout --filter=blob:none << pipeline.project.git_url >>.git .
      - run:
          name: Setup Sparse Checkout
          command: |
            git config core.sparseCheckout true
            echo "<< parameters.directory >>/*" >> .git/info/sparse-checkout
      - run:
          name: Checkout Branch
          command: |
            git checkout << parameters.branch >>
  create_combined_yarnlock:
    description: "Concatenate all yarn.json files into single file.
      File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
        default: "combined-yarnlock.txt"
    steps:
      - run:
          name: Combine package-lock.json files to single file
          command: cat yarn.lock frontend/yarn.lock packages/common/yarn.lock > << parameters.filename >>
  create_combined_pipfreeze:
    description: "Concatenate all requirements.txt files into a single file. File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
        default: "combined-requirements.txt"
    steps:
      - run:
          name: Combine requirements.txt files to single file
          command: cat similarity_api/src/requirements.txt > << parameters.filename >>
  notify_new_relic:
    description: "Notify new relic of a deploy"
    parameters:
      env_name:
        description: "Name of the environment. Ex. sandbox, dev, staging, prod"
        type: string
      new_relic_app_id:
        description: "App ID used in New Relic"
        type: string
      new_relic_api_key:
        description: "API key from New Relic"
        type: string
    steps:
      - run:
          name: Notify New Relic
          command: |
            curl -X POST "https://api.newrelic.com/v2/applications/<< parameters.new_relic_app_id >>/deployments.json" \
            -H "X-Api-Key: << parameters.new_relic_api_key >>" -i \
            -H "Content-Type: application/json" \
            -d \
            "{
              \"deployment\": {
                \"revision\": \"<< pipeline.git.revision >>\",
                \"description\": \"<< parameters.env_name >> Successfully Deployed\"
              }
            }"
  notify_slack:
    description: "Notify Slack with message"
    parameters:
      slack_bot_token:
        description: "Slack bot token"
        type: string
      slack_channel:
        description: "Slack channel name to post the message to"
        type: string
      message_text:
        description: "Message text to post to Slack"
        type: string
        default: ""
      message_text_script:
        description: "Script to generate message text"
        type: string
        default: ""
    steps:
      - run:
          name: Notify Slack
          command: |
            set -x
            # Ensure the $BASH_ENV file exists
            if [ ! -f $BASH_ENV ]; then
              touch $BASH_ENV
            fi
            
            source $BASH_ENV

            # Evaluate message_text_script if provided
            if [ -n "<< parameters.message_text_script >>" ]; then
              MESSAGE_TEXT=$(eval "<< parameters.message_text_script >>")
            else
              MESSAGE_TEXT="<< parameters.message_text >>"
            fi
            
            echo $MESSAGE_TEXT

            # Ensure all parameters are provided
            if [ -z "<< parameters.slack_bot_token >>" ] || [ -z "<< parameters.slack_channel >>" ] || [ -z "$MESSAGE_TEXT" ]; then
              echo "Missing required parameters. Notification will not be sent."
              exit 1
            fi

            curl \
              -X POST \
              -H "Authorization: Bearer << parameters.slack_bot_token >>" \
              -H 'Content-type: application/json;charset=utf-8' \
              --data "{
                \"channel\": \"<< parameters.slack_channel >>\",
                \"text\": \"$MESSAGE_TEXT\"
              }" \
              https://slack.com/api/chat.postMessage
  cf_deploy:
    description: "Login to cloud foundry space with service account credentials
      and push application using deployment configuration file."
    parameters:
      app_name:
        description: "Name of Cloud Foundry cloud.gov application; must match
          application name specified in manifest"
        type: string
      auth_client_id:
        description: "Name of CircleCi project environment variable that
          holds authentication client id, a required application variable"
        type: env_var_name
      auth_client_secret:
        description: "Name of CircleCi project environment variable that
          holds authentication client secret, a required application variable"
        type: env_var_name
      cloudgov_username:
        description: "Name of CircleCi project environment variable that
          holds deployer username for cloudgov space"
        type: env_var_name
      cloudgov_password:
        description: "Name of CircleCi project environment variable that
          holds deployer password for cloudgov space"
        type: env_var_name
      cloudgov_space:
        description: "Name of CircleCi project environment variable that
          holds name of cloudgov space to target for application deployment"
        type: env_var_name
      deploy_config_file:
        description: "Path to deployment configuration file"
        type: string
      session_secret:
        description: "Name of CircleCi project environment variable that
          holds session secret, a required application variable"
        type: env_var_name
      jwt_secret:
        description: "CircleCi project environment variable used by the backend
          token service for the email verification flow."
        type: env_var_name
      new_relic_license:
        description: "Name of CircleCI project environment variable that
          holds the New Relic License key, a required application variable"
        type: env_var_name
      hses_data_file_url:
        description: "Url to download HSES grants and recipient data from"
        type: env_var_name
      hses_data_username:
        description: "Username used to access the HSES grants and recipient data"
        type: env_var_name
      hses_data_password:
        description: "Password used to access the HSES grants and recipient data"
        type: env_var_name
      smtp_host:
        description: "SMTP server"
        type: env_var_name
      smtp_port:
        description: "SMTP port"
        type: env_var_name
      smtp_host_test:
        description: "SMTP server test"
        type: env_var_name
      smtp_port_test:
        description: "SMTP port test"
        type: env_var_name
      smtp_secure:
        description: "SMTP secure transport"
        type: env_var_name
      smtp_ignore_tls:
        description: "SMTP specifies whether to negotiate TLS"
        type: env_var_name
      from_email_address:
        description: "From email address"
        type: env_var_name
      smtp_user:
        description: "SMTP user"
        type: env_var_name
      smtp_password:
        description: "SMTP password"
        type: env_var_name
      suppress_error_logging:
        description: "Stop logging of non-sequelize errors to the db"
        type: env_var_name
      itams_md_host:
        description: "host url for itams monitoring data"
        type: env_var_name
      itams_md_port:
        description: "port for itams monitoring data"
        type: env_var_name
      itams_md_username:
        description: "username for itams monitoring data"
        type: env_var_name
      itams_md_password:
        description: "password for itams monitoring data"
        type: env_var_name
      smartsheet_access_token:
        description: "non-production smartsheet access token"
        type: env_var_name
    steps:
      - run:
          name: Login with service account
          command: |
            cf login -a << pipeline.parameters.cg_api >> \
              -u ${<< parameters.cloudgov_username >>} \
              -p ${<< parameters.cloudgov_password >>} \
              -o << pipeline.parameters.cg_org >> \
              -s ${<< parameters.cloudgov_space >>}
      - run:
          name: Push application with deployment vars
          command: |
            cf push \
              --vars-file << parameters.deploy_config_file >> \
              --var AUTH_CLIENT_ID=${<< parameters.auth_client_id >>} \
              --var AUTH_CLIENT_SECRET=${<< parameters.auth_client_secret >>} \
              --var NEW_RELIC_LICENSE_KEY=${<< parameters.new_relic_license >>} \
              --var SESSION_SECRET=${<< parameters.session_secret >>} \
              --var JWT_SECRET=${<< parameters.jwt_secret >>} \
              --var HSES_DATA_FILE_URL=${<< parameters.hses_data_file_url >>} \
              --var HSES_DATA_USERNAME=${<< parameters.hses_data_username >>} \
              --var HSES_DATA_PASSWORD=${<< parameters.hses_data_password >>} \
              --var SMTP_HOST=${<< parameters.smtp_host >>} \
              --var SMTP_PORT=${<< parameters.smtp_port >>} \
              --var SMTP_HOST_TEST=${<< parameters.smtp_host_test >>} \
              --var SMTP_PORT_TEST=${<< parameters.smtp_port_test >>} \
              --var SMTP_USER=${<< parameters.smtp_user >>} \
              --var SMTP_PASSWORD=${<< parameters.smtp_password >>} \
              --var SMTP_SECURE=${<< parameters.smtp_secure >>} \
              --var SMTP_IGNORE_TLS=${<< parameters.smtp_ignore_tls >>} \
              --var FROM_EMAIL_ADDRESS=${<< parameters.from_email_address >>} \
              --var SUPPRESS_ERROR_LOGGING=${<< parameters.suppress_error_logging >>} \
              --var ITAMS_MD_HOST=${<< parameters.itams_md_host >>} \
              --var ITAMS_MD_PORT=${<< parameters.itams_md_port >>} \
              --var ITAMS_MD_USERNAME=${<< parameters.itams_md_username >>} \
              --var ITAMS_MD_PASSWORD=${<< parameters.itams_md_password >>} \
              --var SMARTSHEET_ACCESS_TOKEN=${<< parameters.smartsheet_access_token >>}
      # - run:
      #     name: Push maintenance application
      #     command: |
      #       cd maintenance_page && cf push -s cflinuxfs4 --vars-file ../<<parameters.deploy_config_file >>
  cf_backup:
    description: "Login to cloud foundry space with service account credentials, Connect to DB & S3, backup DB to S3"
    parameters:
      auth_client_secret:
        description: "Name of CircleCi project environment variable that
          holds authentication client secret, a required application variable"
        type: env_var_name
      cloudgov_username:
        description: "Name of CircleCi project environment variable that
          holds deployer username for cloudgov space"
        type: env_var_name
      cloudgov_password:
        description: "Name of CircleCi project environment variable that
          holds deployer password for cloudgov space"
        type: env_var_name
      cloudgov_space:
        description: "Name of CircleCi project environment variable that
          holds name of cloudgov space to target for application deployment"
        type: env_var_name
      rds_service_name:
        description: "Name of the rds service to backup"
        type: string
      s3_service_name:
        description: "Name of the s3 service access"
        type: string
      backup_prefix:
        description: "prefix name to use for backups"
        type: string
    steps:
      - run:
          name: Install Dependencies
          command: |
            set -e
            set -u
            set -o pipefail
            set -o noglob
            set -o noclobber

            # update
            sudo apt-get update
            # Install uuid-runtime to have access to uuidgen
            # Install pv wget
            sudo apt-get install pv uuid-runtime wget coreutils jq
            # Install Cloud Foundry CLI
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf8-cli
            # Install plugin needed for connect-to-service
            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/v1.1.3/cf-service-connect_linux_amd64

            # The line you want to ensure exists in the /etc/hosts file
            line="127.0.0.1        localhost"

            # Check if the line already exists
            if ! grep -qF "$line" /etc/hosts; then
                # If the line does not exist, append it
                echo "$line" | sudo tee -a /etc/hosts > /dev/null
                echo "Line added to /etc/hosts"
            else
                echo "Line already exists in /etc/hosts"
            fi

            # cleanup
            sudo rm -rf /var/lib/apt/lists/*
      - run:
          name: Login with service account
          command: |
            cf login -a << pipeline.parameters.cg_api >> \
              -u ${<< parameters.cloudgov_username >>} \
              -p ${<< parameters.cloudgov_password >>} \
              -o << pipeline.parameters.cg_org >> \
              -s ${<< parameters.cloudgov_space >>}
      - run:
          name: cf_lambda - script to trigger backup
          command: |
            set -x
            json_data=$(jq -n \
              --arg automation_dir "./automation" \
              --arg manifest "manifest.yml" \
              --arg task_name "backup" \
              --arg command "cd /home/vcap/app/db-backup/scripts; bash ./db_backup.sh" \
              --argjson args '["<< parameters.backup_prefix >>", "<< parameters.rds_service_name >>", "<< parameters.s3_service_name >>"]' \
              '{
                automation_dir: $automation_dir,
                manifest: $manifest,
                task_name: $task_name,
                command: $command,
                args: $args
              }')

            # Set execute permission
            find ./automation -name "*.sh" -exec chmod +x {} \;

            ./automation/ci/scripts/cf_lambda.sh "$json_data"
          environment:
            CF_RDS_SERVICE_NAME: ttahub-prod
            CF_S3_SERVICE_NAME: ttahub-db-backups
      - notify_slack:
          slack_bot_token: $SLACK_BOT_TOKEN
          slack_channel: "acf-head-start-eng"
          message_text_script: |
            set -x
            if [ -f /tmp/presigned_urls.json ]; then
              PRESIGNED_URLS_JSON=$(cat /tmp/presigned_urls.json)
            else
              echo "Presigned URLs JSON file not found!"
              exit 1
            fi
            ZIP_URL=$(echo $PRESIGNED_URLS_JSON | jq -r '.zip_url')
            PASSWORD_URL=$(echo $PRESIGNED_URLS_JSON | jq -r '.password_url')
            MD5_URL=$(echo $PRESIGNED_URLS_JSON | jq -r '.md5_url')
            SHA256_URL=$(echo $PRESIGNED_URLS_JSON | jq -r '.sha256_url')

            if [ ! -z "$CIRCLE_PULL_REQUEST" ]; then
              PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
              echo ":download::database: Production backup before PR <$CIRCLE_PULL_REQUEST|$PR_NUMBER> successful!
              - [Backup ZIP]($ZIP_URL)
              - [Password File]($PASSWORD_URL)
              - [MD5 Checksum]($MD5_URL)
              - [SHA256 Checksum]($SHA256_URL)"
            else
              echo ":download::database: Production backup successful!
              - [Backup ZIP]($ZIP_URL)
              - [Password File]($PASSWORD_URL)
              - [MD5 Checksum]($MD5_URL)
              - [SHA256 Checksum]($SHA256_URL)"
            fi
      - run:
          name: Logout of service account
          command: |
            cf logout
parameters:
  cg_org:
    description: "Cloud Foundry cloud.gov organization name"
    default: "hhs-acf-ohs-tta"
    type: string
  cg_api:
    description: "URL of Cloud Controller in Cloud Foundry cloud.gov instance"
    default: "https://api.fr.cloud.gov"
    type: string
  prod_git_url:
    description: "URL of github repo that will deploy to prod"
    default: "https://github.com/HHS/Head-Start-TTADP"
    type: string
  staging_git_url:
    description: "URL of github repo that will deploy to staging"
    default: "https://github.com/HHS/Head-Start-TTADP"
    type: string
  dev_git_url:
    description: "URL of github repo that will deploy to dev"
    default: "https://github.com/HHS/Head-Start-TTADP"
    type: string
  sandbox_git_url:
    description: "URL of github repo that will deploy to sandbox"
    default: "https://github.com/HHS/Head-Start-TTADP"
    type: string
  prod_git_branch:
    description: "Name of github branch that will deploy to prod"
    default: "production"
    type: string
  staging_git_branch:
    description: "Name of github branch that will deploy to staging"
    default: "main"
    type: string
  dev_git_branch: # change to feature branch to test deployment
    description: "Name of github branch that will deploy to dev"
    default: "al-ttahub-2939-add-fei-root-cause-to-goal-card"
    type: string
  sandbox_git_branch:  # change to feature branch to test deployment
    default: "TTAHUB-3060/url-publish"
    type: string
  prod_new_relic_app_id:
    default: "877570491"
    type: string
  staging_new_relic_app_id:
    default: "868729138"
    type: string
  dev_new_relic_app_id:
    default: "867221900"
    type: string
  sandbox_new_relic_app_id:
    default: "867346799"
    type: string
  manual-trigger:
    type: boolean
    default: false
jobs:
  build_and_lint:
    executor: docker-executor
    steps:
      - checkout
      - create_combined_yarnlock
      - restore_cache:
          keys:
            # To manually bust the cache, increment the version e.g. v7-yarn...
            - v14-yarn-deps-{{ checksum "combined-yarnlock.txt" }}
            # If checksum is new, restore partial cache
            - v14-yarn-deps-
      - run: yarn deps
      - save_cache:
          paths:
            - node_modules
            - frontend/node_modules
            - packages/common/node_modules
          key: v11-yarn-deps-{{ checksum "combined-yarnlock.txt" }}
      - run:
          name: Lint backend
          command: yarn lint:ci
      - run:
          name: Audit vulnerability of backend node_modules
          command: |
            chmod 744 ./run-yarn-audit.sh
            ./run-yarn-audit.sh;
      - run:
          name: Lint frontend
          command: yarn --cwd frontend lint:ci
      - run:
          name: Audit vulnerability of frontend node_modules
          command: |
            cd frontend
            chmod 744 ./run-yarn-audit.sh
            ./run-yarn-audit.sh;
      - run:
          name: Check nodejs version compatibility with buildpack
          command: |
            chmod +x ./bin/check_node_version_compatibility.sh
            ./bin/check_node_version_compatibility.sh
      - store_artifacts:  # store backend lint reports
          path: reports
      - store_artifacts:  # store frontend lint reports
          path: frontend/reports
      - run:
          name: Remove similarity api data
          command: rm -rf similarity_api
      - persist_to_workspace:
          root: .
          paths:
            - .
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
  build_and_lint_similarity_api:
    executor: docker-python-executor
    steps:
      - checkout
      - create_combined_pipfreeze
      - restore_cache:
          keys:
            # To manually bust the cache, increment the version e.g. v7-pip...
            - v2-pip-deps-{{ checksum "combined-requirements.txt" }}
            # If checksum is new, restore partial cache
            - v2-pip-deps-
      - run:
          name: Install python dependencies
          command: |
            cd similarity_api/src
            python3 -m venv venv
            source venv/bin/activate
            pip install -U pip setuptools wheel
            pip install -U -r requirements.txt
      - run:
          name: Check python version compatibility  with buildpack
          command: |
            chmod +x ./bin/check_python_version_compatibility.sh
            ./bin/check_python_version_compatibility.sh
      - save_cache:
          paths:
            - similarity_api/src/venv
          key: v1-pip-deps-{{ checksum "combined-requirements.txt" }}
      - store_artifacts:  # store backend lint reports
          path: reports
      - store_artifacts:  # store frontend lint reports
          path: similarity_api/reports
      - persist_to_workspace:
          root: .
          paths:
            - similarity_api
    resource_class: large
  test_backend:
    executor: docker-postgres-executor
    environment:
        SFTP_EXPOSED_PORT: 2222
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Run seeders
          command: yarn db:seed:ci
      - run:
          name: Monitor database
          command: |
            docker attach  $(docker ps | grep postgres | awk '{print $1}')
          background: true
      - run:
          name: Test backend
          command:  |
            chmod 744 ./bin/test-backend-ci
            ./bin/test-backend-ci
      - run:
          name: Compress coverage artifacts
          command: tar -cvzf backend-coverage-artifacts.tar coverage/
      - store_artifacts:
          path: coverage/
      - store_artifacts:
          path: backend-coverage-artifacts.tar
      - store_test_results:
          path: reports/
    resource_class: large
  test_similarity_api:
    executor: docker-python-executor
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Syft SBOM
          environment:
            SYFT_VERSION: v1.5.0
            IMAGE_NAME: ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest
            OUTPUT_FORMAT: json
            OUTPUT_FILE:  reports/syft_sbom.json
          command: |
            mkdir -p reports/
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b . "$SYFT_VERSION"
            ./syft similarity_api/src -vv --scope AllLayers -o "$OUTPUT_FORMAT" > "$OUTPUT_FILE"
            echo "scan results saved in $OUTPUT_FILE"
          # echo $GITHUB_PAT | ./syft login ghcr.io -u $GITHUB_USERNAME --password-stdin  -vv
          # echo $GITHUB_PAT | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
      - run:
          name: Grype Docker image
          environment:
            GRYPE_VERSION: v0.78.0
            OUTPUT_FORMAT: sarif
            OUTPUT_FILE: reports/grype.json
          command: |
            curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b . "$GRYPE_VERSION"
            ./grype sbom:reports/syft_sbom.json -v -o "$OUTPUT_FORMAT" > "$OUTPUT_FILE"
            echo "scan results saved in $OUTPUT_FILE"
      - run:
          name: Test similarity
          command: |
            mkdir -p coverage/similarity
            cd similarity_api/src
            source venv/bin/activate
            pip install pytest pytest-cov
            pytest -rpP --cov=similarity --cov=. --junitxml=~/project/reports/junit.xml
            coverage report --show-missing --skip-covered
            coverage html -d ~/project/coverage/similarity --skip-covered
      - store_artifacts:
          path: reports/
    resource_class: large
  test_frontend:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Audit checksums of color files
          command: |
            chmod 744 ./checkcolorhash.sh
            ./checkcolorhash.sh;
      - run:
          name: Test frontend
          command: yarn --cwd frontend run test:ci --maxWorkers=50%
      - store_test_results:
          path: frontend/reports/
      - store_artifacts:
          path: frontend/coverage/
    resource_class: large
  test_e2e:
    executor: docker-postgres-executor
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Start server
          command: |
            yarn build
            BYPASS_AUTH=true CURRENT_USER_ID=5 yarn start:ci
          background: true
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Seed database
          command: yarn db:seed:ci
      - run:
          name: Wait for server to start
          command: ./bin/ping-server 3000
      - run:
          name: Monitor database
          command: |
            docker attach  $(docker ps | grep postgres | awk '{print $1}')
          background: true
      - run:
          name: Install playwright dependencies
          command: |
            npx playwright install
      - run:
          name: Monitor database
          command: |
            docker attach  $(docker ps | grep postgres | awk '{print $1}')
          background: true
      - run:
          name: Run playwright tests
          command: yarn e2e:ci
      - store_artifacts:
          path: playwright/e2e
    resource_class: large
  test_api:
    executor: docker-postgres-executor
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Start server
          command: |
            yarn build
            BYPASS_AUTH=true CURRENT_USER_ID=5 yarn start:ci
          background: true
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Seed database
          command: yarn db:seed:ci
      - run:
          name: Wait for server to start
          command: ./bin/ping-server 3000
      - run:
          name: Monitor database
          command: |
            docker attach  $(docker ps | grep postgres | awk '{print $1}')
          background: true
      - run:
          name: Install playwright dependencies
          command: |
            npx playwright install
      - run:
          name: Run playwright tests
          command: yarn e2e:api
      - store_artifacts:
          path: playwright/api
    resource_class: large
  test_utils:
    executor: docker-postgres-executor
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Start server
          command: |
            yarn build
            BYPASS_AUTH=true CURRENT_USER_ID=5 yarn start:ci
          background: true
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Seed database
          command: yarn db:seed:ci
      - run:
          name: Wait for server to start
          command: ./bin/ping-server 3000
      - run:
          name: Install playwright dependencies
          command: |
            npx playwright install
      - run:
          name: Run playwright tests
          command: yarn e2e:utils
      - store_artifacts:
          path: playwright/utilsTests
    resource_class: large
  cucumber_test:
    executor: docker-postgres-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Start server
          command: |
            yarn build
            BYPASS_AUTH=true CURRENT_USER_ID=5 yarn start:ci
          background: true
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Seed database
          command: yarn db:seed:ci
      - run:
          name: Wait for server to start
          command: ./bin/ping-server 3000
      - run:
          name: Run cucumber
          command: |
            yarn cucumber:ci
      - store_artifacts:
          path: reports/
    resource_class: large
  dynamic_security_scan:
    executor: machine-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Start up local server
          command: ./bin/prod-style-server
      - run:
          name: Wait for server to start
          command: ./bin/ping-server 8080
      - run:
          name: Pull OWASP ZAP docker image
          command: docker pull softwaresecurityproject/zap-stable:latest
      - run:
          name: Make reports directory group writeable
          command: chmod g+w reports
      - run:
          name: Run OWASP ZAP
          command: ./bin/run-owasp-scan
      - store_artifacts:
          path: reports/owasp_report.html
    resource_class: large
  deploy:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build backend assets
          command: yarn build
      - when:
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.prod_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.prod_git_branch >>]
          steps:
          - run:
              name: Create production robot
              command: ./bin/robot-factory
      - run:
          name: Install Cloud Foundry
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
            sudo dpkg -i cf-cli_amd64.deb
      - when:  # sandbox: for short-term feature development, see README.md
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.sandbox_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.sandbox_git_branch >>]
          steps:
            - run:
                name: Build frontend assets
                command: yarn --cwd frontend run build
                environment:
                  REACT_APP_GTM_ENABLED: $SANDBOX_GTM_ENABLED
                  REACT_APP_GTM_ID: $GLOBAL_GTM_ID
                  REACT_APP_GTM_AUTH: $SANDBOX_GTM_AUTH
                  REACT_APP_GTM_PREVIEW: $SANDBOX_GTM_PREVIEW
                  REACT_APP_WEBSOCKET_URL: wss://tta-smarthub-sandbox.app.cloud.gov
            - cf_deploy:
                app_name: tta-smarthub-sandbox
                auth_client_id: SANDBOX_AUTH_CLIENT_ID
                auth_client_secret: SANDBOX_AUTH_CLIENT_SECRET
                cloudgov_username: CLOUDGOV_SANDBOX_USERNAME
                cloudgov_password: CLOUDGOV_SANDBOX_PASSWORD
                cloudgov_space: CLOUDGOV_SANDBOX_SPACE
                deploy_config_file: deployment_config/sandbox_vars.yml
                new_relic_license: NEW_RELIC_LICENSE_KEY
                session_secret: SANDBOX_SESSION_SECRET
                jwt_secret: SANDBOX_JWT_SECRET
                hses_data_file_url: HSES_DATA_FILE_URL
                hses_data_username: HSES_DATA_USERNAME
                hses_data_password: HSES_DATA_PASSWORD
                smtp_host: STAGING_SMTP_HOST
                smtp_port: STAGING_SMTP_PORT
                smtp_host_test: SMTP_HOST_TEST
                smtp_port_test: SMTP_PORT_TEST
                smtp_secure: SMTP_SECURE
                smtp_ignore_tls: STAGING_SMTP_IGNORE_TLS
                from_email_address: FROM_EMAIL_ADDRESS
                smtp_user: SMTP_USER
                suppress_error_logging: SUPPRESS_ERROR_LOGGING
                smtp_password: SMTP_PASSWORD
                itams_md_host: ITAMS_MD_HOST
                itams_md_port: ITAMS_MD_PORT
                itams_md_username: ITAMS_MD_USERNAME
                itams_md_password: ITAMS_MD_PASSWORD
                smartsheet_access_token: SMARTSHEET_ACCESS_TOKEN
            - run:
                name: Migrate database
                command: |
                  cf run-task tta-smarthub-sandbox \
                    --command "yarn db:migrate:prod" \
                    --name "Reset DB"
            - notify_new_relic:
                env_name: sandbox
                new_relic_app_id: << pipeline.parameters.sandbox_new_relic_app_id >>
                new_relic_api_key: $NEW_RELIC_REST_API_KEY
            - notify_slack:
                slack_bot_token: $SLACK_BOT_TOKEN
                slack_channel: "acf-head-start-github"
                message_text_script: |
                  if [ ! -z "$CIRCLE_PULL_REQUEST" ]; then
                    PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
                    echo ":rocket: Deployment of PR <$CIRCLE_PULL_REQUEST|$PR_NUMBER> to sandbox was successful!"
                  else
                    echo ":rocket: Deployment to sandbox was successful!"
                  fi

      - when:  # dev
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.dev_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.dev_git_branch >>]
          steps:
            - run:
                name: Build frontend assets
                command: yarn --cwd frontend run build
                environment:
                  REACT_APP_GTM_ENABLED: $DEV_GTM_ENABLED
                  REACT_APP_GTM_ID: $GLOBAL_GTM_ID
                  REACT_APP_GTM_AUTH: $DEV_GTM_AUTH
                  REACT_APP_GTM_PREVIEW: $DEV_GTM_PREVIEW
                  REACT_APP_WEBSOCKET_URL: wss://tta-smarthub-dev.app.cloud.gov
            - cf_deploy:
                app_name: tta-smarthub-dev
                auth_client_id: DEV_AUTH_CLIENT_ID
                auth_client_secret: DEV_AUTH_CLIENT_SECRET
                cloudgov_username: CLOUDGOV_DEV_USERNAME
                cloudgov_password: CLOUDGOV_DEV_PASSWORD
                cloudgov_space: CLOUDGOV_DEV_SPACE
                deploy_config_file: deployment_config/dev_vars.yml
                new_relic_license: NEW_RELIC_LICENSE_KEY
                session_secret: DEV_SESSION_SECRET
                jwt_secret: DEV_JWT_SECRET
                hses_data_file_url: HSES_DATA_FILE_URL
                hses_data_username: HSES_DATA_USERNAME
                hses_data_password: HSES_DATA_PASSWORD
                smtp_host: STAGING_SMTP_HOST
                smtp_port: STAGING_SMTP_PORT
                smtp_host_test: SMTP_HOST_TEST
                smtp_port_test: SMTP_PORT_TEST
                smtp_secure: SMTP_SECURE
                smtp_ignore_tls: STAGING_SMTP_IGNORE_TLS
                from_email_address: FROM_EMAIL_ADDRESS
                smtp_user: SMTP_USER
                smtp_password: SMTP_PASSWORD
                suppress_error_logging: SUPPRESS_ERROR_LOGGING
                itams_md_host: ITAMS_MD_HOST
                itams_md_port: ITAMS_MD_PORT
                itams_md_username: ITAMS_MD_USERNAME
                itams_md_password: ITAMS_MD_PASSWORD
                smartsheet_access_token: SMARTSHEET_ACCESS_TOKEN
            - run:
                name: Migrate database
                command: |
                  cf run-task tta-smarthub-dev \
                    --command "yarn db:migrate:prod" \
                    --name "Reset DB"
            - notify_new_relic:
                env_name: dev
                new_relic_app_id: << pipeline.parameters.dev_new_relic_app_id >>
                new_relic_api_key: $NEW_RELIC_REST_API_KEY
            - notify_slack:
                slack_bot_token: $SLACK_BOT_TOKEN
                slack_channel: "acf-head-start-github"
                message_text_script: |
                  if [ ! -z "$CIRCLE_PULL_REQUEST" ]; then
                    PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
                    echo ":rocket: Deployment of PR <$CIRCLE_PULL_REQUEST|$PR_NUMBER> to dev was successful!"
                  else
                    echo ":rocket: Deployment to dev was successful!"
                  fi

      - when:  # staging
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.staging_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.staging_git_branch >>]
          steps:
            - run:
                name: Build frontend assets
                command: yarn --cwd frontend run build
                environment:
                  REACT_APP_GTM_ENABLED: $STAGING_GTM_ENABLED
                  REACT_APP_GTM_ID: $GLOBAL_GTM_ID
                  REACT_APP_GTM_AUTH: $STAGING_GTM_AUTH
                  REACT_APP_GTM_PREVIEW: $STAGING_GTM_PREVIEW
                  REACT_APP_WEBSOCKET_URL: wss://tta-smarthub-staging.app.cloud.gov
            - cf_deploy:
                app_name: tta-smarthub-staging
                auth_client_id: STAGING_AUTH_CLIENT_ID
                auth_client_secret: STAGING_AUTH_CLIENT_SECRET
                cloudgov_username: CLOUDGOV_STAGING_USERNAME
                cloudgov_password: CLOUDGOV_STAGING_PASSWORD
                cloudgov_space: CLOUDGOV_STAGING_SPACE
                deploy_config_file: deployment_config/staging_vars.yml
                new_relic_license: NEW_RELIC_LICENSE_KEY
                session_secret: STAGING_SESSION_SECRET
                jwt_secret: STAGING_JWT_SECRET
                hses_data_file_url: HSES_DATA_FILE_URL
                hses_data_username: HSES_DATA_USERNAME
                hses_data_password: HSES_DATA_PASSWORD
                smtp_host: STAGING_SMTP_HOST
                smtp_port: STAGING_SMTP_PORT
                smtp_host_test: SMTP_HOST_TEST
                smtp_port_test: SMTP_PORT_TEST
                smtp_secure: SMTP_SECURE
                smtp_ignore_tls: STAGING_SMTP_IGNORE_TLS
                from_email_address: FROM_EMAIL_ADDRESS
                smtp_user: SMTP_USER
                smtp_password: SMTP_PASSWORD
                suppress_error_logging: SUPPRESS_ERROR_LOGGING
                itams_md_host: ITAMS_MD_HOST
                itams_md_port: ITAMS_MD_PORT
                itams_md_username: ITAMS_MD_USERNAME
                itams_md_password: ITAMS_MD_PASSWORD
                smartsheet_access_token: SMARTSHEET_ACCESS_TOKEN
            - run:
                name: Run database migrations
                command: |
                  cf run-task tta-smarthub-staging --command "yarn db:migrate:prod" --name migrate
            - notify_new_relic:
                env_name: staging
                new_relic_app_id: << pipeline.parameters.staging_new_relic_app_id >>
                new_relic_api_key: $NEW_RELIC_REST_API_KEY
            - notify_slack:
                slack_bot_token: $SLACK_BOT_TOKEN
                slack_channel: "acf-head-start-github"
                message_text_script: |
                  if [ ! -z "$CIRCLE_PULL_REQUEST" ]; then
                    PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
                    echo ":rocket: Deployment of PR <$CIRCLE_PULL_REQUEST|$PR_NUMBER> to staging was successful!"
                  else
                    echo ":rocket: Deployment to staging was successful!"
                  fi

      - when:  # prod
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.prod_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.prod_git_branch >>]
          steps:
            - run:
                name: Build frontend assets
                command: yarn --cwd frontend run build
                environment:
                  REACT_APP_GTM_ENABLED: $PROD_GTM_ENABLED
                  REACT_APP_GTM_ID: $GLOBAL_GTM_ID
                  REACT_APP_GTM_AUTH: $PROD_GTM_AUTH
                  REACT_APP_GTM_PREVIEW: $PROD_GTM_PREVIEW
                  REACT_APP_WEBSOCKET_URL: wss://ttahub.ohs.acf.hhs.gov
            - cf_deploy:
                app_name: tta-smarthub-prod
                auth_client_id: PROD_AUTH_CLIENT_ID
                auth_client_secret: PROD_AUTH_CLIENT_SECRET
                cloudgov_username: CLOUDGOV_PROD_USERNAME
                cloudgov_password: CLOUDGOV_PROD_PASSWORD
                cloudgov_space: CLOUDGOV_PROD_SPACE
                deploy_config_file: deployment_config/prod_vars.yml
                new_relic_license: NEW_RELIC_LICENSE_KEY
                session_secret: PROD_SESSION_SECRET
                jwt_secret: PROD_JWT_SECRET
                hses_data_file_url: PROD_HSES_DATA_FILE_URL
                hses_data_username: PROD_HSES_DATA_USERNAME
                hses_data_password: PROD_HSES_DATA_PASSWORD
                smtp_host: SMTP_HOST
                smtp_port: SMTP_PORT
                smtp_host_test: SMTP_HOST_TEST
                smtp_port_test: SMTP_PORT_TEST
                smtp_secure: SMTP_SECURE
                smtp_ignore_tls: SMTP_IGNORE_TLS
                from_email_address: FROM_EMAIL_ADDRESS
                smtp_user: SMTP_USER
                smtp_password: SMTP_PASSWORD
                suppress_error_logging: SUPPRESS_ERROR_LOGGING
                itams_md_host: ITAMS_MD_HOST
                itams_md_port: ITAMS_MD_PORT
                itams_md_username: ITAMS_MD_USERNAME
                itams_md_password: ITAMS_MD_PASSWORD
                smartsheet_access_token: SMARTSHEET_ACCESS_TOKEN
            - run:
                name: Run database migrations
                command: |
                  cf run-task tta-smarthub-prod --command "yarn db:migrate:prod" --name migrate
            - notify_new_relic:
                env_name: prod
                new_relic_app_id: << pipeline.parameters.prod_new_relic_app_id >>
                new_relic_api_key: $NEW_RELIC_REST_API_KEY
            - notify_slack:
                slack_bot_token: $SLACK_BOT_TOKEN
                slack_channel: "acf-ohs-ttahub--contractor-customer-team"
                message_text_script: |
                  if [ ! -z "$CIRCLE_PULL_REQUEST" ]; then
                    PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
                    echo ":rocket: Deployment of PR <$CIRCLE_PULL_REQUEST|$PR_NUMBER> to production was successful!"
                  else
                    echo ":rocket: Deployment to production was successful!"
                  fi

    resource_class: large
  backup_upload_production:
    docker:
      - image: cimg/base:2024.05
    steps:
    - sparse_checkout:
          directory: 'automation'
          branch: << pipeline.git.branch >>
    - cf_backup:
          auth_client_secret: PROD_AUTH_CLIENT_SECRET
          cloudgov_username: CLOUDGOV_PROD_USERNAME
          cloudgov_password: CLOUDGOV_PROD_PASSWORD
          cloudgov_space: CLOUDGOV_PROD_SPACE
          rds_service_name: ttahub-prod
          s3_service_name: ttahub-db-backups
          backup_prefix: production
workflows:
  build_test_deploy:
    when:
      equal: [false, << pipeline.parameters.manual-trigger >>]
    jobs:
      - build_and_lint
      - build_and_lint_similarity_api
      - test_backend:
          requires:
            - build_and_lint
      - test_frontend:
          requires:
            - build_and_lint
      - test_e2e:
          requires:
            - build_and_lint
      - test_api:
          requires:
            - build_and_lint
      - test_similarity_api:
          requires:
            - build_and_lint_similarity_api
      - test_utils:
          requires:
            - build_and_lint
      - cucumber_test:
          requires:
            - build_and_lint
      - dynamic_security_scan:
          requires:
            - build_and_lint
      - backup_upload_production:
          requires:
            - test_backend
            - test_frontend
            - test_e2e
            - test_api
            - test_similarity_api
            - test_utils
            - cucumber_test
            - dynamic_security_scan
          filters:
            branches:
              only:
                - << pipeline.parameters.prod_git_branch >>
      - deploy:
          requires:
            - test_backend
            - test_frontend
            - test_e2e
            - test_api
            - test_similarity_api
            - test_utils
            - cucumber_test
            - dynamic_security_scan
          filters:
            branches:
              only:
                - << pipeline.parameters.sandbox_git_branch >>
                - << pipeline.parameters.dev_git_branch >>
                - << pipeline.parameters.staging_git_branch >>
                - << pipeline.parameters.prod_git_branch >>
  daily_scan:
    triggers:
      - schedule:
          cron: "0 12 * * 1-5"
          filters:
            branches:
              only:
                - << pipeline.parameters.dev_git_branch >>
                - << pipeline.parameters.staging_git_branch >>
                - << pipeline.parameters.prod_git_branch >>
    jobs:
      - build_and_lint
      - build_and_lint_similarity_api
      - test_backend:
          requires:
            - build_and_lint
      - test_frontend:
          requires:
            - build_and_lint
      - test_e2e:
          requires:
            - build_and_lint
      - test_api:
          requires:
            - build_and_lint
      - test_similarity_api:
          requires:
            - build_and_lint_similarity_api
      - test_utils:
          requires:
            - build_and_lint
      - dynamic_security_scan:
          requires:
            - build_and_lint
  daily_backup_upload_production:
    triggers:
      - schedule:
          cron: "0 10 * * 1-5"
          filters:
            branches:
              only:
                - << pipeline.parameters.prod_git_branch >>
    jobs:
      - backup_upload_production
  manual_backup_upload_production:
    when:
      equal: [true, << pipeline.parameters.manual-trigger >>]
    jobs:
      - backup_upload_production
