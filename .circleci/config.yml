version: 2.1
executors:
  docker-executor:
    docker:
      - image: cimg/node:20.18.2-browsers
  docker-postgres-executor:
    docker:
      - image: cimg/node:20.18.2-browsers
        environment:
          DATABASE_URL: postgresql://postgres@localhost/ttasmarthub
      - image: cimg/postgres:15.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secretpass
          POSTGRES_DB: ttasmarthub
  docker-python-executor:
    docker:
      - image: cimg/python:3.9.21
  machine-executor:
    machine:
      image: ubuntu-2204:current
  aws-executor:
    docker:
      - image: cimg/aws:2024.03

parameters:
  action:
    description: "Desired job to run"
    enum: ["build_test", "deploy"]
    default: "build_test"
    type: enum
  env: 
      description: "Target environment"
      default: "dev"
      type: enum
      enum: ["blue", "green", "red", "dev", "sandbox", "staging", "prod"]
  input:
    description: "Additional data for the job.  Leave blank if not sure"
    default: ""
    type: string

# ----------------- workflows ----------------- 
workflows:
  build_test_deploy:
    when:
      or:
        - equal: [ build_test, << pipeline.parameters.action >> ]
        - equal: [ deploy, << pipeline.parameters.action  >> ]  
    jobs:
      - build_and_lint
      - build_and_lint_similarity_api
      - test_backend:
          requires:
            - build_and_lint
      - test_frontend:
          requires:
            - build_and_lint
      - test_e2e:
          requires:
            - build_and_lint
      - test_api:
          requires:
            - build_and_lint
      - test_similarity_api:
          requires:
            - build_and_lint_similarity_api
      - test_utils:
          requires:
            - build_and_lint
      - cucumber_test:
          requires:
            - build_and_lint
      - dynamic_security_scan:
          requires:
            - build_and_lint
            - build_and_lint_similarity_api
      - deploy:
          serial-group: << pipeline.id >>/<< pipeline.parameters.env >>/deploy-lock
          requires:
            - test_backend
            - test_frontend
            - test_e2e
            - test_api
            - test_similarity_api
            - test_utils
            - cucumber_test
            - dynamic_security_scan
  app_deploy:
    when: pipeline.parameters.action == "deploy"
    jobs:
      - build_and_lint
      - build_and_lint_similarity_api
      - deploy:
          serial-group: << pipeline.id >>/<< pipeline.parameters.env >>/deploy-lock
          requires:
            - build_and_lint
            - build_and_lint_similarity_api

# ----------------- jobs ----------------- 
jobs:
  build_and_lint:
    executor: docker-executor
    resource_class: large
    parameters:
      APP_VARS_FILE: 
        default: ./deployment_config/<< pipeline.parameters.env >>_vars.yml
        type: string
      CI_VARS_FILE: 
        default: ./deployment_config/<< pipeline.parameters.env >>_vars_ci.yml
        type: string
    steps:
      - checkout
      - create_combined_yarnlock
      - restore_cache:
          keys:
            # To manually bust the cache, increment the version e.g. v7-yarn...
            - v15-yarn-deps-{{ checksum "combined-yarnlock.txt" }}
            # If checksum is new, restore partial cache
            - v15-yarn-deps-
      - run: yarn deps
      - save_cache:
          paths:
            - node_modules
            - frontend/node_modules
            - packages/common/node_modules
          key: v15-yarn-deps-{{ checksum "combined-yarnlock.txt" }}
      - run:
          name: Lint backend
          command: yarn lint:ci
      - run:
          name: Audit vulnerability of backend node_modules
          command: |
            chmod 744 ./run-yarn-audit.sh
            ./run-yarn-audit.sh;
      - run:
          name: Lint frontend
          command: yarn --cwd frontend lint:ci
      - run:
          name: Audit vulnerability of frontend node_modules
          command: |
            cd frontend
            chmod 744 ./run-yarn-audit.sh
            ./run-yarn-audit.sh;
      - run:
          name: Check nodejs version compatibility with buildpack
          command: |
            chmod +x ./bin/check_node_version_compatibility.sh
            ./bin/check_node_version_compatibility.sh
      - store_artifacts: # store backend lint reports
          path: reports
      - store_artifacts: # store frontend lint reports
          path: frontend/reports
      - run:
          name: Remove similarity api data
          command: rm -rf similarity_api
      - persist_to_workspace:
          root: .
          paths:
            - .
    
  build_and_lint_similarity_api:
    executor: docker-python-executor
    resource_class: large
    steps:
      - checkout
      - create_combined_pipfreeze
      - restore_cache:
          keys:
            # To manually bust the cache, increment the version e.g. v7-pip...
            - v2-pip-deps-{{ checksum "combined-requirements.txt" }}
            # If checksum is new, restore partial cache
            - v2-pip-deps-
      - run:
          name: Install python dependencies
          command: |
            cd similarity_api/src
            python3 -m venv venv
            source venv/bin/activate
            pip install -U pip setuptools wheel
            pip install -U --use-pep517 -r requirements.txt
      - save_cache:
          paths:
            - similarity_api/src/venv
          key: v1-pip-deps-{{ checksum "combined-requirements.txt" }}
      - store_artifacts: # store backend lint reports
          path: reports
      - store_artifacts: # store frontend lint reports
          path: similarity_api/reports
      - persist_to_workspace:
          root: .
          paths:
            - similarity_api
    
  test_backend:
    executor: docker-postgres-executor
    resource_class: large
    environment:
      SFTP_EXPOSED_PORT: 2222
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Add GitHub to known_hosts
          command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Run seeders
          command: yarn db:seed:ci
      - run:
          name: Monitor database
          command: |
            docker attach  $(docker ps | grep postgres | awk '{print $1}')
          background: true
      - run:
          name: Test backend
          command: |
            chmod 744 ./bin/test-backend-ci
            ./bin/test-backend-ci
      # Run coverage check script
      - run:
          name: Check coverage for modified lines
          command: |
            if [ -n "${CIRCLE_PULL_REQUEST}" ]; then
              chmod +x ./tools/check-coverage.js
              node -r esm ./tools/check-coverage.js \
                --directory-filter=src/,tools/ \
                --fail-on-uncovered=false \
                --output-format=json,html
            else
              echo "Not a PR build. Skipping coverage check."
            fi
          when: always
      - run:
          name: Summarize coverage
          command: |
            chmod +x ./tools/summarize-coverageCLI.js
            node ./tools/summarize-coverageCLI.js \
              ./coverage/coverage-final.json \
              90
          when: always
      - run:
          name: Compress coverage artifacts
          command: tar -cvzf backend-coverage-artifacts.tar coverage/
      - store_artifacts:
          path: coverage/
      - store_artifacts:
          path: backend-coverage-artifacts.tar
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: coverage-artifacts/
          destination: uncovered-lines
    
  test_similarity_api:
    executor: docker-python-executor
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Syft SBOM
          environment:
            SYFT_VERSION: v1.5.0
            IMAGE_NAME: ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest
            OUTPUT_FORMAT: json
            OUTPUT_FILE: reports/syft_sbom.json
          command: |
            mkdir -p reports/
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b . "$SYFT_VERSION"
            ./syft similarity_api/src -vv --scope AllLayers -o "$OUTPUT_FORMAT" > "$OUTPUT_FILE"
            echo "scan results saved in $OUTPUT_FILE"
      - run:
          name: Grype Docker image
          environment:
            GRYPE_VERSION: v0.78.0
            OUTPUT_FORMAT: sarif
            OUTPUT_FILE: reports/grype.json
          command: |
            curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b . "$GRYPE_VERSION"
            ./grype sbom:reports/syft_sbom.json -v -o "$OUTPUT_FORMAT" > "$OUTPUT_FILE"
            echo "scan results saved in $OUTPUT_FILE"
      - run:
          name: Test similarity
          command: |
            mkdir -p coverage/similarity
            cd similarity_api/src
            source venv/bin/activate
            pip install pytest pytest-cov
            pytest -rpP --cov=similarity --cov=. --junitxml=~/project/reports/junit.xml
            coverage report --show-missing --skip-covered
            coverage html -d ~/project/coverage/similarity --skip-covered
      - store_artifacts:
          path: reports/
    

  test_frontend:
    executor: docker-executor
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Audit checksums of color files
          command: |
            chmod 744 ./checkcolorhash.sh
            ./checkcolorhash.sh;
      - run:
          name: Add GitHub to known_hosts
          command: |
            mkdir -p /home/circleci/.ssh
            ssh-keyscan -H github.com >> /home/circleci/.ssh/known_hosts

      - run:
          name: Test frontend
          command: yarn --cwd frontend run test:ci --maxWorkers=50%
      - run:
          name: Check coverage for modified lines
          command: |
            if [ -n "${CIRCLE_PULL_REQUEST}" ]; then
              chmod +x ./tools/check-coverage.js
              node -r esm ./tools/check-coverage.js \
                --coverage-file=../frontend/coverage/coverage-final.json \
                --artifact-dir=../frontend/coverage-artifacts \
                --directory-filter=frontend/ \
                --fail-on-uncovered=false \
                --output-format=json,html
            else
              echo "Not a PR build. Skipping coverage check."
            fi
          when: always
      - store_test_results:
          path: frontend/reports/
      - store_artifacts:
          path: frontend/coverage/
      - store_artifacts:
          path: frontend/coverage-artifacts/
          destination: uncovered-lines
    
  test_e2e:
    executor: docker-postgres-executor
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Start server
          command: |
            yarn build
            BYPASS_AUTH=true CURRENT_USER_ID=5 yarn start:ci
          background: true
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Seed database
          command: yarn db:seed:ci
      - run:
          name: Wait for server to start
          command: ./bin/ping-server 3000
      - run:
          name: Monitor database
          command: |
            docker attach  $(docker ps | grep postgres | awk '{print $1}')
          background: true
      - run:
          name: Install playwright dependencies
          command: |
            npx playwright install
      - run:
          name: Monitor database
          command: |
            docker attach  $(docker ps | grep postgres | awk '{print $1}')
          background: true
      - run:
          name: Run playwright tests
          command: yarn e2e:ci
      - store_artifacts:
          path: tests/e2e
    
  test_api:
    executor: docker-postgres-executor
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Start server
          command: |
            yarn build
            BYPASS_AUTH=true CURRENT_USER_ID=5 yarn start:ci
          background: true
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Seed database
          command: yarn db:seed:ci
      - run:
          name: Wait for server to start
          command: ./bin/ping-server 3000
      - run:
          name: Monitor database
          command: |
            docker attach  $(docker ps | grep postgres | awk '{print $1}')
          background: true
      - run:
          name: Install playwright dependencies
          command: |
            npx playwright install
      - run:
          name: Run playwright tests
          command: yarn e2e:api
      - store_artifacts:
          path: tests/api
    
  test_utils:
    executor: docker-postgres-executor
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: default
      - run:
          name: Start server
          command: |
            yarn build
            BYPASS_AUTH=true CURRENT_USER_ID=5 yarn start:ci
          background: true
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Seed database
          command: yarn db:seed:ci
      - run:
          name: Wait for server to start
          command: ./bin/ping-server 3000
      - run:
          name: Install playwright dependencies
          command: |
            npx playwright install
      - run:
          name: Run playwright tests
          command: yarn e2e:utils
      - store_artifacts:
          path: tests/utilsTests
    
  cucumber_test:
    executor: docker-postgres-executor
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Start server
          command: |
            yarn build
            BYPASS_AUTH=true CURRENT_USER_ID=5 yarn start:ci
          background: true
      - run:
          name: Run migrations ci
          command: yarn db:migrate:ci
      - run:
          name: Seed database
          command: yarn db:seed:ci
      - run:
          name: Wait for server to start
          command: ./bin/ping-server 3000
      - run:
          name: Run cucumber
          command: |
            yarn cucumber:ci
      - store_artifacts:
          path: reports/
    
  dynamic_security_scan:
    executor: machine-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Clean previous reports
          command: |
            rm -rf reports/server/*
            rm -rf reports/similarity_api/*
      - run:
          name: Start up local services
          command: ./bin/prod-style-server
      - run:
          name: Wait for Node.js server to start
          command: ./bin/ping-server 8080
      - run:
          name: Wait for similarity_api to start
          command: ./bin/ping-server 9100 localhost /openapi.json
      - run:
          name: Pull OWASP ZAP docker image
          command: docker pull softwaresecurityproject/zap-stable:latest
      - run:
          name: Run OWASP ZAP scan for Node.js server
          command: ./bin/run-owasp-scan --target http://server:8080 --full
      - run:
          name: Run OWASP ZAP scan for similarity_api
          command: ./bin/run-owasp-scan --target http://similarity_api:8080 --api
      - store_artifacts:
          path: reports
    
  deploy:
    executor: docker-executor
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - run:
          command: |
            circleci env subst < ./deployment_config/<< pipeline.parameters.env >>_vars_ci.yml > ci.vars
      - run:
          name: Build backend assets
          command: yarn build
      - when:
          condition:
            equal: [ << pipeline.parameters.env >>, prod ]
          steps:
            - run:
                name: Create production robots.txt
                command: ./bin/robot-factory
      - install_cf_tools
      - run:
          name: Build frontend assets
          command: yarn --cwd frontend run build
          environment:
            REACT_APP_GTM_ENABLED: $PROD_GTM_ENABLED
            REACT_APP_GTM_ID: $GLOBAL_GTM_ID
            REACT_APP_GTM_AUTH: $PROD_GTM_AUTH
            REACT_APP_GTM_PREVIEW: $PROD_GTM_PREVIEW
            REACT_APP_WEBSOCKET_URL: wss://ttahub.ohs.acf.hhs.gov
            REACT_APP_INCLUDE_ACCESSIBILITY_CSS: 'false'
      - cf_deploy
      - run:
          name: Run database migrations
          command: |
            cf run-task tta-smarthub-prod --command "yarn db:migrate:prod" --name migrate
      - notify_new_relic
      - notify_slack_deploy:
          slack_bot_token: $SLACK_BOT_TOKEN
          slack_channel: "acf-ohs-ttahub--contractor-customer-team"
          environment_name: << pipeline.parameters.env >>
  
# ----------------- Commands -----------------

commands:
  install_cf_tools:
    description: "Install Cloud Foundry CLI"
    steps:
      - run:
          name: Install CF tools
          command: |
            # Install Cloud Foundry CLI
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install -y cf8-cli
            # Install plugin needed for connect-to-service
            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/v1.1.3/cf-service-connect_linux_amd64
  

  create_combined_yarnlock:
    description: "Concatenate all yarn.json files into single file.
      File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
        default: "combined-yarnlock.txt"
    steps:
      - run:
          name: Combine package-lock.json files to single file
          command: cat yarn.lock frontend/yarn.lock packages/common/yarn.lock > << parameters.filename >>

  create_combined_pipfreeze:
    description: "Concatenate all requirements.txt files into a single file. File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
        default: "combined-requirements.txt"
    steps:
      - run:
          name: Combine requirements.txt files to single file
          command: cat similarity_api/src/requirements.txt > << parameters.filename >>
 
  sparse_checkout:
    description: "Checkout sparse directories from a specific branch."
    parameters:
      directories:
        type: string
        description: "Comma-separated list of directories to checkout sparsely"
      branch:
        type: string
        description: "Branch to checkout"
    steps:
      - run:
          name: Install Git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - run:
          name: Clone Repository
          command: |
            git clone --no-checkout --filter=blob:none << pipeline.project.git_url >>.git .
      - run:
          name: Sparse Checkout
          environment:
            DIRECTORIES: "<< parameters.directories >>"
          command: |
            git config core.sparseCheckout true
            echo $DIRECTORIES | tr ',' '\n' | while read dir; do
              echo "$dir" | tee -a .git/info/sparse-checkout
            done
      - run:
          name: Checkout Branch
          command: |
            git checkout << parameters.branch >>

  notify_new_relic:
    description: "Notify new relic of a deploy"
    steps:
      - run:
          name: Notify New Relic
          command: |
            source ci.vars
            curl -X POST "https://api.newrelic.com/v2/applications/${new_relic_app_id}/deployments.json" \
            -H "X-Api-Key: $NEW_RELIC_REST_API_KEY" -i \
            -H "Content-Type: application/json" \
            -d \
            "{
              \"deployment\": {
                \"revision\": \"<< pipeline.git.revision >>\",
                \"description\": \"<< pipeline.parameters.env >> Successfully Deployed\"
              }
            }"

  cf_deploy:
    description: "Login to cloud foundry space with service account credentials
      and push application using deployment configuration file."  
    steps:
      - run:
          name: Login with service account
          command: |
            circleci env subst < ./deployment_config/<< pipeline.parameters.env >>_vars_ci.yml > ci.vars
            source ci.vars
            cf login -a ${cg_api} \
              -u ${cg_username} \
              -p ${cg_password} \
              -o ${cg_org} \
              -s ${cg_space}
      - run:
          name: Push application
          command: |
            source ci.vars
            circleci env subst < ./deployment_config/<< pipeline.parameters.env >>_vars.yml > app.vars
            set -x

  notify_slack:
    description: "Notify Slack with message"
    parameters:
      slack_bot_token:
        description: "Slack bot token"
        type: string
      slack_channel:
        description: "Slack channel name to post the message to"
        type: string
      message_text:
        description: "Message text to post to Slack"
        type: string
        default: ""
      message_text_file:
        description: "message text_file"
        type: string
        default: ""
    steps:
      - run:
          name: Notify Slack
          command: |
            set -x
            # Ensure the $BASH_ENV file exists
            if [ ! -f $BASH_ENV ]; then
              touch $BASH_ENV
            fi

            source $BASH_ENV
            cat $BASH_ENV

            # Evaluate message_text_script if provided
            if [ -n "<< parameters.message_text_file >>" ]; then
              MESSAGE_TEXT=$(cat "<< parameters.message_text_file >>")
            else
              MESSAGE_TEXT="<< parameters.message_text >>"
            fi

            echo $MESSAGE_TEXT

            # Ensure all parameters are provided
            if [ -z "<< parameters.slack_bot_token >>" ] || [ -z "<< parameters.slack_channel >>" ] || [ -z "$MESSAGE_TEXT" ]; then
              echo "Missing required parameters. Notification will not be sent."
              exit 1
            fi

            response=$(curl -s -X POST \
              -H "Authorization: Bearer << parameters.slack_bot_token >>" \
              -H 'Content-type: application/json;charset=utf-8' \
              --data "{
                \"channel\": \"<< parameters.slack_channel >>\",
                \"text\": \"$MESSAGE_TEXT\"
              }" \
              https://slack.com/api/chat.postMessage)

            ok=$(echo $response | jq -r '.ok')
            error=$(echo $response | jq -r '.error')

            if [ "$ok" != "true" ]; then
              echo "Slack notification failed: $error"
            else
              echo "Slack notification sent successfully"
            fi
  notify_slack_deploy:
    parameters:
      slack_bot_token:
        description: "Slack bot token"
        type: string
      slack_channel:
        description: "Slack channel name to post the message to"
        type: string
      environment_name:
        description: "Deployed env"
        type: string
    steps:
      - checkout
      - run:
          name: Generate Message
          command: |
            source ci.vars
            env_name="<< parameters.environment_name >>"
            if [ -n "${CIRCLE_PULL_REQUEST}" ]; then
                PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}

                PR_TITLE=$(curl -s "${CIRCLE_PULL_REQUEST}" | sed -e :a -e "N; s/\n/ /g; ta" | grep -oP "<bdi class=\"js-issue-title markdown-title\">[^<]+</bdi>" | sed -re "s~<[^>]+>~~g" | sed -e 's/"/\\"/g')

                if [ ! -z "${PR_TITLE}" ]; then
                    JIRA_URLS=$(curl -s "${CIRCLE_PULL_REQUEST}" | sed -e :a -e "N; s/\n/ /g; ta" | grep -oP "Issue[(]s[)]</h2>.*Checklists</h2>" | grep -oP "\"https[^\"]+\"" | sed -e "s~\"~~g" | grep -o "https://jira.acf.gov/browse/[A-Z0-9-]*")

                    MESSAGE_TEXT=":rocket: Deployment of PR <${CIRCLE_PULL_REQUEST}|${PR_NUMBER}> (${PR_TITLE}) to <${ENV_URL}|${env_name}> was successful!"
                    if [ -n "${JIRA_URLS}" ]; then
                        MESSAGE_TEXT="${MESSAGE_TEXT}\nJIRA URLs in the PR:\n${JIRA_URLS}"
                    fi
                else
                    MESSAGE_TEXT=":rocket: Deployment of PR <${CIRCLE_PULL_REQUEST}|${PR_NUMBER}> to <${ENV_URL}|${env_name}> was successful!"
                fi
            else
                COMMIT_MESSAGE=$(git log -1 --pretty=%B)
                if echo "$COMMIT_MESSAGE" | grep -q "Merge pull request #"; then
                  PR_NUMBER=$(git log -1 --pretty=%B | grep -oP '(?<=Merge pull request #)\d+')
                  PR_LINK="https://github.com/HHS/Head-Start-TTADP/pull/${PR_NUMBER}"
                  MESSAGE_TEXT=":rocket: Deployment of PR <${PR_LINK}|${PR_NUMBER}> to <${ENV_URL}|${env_name}> was successful!"
                  if [ ! -z "${JIRA_URLS}" ]; then
                      MESSAGE_TEXT="${MESSAGE_TEXT}\nJIRA URLs in the PR:\n${JIRA_URLS}"
                  fi
                else
                    MESSAGE_TEXT=":rocket: Deployment to <${ENV_URL}|${env_name}> was successful!"
                fi
            fi
            echo -e "${MESSAGE_TEXT}" > /tmp/message_file
      - notify_slack:
          slack_bot_token: << parameters.slack_bot_token >>
          slack_channel: << parameters.slack_channel >>
          message_text_file: "/tmp/message_file"