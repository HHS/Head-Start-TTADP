version: 2.1
orbs:
  node: circleci/node@4.1.0
executors:
  docker-executor:
    # for docker you must specify an image to use for the primary container
    docker:
      - image: circleci/node:12.19.0-browsers
        environment:
          DATABASE_URL: postgresql://postgres@localhost/ttasmarthub
      - image: circleci/postgres:12.4-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secretpass
          POSTGRES_DB: ttasmarthub
  machine-executor:
    machine:
      image: circleci/classic:latest
commands:
  create_combined_yarnlock:
    description: "Concatenate all yarn.json files into single file.
      File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
        default: "combined-yarnlock.txt"
    steps:
      - run:
          name: Combine package-lock.json files to single file
          command: cat yarn.lock frontend/yarn.lock > << parameters.filename >>
  cf_deploy:
    description: "Login to cloud foundry space with service account credentials
      and push application using deployment configuration file."
    parameters:
      auth_client_id:
        description: "Name of CircleCi project environment variable that
          holds authentication client id, a required application variable"
        type: env_var_name
      auth_client_secret:
        description: "Name of CircleCi project environment variable that
          holds authentication client secret, a required application variable"
        type: env_var_name
      cloudgov_username:
        description: "Name of CircleCi project environment variable that
          holds deployer username for cloudgov space"
        type: env_var_name
      cloudgov_password:
        description: "Name of CircleCi project environment variable that
          holds deployer password for cloudgov space"
        type: env_var_name
      cloudgov_space:
        description: "Name of CircleCi project environment variable that
          holds name of cloudgov space to target for application deployment"
        type: env_var_name
      deploy_config_file:
        description: "Path to deployment configuration file"
        type: string
      session_secret:
        description: "Name of CircleCi project environment variable that
          holds session secret, a required application variable"
        type: env_var_name
      new_relic_license:
        description: "Name of CircleCI project environment variable that
          holds the New Relic License key, a required application variable"
        type: env_var_name
    steps:
      - run:
          name: Login with service account
          command: |
            cf login -a << pipeline.parameters.cg_api >> \
              -u ${<< parameters.cloudgov_username >>} \
              -p ${<< parameters.cloudgov_password >>} \
              -o << pipeline.parameters.cg_org >> \
              -s ${<< parameters.cloudgov_space >>}
      - run:
          name: Push application with deployment vars
          command: |
            cf push --vars-file << parameters.deploy_config_file >> \
              --var AUTH_CLIENT_ID=${<< parameters.auth_client_id >>} \
              --var AUTH_CLIENT_SECRET=${<< parameters.auth_client_secret >>} \
              --var NEW_RELIC_LICENSE_KEY=${<< parameters.new_relic_license >>} \
              --var SESSION_SECRET=${<< parameters.session_secret >>}
parameters:
  cg_org:
    description: "Cloud Foundry cloud.gov organization name"
    default: "hhs-acf-ohs-tta"
    type: string
  cg_api:
    description: "URL of Cloud Controller in Cloud Foundry cloud.gov instance"
    default: "https://api.fr.cloud.gov"
    type: string
  prod_git_url:
    description: "URL of github repo that will deploy to prod"
    default: "https://github.com/HHS/Head-Start-TTADP"
    type: string
  staging_git_url:
    description: "URL of github repo that will deploy to staging"
    default: "https://github.com/HHS/Head-Start-TTADP"
    type: string
  dev_git_url:
    description: "URL of github repo that will deploy to dev"
    default: "https://github.com/adhocteam/Head-Start-TTADP"
    type: string
  prod_git_branch:
    description: "Name of github branch that will deploy to prod"
    default: "production"
    type: string
  staging_git_branch:
    description: "Name of github branch that will deploy to staging"
    default: "main"
    type: string
  dev_git_branch:
    description: "Name of github branch that will deploy to dev"
    default: "main"
    type: string
  sandbox_git_branch:  # change to feature branch to test deployment
    default: "js-121-fix-url-routing"
    type: string
jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - create_combined_yarnlock
      - restore_cache:
          keys:
            # To manually bust the cache, increment the version e.g. v3-yarn...
            - v2-yarn-deps-{{ checksum "combined-yarnlock.txt" }}
            # If checksum is new, restore partial cache
            - v2-yarn-deps-
      - run: yarn deps
      - save_cache:
          paths:
            - node_modules
            - frontend/node_modules
          key: v2-yarn-deps-{{ checksum "combined-yarnlock.txt" }}
      - persist_to_workspace:
          root: .
          paths:
            - .
  lint_audit:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Lint backend
          command: yarn run lint:ci
      - run:
          name: Lint frontend
          command: yarn --cwd frontend run lint:ci
      - run:  # Fail audit only for moderate and higher vulnerabilities
          name: Audit vulnerability of backend node_modules
          command: |
            chmod 744 ./run-yarn-audit.sh
            ./run-yarn-audit.sh; \
            EXIT_CODE=$?; \
              (($EXIT_CODE >= 4)) && exit $EXIT_CODE || exit 0
      - run:  # Fail audit only for moderate and higher vulnerabilities
          name: Audit vulnerability of frontend node_modules
          command: |
            cd frontend
            chmod 744 ./run-yarn-audit.sh
            ./run-yarn-audit.sh; \
            EXIT_CODE=$?; \
              (($EXIT_CODE >= 4)) && exit $EXIT_CODE || exit 0
      - store_artifacts:
          path: reports
      - store_artifacts:
          path: frontend/reports
  test_backend:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run migrations ci
          command: yarn run db:migrate:ci
      - run:
          name: Test backend
          command: yarn run test:ci
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: coverage/
  test_frontend:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Test frontend
          command: yarn --cwd frontend run test:ci
      - store_test_results:
          path: frontend/reports/
      - store_artifacts:
          path: frontend/coverage/
  cucumber_test:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Start server
          command: |
            yarn build
            BYPASS_AUTH=true yarn start:ci
          background: true
      - run:
          name: Run migrations ci
          command: yarn run db:migrate:ci
      - run:
          name: Run cucumber
          command: |
            mkdir reports
            sleep 5
            yarn cucumber:ci
      - store_artifacts:
          path: reports/
  dynamic_security_scan:
    executor: machine-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Start up local server
          command: | # production style build (single BE server with static FE)
            docker-compose -f docker-compose-test.yml run --rm server yarn install --production=false
            docker-compose -f docker-compose-test.yml run --rm server yarn --cwd frontend install --production=false
            docker-compose -f docker-compose-test.yml run --rm server yarn build
            docker-compose -f docker-compose-test.yml run --rm server yarn --cwd frontend run build
            docker-compose -f docker-compose-test.yml up -d
            docker-compose -f docker-compose-test.yml exec server yarn db:migrate:ci
      - run:
          name: Pull OWASP ZAP docker image
          command: docker pull owasp/zap2docker-weekly
      - run:
          name: Run OWASP ZAP
          command: |
            docker run \
              -v $(pwd)/zap.conf:/zap/wrk/zap.conf:rw \
              -v $(pwd)/reports:/zap/wrk:rw \
              --rm \
              --network="project_smarthub" \
              -t owasp/zap2docker-weekly zap-baseline.py \
              -t http://server:8080 \
              -c zap.conf -I -i
  accessibility_scan:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run migrations ci
          command: yarn run db:migrate:ci
      - run:
          name: Build
          command: yarn build
      - run:
          name: Start server
          command: BYPASS_AUTH=true yarn start:ci
          background: true
      - run:
          name: Run axe
          command: |
            mkdir reports
            sleep 5
            yarn axe:ci
      - store_artifacts:
          path: reports/
  deploy:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build backend assets
          command: yarn build
      - run:
          name: Build frontend assets
          command: yarn --cwd frontend run build
      - run:
          name: Install Cloud Foundry
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
      - when:  # sandbox: for short-term feature development, see README.md
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.dev_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.sandbox_git_branch >>]
          steps:
            - cf_deploy:
                auth_client_id: SANDBOX_AUTH_CLIENT_ID
                auth_client_secret: SANDBOX_AUTH_CLIENT_SECRET
                cloudgov_username: CLOUDGOV_SANDBOX_USERNAME
                cloudgov_password: CLOUDGOV_SANDBOX_PASSWORD
                cloudgov_space: CLOUDGOV_SANDBOX_SPACE
                deploy_config_file: deployment_config/sandbox_vars.yml
                new_relic_license: NEW_RELIC_LICENSE_KEY
                session_secret: SANDBOX_SESSION_SECRET
      - when:  # dev
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.dev_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.dev_git_branch >>]
          steps:
            - cf_deploy:
                auth_client_id: DEV_AUTH_CLIENT_ID
                auth_client_secret: DEV_AUTH_CLIENT_SECRET
                cloudgov_username: CLOUDGOV_DEV_USERNAME
                cloudgov_password: CLOUDGOV_DEV_PASSWORD
                cloudgov_space: CLOUDGOV_DEV_SPACE
                deploy_config_file: deployment_config/dev_vars.yml
                new_relic_license: NEW_RELIC_LICENSE_KEY
                session_secret: DEV_SESSION_SECRET
      - when:  # staging
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.staging_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.staging_git_branch >>]
          steps:
            - cf_deploy:
                auth_client_id: STAGING_AUTH_CLIENT_ID
                auth_client_secret: STAGING_AUTH_CLIENT_SECRET
                cloudgov_username: CLOUDGOV_STAGING_USERNAME
                cloudgov_password: CLOUDGOV_STAGING_PASSWORD
                cloudgov_space: CLOUDGOV_STAGING_SPACE
                deploy_config_file: deployment_config/staging_vars.yml
                new_relic_license: NEW_RELIC_LICENSE_KEY
                session_secret: STAGING_SESSION_SECRET
      - when:  # prod
          condition:
            and:
              - equal: [<< pipeline.project.git_url >>, << pipeline.parameters.prod_git_url >>]
              - equal: [<< pipeline.git.branch >>, << pipeline.parameters.prod_git_branch >>]
          steps:
            - cf_deploy:
                auth_client_id: PROD_AUTH_CLIENT_ID
                auth_client_secret: PROD_AUTH_CLIENT_SECRET
                cloudgov_username: CLOUDGOV_PROD_USERNAME
                cloudgov_password: CLOUDGOV_PROD_PASSWORD
                cloudgov_space: CLOUDGOV_PROD_SPACE
                deploy_config_file: deployment_config/prod_vars.yml
                new_relic_license: PROD_NEW_RELIC_LICENSE_KEY
                session_secret: PROD_SESSION_SECRET
workflows:
  build_test_deploy:
    jobs:
      - build
      - lint_audit:
          requires:
            - build
      - test_backend:
          requires:
            - build
      - test_frontend:
          requires:
            - build
      - cucumber_test:
          requires:
            - build
      - dynamic_security_scan:
          requires:
            - build
      - accessibility_scan:
          requires:
            - build
      - deploy:
          requires:
            - lint_audit
            - test_backend
            - cucumber_test
            - test_frontend
            - dynamic_security_scan
            - accessibility_scan
          filters:
            branches:
              only:
                - << pipeline.parameters.sandbox_git_branch >>
                - << pipeline.parameters.dev_git_branch >>
                - << pipeline.parameters.staging_git_branch >>
                - << pipeline.parameters.prod_git_branch >>

  daily_scan:
    triggers:
      - schedule:
          cron: "0 13 * * 1-5"
          filters:
            branches:
              only:
                - << pipeline.parameters.dev_git_branch >>
                - << pipeline.parameters.staging_git_branch >>
                - << pipeline.parameters.prod_git_branch >>
    jobs:
      - build
      - lint_audit:
          requires:
            - build
      - dynamic_security_scan:
          requires:
            - build
