{"type":"auditAdvisory","data":{"resolution":{"id":1106812,"path":"cookie-session>on-headers","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.2","paths":["cookie-session>on-headers"]}],"found_by":null,"deleted":null,"references":"- https://github.com/jshttp/on-headers/security/advisories/GHSA-76c9-3jph-rj3q\n- https://nvd.nist.gov/vuln/detail/CVE-2025-7339\n- https://github.com/expressjs/morgan/issues/315\n- https://github.com/jshttp/on-headers/issues/15\n- https://github.com/jshttp/on-headers/commit/c6e384908c9c6127d18831d16ab0bd96e1231867\n- https://cna.openjsf.org/security-advisories.html\n- https://github.com/advisories/GHSA-76c9-3jph-rj3q","created":"2025-07-17T21:17:19.000Z","id":1106812,"npm_advisory_id":null,"overview":"### Impact\n\nA bug in on-headers versions `< 1.1.0` may result in response headers being inadvertently modified when an array is passed to `response.writeHead()`\n\n### Patches\n\nUsers should upgrade to `1.1.0`\n\n### Workarounds\n\nUses are encouraged to upgrade to `1.1.0`, but this issue can be worked around by passing an object to `response.writeHead()` rather than an array.","reported_by":null,"title":"on-headers is vulnerable to http response header manipulation","metadata":null,"cves":["CVE-2025-7339"],"access":"public","severity":"low","module_name":"on-headers","vulnerable_versions":"<1.1.0","github_advisory_id":"GHSA-76c9-3jph-rj3q","recommendation":"Upgrade to version 1.1.0 or later","patched_versions":">=1.1.0","updated":"2025-07-30T21:06:13.000Z","cvss":{"score":3.4,"vectorString":"CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:N"},"cwe":["CWE-241"],"url":"https://github.com/advisories/GHSA-76c9-3jph-rj3q"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1108571,"path":"email-templates>preview-email>nodemailer","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.10.1","paths":["email-templates>nodemailer"]},{"version":"7.0.4","paths":["email-templates>preview-email>mailparser>nodemailer"]},{"version":"6.10.1","paths":["email-templates>preview-email>nodemailer"]}],"found_by":null,"deleted":null,"references":"- https://github.com/nodemailer/nodemailer/security/advisories/GHSA-mm7p-fcc7-pg87\n- https://github.com/nodemailer/nodemailer/commit/1150d99fba77280df2cfb1885c43df23109a8626\n- https://github.com/advisories/GHSA-mm7p-fcc7-pg87","created":"2025-10-07T13:42:02.000Z","id":1108571,"npm_advisory_id":null,"overview":"The email parsing library incorrectly handles quoted local-parts containing @. This leads to misrouting of email recipients, where the parser extracts and routes to an unintended domain instead of the RFC-compliant target.\n\nPayload: `\"xclow3n@gmail.com x\"@internal.domain`\nUsing the following code to send mail\n```\nconst nodemailer = require(\"nodemailer\");\n\nlet transporter = nodemailer.createTransport({\n  service: \"gmail\",\n  auth: {\n    user: \"\",\n    pass: \"\",\n  },\n});\n\nlet mailOptions = {\n  from: '\"Test Sender\" <your_email@gmail.com>', \n  to: \"\\\"xclow3n@gmail.com x\\\"@internal.domain\",\n  subject: \"Hello from Nodemailer\",\n  text: \"This is a test email sent using Gmail SMTP and Nodemailer!\",\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    return console.log(\"Error: \", error);\n  }\n  console.log(\"Message sent: %s\", info.messageId);\n\n});\n\n\n(async () => {\n  const parser = await import(\"@sparser/email-address-parser\");\n  const { EmailAddress, ParsingOptions } = parser.default;\n  const parsed = EmailAddress.parse(mailOptions.to /*, new ParsingOptions(true) */);\n\n  if (!parsed) {\n    console.error(\"Invalid email address:\", mailOptions.to);\n    return;\n  }\n\n  console.log(\"Parsed email:\", {\n    address: `${parsed.localPart}@${parsed.domain}`,\n    local: parsed.localPart,\n    domain: parsed.domain,\n  });\n})();\n```\n\nRunning the script and seeing how this mail is parsed according to RFC\n\n```\nParsed email: {\n  address: '\"xclow3n@gmail.com x\"@internal.domain',\n  local: '\"xclow3n@gmail.com x\"',\n  domain: 'internal.domain'\n}\n```\n\nBut the email is sent to `xclow3n@gmail.com`\n\n<img width=\"2128\" height=\"439\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/20eb459c-9803-45a2-b30e-5d1177d60a8d\" />\n\n\n### Impact:\n\n-    Misdelivery / Data leakage: Email is sent to psres.net instead of test.com.\n\n-    Filter evasion: Logs and anti-spam systems may be bypassed by hiding recipients inside quoted local-parts.\n\n-    Potential compliance issue: Violates RFC 5321/5322 parsing rules.\n\n-    Domain based access control bypass in downstream applications using your library to send mails\n\n### Recommendations\n\n-    Fix parser to correctly treat quoted local-parts per RFC 5321/5322.\n\n-    Add strict validation rejecting local-parts containing embedded @ unless fully compliant with quoting.","reported_by":null,"title":"Nodemailer: Email to an unintended domain can occur due to Interpretation Conflict","metadata":null,"cves":[],"access":"public","severity":"moderate","module_name":"nodemailer","vulnerable_versions":"<7.0.7","github_advisory_id":"GHSA-mm7p-fcc7-pg87","recommendation":"Upgrade to version 7.0.7 or later","patched_versions":">=7.0.7","updated":"2025-10-07T13:42:04.000Z","cvss":{"score":0,"vectorString":null},"cwe":["CWE-20","CWE-436"],"url":"https://github.com/advisories/GHSA-mm7p-fcc7-pg87"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1108571,"path":"email-templates>preview-email>mailparser>nodemailer","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.10.1","paths":["email-templates>nodemailer"]},{"version":"7.0.4","paths":["email-templates>preview-email>mailparser>nodemailer"]},{"version":"6.10.1","paths":["email-templates>preview-email>nodemailer"]}],"found_by":null,"deleted":null,"references":"- https://github.com/nodemailer/nodemailer/security/advisories/GHSA-mm7p-fcc7-pg87\n- https://github.com/nodemailer/nodemailer/commit/1150d99fba77280df2cfb1885c43df23109a8626\n- https://github.com/advisories/GHSA-mm7p-fcc7-pg87","created":"2025-10-07T13:42:02.000Z","id":1108571,"npm_advisory_id":null,"overview":"The email parsing library incorrectly handles quoted local-parts containing @. This leads to misrouting of email recipients, where the parser extracts and routes to an unintended domain instead of the RFC-compliant target.\n\nPayload: `\"xclow3n@gmail.com x\"@internal.domain`\nUsing the following code to send mail\n```\nconst nodemailer = require(\"nodemailer\");\n\nlet transporter = nodemailer.createTransport({\n  service: \"gmail\",\n  auth: {\n    user: \"\",\n    pass: \"\",\n  },\n});\n\nlet mailOptions = {\n  from: '\"Test Sender\" <your_email@gmail.com>', \n  to: \"\\\"xclow3n@gmail.com x\\\"@internal.domain\",\n  subject: \"Hello from Nodemailer\",\n  text: \"This is a test email sent using Gmail SMTP and Nodemailer!\",\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    return console.log(\"Error: \", error);\n  }\n  console.log(\"Message sent: %s\", info.messageId);\n\n});\n\n\n(async () => {\n  const parser = await import(\"@sparser/email-address-parser\");\n  const { EmailAddress, ParsingOptions } = parser.default;\n  const parsed = EmailAddress.parse(mailOptions.to /*, new ParsingOptions(true) */);\n\n  if (!parsed) {\n    console.error(\"Invalid email address:\", mailOptions.to);\n    return;\n  }\n\n  console.log(\"Parsed email:\", {\n    address: `${parsed.localPart}@${parsed.domain}`,\n    local: parsed.localPart,\n    domain: parsed.domain,\n  });\n})();\n```\n\nRunning the script and seeing how this mail is parsed according to RFC\n\n```\nParsed email: {\n  address: '\"xclow3n@gmail.com x\"@internal.domain',\n  local: '\"xclow3n@gmail.com x\"',\n  domain: 'internal.domain'\n}\n```\n\nBut the email is sent to `xclow3n@gmail.com`\n\n<img width=\"2128\" height=\"439\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/20eb459c-9803-45a2-b30e-5d1177d60a8d\" />\n\n\n### Impact:\n\n-    Misdelivery / Data leakage: Email is sent to psres.net instead of test.com.\n\n-    Filter evasion: Logs and anti-spam systems may be bypassed by hiding recipients inside quoted local-parts.\n\n-    Potential compliance issue: Violates RFC 5321/5322 parsing rules.\n\n-    Domain based access control bypass in downstream applications using your library to send mails\n\n### Recommendations\n\n-    Fix parser to correctly treat quoted local-parts per RFC 5321/5322.\n\n-    Add strict validation rejecting local-parts containing embedded @ unless fully compliant with quoting.","reported_by":null,"title":"Nodemailer: Email to an unintended domain can occur due to Interpretation Conflict","metadata":null,"cves":[],"access":"public","severity":"moderate","module_name":"nodemailer","vulnerable_versions":"<7.0.7","github_advisory_id":"GHSA-mm7p-fcc7-pg87","recommendation":"Upgrade to version 7.0.7 or later","patched_versions":">=7.0.7","updated":"2025-10-07T13:42:04.000Z","cvss":{"score":0,"vectorString":null},"cwe":["CWE-20","CWE-436"],"url":"https://github.com/advisories/GHSA-mm7p-fcc7-pg87"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1108571,"path":"email-templates>nodemailer","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.10.1","paths":["email-templates>nodemailer"]},{"version":"7.0.4","paths":["email-templates>preview-email>mailparser>nodemailer"]},{"version":"6.10.1","paths":["email-templates>preview-email>nodemailer"]}],"found_by":null,"deleted":null,"references":"- https://github.com/nodemailer/nodemailer/security/advisories/GHSA-mm7p-fcc7-pg87\n- https://github.com/nodemailer/nodemailer/commit/1150d99fba77280df2cfb1885c43df23109a8626\n- https://github.com/advisories/GHSA-mm7p-fcc7-pg87","created":"2025-10-07T13:42:02.000Z","id":1108571,"npm_advisory_id":null,"overview":"The email parsing library incorrectly handles quoted local-parts containing @. This leads to misrouting of email recipients, where the parser extracts and routes to an unintended domain instead of the RFC-compliant target.\n\nPayload: `\"xclow3n@gmail.com x\"@internal.domain`\nUsing the following code to send mail\n```\nconst nodemailer = require(\"nodemailer\");\n\nlet transporter = nodemailer.createTransport({\n  service: \"gmail\",\n  auth: {\n    user: \"\",\n    pass: \"\",\n  },\n});\n\nlet mailOptions = {\n  from: '\"Test Sender\" <your_email@gmail.com>', \n  to: \"\\\"xclow3n@gmail.com x\\\"@internal.domain\",\n  subject: \"Hello from Nodemailer\",\n  text: \"This is a test email sent using Gmail SMTP and Nodemailer!\",\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    return console.log(\"Error: \", error);\n  }\n  console.log(\"Message sent: %s\", info.messageId);\n\n});\n\n\n(async () => {\n  const parser = await import(\"@sparser/email-address-parser\");\n  const { EmailAddress, ParsingOptions } = parser.default;\n  const parsed = EmailAddress.parse(mailOptions.to /*, new ParsingOptions(true) */);\n\n  if (!parsed) {\n    console.error(\"Invalid email address:\", mailOptions.to);\n    return;\n  }\n\n  console.log(\"Parsed email:\", {\n    address: `${parsed.localPart}@${parsed.domain}`,\n    local: parsed.localPart,\n    domain: parsed.domain,\n  });\n})();\n```\n\nRunning the script and seeing how this mail is parsed according to RFC\n\n```\nParsed email: {\n  address: '\"xclow3n@gmail.com x\"@internal.domain',\n  local: '\"xclow3n@gmail.com x\"',\n  domain: 'internal.domain'\n}\n```\n\nBut the email is sent to `xclow3n@gmail.com`\n\n<img width=\"2128\" height=\"439\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/20eb459c-9803-45a2-b30e-5d1177d60a8d\" />\n\n\n### Impact:\n\n-    Misdelivery / Data leakage: Email is sent to psres.net instead of test.com.\n\n-    Filter evasion: Logs and anti-spam systems may be bypassed by hiding recipients inside quoted local-parts.\n\n-    Potential compliance issue: Violates RFC 5321/5322 parsing rules.\n\n-    Domain based access control bypass in downstream applications using your library to send mails\n\n### Recommendations\n\n-    Fix parser to correctly treat quoted local-parts per RFC 5321/5322.\n\n-    Add strict validation rejecting local-parts containing embedded @ unless fully compliant with quoting.","reported_by":null,"title":"Nodemailer: Email to an unintended domain can occur due to Interpretation Conflict","metadata":null,"cves":[],"access":"public","severity":"moderate","module_name":"nodemailer","vulnerable_versions":"<7.0.7","github_advisory_id":"GHSA-mm7p-fcc7-pg87","recommendation":"Upgrade to version 7.0.7 or later","patched_versions":">=7.0.7","updated":"2025-10-07T13:42:04.000Z","cvss":{"score":0,"vectorString":null},"cwe":["CWE-20","CWE-436"],"url":"https://github.com/advisories/GHSA-mm7p-fcc7-pg87"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1108959,"path":"validator","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"13.15.15","paths":["validator","sequelize>validator"]}],"found_by":null,"deleted":null,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2025-56200\n- https://gist.github.com/junan-98/27ae092aa40e2a057d41a0f95148f666\n- https://gist.github.com/junan-98/a93130505b258b9e4ec9f393e7533596\n- https://github.com/validatorjs/validator.js\n- http://validatorjs.com\n- https://github.com/validatorjs/validator.js/issues/2600\n- https://github.com/advisories/GHSA-9965-vmph-33xx","created":"2025-09-30T18:30:25.000Z","id":1108959,"npm_advisory_id":null,"overview":"A URL validation bypass vulnerability exists in validator.js through version 13.15.15. The isURL() function uses '://' as a delimiter to parse protocols, while browsers use ':' as the delimiter. This parsing difference allows attackers to bypass protocol and domain validation by crafting URLs leading to XSS and Open Redirect attacks.","reported_by":null,"title":"validator.js has a URL validation bypass vulnerability in its isURL function","metadata":null,"cves":["CVE-2025-56200"],"access":"public","severity":"moderate","module_name":"validator","vulnerable_versions":"<=13.15.15","github_advisory_id":"GHSA-9965-vmph-33xx","recommendation":"None","patched_versions":"<0.0.0","updated":"2025-10-13T20:08:59.000Z","cvss":{"score":6.1,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"},"cwe":["CWE-79"],"url":"https://github.com/advisories/GHSA-9965-vmph-33xx"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1108959,"path":"sequelize>validator","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"13.15.15","paths":["validator","sequelize>validator"]}],"found_by":null,"deleted":null,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2025-56200\n- https://gist.github.com/junan-98/27ae092aa40e2a057d41a0f95148f666\n- https://gist.github.com/junan-98/a93130505b258b9e4ec9f393e7533596\n- https://github.com/validatorjs/validator.js\n- http://validatorjs.com\n- https://github.com/validatorjs/validator.js/issues/2600\n- https://github.com/advisories/GHSA-9965-vmph-33xx","created":"2025-09-30T18:30:25.000Z","id":1108959,"npm_advisory_id":null,"overview":"A URL validation bypass vulnerability exists in validator.js through version 13.15.15. The isURL() function uses '://' as a delimiter to parse protocols, while browsers use ':' as the delimiter. This parsing difference allows attackers to bypass protocol and domain validation by crafting URLs leading to XSS and Open Redirect attacks.","reported_by":null,"title":"validator.js has a URL validation bypass vulnerability in its isURL function","metadata":null,"cves":["CVE-2025-56200"],"access":"public","severity":"moderate","module_name":"validator","vulnerable_versions":"<=13.15.15","github_advisory_id":"GHSA-9965-vmph-33xx","recommendation":"None","patched_versions":"<0.0.0","updated":"2025-10-13T20:08:59.000Z","cvss":{"score":6.1,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"},"cwe":["CWE-79"],"url":"https://github.com/advisories/GHSA-9965-vmph-33xx"}}}
{"type":"auditSummary","data":{"vulnerabilities":{"info":0,"low":1,"moderate":5,"high":0,"critical":0},"dependencies":897,"devDependencies":0,"optionalDependencies":0,"totalDependencies":897}}
