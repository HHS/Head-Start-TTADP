#!/usr/bin/env node

const fs = require('fs');
const readline = require('readline');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');

/* read in a yaml file, parse it, and write it to a file in env format*/

function parseArgs() {
  return yargs(hideBin(process.argv))
    .option('in_file', {
      alias: 'i',
      describe: 'yaml file to parse',
      type: 'string',
      demandOption: true
    })
    .option('out_file', {
      alias: 'o',
      describe: 'env file to write',
      type: 'string',
      demandOption: true
    })
    .check((argv) => {
      if (!fs.existsSync(argv.in_file)) {
        throw new Error(`File does not exist: ${argv.env_file}`);
      }
      return true;
    })
    .argv;
}

async function processLineByLine(env_file) {
  console.log(`Parsing env file: ${env_file}`);
  const fileStream = fs.createReadStream(env_file);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity
  });

  const items = new Map();
  for await (line of rl) {
    line = line.trim().split('#')[0]
    if (line.startsWith('#')) {
      continue; // skip comments
    }
    if (line.length === 0) {
      continue; // skip empty lines
    }
    console.log(` - ${line}`);
    const [key, value] = line.split(':');
    if (key && value) {
      const trimmedKey = key.trim();
      const trimmedValue = value.trim();
      items.set(trimmedKey, trimmedValue);
    }
  }
  return items;
}

async function writeEnvFile(out_file, items) {
  console.log(`Writing env file: ${out_file}`);
  const fileStream = fs.createWriteStream(out_file);
  for (const [key, value] of items) {
    fileStream.write(`${key}=${value}\n`);
  };
  fileStream.end();
  console.log('Done writing env file');
}

async function main() {
  const argv = parseArgs();
  items = await processLineByLine(argv.in_file);
  writeEnvFile(argv.out_file, items);
}

if (require.main === module) {
  main();
}
