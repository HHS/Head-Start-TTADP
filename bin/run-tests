#!/bin/bash
declare -a options=(frontend backend)
declare lr=">>>>>>>>"
declare -i exit_code=0

log() {
    echo "$lr $*"
}

check_exit() {
    if [[ "$1" -ne 0 ]]; then
        echo "$lr last docker-compose command failed"
        ((exit_code++))
    fi
}

# Define the sorting script as a function
sort_directories() {
    declare -A dir_map

    while IFS= read -r -d '' dir; do
        # Remove the leading './src/' from the directory path
        dir=${dir#./src/}

        # Transform the directory path into space-separated words
        transformed=$(echo "$dir" | perl -pe 's/(?<=[a-z])(?=[A-Z])/ /g')

        # Split the path into an array of words
        IFS='/' read -ra ADDR <<< "$transformed"

        for i in "${!ADDR[@]}"; do
            # For each part of the path, sort the words in reverse alphabetical order
            sorted_part=$(echo "${ADDR[$i]}" | tr ' ' '\n' | sort -r | tr '\n' ' ' | sed 's/ $//')
            ADDR[$i]=$sorted_part
        done

        # Join the array back into a path
        sorted_path=$(IFS='/'; echo "${ADDR[*]}")

        # Use the sorted path as a key and the original path as the value
        dir_map["$sorted_path"]="$dir"
    done < <(find ./src -type d -print0 | grep -zvP 'test(s)?|mock')

    # Sort the keys and print the original directory names in sorted order
    for key in "${!dir_map[@]}"; do
        echo "$key"
    done | sort -f | while read -r key; do
        echo "${dir_map[$key]}"
    done
}

main() {
    local opt=""
    local docker="true"
    local verbose="false"

    while [[ $# -gt 0 ]]
    do
      key="$1"
      case "$key" in
        -l|--local)
          docker="false"
          shift
          ;;
        -v | --verbose)
          verbose="true"
          shift
          ;;
        *)
          for o in "${options[@]}"; do
            if [[ "$key" == "$o"  ]]; then
                opt="$o";
            fi
          done
          shift
          ;;
      esac
    done

    docker-compose \
        -f 'docker-compose.test.yml' \
        down --volumes --remove-orphans

    log "Running tests in using test config 'docker-compose.test.yml'"
    # Start containers
    if [[ $docker == "true" ]]; then
      docker-compose -f 'docker-compose.test.yml' up -d
      check_exit "$?"
    else
      docker-compose -f 'docker-compose.test.yml' up -d test-db
      check_exit "$?"
      IFS=: read host port <<< "$(docker-compose -f 'docker-compose.test.yml' port test-db 5432)"
      echo "Postgres is running on port $port"
      export POSTGRES_PORT=$port
    fi

    # Let postgres initialize
    echo
    log "Giving postgres a few seconds to start up..."
    sleep 5

    # Migrate and seed db
    echo
    log "Migrating & seeding db"
    if [[ $docker == "true" ]]; then
      docker exec test-backend bash -c "yarn db:migrate"
      check_exit "$?"
      docker exec test-backend bash -c "yarn db:seed"
      check_exit "$?"
    else
      yarn db:migrate
      check_exit "$?"
      yarn db:seed
      check_exit "$?"
    fi

    if [[ "$opt" == "backend" || -z "$opt" ]]; then
      # Test backend
      echo
      log "Running backend tests"

      # first get the tests in the root directory
      command="node_modules/.bin/cross-env \
      JEST_JUNIT_OUTPUT_DIR=reports \
      JEST_JUNIT_OUTPUT_NAME=unit.xml \
      POSTGRES_USERNAME=postgres \
      POSTGRES_DB=ttasmarthub \
      CURRENT_USER_ID=5 \
      CI=true \
      node \
      --expose-gc \
      ./node_modules/.bin/jest \
      src/*.js \
      --coverage \
      --colors \
      --reporters=jest-junit \
      --reporters=default \
      --runInBand \
      --silent \
      --colors \
      --logHeapUsage \
      --coverageDirectory=\$(pwd)/coverage/src/root \
      --collectCoverageFrom=src/*.js \
      --forceExit"

      if [[ $docker == "true" ]]; then
        docker exec test-backend bash -c "$command"
      else
        $command
      fi

      check_exit "$?"

      # then list through the folders and run the tests
      readarray -t targets < <(sort_directories)
      # old way: targets=("lib" "middleware" "models" "policies" "routes" "scopes" "services" "tools" "widgets" "goalServices")

       for target in "${targets[@]}"; do

        # jest command to
        # - run tests in the target folder
        # - collect coverage from the target folder
        # - output coverage relative to the target folder
        # - some other useful flags
        command="node_modules/.bin/cross-env \
          JEST_JUNIT_OUTPUT_DIR=reports \
          JEST_JUNIT_OUTPUT_NAME=unit.xml \
          POSTGRES_USERNAME=postgres \
          POSTGRES_DB=ttasmarthub \
          CURRENT_USER_ID=5 \
          CI=true \
          node \
          --expose-gc \
          ./node_modules/.bin/jest \
          --coverage \
          --colors \
          --reporters=jest-junit \
          --reporters=default \
          --runInBand \
          --silent \
          --logHeapUsage \
          --coverageDirectory=\$(pwd)/coverage/src/$target \
          --collectCoverageFrom=src/$target/**/*.js \
          --testMatch=\"<rootDir>/src/$target/**/?(*.)+(spec|test).[jt]s?(x)\" \
          --testMatch=\"<rootDir>/src/$target/test/**/?(*.)+(spec|test).[jt]s?(x)\" \
          --testMatch=\"<rootDir>/src/$target/tests/**/?(*.)+(spec|test).[jt]s?(x)\" \
          --forceExit"

          if [[ $docker == "true" ]]; then
            docker exec test-backend bash -c "$command"
          else
            $command
          fi
          check_exit "$?"
      done
    fi

    if [[ "$opt" == "frontend" || -z "$opt" ]]; then
        # Test frontend
        command="yarn --cwd frontend run test:ci --colors"
        if [ $verbose == "false" ]; then
          command="yarn --cwd frontend run test:ci --silent --colors"
        fi
        echo
        log "Running frontend tests"
        if [[ $docker == "true" ]]; then
          docker exec test-frontend bash -c "$command"
        else
          $command
        fi
        check_exit "$?"
    fi

    # Cleanup
    echo
    log "Cleaning up test containers"
    docker-compose \
        -f 'docker-compose.test.yml' \
        down --volumes --remove-orphans
    check_exit "$?"

    if [[ $exit_code -ne 0 ]]; then
        echo
        log "Errors occurred during script execution"
    fi

    exit "$exit_code"
}

main "$@"
