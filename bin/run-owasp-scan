#!/bin/bash
###########################
#
# Refactored script to run OWASP ZAP scans with named arguments.
# Provides flags to control individual scan types.
#
# Usage:
# ./run-owasp-scan.sh --target <target_url> [--network <network_name>] [--baseline] [--full] [--api]
#
# Example:
# ./run-owasp-scan.sh --target http://server:8080 --network project_smarthub --baseline --api
#
###########################

# Default values
network="project_smarthub"
do_baseline=false
do_full=false
do_api=false
target_url=""

# Function to print usage
usage() {
  echo "Usage: $0 --target <target_url> [--network <network_name>] [--baseline] [--full] [--api]"
  echo "  --target     Target URL for the scans (required)"
  echo "  --network    Docker network name (default: project_smarthub)"
  echo "  --baseline   Run zap-baseline.py"
  echo "  --full       Run zap-full-scan.py"
  echo "  --api        Run zap-api-scan.py"
  exit 1
}

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --target)
      target_url="$2"
      shift 2
      ;;
    --network)
      network="$2"
      shift 2
      ;;
    --baseline)
      do_baseline=true
      shift
      ;;
    --full)
      do_full=true
      shift
      ;;
    --api)
      do_api=true
      shift
      ;;
    *)
      echo "Unknown option: $1"
      usage
      ;;
  esac
done

# Validate required arguments
if [[ -z "$target_url" ]]; then
  echo "Error: --target is required"
  usage
fi

# Extract a clean name from the target URL for report naming
clean_target=$(echo "$target_url" | sed -E 's/^(https?:\/\/)?(www\.)?([^/:]+).*/\3/')

# Ensure the reports directory exists
mkdir -p "$(pwd)/reports/${clean_target}/"
cp "$(pwd)/zap.conf" "$(pwd)/reports/"
chmod -R o+w "$(pwd)/reports/"

# Run zap-baseline.py if enabled
if $do_baseline; then
  echo "Running zap-baseline.py on $target_url"
  docker run \
    -v "$(pwd)/reports:/zap/wrk:rw" \
    --rm \
    --user zap:$(id -g) \
    --network=$network \
    --platform linux/amd64 \
    -t softwaresecurityproject/zap-stable:latest zap-baseline.py \
    -t $target_url \
    -c /zap/wrk/zap.conf -I -i -r "${clean_target}/owasp_baseline_report.html"
  echo "-----------------------------------------------------------------------"
fi

# Run zap-full-scan.py if enabled
if $do_full; then
  echo "Running zap-full-scan.py on $target_url"
  docker run \
    -v "$(pwd)/zap.conf:/zap/wrk/zap.conf:ro" \
    -v "$(pwd)/reports:/zap/wrk:rw" \
    --rm \
    --user zap:$(id -g) \
    --network=$network \
    --platform linux/amd64 \
    -t softwaresecurityproject/zap-stable:latest zap-full-scan.py \
    -t $target_url \
    -c /zap/wrk/zap.conf -I -i -r "${clean_target}/owasp_full_scan_report.html"
  echo "-----------------------------------------------------------------------"
fi

# Run zap-api-scan.py if enabled
if $do_api; then
  echo "Running zap-api-scan.py on ${target_url}/openapi.json"
  docker run \
    -v "$(pwd)/reports:/zap/wrk:rw" \
    --rm \
    --user zap:$(id -g) \
    --network=$network \
    --platform linux/amd64 \
    -t softwaresecurityproject/zap-stable:latest zap-api-scan.py \
    -t ${target_url}/openapi.json \
    -f openapi -I -i -r "${clean_target}/owasp_api_report.html"
  echo "-----------------------------------------------------------------------"
fi

# Clean up
rm "$(pwd)/reports/zap.conf"

echo "All scans completed. Reports are saved in the 'reports' directory."
