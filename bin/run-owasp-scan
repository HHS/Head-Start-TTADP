#!/bin/bash
###########################
#
# Unified script to run OWASP ZAP scans on demand.
# Expects a target and optionally a Docker network.
#
# Usage:
# ./run-owasp-scan.sh <target_url> [network_name]
#
# Example:
# ./run-owasp-scan.sh http://server:8080 project_smarthub
#
###########################

# Check for required arguments
if [ -z "$1" ]; then
  echo "Usage: $0 <target_url> [network_name]"
  exit 1
fi

# Define arguments
target_url=$1
network="project_smarthub"
if [ -n "$2" ]; then
  network=$2
fi

# Ensure the reports directory exists
mkdir -p $(pwd)/reports

# Extract a clean name from the target URL for report naming
clean_target=$(echo "$target_url" | sed 's/[\/:]/_/g')

# Run zap-baseline.py
echo "Running zap-baseline.py..."
docker run \
  -v $(pwd)/zap.conf:/zap/wrk/zap.conf:ro \
  -v $(pwd)/reports:/zap/wrk:rw \
  --rm \
  --user zap:$(id -g) \
  --network=$network \
  -t softwaresecurityproject/zap-stable:latest zap-baseline.py \
  -t $target_url \
  -c zap.conf -I -i -r reports/owasp_baseline_${clean_target}_report.html

# Run zap-full-scan.py
echo "Running zap-full-scan.py..."
docker run \
  -v $(pwd)/zap.conf:/zap/wrk/zap.conf:ro \
  -v $(pwd)/reports:/zap/wrk:rw \
  --rm \
  --user zap:$(id -g) \
  --network=$network \
  -t softwaresecurityproject/zap-stable:latest zap-full-scan.py \
  -t $target_url \
  -c zap.conf -I -i -r reports/owasp_full_scan_${clean_target}_report.html

# Run zap-api-scan.py
echo "Running zap-api-scan.py..."
docker run \
  -v $(pwd)/zap.conf:/zap/wrk/zap.conf:ro \
  -v $(pwd)/reports:/zap/wrk:rw \
  --rm \
  --user zap:$(id -g) \
  --network=$network \
  --platform linux/amd64 \
  -t softwaresecurityproject/zap-stable:latest zap-api-scan.py \
  -t ${target_url}/openapi.json \
  -f openapi -I -i -r reports/owasp_api_${clean_target}_report.html

echo "All scans completed. Reports are saved in the 'reports' directory."
