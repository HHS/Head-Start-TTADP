FROM node:18.18.2-alpine as base
FROM node:18.18.2 as backend-base

FROM base AS builder
RUN apk add --no-cache libc6-compat
RUN apk update
# Set working directory
WORKDIR /app
COPY . .
RUN yarn global add turbo
RUN turbo prune --docker

# Add lockfile and package.json's of isolated subworkspace
FROM base AS installer
RUN apk add --no-cache libc6-compat
RUN apk update
WORKDIR /app
 
# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock
RUN yarn install
 
# Build the project
COPY --from=builder /app/out/full/ .
RUN yarn turbo run build --filter=src

FROM backend-base as backend-installer
WORKDIR /app
RUN apt-get update && apt-get install -y --no-install-recommends dumb-init lcov chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
RUN yarn global add node-gyp turbo &&\
    turbo prune web --docker
# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock
RUN yarn install
 
# Build the project
COPY --from=builder /app/out/full/ .
RUN yarn turbo run build --filter=frontend




FROM base as frontend-installer
WORKDIR /app
RUN apk update && apk add yarn dumb-init
COPY frontend/package.json frontend/yarn.lock ./
RUN yarn global add turbo &&\
    yarn install &&\ 
    yarn cache clean

FROM node:18.18.2 as build
ENV NODE_OPTIONS=--max_old_space_size=2048
WORKDIR /app
COPY --from=base /app/node_modules /app/node_modules
COPY --from=base /app/package.json /app/package.json
COPY src/ /app/src/
COPY tests/ /app/tests/
COPY config/ /app/config/
RUN turbo prune web --docker

FROM node:18.18.2-alpine as frontend-build
ENV NODE_OPTIONS=--max_old_space_size=2048
WORKDIR /app
ENV DISABLE_ESLINT_PLUGIN=true
COPY --from=frontend-base /app/node_modules /app/node_modules
COPY ./frontend .
RUN turbo build

FROM node:18.18.2-alpine as frontend
RUN apk update
# ENV CHOKIDAR_USEPOLLING=true
WORKDIR /app
COPY --chown=node:node --from=frontend-base /usr/bin/dumb-init /usr/bin/dumb-init
COPY --chown=node:node --from=frontend-build /app/build /app
COPY --chown=node:node --from=frontend-build /app/node_modules /app/node_modules
COPY --chown=node:node --from=frontend-build /app/package.json /app/package.json
USER node
# CMD ["/usr/bin/dumb-init", "node", "server.js"]

FROM node:18.18.2-slim as backend
WORKDIR /app
COPY --chown=node:node .sequelizerc /app/.sequelizerc
COPY --chown=node:node --from=base /usr/bin/dumb-init /usr/bin/dumb-init
COPY --chown=node:node --from=build /app/build /app
COPY --chown=node:node --from=build /app/node_modules/ /app/node_modules/
COPY --chown=node:node --from=build /app/package.json /app/package.json
USER node
# CMD ["dumb-init", "node", "server.js"]

FROM backend as worker

FROM backend as testingonly