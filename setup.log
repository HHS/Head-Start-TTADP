Starting server setup...
Removing old build directory...
Installing and building Node.js app...
 db Pulling 
 db Pulled 
 Network head-start-ttadp_smarthub  Creating
 Network head-start-ttadp_smarthub  Created
 Container postgres_docker  Creating
 Container postgres_docker  Created
 Container postgres_docker  Starting
 Container postgres_docker  Started
#0 building with "desktop-linux" instance using docker driver

#1 [server internal] load build definition from Dockerfile
#1 transferring dockerfile: 403B 0.0s done
#1 DONE 0.0s

#2 [server internal] load metadata for docker.io/library/node:20.18.2
#2 ...

#3 [server auth] library/node:pull token for registry-1.docker.io
#3 DONE 0.0s

#2 [server internal] load metadata for docker.io/library/node:20.18.2
#2 DONE 1.2s

#4 [server internal] load .dockerignore
#4 transferring context: 86B 0.0s done
#4 DONE 0.1s

#5 [server 1/4] FROM docker.io/library/node:20.18.2@sha256:3496cba96d3548fc484a7febc77edebffcae693aff6a067bc34ec6d8c1f7affe
#5 DONE 0.0s

#6 [server 2/4] WORKDIR /app
#6 CACHED

#7 [server 3/4] RUN apt-get update && apt-get install lcov -y
#7 CACHED

#8 [server 4/4] RUN mkdir -p /home/node/.cache/yarn &&     chown -R node:node /home/node/.cache/yarn &&     mkdir -p /app/node_modules &&     chown -R node:node /app &&     chown -R node:node /app/node_modules
#8 CACHED

#9 [server] exporting to image
#9 exporting layers done
#9 writing image sha256:0e2646b2785f9c28f3376f8f914fb80380ad636aef157c86a2612cb8eb57bb77 done
#9 naming to docker.io/library/head-start-ttadp-server done
#9 DONE 0.0s

#10 [server] resolving provenance for metadata file
#10 DONE 0.0s
yarn install v1.22.22
[1/5] Validating package.json...
[2/5] Resolving packages...
warning Resolution field "colors@1.4.0" is incompatible with requested version "colors@1.0.x"
warning Resolution field "colors@1.4.0" is incompatible with requested version "colors@~1.2.1"
[3/5] Fetching packages...
info There appears to be trouble with your network connection. Retrying...
info There appears to be trouble with your network connection. Retrying...
info There appears to be trouble with your network connection. Retrying...
[4/5] Linking dependencies...
warning " > ioredis-mock@8.9.0" has unmet peer dependency "@types/ioredis-mock@^8".
warning "redoc-cli > redoc@2.0.0-rc.77" has unmet peer dependency "core-js@^3.1.4".
warning "redoc-cli > styled-components@5.3.6" has unmet peer dependency "react-is@>= 16.8.0".
warning "redoc-cli > redoc > style-loader@3.3.1" has unmet peer dependency "webpack@^5.0.0".
warning Workspaces can only be enabled in private projects.
[5/5] Building fresh packages...
Done in 613.97s.
 Container postgres_docker  Running
yarn install v1.22.22
[1/5] Validating package.json...
[2/5] Resolving packages...
[3/5] Fetching packages...
info There appears to be trouble with your network connection. Retrying...
info There appears to be trouble with your network connection. Retrying...
info There appears to be trouble with your network connection. Retrying...
info There appears to be trouble with your network connection. Retrying...
error Error: https://registry.yarnpkg.com/@material-ui/icons/-/icons-4.11.3.tgz: ESOCKETTIMEDOUT
    at ClientRequest.<anonymous> (/opt/yarn-v1.22.22/lib/cli.js:142037:19)
    at Object.onceWrapper (node:events:632:28)
    at ClientRequest.emit (node:events:518:28)
    at TLSSocket.emitRequestTimeout (node:_http_client:849:9)
    at Object.onceWrapper (node:events:632:28)
    at TLSSocket.emit (node:events:530:35)
    at Socket._onTimeout (node:net:595:8)
    at listOnTimeout (node:internal/timers:581:17)
    at process.processTimers (node:internal/timers:519:7)
info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
Starting server setup...
No old build directory found, skipping removal.
Installing and building Node.js app...
 Container postgres_docker  Running
yarn install v1.22.22
[1/5] Validating package.json...
[2/5] Resolving packages...
warning Resolution field "colors@1.4.0" is incompatible with requested version "colors@1.0.x"
warning Resolution field "colors@1.4.0" is incompatible with requested version "colors@~1.2.1"
success Already up-to-date.
Done in 2.23s.
 Container postgres_docker  Running
yarn install v1.22.22
[1/5] Validating package.json...
[2/5] Resolving packages...
[3/5] Fetching packages...
info There appears to be trouble with your network connection. Retrying...
info There appears to be trouble with your network connection. Retrying...
info There appears to be trouble with your network connection. Retrying...
[4/5] Linking dependencies...
warning " > @trussworks/react-uswds@5.1.0" has unmet peer dependency "@uswds/uswds@3.1.0".
warning " > html-to-draftjs@1.5.0" has unmet peer dependency "immutable@3.x.x || 4.x.x".
warning "plotly.js > @plotly/mapbox-gl > @mapbox/mapbox-gl-supported@1.5.0" has unmet peer dependency "mapbox-gl@>=0.32.1 <2.0.0".
warning " > react-draft-wysiwyg@1.15.0" has unmet peer dependency "immutable@3.x.x || 4.x.x".
warning "react-draft-wysiwyg > draftjs-utils@0.10.2" has unmet peer dependency "immutable@3.x.x || 4.x.x".
warning " > react-with-direction@1.4.0" has incorrect peer dependency "react@^0.14 || ^15 || ^16".
warning " > react-with-direction@1.4.0" has incorrect peer dependency "react-dom@^0.14 || ^15 || ^16".
warning "react-with-direction > airbnb-prop-types@2.16.0" has incorrect peer dependency "react@^0.14 || ^15.0.0 || ^16.0.0-alpha".
warning "eslint-plugin-jest > @typescript-eslint/experimental-utils > @typescript-eslint/typescript-estree > tsutils@3.21.0" has unmet peer dependency "typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta".
warning "react-scripts > eslint-config-react-app > eslint-plugin-flowtype@8.0.3" has unmet peer dependency "@babel/plugin-syntax-flow@^7.14.5".
warning "react-scripts > eslint-config-react-app > eslint-plugin-flowtype@8.0.3" has unmet peer dependency "@babel/plugin-transform-react-jsx@^7.14.9".
warning "react-scripts > react-dev-utils > fork-ts-checker-webpack-plugin@6.5.2" has unmet peer dependency "typescript@>= 2.7".
[5/5] Building fresh packages...
Done in 502.87s.
 Container postgres_docker  Running
yarn run v1.22.22
$ tsc -p src
Done in 76.74s.
 Container postgres_docker  Running
yarn run v1.22.22
$ INLINE_RUNTIME_CHUNK=false react-scripts build && mv build/ ../build/server/client
Creating an optimized production build...
Browserslist: caniuse-lite is outdated. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
Browserslist: caniuse-lite is outdated. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
Compiled with warnings.

Failed to parse source map from '/app/frontend/node_modules/plotly.js-basic-dist/base64-arraybuffer.es5.js.map' file: Error: ENOENT: no such file or directory, open '/app/frontend/node_modules/plotly.js-basic-dist/base64-arraybuffer.es5.js.map'

Failed to parse source map: 'webpack:///dist/react-responsive.js' URL is not supported

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

File sizes after gzip:

  1.4 MB    build/static/js/main.46b8cff4.js
  91.29 kB  build/static/css/main.06c53d3f.css

The bundle size is significantly larger than recommended.
Consider reducing it with code splitting: https://goo.gl/9VhYWB
You can also analyze the project dependencies: https://goo.gl/LeUzfb

The project was built assuming it is hosted at /.
You can control this with the homepage field in your package.json.

The build folder is ready to be deployed.
You may serve it with a static server:

  yarn global add serve
  serve -s build

Find out more about deployment here:

  https://cra.link/deployment

Done in 360.51s.
Installing Python dependencies for similarity_api...
 Container postgres_docker  Running
Collecting en_core_web_sm@ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.6.0/en_core_web_sm-3.6.0-py3-none-any.whl
  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.6.0/en_core_web_sm-3.6.0-py3-none-any.whl (12.8 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 12.8/12.8 MB 5.1 MB/s eta 0:00:00
Requirement already satisfied: annotated-types==0.5.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 1)) (0.5.0)
Requirement already satisfied: blinker==1.6.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 2)) (1.6.2)
Requirement already satisfied: blis==0.7.10 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 3)) (0.7.10)
Requirement already satisfied: catalogue==2.0.9 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 4)) (2.0.9)
Requirement already satisfied: certifi==2024.7.4 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 5)) (2024.7.4)
Requirement already satisfied: charset-normalizer==3.2.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 6)) (3.2.0)
Requirement already satisfied: click==8.1.6 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 7)) (8.1.6)
Requirement already satisfied: confection==0.1.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 8)) (0.1.1)
Requirement already satisfied: cymem==2.0.7 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 9)) (2.0.7)
Requirement already satisfied: Flask==2.3.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 10)) (2.3.2)
Requirement already satisfied: Flask-SQLAlchemy==3.0.5 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 11)) (3.0.5)
Requirement already satisfied: greenlet==2.0.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 12)) (2.0.2)
Requirement already satisfied: idna==3.7 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 13)) (3.7)
Requirement already satisfied: importlib-metadata==6.8.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 14)) (6.8.0)
Requirement already satisfied: itsdangerous==2.1.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 15)) (2.1.2)
Requirement already satisfied: Jinja2==3.1.6 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 16)) (3.1.6)
Requirement already satisfied: joblib==1.3.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 17)) (1.3.2)
Requirement already satisfied: langcodes==3.3.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 18)) (3.3.0)
Requirement already satisfied: MarkupSafe==2.1.3 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 19)) (2.1.3)
Requirement already satisfied: murmurhash==1.0.9 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 20)) (1.0.9)
Requirement already satisfied: numpy==1.25.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 21)) (1.25.2)
Requirement already satisfied: packaging==23.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 22)) (23.1)
Requirement already satisfied: pathy==0.10.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 23)) (0.10.2)
Requirement already satisfied: preshed==3.0.8 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 24)) (3.0.8)
Requirement already satisfied: psycopg2==2.9.7 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 25)) (2.9.7)
Requirement already satisfied: pydantic==2.4.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 26)) (2.4.0)
Requirement already satisfied: pydantic-core==2.10.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 27)) (2.10.0)
Requirement already satisfied: requests==2.32.3 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 28)) (2.32.3)
Requirement already satisfied: scikit-learn==1.5.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 29)) (1.5.0)
Requirement already satisfied: scipy==1.11.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 30)) (1.11.1)
Requirement already satisfied: smart-open==6.3.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 31)) (6.3.0)
Requirement already satisfied: spacy==3.6.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 32)) (3.6.1)
Requirement already satisfied: spacy-legacy==3.0.12 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 33)) (3.0.12)
Requirement already satisfied: spacy-loggers==1.0.4 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 34)) (1.0.4)
Requirement already satisfied: SQLAlchemy==2.0.19 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 35)) (2.0.19)
Requirement already satisfied: srsly==2.4.7 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 36)) (2.4.7)
Requirement already satisfied: thinc==8.1.11 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 37)) (8.1.11)
Requirement already satisfied: threadpoolctl==3.2.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 38)) (3.2.0)
Requirement already satisfied: tqdm==4.66.3 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 39)) (4.66.3)
Requirement already satisfied: typer==0.9.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 40)) (0.9.0)
Requirement already satisfied: typing_extensions==4.7.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 41)) (4.7.1)
Requirement already satisfied: urllib3==2.2.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 42)) (2.2.2)
Requirement already satisfied: wasabi==1.1.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 43)) (1.1.2)
Requirement already satisfied: Werkzeug==3.0.6 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 44)) (3.0.6)
Requirement already satisfied: zipp==3.19.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 45)) (3.19.1)
Requirement already satisfied: gunicorn in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 46)) (23.0.0)
Requirement already satisfied: setuptools in /usr/local/lib/python3.9/site-packages (from spacy==3.6.1->-r /app/requirements.txt (line 32)) (58.1.0)
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv

[notice] A new release of pip is available: 23.0.1 -> 25.0.1
[notice] To update, run: pip install --upgrade pip
Running database migrations using Node.js app...
 Container postgres_docker  Running
yarn run v1.22.22
$ cross-env POSTGRES_USERNAME=postgres POSTGRES_DB=ttasmarthub node_modules/.bin/sequelize db:migrate  && yarn ldm:ci

[4mSequelize CLI [Node: 20.18.2, CLI: 6.5.1, ORM: 6.29.0][24m

Loaded configuration file "config/config.js".
Using environment "dss".
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name"));
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20200827192413-create-user: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Users" ("id"   SERIAL , "hsesUserId" VARCHAR(255) UNIQUE, "name" VARCHAR(255), "phoneNumber" VARCHAR(255), "email" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20200827192413-create-user: migrated (0.056s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029141201-create-scope: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Scopes" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "description" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029141201-create-scope: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029142912-create-region: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Regions" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029142912-create-region: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029143000-region: migrating =======
Executing (default): INSERT INTO "Regions" ("id","name") VALUES (1,'1'),(2,'2'),(3,'3'),(4,'4'),(5,'5'),(6,'6'),(7,'7'),(8,'8'),(9,'9'),(10,'10'),(11,'11'),(12,'12'),(13,'13'),(14,'No Region') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029143000-region: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029143000-scope: migrating =======
Executing (default): INSERT INTO "Scopes" ("id","name","description") VALUES (1,'SITE_ACCESS','User can login and view the TTAHUB site'),(2,'ADMIN','User can view the admin panel and change user permissions (including their own)'),(3,'READ_WRITE_REPORTS','Can view and create/edit reports in the region'),(4,'READ_REPORTS','Can view reports in the region'),(5,'APPROVE_REPORTS','Can approve reports') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029143000-scope: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029214146-create-permission: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Permissions" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "regionId" INTEGER NOT NULL REFERENCES "Regions" ("id"), "scopeId" INTEGER NOT NULL REFERENCES "Scopes" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029214146-create-permission: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029214432-add-title-to-user: migrating =======
Executing (c121161e-0d01-4d3f-ac83-03634e37cb58): START TRANSACTION;
Connection validated successfully
Executing (c121161e-0d01-4d3f-ac83-03634e37cb58): CREATE TYPE "public"."enum_Users_title" AS ENUM('Program Specialist', 'Early Childhood Specialist', 'Grantee Specialist', 'Family Engagement Specialist', 'Health Specialist', 'Systems Specialist');ALTER TABLE "public"."Users" ADD COLUMN "title" "public"."enum_Users_title";
Executing (c121161e-0d01-4d3f-ac83-03634e37cb58): ALTER TABLE "public"."Users" ADD COLUMN "homeRegionId" INTEGER DEFAULT NULL REFERENCES "Regions" ("id") ON DELETE SET NULL ON UPDATE SET NULL;
Executing (c121161e-0d01-4d3f-ac83-03634e37cb58): ALTER TABLE "Users" ALTER COLUMN "email" DROP NOT NULL;ALTER TABLE "Users" ALTER COLUMN "email" DROP DEFAULT;ALTER TABLE "Users"  ADD UNIQUE ("email");ALTER TABLE "Users" ALTER COLUMN "email" TYPE VARCHAR(255) ;
Executing (c121161e-0d01-4d3f-ac83-03634e37cb58): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029214432-add-title-to-user: migrated (0.043s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201030204458-add-unique-constraint-to-permissions: migrating =======
Executing (default): ALTER TABLE "Permissions" ADD CONSTRAINT "unique_userId_scopeId_regionId" UNIQUE ("userId", "scopeId", "regionId");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201030204458-add-unique-constraint-to-permissions: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201102125023-create-request-errors: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "RequestErrors" ("id"   BIGSERIAL , "operation" VARCHAR(255), "uri" VARCHAR(255), "method" VARCHAR(255), "requestBody" JSON, "responseBody" JSON, "responseCode" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201102125023-create-request-errors: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201120133733-create-topic: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Topics" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201120133733-create-topic: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201120182130-create-role: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Roles" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "fullName" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201120182130-create-role: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201120183631-create-role-topic: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "RoleTopics" ("id"   SERIAL , "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201120183631-create-role-topic: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201123143446-add-unique-constraint-to-roletopic: migrating =======
Executing (default): ALTER TABLE "RoleTopics" ADD CONSTRAINT "unique_roleId_topicId" UNIQUE ("roleId", "topicId");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201123143446-add-unique-constraint-to-roletopic: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201125194528-create-goal: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Goals" ("id"   SERIAL , "name" TEXT, "status" VARCHAR(255), "timeframe" VARCHAR(255), "isFromSmartsheetTtaPlan" BOOLEAN, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201125194528-create-goal: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201125195340-create-topic-goal: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "TopicGoals" ("id"   SERIAL , "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201125195340-create-topic-goal: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201130144721-add-unique-constraint-to-topicgoal: migrating =======
Executing (default): ALTER TABLE "TopicGoals" ADD CONSTRAINT "unique_topicId_goalId" UNIQUE ("topicId", "goalId");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201130144721-add-unique-constraint-to-topicgoal: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201130144748-create-grantee: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Grantees" ("id" INTEGER NOT NULL , "name" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201130144748-create-grantee: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201205200637-create-grant: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Grants" ("id" INTEGER NOT NULL , "number" VARCHAR(255) NOT NULL UNIQUE, "regionId" INTEGER REFERENCES "Regions" ("id"), "granteeId" INTEGER NOT NULL REFERENCES "Grantees" ("id"), "status" VARCHAR(255), "startDate" TIMESTAMP WITH TIME ZONE, "endDate" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201205200637-create-grant: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201205200638-create-grant-goal: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "GrantGoals" ("id"   SERIAL , "granteeId" INTEGER NOT NULL REFERENCES "Grantees" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "grantId" INTEGER NOT NULL REFERENCES "Grants" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201205200638-create-grant-goal: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201206173716-add-default-createdat-updatedat: migrating =======
Executing (default): ALTER TABLE "Users" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "createdAt" SET DEFAULT NOW();ALTER TABLE "Users" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Connection validated successfully
Executing (default): ALTER TABLE "Users" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "updatedAt" SET DEFAULT NOW();ALTER TABLE "Users" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Connection validated successfully
Executing (default): ALTER TABLE "Permissions" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Permissions" ALTER COLUMN "createdAt" SET DEFAULT NOW();ALTER TABLE "Permissions" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Connection validated successfully
Executing (default): ALTER TABLE "Permissions" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Permissions" ALTER COLUMN "updatedAt" SET DEFAULT NOW();ALTER TABLE "Permissions" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201206173716-add-default-createdat-updatedat: migrated (0.036s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201206184519-rename-user-title-column: migrating =======
Executing (fb6710fd-c510-4dc8-880c-656f6e7d5978): START TRANSACTION;
Connection validated successfully
Executing (fb6710fd-c510-4dc8-880c-656f6e7d5978): ALTER TABLE "public"."Users" DROP COLUMN "title";
Executing (fb6710fd-c510-4dc8-880c-656f6e7d5978): DROP TYPE public."enum_Users_title";
Executing (fb6710fd-c510-4dc8-880c-656f6e7d5978): CREATE TYPE "public"."enum_Users_role" AS ENUM('Regional Program Manager', 'COR', 'Supervisory Program Specialist', 'Program Specialist', 'Grants Specialist', 'Central Office', 'TTAC', 'Admin. Assistant', 'Early Childhood Manager', 'Early Childhood Specialist', 'Family Engagement Specialist', 'Grantee Specialist Manager', 'Grantee Specialist', 'Health Specialist', 'System Specialist');ALTER TABLE "public"."Users" ADD COLUMN "role" "public"."enum_Users_role";
Executing (fb6710fd-c510-4dc8-880c-656f6e7d5978): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201206184519-rename-user-title-column: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210106152317-create-non-grantee: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "NonGrantees" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210106152317-create-non-grantee: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210106160931-create-activity-reports: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReports" ("id"   SERIAL , "resourcesUsed" VARCHAR(255), "additionalNotes" VARCHAR(255), "numberOfParticipants" INTEGER, "deliveryMethod" VARCHAR(255), "duration" DECIMAL(3,1), "endDate" DATE, "startDate" DATE, "participantType" VARCHAR(255), "requester" VARCHAR(255), "status" VARCHAR(255) NOT NULL, "programTypes" VARCHAR(255)[], "targetPopulations" VARCHAR(255)[], "reason" VARCHAR(255)[], "participants" VARCHAR(255)[], "topics" VARCHAR(255)[], "ttaType" VARCHAR(255)[], "pageState" JSON, "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "lastUpdatedById" INTEGER NOT NULL REFERENCES "Users" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210106160931-create-activity-reports: migrated (0.033s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210106160953-create-activity-participants: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityParticipants" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "grantId" INTEGER REFERENCES "Grants" ("id"), "nonGranteeId" INTEGER REFERENCES "NonGrantees" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210106160953-create-activity-participants: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210114193123-create-file: migrating =======
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Files_status' GROUP BY 1
Connection validated successfully
Executing (default): CREATE TYPE "public"."enum_Files_status" AS ENUM('UPLOADING', 'UPLOADED', 'UPLOAD_FAILED', 'SCANNING', 'APPROVED', 'REJECTED');
Connection validated successfully
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "Files" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "originalFileName" VARCHAR(255) NOT NULL, "key" VARCHAR(255) NOT NULL, "status" "public"."enum_Files_status" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210114193123-create-file: migrated (0.044s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210118203723-rename-activity-participant: migrating =======
Executing (934c876f-46f0-4aeb-b63e-7e06ba9a3c6d): START TRANSACTION;
Connection validated successfully
Executing (934c876f-46f0-4aeb-b63e-7e06ba9a3c6d): ALTER TABLE "ActivityParticipants" RENAME TO "ActivityRecipients";
Executing (934c876f-46f0-4aeb-b63e-7e06ba9a3c6d): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReports' AND c.table_schema = 'public'
Executing (934c876f-46f0-4aeb-b63e-7e06ba9a3c6d): ALTER TABLE "ActivityReports" RENAME COLUMN "participantType" TO "activityRecipientType";
Executing (934c876f-46f0-4aeb-b63e-7e06ba9a3c6d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210118203723-rename-activity-participant: migrated (0.071s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210120153248-add-context-field: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "context" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210120153248-add-context-field: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210120200638-add-submit-fields: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "approvingManagerId" INTEGER REFERENCES "Users" ("id");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210120200638-add-submit-fields: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210120215628-add-region-to-activity-reports: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "regionId" INTEGER REFERENCES "Regions" ("id");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210120215628-add-region-to-activity-reports: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210120220221-add-collaborators-to-activity-reports: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReportCollaborators" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210120220221-add-collaborators-to-activity-reports: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210121192644-add-attachment-type-to-files: migrating =======
Executing (default): CREATE TYPE "public"."enum_Files_attachmentType" AS ENUM('ATTACHMENT', 'RESOURCE');ALTER TABLE "public"."Files" ADD COLUMN "attachmentType" "public"."enum_Files_attachmentType" NOT NULL;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210121192644-add-attachment-type-to-files: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210125190348-add-activity-report-goals-table: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReportGoals" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210125190348-add-activity-report-goals-table: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210126172035-add-unique-index-to-collaborators: migrating =======
Executing (344e5c84-1765-445c-bd7d-7ad9adfbaf5f): START TRANSACTION;
Connection validated successfully
Executing (344e5c84-1765-445c-bd7d-7ad9adfbaf5f): CREATE UNIQUE INDEX "activity_report_collaborators_user_id_activity_report_id" ON "ActivityReportCollaborators" ("userId", "activityReportId")
Executing (344e5c84-1765-445c-bd7d-7ad9adfbaf5f): CREATE UNIQUE INDEX "activity_recipients_grant_id_activity_report_id" ON "ActivityRecipients" ("grantId", "activityReportId")
Executing (344e5c84-1765-445c-bd7d-7ad9adfbaf5f): CREATE UNIQUE INDEX "activity_recipients_non_grantee_id_activity_report_id" ON "ActivityRecipients" ("nonGranteeId", "activityReportId")
Executing (344e5c84-1765-445c-bd7d-7ad9adfbaf5f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210126172035-add-unique-index-to-collaborators: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210129210854-add-fileSize-to-files: migrating =======
Executing (default): ALTER TABLE "public"."Files" ADD COLUMN "fileSize" INTEGER NOT NULL;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210129210854-add-fileSize-to-files: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210201174748-add-manager-notes-to-activity-reports: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "managerNotes" TEXT;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210201174748-add-manager-notes-to-activity-reports: migrated (0.014s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210205172332-add-activity-report-status-enum: migrating =======
Executing (default): ALTER TABLE "ActivityReports" ALTER COLUMN "status" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "status" DROP DEFAULT;CREATE TYPE "public"."enum_ActivityReports_status" AS ENUM('draft', 'submitted', 'needs_action', 'approved');ALTER TABLE "ActivityReports" ALTER COLUMN "status" TYPE "public"."enum_ActivityReports_status" USING ("status"::"public"."enum_ActivityReports_status");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210205172332-add-activity-report-status-enum: migrated (0.038s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210208212205-user-last-login: migrating =======
Executing (default): ALTER TABLE "public"."Users" ADD COLUMN "lastLogin" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW();
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210208212205-user-last-login: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210215161922-add-statuses-to-file-model: migrating =======
Executing (default): ALTER TYPE "enum_Files_status" ADD VALUE 'QUEUEING_FAILED';
Connection validated successfully
Executing (default): ALTER TYPE "enum_Files_status" ADD VALUE 'SCANNING_QUEUED';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210215161922-add-statuses-to-file-model: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210215181557-convert-string-types-to-text: migrating =======
Executing (5455c5fe-4de7-4b1e-84a3-b74bc1a0cf65): START TRANSACTION;
Connection validated successfully
Executing (5455c5fe-4de7-4b1e-84a3-b74bc1a0cf65): ALTER TABLE "ActivityReports" ALTER COLUMN "additionalNotes" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "additionalNotes" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "additionalNotes" TYPE TEXT;
Executing (5455c5fe-4de7-4b1e-84a3-b74bc1a0cf65): ALTER TABLE "ActivityReports" ALTER COLUMN "context" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "context" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "context" TYPE TEXT;
Executing (5455c5fe-4de7-4b1e-84a3-b74bc1a0cf65): ALTER TABLE "ActivityReports" ALTER COLUMN "resourcesUsed" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "resourcesUsed" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "resourcesUsed" TYPE TEXT;
Executing (5455c5fe-4de7-4b1e-84a3-b74bc1a0cf65): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210215181557-convert-string-types-to-text: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210216051558-next-steps: migrating =======
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_NextSteps_noteType' GROUP BY 1
Connection validated successfully
Executing (default): CREATE TYPE "public"."enum_NextSteps_noteType" AS ENUM('SPECIALIST', 'GRANTEE');
Connection validated successfully
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "NextSteps" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "note" TEXT NOT NULL, "noteType" "public"."enum_NextSteps_noteType" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210216051558-next-steps: migrated (0.040s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210302170502-add-resources-to-activity-report: migrating =======
Executing (579a1477-e0d2-4b8a-b5d2-ec9ca33f1b92): START TRANSACTION;
Connection validated successfully
Executing (579a1477-e0d2-4b8a-b5d2-ec9ca33f1b92): ALTER TABLE "public"."ActivityReports" ADD COLUMN "nonECLKCResourcesUsed" TEXT[];
Executing (579a1477-e0d2-4b8a-b5d2-ec9ca33f1b92): ALTER TABLE "public"."ActivityReports" DROP COLUMN "resourcesUsed";
Executing (579a1477-e0d2-4b8a-b5d2-ec9ca33f1b92): ALTER TABLE "public"."ActivityReports" ADD COLUMN "ECLKCResourcesUsed" TEXT[];
Executing (579a1477-e0d2-4b8a-b5d2-ec9ca33f1b92): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210302170502-add-resources-to-activity-report: migrated (0.059s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210302214251-user-hses-username: migrating =======
Executing (62218427-8b36-4d57-993a-729346273d79): START TRANSACTION;
Connection validated successfully
Executing (62218427-8b36-4d57-993a-729346273d79): ALTER TABLE "public"."Users" ADD COLUMN "hsesUsername" VARCHAR(255);
Executing (62218427-8b36-4d57-993a-729346273d79): ALTER TABLE "public"."Users" ADD COLUMN "hsesAuthorities" VARCHAR(255)[];
Executing (62218427-8b36-4d57-993a-729346273d79): UPDATE "Users" SET "hsesUsername"="email"
Executing (62218427-8b36-4d57-993a-729346273d79): ALTER TABLE "Users" ALTER COLUMN "hsesUsername" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "hsesUsername" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "hsesUsername" TYPE VARCHAR(255);
Executing (62218427-8b36-4d57-993a-729346273d79): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210302214251-user-hses-username: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210302215921-add-virtual-delivery-type: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "virtualDeliveryType" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210302215921-add-virtual-delivery-type: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210305174257-remove-attachment-type: migrating =======
Executing (ab54a27e-1176-4b84-ae9d-92776e1a6ea7): START TRANSACTION;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Executing (ab54a27e-1176-4b84-ae9d-92776e1a6ea7): ALTER TABLE "public"."Files" DROP COLUMN "attachmentType";
Executing (ab54a27e-1176-4b84-ae9d-92776e1a6ea7): DROP TYPE public."enum_Files_attachmentType";
Connection validated successfully
Executing (ab54a27e-1176-4b84-ae9d-92776e1a6ea7): COMMIT;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210305174257-remove-attachment-type: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210305220918-ar-legacy-id: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "legacyId" VARCHAR(255); COMMENT ON COLUMN "ActivityReports"."legacyId" IS 'Legacy identifier taken from smartsheet ReportID. Some ids adjusted to match their region.';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210305220918-ar-legacy-id: migrated (0.015s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210308162757-remove-activity-report-goals-table: migrating =======
Executing (default): DROP TABLE IF EXISTS "ActivityReportGoals" CASCADE;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210308162757-remove-activity-report-goals-table: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210309214315-imported-data: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "imported" JSONB; COMMENT ON COLUMN "ActivityReports"."imported" IS 'Storage for raw values from smartsheet CSV imports';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210309214315-imported-data: migrated (0.015s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210310172128-add-grant-goal-unique-index: migrating =======
Executing (default): CREATE UNIQUE INDEX "grant_goals_grant_id_goal_id" ON "GrantGoals" ("grantId", "goalId")
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210310172128-add-grant-goal-unique-index: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210310173436-activityreport-allow-null-user-ids: migrating =======
Executing (1c3f15fd-b7fe-4a18-926d-b105d4735914): START TRANSACTION;
Connection validated successfully
Executing (1c3f15fd-b7fe-4a18-926d-b105d4735914): ALTER TABLE "ActivityReports" ALTER COLUMN "userId" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "userId" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "userId" TYPE INTEGER;
Executing (1c3f15fd-b7fe-4a18-926d-b105d4735914): ALTER TABLE "ActivityReports" ALTER COLUMN "lastUpdatedById" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "lastUpdatedById" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "lastUpdatedById" TYPE INTEGER;
Executing (1c3f15fd-b7fe-4a18-926d-b105d4735914): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210310173436-activityreport-allow-null-user-ids: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210310181116-create-objectives: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Objectives" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "title" TEXT, "ttaProvided" TEXT, "status" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210310181116-create-objectives: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210310181122-create-activity-report-objectives: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReportObjectives" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210310181122-create-activity-report-objectives: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210311211736-legacyid-unique: migrating =======
Executing (default): ALTER TABLE "ActivityReports" ALTER COLUMN "legacyId" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "legacyId" DROP DEFAULT;ALTER TABLE "ActivityReports"  ADD UNIQUE ("legacyId");ALTER TABLE "ActivityReports" ALTER COLUMN "legacyId" TYPE VARCHAR(255) ;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210311211736-legacyid-unique: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210315181828-goal-timeframe-text: migrating =======
Executing (default): ALTER TABLE "Goals" ALTER COLUMN "timeframe" DROP NOT NULL;ALTER TABLE "Goals" ALTER COLUMN "timeframe" DROP DEFAULT;ALTER TABLE "Goals" ALTER COLUMN "timeframe" TYPE TEXT;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210315181828-goal-timeframe-text: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210315234158-seed-non-grantee-recipients: migrating =======
Executing (default): INSERT INTO "NonGrantees" ("name") VALUES ('CCDF / Child Care Administrator'),('Head Start Collaboration Office'),('QRIS System'),('Regional Head Start Association'),('Regional TTA/Other Specialists'),('State CCR&R'),('State Early Learning Standards'),('State Education System'),('State Health System'),('State Head Start Association'),('State Professional Development / Continuing Education') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210315234158-seed-non-grantee-recipients: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210323155040-add-scanning-failed-enum: migrating =======
Executing (default): ALTER TYPE "enum_Files_status" ADD VALUE 'SCANNING_FAILED';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210323155040-add-scanning-failed-enum: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210323195745-fix-legacy-report-region-id: migrating =======
Executing (default): UPDATE "ActivityReports" SET "legacyId" = regexp_replace("legacyId", 'R(\d)-', 'R0\1-') WHERE "legacyId" ~ 'R\d-'
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210323195745-fix-legacy-report-region-id: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210407135721-add-deleted-report-status: migrating =======
Executing (default): ALTER TYPE "enum_ActivityReports_status" ADD VALUE 'deleted';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210407135721-add-deleted-report-status: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210407214251-user-multi-role: migrating =======
Executing (default): ALTER TABLE "Users" ALTER COLUMN role TYPE public."enum_Users_role"[]     USING CASE WHEN role IS NULL THEN '{}' ELSE ARRAY[role] END; ALTER TABLE "Users" ALTER COLUMN role SET DEFAULT '{}';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210407214251-user-multi-role: migrated (0.077s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210412211312-add-cdi-flag-to-grants: migrating =======
Executing (5cb10756-7b74-4711-99e2-971bfcf810b6): START TRANSACTION;
Connection validated successfully
Executing (5cb10756-7b74-4711-99e2-971bfcf810b6): ALTER TABLE "public"."Grants" ADD COLUMN "cdi" BOOLEAN DEFAULT false;
Executing (5cb10756-7b74-4711-99e2-971bfcf810b6): UPDATE "Grants" SET "cdi" = true WHERE "regionId" = 13
Executing (5cb10756-7b74-4711-99e2-971bfcf810b6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210412211312-add-cdi-flag-to-grants: migrated (0.028s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210419174123-remove-not-null-on-objectives-goal: migrating =======
Executing (default): ALTER TABLE "Objectives" ALTER COLUMN "goalId" DROP NOT NULL;ALTER TABLE "Objectives" ALTER COLUMN "goalId" DROP DEFAULT;ALTER TABLE "Objectives" ALTER COLUMN "goalId" TYPE INTEGER;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210419174123-remove-not-null-on-objectives-goal: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210908164843-add_grant_program_specialist_to_grant: migrating =======
Executing (f398fe17-9e36-4251-8ede-b72f0bd2f1f2): START TRANSACTION;
Connection validated successfully
Executing (f398fe17-9e36-4251-8ede-b72f0bd2f1f2): ALTER TABLE "public"."Grants" ADD COLUMN "programSpecialistName" VARCHAR(255);
Executing (f398fe17-9e36-4251-8ede-b72f0bd2f1f2): ALTER TABLE "public"."Grants" ADD COLUMN "programSpecialistEmail" VARCHAR(255);
Executing (f398fe17-9e36-4251-8ede-b72f0bd2f1f2): ALTER TABLE "public"."Grants" ADD COLUMN "grantSpecialistName" VARCHAR(255);
Executing (f398fe17-9e36-4251-8ede-b72f0bd2f1f2): ALTER TABLE "public"."Grants" ADD COLUMN "grantSpecialistEmail" VARCHAR(255);
Executing (f398fe17-9e36-4251-8ede-b72f0bd2f1f2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210908164843-add_grant_program_specialist_to_grant: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210916165628-add-flags-to-user: migrating =======
Executing (b491be1d-5c17-414c-8b4c-00f91acc9529): START TRANSACTION;
Connection validated successfully
Executing (b491be1d-5c17-414c-8b4c-00f91acc9529): CREATE TYPE "public"."enum_Users_flags" AS ENUM('grantee_record_page');ALTER TABLE "public"."Users" ADD COLUMN "flags" "public"."enum_Users_flags";
Executing (b491be1d-5c17-414c-8b4c-00f91acc9529): ALTER TABLE "Users" ALTER COLUMN flags TYPE public."enum_Users_flags"[] USING CASE WHEN flags IS NULL THEN '{}' ELSE ARRAY[flags] END; ALTER TABLE "Users" ALTER COLUMN flags SET DEFAULT '{}';
Executing (b491be1d-5c17-414c-8b4c-00f91acc9529): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210916165628-add-flags-to-user: migrated (0.050s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210922173135-add-calculatedStatus: migrating =======
Executing (bef6eda8-6519-4222-8f61-d864f56e4f40): START TRANSACTION;
Connection validated successfully
Executing (bef6eda8-6519-4222-8f61-d864f56e4f40): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReports' AND c.table_schema = 'public'
Executing (bef6eda8-6519-4222-8f61-d864f56e4f40): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReports' AND c.table_schema = 'public'
Executing (bef6eda8-6519-4222-8f61-d864f56e4f40): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReports' AND c.table_schema = 'public'
Executing (bef6eda8-6519-4222-8f61-d864f56e4f40): CREATE TYPE "public"."enum_ActivityReports_calculatedStatus" AS ENUM('deleted', 'draft', 'submitted', 'needs_action', 'approved');ALTER TABLE "public"."ActivityReports" ADD COLUMN "calculatedStatus" "public"."enum_ActivityReports_calculatedStatus";
Executing (bef6eda8-6519-4222-8f61-d864f56e4f40): ALTER TABLE "ActivityReports" RENAME COLUMN "status" TO "submissionStatus";
Executing (bef6eda8-6519-4222-8f61-d864f56e4f40): ALTER TABLE "ActivityReports" RENAME COLUMN "approvingManagerId" TO "oldApprovingManagerId";
Executing (bef6eda8-6519-4222-8f61-d864f56e4f40): ALTER TABLE "ActivityReports" RENAME COLUMN "managerNotes" TO "oldManagerNotes";
Executing (bef6eda8-6519-4222-8f61-d864f56e4f40): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210922173135-add-calculatedStatus: migrated (0.107s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210922192856-create-activity-report-approvers: migrating =======
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ActivityReportApprovers_status' GROUP BY 1
Connection validated successfully
Executing (default): CREATE TYPE "public"."enum_ActivityReportApprovers_status" AS ENUM('needs_action', 'approved');
Connection validated successfully
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReportApprovers" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "status" "public"."enum_ActivityReportApprovers_status", "note" TEXT, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): ALTER TABLE "ActivityReportApprovers" ADD CONSTRAINT "unique_activityReportId_userId" UNIQUE ("activityReportId", "userId");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210922192856-create-activity-report-approvers: migrated (0.047s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210930173153-add-grantee-type-to-grantee: migrating =======
Executing (default): ALTER TABLE "public"."Grantees" ADD COLUMN "granteeType" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210930173153-add-grantee-type-to-grantee: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211006095432-add-old-grant-id-to-grants: migrating =======
Executing (default): ALTER TABLE "public"."Grants" ADD COLUMN "oldGrantId" INTEGER; COMMENT ON COLUMN "Grants"."oldGrantId" IS 'Link to expired grant in order to retrieve legacy goals.';
Connection validated successfully
Executing (default): ALTER TABLE "Grants" ADD CONSTRAINT "Grants_oldGrantId_fkey" FOREIGN KEY ("oldGrantId") REFERENCES "Grants" ("id") ON UPDATE CASCADE ON DELETE CASCADE;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211006095432-add-old-grant-id-to-grants: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211008175906-add-program-table: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Programs" ("id" INTEGER NOT NULL , "grantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "programType" VARCHAR(255), "startYear" VARCHAR(255), "startDate" VARCHAR(255), "endDate" VARCHAR(255), "status" VARCHAR(255), "name" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211008175906-add-program-table: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211025175906-add-unlock-approved-reports-scope: migrating =======
Executing (default): INSERT INTO "Scopes" ("id","name","description") VALUES (6,'UNLOCK_APPROVED_REPORTS','User can unlock approved reports, reverting the report to the needs action state.') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211025175906-add-unlock-approved-reports-scope: migrated (0.015s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211110181535-add-ar-approved-date: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "approvedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL; COMMENT ON COLUMN "ActivityReports"."approvedAt" IS 'Timestamp when a report was approved';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211110181535-add-ar-approved-date: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211202212104-convert-grantee-to-recipient: migrating =======
Executing (default): DO $$ BEGIN\n        ALTER TYPE "enum_NextSteps_noteType" ADD VALUE 'RECIPIENT';\n      EXCEPTION\n        WHEN duplicate_object THEN null;\n      END $$;
Connection validated successfully
Executing (795539db-7430-4782-9280-a924c34a0160): START TRANSACTION;
Connection validated successfully
Executing (795539db-7430-4782-9280-a924c34a0160): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityRecipients' AND c.table_schema = 'public'
Executing (795539db-7430-4782-9280-a924c34a0160): ALTER TABLE "ActivityRecipients" RENAME COLUMN "nonGranteeId" TO "otherEntityId";
Executing (795539db-7430-4782-9280-a924c34a0160): ALTER TABLE "ActivityRecipients" RENAME CONSTRAINT "ActivityParticipants_nonGranteeId_fkey" TO "ActivityRecipients_otherEntityId";
Executing (795539db-7430-4782-9280-a924c34a0160): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Grants' AND c.table_schema = 'public'
Executing (795539db-7430-4782-9280-a924c34a0160): ALTER TABLE "Grants" RENAME COLUMN "granteeId" TO "recipientId";
Executing (795539db-7430-4782-9280-a924c34a0160): ALTER TABLE "Grants" RENAME CONSTRAINT "Grants_granteeId_fkey" TO "Grants_recipientId_fkey";
Executing (795539db-7430-4782-9280-a924c34a0160): UPDATE "NextSteps" SET "noteType" = 'RECIPIENT' WHERE "noteType" = 'GRANTEE';
Executing (795539db-7430-4782-9280-a924c34a0160): ALTER TABLE "NonGrantees" RENAME TO "OtherEntities";
Executing (795539db-7430-4782-9280-a924c34a0160): ALTER TABLE "Grantees" RENAME TO "Recipients";
Executing (795539db-7430-4782-9280-a924c34a0160): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Recipients' AND c.table_schema = 'public'
Executing (795539db-7430-4782-9280-a924c34a0160): ALTER TABLE "Recipients" RENAME COLUMN "granteeType" TO "recipientType";
Executing (795539db-7430-4782-9280-a924c34a0160): UPDATE "ActivityReports" SET "activityRecipientType" = 'recipient' WHERE "activityRecipientType" = 'grantee';
Executing (795539db-7430-4782-9280-a924c34a0160): UPDATE "ActivityReports" SET "activityRecipientType" = 'other-entity' WHERE "activityRecipientType" = 'non-grantee';
Executing (795539db-7430-4782-9280-a924c34a0160): UPDATE "ActivityReports" SET "activityRecipientType" = 'recipient' WHERE "activityRecipientType" = 'nonGrantee' and imported->>'nonGranteeActivity' = '';
Executing (795539db-7430-4782-9280-a924c34a0160): UPDATE "ActivityReports" SET "activityRecipientType" = 'other-entity' WHERE "activityRecipientType" = 'nonGrantee' and imported->>'nonGranteeActivity' != '';
Executing (795539db-7430-4782-9280-a924c34a0160): UPDATE "ActivityReports" SET "reason" = ARRAY_REPLACE("reason", 'New Grantee', 'New Recipient');
Executing (795539db-7430-4782-9280-a924c34a0160): UPDATE "ActivityReports" SET "requester" = 'regionalOffice' WHERE "requester" = 'Regional Office';
Executing (795539db-7430-4782-9280-a924c34a0160): UPDATE "ActivityReports" SET "requester" = 'recipient' WHERE "requester" = 'Grantee';
Executing (795539db-7430-4782-9280-a924c34a0160): UPDATE "ActivityReports" SET "requester" = 'recipient' WHERE "requester" = 'grantee';
Executing (795539db-7430-4782-9280-a924c34a0160): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'GrantGoals' AND c.table_schema = 'public'
Executing (795539db-7430-4782-9280-a924c34a0160): ALTER TABLE "GrantGoals" RENAME COLUMN "granteeId" TO "recipientId";
Executing (795539db-7430-4782-9280-a924c34a0160): ALTER TABLE "GrantGoals" RENAME CONSTRAINT "GrantGoals_granteeId_fkey" TO "GrantGoals_recipientId_fkey";
Executing (795539db-7430-4782-9280-a924c34a0160): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211202212104-convert-grantee-to-recipient: migrated (0.155s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211207214532-add_grant_state: migrating =======
Executing (default): ALTER TABLE "public"."Grants" ADD COLUMN "stateCode" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211207214532-add_grant_state: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220103142419-remove-grantee-record-flag: migrating =======
Executing (5f8ded70-f5ff-4159-85c2-c5f1c9f70be6): START TRANSACTION;
Connection validated successfully
Executing (5f8ded70-f5ff-4159-85c2-c5f1c9f70be6): UPDATE "Users" SET "flags"=$1
Executing (5f8ded70-f5ff-4159-85c2-c5f1c9f70be6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220103142419-remove-grantee-record-flag: migrated (0.123s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220111194358-add-goals-objective-flag: migrating =======
Executing (default): DO $$ BEGIN\n        ALTER TYPE "enum_Users_flags" ADD VALUE 'recipient_goals_objectives';\n      EXCEPTION\n        WHEN duplicate_object THEN null;\n      END $$;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220111194358-add-goals-objective-flag: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220114214532-add_grant_annual_funding_month: migrating =======
Executing (default): ALTER TABLE "public"."Grants" ADD COLUMN "annualFundingMonth" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220114214532-add_grant_annual_funding_month: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220115000000-audit-system: migrating =======
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): START TRANSACTION;
Connection validated successfully
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220115000000-audit-system.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): DO $$\n          BEGIN\n              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'dml_type') THEN\n                  CREATE TYPE dml_type AS ENUM ('INSERT', 'UPDATE', 'DELETE');\n              END IF;\n          END$$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE TABLE IF NOT EXISTS "ZADescriptor" ("id"   SERIAL , "descriptor" TEXT NOT NULL, PRIMARY KEY ("id"));
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFDescriptorToID"(_param_id text)\n          RETURNS INTEGER\n          LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              Did INTEGER;\n          BEGIN\n              IF _param_id IS NOT NULL THEN\n                  Did := id FROM "ZADescriptor" WHERE descriptor = _param_id;\n                  IF Did IS NULL THEN\n                      INSERT INTO "ZADescriptor" (descriptor) VALUES (_param_id);\n                      Did := id FROM "ZADescriptor" WHERE descriptor = _param_id;\n                  END IF;\n              END IF;\n              RAISE NOTICE 'DescriptorToID: % -> %', _param_id, Did;\n              RETURN Did;\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): DO $$\n          BEGIN\n            PERFORM "ZAFDescriptorToID"('ARCHIVE AUDIT LOG');\n          END;\n          $$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE TABLE IF NOT EXISTS "ZAFilter" ("id"   SERIAL , "tableName" VARCHAR(255), "columnName" VARCHAR(255) NOT NULL, PRIMARY KEY ("id"));
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): INSERT INTO "ZAFilter" ("tableName", "columnName")\n          VALUES ( NULL, 'updatedAt');
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFCreateALNoUpdate"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE FUNCTION %I()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                $body$\n                BEGIN\n                  RAISE EXCEPTION 'Update of %s is not supported to maintain audit log integrity.';\n                END;\n                $body$;$sql$,\n                'ZALNoUpdateF' || t_name,\n                'ZAL' || t_name);\n\n            EXECUTE format($sql$\n                CREATE TRIGGER %I\n                  BEFORE UPDATE ON %I\n                  FOR EACH ROW EXECUTE FUNCTION %I()$sql$,\n                'ZALNoUpdateT' || t_name,\n                'ZAL' || t_name,\n                'ZALNoUpdateF' || t_name);\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFCreateALNoDelete"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE FUNCTION %I()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                $body$\n                DECLARE\n                  CREATED_BY bigint;\n                  TRANSACTION_ID uuid;\n                  SESSION_SIG TEXT;\n                  DESCRIPTOR_ID int;\n                BEGIN\n                  CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true), '')::BIGINT, -1);\n\n                  TRANSACTION_ID := COALESCE(\n                      NULLIF(current_setting('audit.transactionId', true), '')::uuid,\n                      lpad(txid_current()::text,32, '0')::uuid);\n\n                  SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n                  DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                      NULLIF(current_setting('audit.auditDescriptor', true)::TEXT, ''));\n\n                  IF ( DESCRIPTOR_ID = "ZAFDescriptorToID"('ARCHIVE AUDIT LOG') ) THEN\n                    RAISE NOTICE 'Archive Data: %% by %%', %L, CREATED_BY;\n\n                    INSERT INTO "ZALDDL" (\n                      command_tag,\n                      object_type,\n                      schema_name,\n                      object_identity,\n                      ddl_timestamp,\n                      ddl_by,\n                      ddl_txid,\n                      session_sig,\n                      descriptor_id)\n                  VALUES (\n                      'ARCHIVE DATA'\n                      'AUDIT LOG TABLE',\n                      'ttasmarthub',\n                      %L,\n                      CURRENT_TIMESTAMP,\n                      CREATED_BY,\n                      TRANSACTION_ID,\n                      SESSION_SIG,\n                      DESCRIPTOR_ID);\n                  ELSE\n                    RAISE EXCEPTION 'Delete from %s is not supported to maintain audit log integrity.';\n                  END IF;\n                END;\n                $body$;$sql$,\n                'ZALNoDeleteF' || t_name,\n                'ZAL' || t_name,\n                'ZAL' || t_name,\n                'ZAL' || t_name);\n\n              EXECUTE format($sql$\n                  CREATE TRIGGER %I\n                    BEFORE DELETE ON %I\n                    FOR EACH ROW EXECUTE FUNCTION %I()$sql$,\n                  'ZALNoDeleteT' || t_name,\n                  'ZAL' || t_name,\n                  'ZALNoDeleteF' || t_name);\n            END\n            $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFCreateALNoTruncate"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE FUNCTION %I()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                $body$\n                BEGIN\n                    RAISE EXCEPTION 'Truncate on %s is not supported to maintain audit log integrity.';\n                END;\n                $body$;$sql$,\n                'ZALNoTruncateF' || t_name,\n                'ZAL' || t_name);\n\n            EXECUTE format($sql$\n                CREATE TRIGGER %I\n                  BEFORE TRUNCATE ON %I\n                  FOR EACH STATEMENT EXECUTE FUNCTION %I()$sql$,\n                'ZALNoTruncateT' || t_name,\n                'ZAL' || t_name,\n                'ZALNoTruncateF' || t_name);\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE TABLE IF NOT EXISTS "ZALDDL" ("id"   BIGSERIAL , "command_tag" VARCHAR(255), "object_type" VARCHAR(255), "schema_name" VARCHAR(255), "object_identity" VARCHAR(255), "ddl_timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "ddl_by" INTEGER DEFAULT NULL, "ddl_txid" UUID NOT NULL, "session_sig" TEXT DEFAULT NULL, "descriptor_id" INTEGER DEFAULT NULL, PRIMARY KEY ("id"));
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFAuditDDLCommand"()\n            RETURNS event_trigger\n            LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              CREATED_BY BIGINT;\n              TRANSACTION_ID UUID;\n              SESSION_SIG TEXT;\n              DESCRIPTOR_ID INT;\n              --is_superuser bool = false;\n              r RECORD;\n          BEGIN\n              --select u.rolsuper into is_superuser from pg_catalog.pg_roles u where u.rolname = SESSION_USER;\n              --if is_superuser then\n              --    return;\n              --end if;\n\n              CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true), '')::BIGINT, -1);\n\n              TRANSACTION_ID := COALESCE(\n                  NULLIF(current_setting('audit.transactionId', true), '')::uuid,\n                  lpad(txid_current()::text,32,'0')::uuid);\n\n              SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n              DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                  NULLIF(current_setting('audit.auditDescriptor', true)::TEXT, ''));\n\n              FOR r IN SELECT * FROM pg_event_trigger_ddl_commands() LOOP\n                INSERT INTO "ZALDDL" (\n                  command_tag,\n                  object_type,\n                  schema_name,\n                  object_identity,\n                  ddl_timestamp,\n                  ddl_by,\n                  ddl_txid,\n                  session_sig,\n                  descriptor_id)\n              VALUES (\n                  r.command_tag,\n                  r.object_type,\n                  r.schema_name,\n                  r.object_identity,\n                  CURRENT_TIMESTAMP,\n                  CREATED_BY,\n                  TRANSACTION_ID,\n                  SESSION_SIG,\n                  DESCRIPTOR_ID);\n              END LOOP;\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE EVENT TRIGGER "ZATAuditAlterCommands"\n          ON ddl_command_end\n          WHEN TAG IN ('ALTER FUNCTION', 'ALTER TABLE', 'ALTER TRIGGER', 'ALTER TYPE')\n          EXECUTE FUNCTION "ZAFAuditDDLCommand"();
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE EVENT TRIGGER "ZATAuditCreateCommands"\n          ON ddl_command_end\n          WHEN TAG IN ('CREATE FUNCTION', 'CREATE TABLE', 'CREATE TABLE AS', 'CREATE TRIGGER', 'CREATE TYPE', 'SELECT INTO')\n          EXECUTE FUNCTION "ZAFAuditDDLCommand"();
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE EVENT TRIGGER "ZATAuditDropCommands"\n          ON ddl_command_end\n          WHEN TAG IN ('DROP FUNCTION', 'DROP TABLE', 'DROP TRIGGER', 'DROP TYPE')\n          EXECUTE FUNCTION "ZAFAuditDDLCommand"();
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): SELECT\n            "ZAFCreateALNoUpdate"('DDL'),\n            "ZAFCreateALNoDelete"('DDL'),\n            "ZAFCreateALNoTruncate"('DDL');
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFCreateALTable"(t_name varchar(63))\n              RETURNS VOID\n              LANGUAGE plpgsql AS\n            $func$\n            BEGIN\n              RAISE NOTICE 'Create Audit Log Table: %','ZAL' || t_name;\n              EXECUTE format($sql$\n                  CREATE TABLE IF NOT EXISTS %I (\n                    id BIGSERIAL,\n                    data_id bigint NOT NULL,\n                    dml_type dml_type NOT NULL,\n                    old_row_data jsonb,\n                    new_row_data jsonb,\n                    dml_timestamp timestamp NOT NULL,\n                    dml_by int NOT NULL,\n                    dml_txid uuid NOT NULL,\n                    session_sig TEXT NULL,\n                    descriptor_id INT,\n                    PRIMARY KEY (id)\n                    );$sql$,\n                    'ZAL' || t_name);\n            END\n            $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFCreateALFunction"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE OR REPLACE FUNCTION %I ()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                  $body$\n                  DECLARE\n                      CREATED_BY bigint;\n                      TRANSACTION_ID uuid;\n                      SESSION_SIG TEXT;\n                      DESCRIPTOR_ID int;\n                      UNIQUE_OLD jsonb;\n                      UNIQUE_NEW jsonb;\n                      IS_LOGGABLE boolean;\n                  BEGIN\n                      CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true),'')::BIGINT, -1);\n\n                      TRANSACTION_ID := COALESCE(\n                          NULLIF(current_setting('audit.transactionId', true),'')::uuid,\n                          lpad(txid_current()::text,32,'0')::uuid);\n\n                      SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n                      DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                          NULLIF(current_setting('audit.auditDescriptor', true), '')::TEXT);\n\n                      IF (TG_OP = 'INSERT') THEN\n                          INSERT INTO %I (\n                              data_id,\n                              old_row_data,\n                              new_row_data,\n                              dml_type,\n                              dml_timestamp,\n                              dml_by,\n                              dml_txid,\n                              session_sig,\n                              descriptor_id\n                          )\n                          VALUES(\n                              NEW.id,\n                              null,\n                              to_jsonb(NEW),\n                              'INSERT',\n                              CURRENT_TIMESTAMP,\n                              CREATED_BY,\n                              TRANSACTION_ID,\n                              SESSION_SIG,\n                              DESCRIPTOR_ID\n                          );\n\n                          RETURN NEW;\n                      ELSIF (TG_OP = 'UPDATE') THEN\n                          SELECT\n                          json_object(array_agg(a."columnName"),array_agg(a.pre_value)) AS pre,\n                          json_object(array_agg(a."columnName"),array_agg(a.post_value)) AS post,\n                          (count(trigerable) - count(NULLIF(trigerable,TRUE)) > 0) AS loggable\n                          INTO\n                          UNIQUE_OLD,\n                          UNIQUE_NEW,\n                          IS_LOGGABLE\n                          FROM (\n                              SELECT\n                              pre.key AS "columnName",\n                              pre.value #>> '{}' AS pre_value,\n                              post.value #>> '{}' AS post_value,\n                              NOT COALESCE(filter."columnName" = filter."columnName",FALSE) as trigerable\n                              FROM jsonb_each(to_jsonb(OLD)) AS pre\n                              INNER JOIN jsonb_each(to_jsonb(NEW)) AS post\n                              ON pre.key = post.key\n                              AND pre.value IS DISTINCT FROM post.value\n                              LEFT JOIN "ZAFilter" filter\n                              ON pre.key = filter."columnName"\n                              and ( filter."tableName" = %L OR filter."tableName" IS NULL)\n                          ) a;\n\n                          IF IS_LOGGABLE THEN\n                          INSERT INTO %I (\n                              data_id,\n                              old_row_data,\n                              new_row_data,\n                              dml_type,\n                              dml_timestamp,\n                              dml_by,\n                              dml_txid,\n                              session_sig,\n                              descriptor_id\n                          )\n                          VALUES(\n                              NEW.id,\n                              UNIQUE_OLD,\n                              UNIQUE_NEW,\n                              'UPDATE',\n                              CURRENT_TIMESTAMP,\n                              CREATED_BY,\n                              TRANSACTION_ID,\n                              SESSION_SIG,\n                              DESCRIPTOR_ID\n                          );\n                          END IF;\n                          RETURN NEW;\n                      ELSIF (TG_OP = 'DELETE') THEN\n                      INSERT INTO %I (\n                          data_id,\n                          old_row_data,\n                          new_row_data,\n                          dml_type,\n                          dml_timestamp,\n                          dml_by,\n                          dml_txid,\n                          session_sig,\n                          descriptor_id\n                      )\n                      VALUES(\n                          OLD.id,\n                          to_jsonb(OLD),\n                          null,\n                          'DELETE',\n                          CURRENT_TIMESTAMP,\n                          CREATED_BY,\n                          TRANSACTION_ID,\n                          SESSION_SIG,\n                          DESCRIPTOR_ID\n                      );\n\n                      RETURN OLD;\n                      END IF;\n\n                  END;\n                  $body$;$sql$,\n                'ZALF' || t_name,\n                'ZAL' || t_name,\n                t_name,\n                'ZAL' || t_name,\n                'ZAL' || t_name);\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFCreateALTrigger"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE TRIGGER %I\n                  AFTER INSERT OR UPDATE OR DELETE ON %I\n                  FOR EACH ROW EXECUTE FUNCTION %I()$sql$,\n                'ZALT' || t_name,\n                t_name,\n                'ZALF' || t_name);\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFCreateAuditTruncateTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE FUNCTION %I()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                $body$\n                DECLARE\n                  CREATED_BY bigint;\n                  TRANSACTION_ID uuid;\n                  SESSION_SIG TEXT;\n                  DESCRIPTOR_ID int;\n                BEGIN\n                  CREATED_BY := COALESCE(current_setting('var.loggedUser', true)::BIGINT, -1);\n\n                  TRANSACTION_ID := COALESCE(\n                      current_setting('var.transactionId', true)::uuid,\n                      lpad(txid_current()::text,32,'0')::uuid);\n\n                  SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n                  DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                      NULLIF(current_setting('var.auditDescriptor', true)::TEXT, ''));\n\n                  RAISE NOTICE 'command_tag: %%','TRUNCATE';\n                  RAISE NOTICE 'object_type: %%','TABLE';\n                  RAISE NOTICE 'schema_name: %%','ttasmarthub';\n                  RAISE NOTICE 'object_identity: %%',%L;\n                  RAISE NOTICE 'ddl_timestamp: %%',CURRENT_TIMESTAMP;\n                  RAISE NOTICE 'ddl_by: %%',CREATED_BY;\n                  RAISE NOTICE 'ddl_txid: %%',TRANSACTION_ID;\n                  RAISE NOTICE 'descriptor_id: %%',DESCRIPTOR_ID;\n\n                  INSERT INTO "ZALDDL" (\n                    command_tag,\n                    object_type,\n                    schema_name,\n                    object_identity,\n                    ddl_timestamp,\n                    ddl_by,\n                    ddl_txid,\n                    session_sig,\n                    descriptor_id)\n                VALUES (\n                    'TRUNCATE'\n                    'TABLE',\n                    'ttasmarthub',\n                    %L,\n                    CURRENT_TIMESTAMP,\n                    CREATED_BY,\n                    TRANSACTION_ID,\n                    SESSION_SIG,\n                    DESCRIPTOR_ID);\n                END;\n                $body$;$sql$,\n                'ZALTruncateF' || t_name,\n                t_name,\n                t_name);\n\n            EXECUTE format($sql$\n                CREATE TRIGGER %I\n                  AFTER TRUNCATE ON %I\n                  FOR EACH STATEMENT EXECUTE FUNCTION %I()$sql$,\n                'ZALTruncateT' || t_name,\n                t_name,\n                'ZALTruncateF' || t_name);\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFAddAuditingOnTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            RAISE NOTICE 'Adding Auditing on %', t_name;\n            PERFORM "ZAFCreateALTable"(t_name);\n            PERFORM "ZAFCreateALFunction"(t_name);\n            PERFORM "ZAFCreateALTrigger"(t_name);\n            PERFORM "ZAFCreateAuditTruncateTable"(t_name);\n            PERFORM "ZAFCreateALNoUpdate"(t_name);\n            PERFORM "ZAFCreateALNoDelete"(t_name);\n            PERFORM "ZAFCreateALNoTruncate"(t_name);\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFAuditCreateTable"()\n            RETURNS event_trigger\n            LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              obj record;\n          BEGIN\n              FOR obj IN\n              SELECT *\n              FROM pg_event_trigger_ddl_commands()\n              LOOP\n                IF obj.command_tag = 'CREATE TABLE'\n                  AND obj.object_type = 'table'\n                  AND obj.schema_name = 'public'\n                  AND (parse_ident(obj.object_identity))[2] NOT LIKE 'ZAL%' THEN\n                      PERFORM "ZAFAddAuditingOnTable"((parse_ident(obj.object_identity))[2]);\n                  END IF;\n              END LOOP;\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE EVENT TRIGGER "ZATAuditCreateTable"\n            ON ddl_command_end\n            WHEN TAG IN ('SELECT INTO', 'CREATE TABLE', 'CREATE TABLE AS')\n            EXECUTE FUNCTION "ZAFAuditCreateTable"();
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): SELECT table_name, "ZAFAddAuditingOnTable"(table_name::varchar)\n          FROM information_schema.tables\n          WHERE table_schema='public'\n            AND table_type='BASE TABLE'\n            AND table_name != 'SequelizeMeta'\n            AND table_name != 'RequestErrors'\n            AND table_name NOT LIKE 'ZAL%';
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFRemoveAuditingOnTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                DROP TRIGGER IF EXISTS %I\n                  ON %I$sql$,\n                'ZALT' || t_name,\n                t_name);\n\n            EXECUTE format($sql$\n                DROP FUNCTION IF EXISTS %I()$sql$,\n                'ZALF' || t_name);\n\n            EXECUTE format($sql$\n                DROP TRIGGER IF EXISTS %I\n                  ON %I$sql$,\n                'ZALTruncateT' || t_name,\n                t_name);\n\n            EXECUTE format($sql$\n                DROP FUNCTION IF EXISTS %I()$sql$,\n                'ZALTruncateF' || t_name);\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFAuditDropTable"()\n            RETURNS event_trigger\n            LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              obj record;\n          BEGIN\n              FOR obj IN\n              SELECT *\n              FROM pg_event_trigger_dropped_objects()\n              LOOP\n                  IF obj.object_name NOT LIKE 'ZAL%' THEN\n                      PERFORM "ZAFRemoveAuditingOnTable"(obj.object_name);\n                  END IF;\n              END LOOP;\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE EVENT TRIGGER "ZATAuditDropTable"\n          ON sql_drop\n          WHEN TAG IN ('DROP TABLE')\n          EXECUTE FUNCTION "ZAFAuditDropTable"();
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): CREATE OR REPLACE FUNCTION "ZAFSetTriggerState"(\n                TABLENAME varchar,\n                TRIGGERTYPE varchar,\n                CURRENTSTATE varchar,\n                NEWSTATE varchar)\n            RETURNS void\n            LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              CREATED_BY bigint;\n              DESCRIPTOR TEXT;\n              DESCRIPTOR_ID int;\n              obj record;\n          BEGIN\n            CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true), '')::BIGINT, -1);\n\n            DESCRIPTOR := NULLIF(current_setting('audit.auditDescriptor', true)::TEXT, '');\n\n            DESCRIPTOR_ID := "ZAFDescriptorToID"(DESCRIPTOR);\n\n            IF ( DESCRIPTOR_ID is not null ) THEN\n              RAISE NOTICE 'Audit Trigger State: % changed from % to % by % for %',\n                COALESCE(TABLENAME, 'any table'),\n                COALESCE(CURRENTSTATE, 'any state'),\n                COALESCE(NEWSTATE, 'oppisite state'),\n                CREATED_BY,\n                DESCRIPTOR;\n              FOR obj IN\n              select\n                c.relname "tableName",\n                t.tgname "triggerName",\n                (m.mapping ->> 'current')::varchar "currentState",\n                (m.mapping ->> 'new')::varchar "newState",\n                (c.relname like 'ZAL%') "isAuditTable",\n                substring(t.tgname,length('ZAL')+1,length(t.tgname)-length(c.relname)-(length('ZAL')*(c.relname not like 'ZAL%')::int)) "triggerType"\n              from pg_trigger t\n              join pg_class c\n              on c.oid = t.tgrelid\n              join jsonb_array_elements(\n                '[\n                  {"from":"O","current":"ENABLE","new":"DISABLE"},\n                  {"from":"D","current":"DISABLE","new":"ENABLE"},\n                  {"from":"R","current":"ENABLE","new":"DISABLE"},\n                  {"from":"A","current":"ENABLE","new":"DISABLE"}\n                ]') m(mapping)\n              on t.tgenabled::char(1) = (m.mapping ->> 'from')::char(1)\n              where t.tgname like 'ZAL%'\n              and (COALESCE(c.relname like TABLENAME, false) or TABLENAME is null)\n              and (COALESCE((m.mapping ->> 'current')::varchar = upper(CURRENTSTATE), false) or CURRENTSTATE is null)\n              and (COALESCE((m.mapping ->> 'new')::varchar = upper(NEWSTATE), false) or NEWSTATE is null)\n              and (COALESCE(upper(CURRENTSTATE), 'NULL') != COALESCE(upper(NEWSTATE), 'NULL') or (CURRENTSTATE is null and NEWSTATE is null))\n              and (COALESCE(substring(t.tgname,length('ZAL')+1,length(t.tgname)-length(c.relname)-(length('ZAL')*(c.relname not like 'ZAL%')::int)) like TRIGGERTYPE, false) or TRIGGERTYPE is null)\n              order by  c.relname, t.tgname\n              LOOP\n                  RAISE NOTICE 'Audit Trigger State: % % on %', obj."triggerName", obj."newState", obj."tableName";\n                  execute format('ALTER TABLE %I %s TRIGGER %I', obj."tableName", obj."newState", obj."triggerName");\n              END LOOP;\n            ELSE\n              RAISE EXCEPTION 'Archive Trigger states can not be modified without providing a valid descriptor value.';\n            END IF;\n          END\n          $func$;
Executing (75feb1df-28dc-4c0e-8dbc-75f11b84caaa): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220115000000-audit-system: migrated (0.558s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220204151917-remove-old-manager: migrating =======
Executing (9065eadc-deae-4d42-b01b-91837ff3cd6f): START TRANSACTION;
Connection validated successfully
Executing (9065eadc-deae-4d42-b01b-91837ff3cd6f): ALTER TABLE "public"."ActivityReports" DROP COLUMN "oldManagerNotes";
Executing (9065eadc-deae-4d42-b01b-91837ff3cd6f): ALTER TABLE "public"."ActivityReports" DROP COLUMN "oldApprovingManagerId";
Executing (9065eadc-deae-4d42-b01b-91837ff3cd6f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220204151917-remove-old-manager: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220228110425-add-ar-creator-role: migrating =======
Executing (default): CREATE TYPE "public"."enum_ActivityReports_creatorRole" AS ENUM('Regional Program Manager', 'COR', 'Supervisory Program Specialist', 'Program Specialist', 'Grants Specialist', 'Central Office', 'TTAC', 'Admin. Assistant', 'Early Childhood Manager', 'Early Childhood Specialist', 'Family Engagement Specialist', 'Grantee Specialist Manager', 'Grantee Specialist', 'Health Specialist', 'System Specialist');ALTER TABLE "public"."ActivityReports" ADD COLUMN "creatorRole" "public"."enum_ActivityReports_creatorRole";
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220228110425-add-ar-creator-role: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220304152116-add-endDate-to-goals: migrating =======
Executing (9637577c-b155-43a4-a1ab-6796b9a0e7d8): START TRANSACTION;
Connection validated successfully
Executing (9637577c-b155-43a4-a1ab-6796b9a0e7d8): ALTER TABLE "public"."Goals" ADD COLUMN "endDate" DATE;
Executing (9637577c-b155-43a4-a1ab-6796b9a0e7d8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220304152116-add-endDate-to-goals: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220308082915-add-goal-close-suspend-reason: migrating =======
Executing (5a0f30f9-0d68-4a75-a168-bbeec9970c76): START TRANSACTION;
Connection validated successfully
Executing (5a0f30f9-0d68-4a75-a168-bbeec9970c76): CREATE TYPE "public"."enum_Goals_closeSuspendReason" AS ENUM('Duplicate goal', 'Recipient request', 'TTA complete', 'Key staff turnover', 'Recipient is not responding', 'Other');ALTER TABLE "public"."Goals" ADD COLUMN "closeSuspendReason" "public"."enum_Goals_closeSuspendReason";
Executing (5a0f30f9-0d68-4a75-a168-bbeec9970c76): ALTER TABLE "public"."Goals" ADD COLUMN "closeSuspendContext" TEXT;
Executing (5a0f30f9-0d68-4a75-a168-bbeec9970c76): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220308082915-add-goal-close-suspend-reason: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220308110425-fix-double-recipient: migrating =======
Executing (f0e3c761-727e-4581-97d1-d5fe4d14e131): START TRANSACTION;
Connection validated successfully
Executing (f0e3c761-727e-4581-97d1-d5fe4d14e131): UPDATE "Grants" SET "recipientId" = 7782 WHERE "id" = 9957;
Executing (f0e3c761-727e-4581-97d1-d5fe4d14e131): UPDATE "GrantGoals" SET "recipientId" = 7782 WHERE "id" = 9957;
Executing (f0e3c761-727e-4581-97d1-d5fe4d14e131): DELETE FROM "Recipients" WHERE "id" = 5;
Executing (f0e3c761-727e-4581-97d1-d5fe4d14e131): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220308110425-fix-double-recipient: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220311135140-update-topics-table: migrating =======
Executing (d082024b-b774-44dd-93ca-7beb61563496): START TRANSACTION;
Connection validated successfully
Executing (d082024b-b774-44dd-93ca-7beb61563496): DELETE FROM "Topics"
Executing (d082024b-b774-44dd-93ca-7beb61563496): INSERT INTO "Topics" ("name","createdAt","updatedAt") VALUES ('Behavioral / Mental Health / Trauma','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Child Assessment, Development, Screening','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('CLASS: Classroom Organization','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('CLASS: Emotional Support','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('CLASS: Instructional Support','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Coaching','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Communication','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Community and Self-Assessment','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Culture & Language','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Curriculum (Instructional or Parenting)','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Data and Evaluation','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('ERSEA','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Environmental Health and Safety / EPRR','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Equity','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Facilities','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Family Support Services','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Fiscal / Budget','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Five-Year Grant','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Home Visiting','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Human Resources','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Leadership / Governance','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Learning Environments','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Nutrition','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Oral Health','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Parent and Family Engagement','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Partnerships and Community Engagement','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Physical Health and Screenings','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Pregnancy Services / Expectant Families','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Program Planning and Services','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Quality Improvement Plan / QIP','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Recordkeeping and Reporting','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Safety Practices','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Staff Wellness','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Teaching Practices / Teacher-Child Interactions','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Technology and Information Systems','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Transition Practices','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00'),('Transportation','2025-03-28 21:03:19.740 +00:00','2025-03-28 21:03:19.740 +00:00');
Executing (d082024b-b774-44dd-93ca-7beb61563496): ALTER TABLE "public"."Topics" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (d082024b-b774-44dd-93ca-7beb61563496): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220311135140-update-topics-table: migrated (0.053s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220311155440-add-objective-topics: migrating =======
Executing (86a60189-f670-4c85-adc2-cfbaab735d68): START TRANSACTION;
Connection validated successfully
Executing (86a60189-f670-4c85-adc2-cfbaab735d68): CREATE TABLE IF NOT EXISTS "ObjectiveTopics" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (86a60189-f670-4c85-adc2-cfbaab735d68): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220311155440-add-objective-topics: migrated (0.053s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220311160359-add-resource-objectives: migrating =======
Executing (465c3a2d-1901-4e03-a1e4-cd168bae44c7): START TRANSACTION;
Connection validated successfully
Executing (465c3a2d-1901-4e03-a1e4-cd168bae44c7): CREATE TABLE IF NOT EXISTS "ObjectiveResources" ("id"   SERIAL , "userProvidedUrl" VARCHAR(255) NOT NULL, "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (465c3a2d-1901-4e03-a1e4-cd168bae44c7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220311160359-add-resource-objectives: migrated (0.041s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220324111512-update-goal-close-suspend-enum-values: migrating =======
Executing (default): ALTER TYPE "enum_Goals_closeSuspendReason" ADD VALUE 'Key staff turnover / vacancies';
Connection validated successfully
Executing (default): ALTER TYPE "enum_Goals_closeSuspendReason" ADD VALUE 'Regional Office request';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220324111512-update-goal-close-suspend-enum-values: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220328144415-add-previous-status-to-goals: migrating =======
Executing (9d6d5243-86ac-4160-97bb-df2d5e8b2160): START TRANSACTION;
Connection validated successfully
Executing (9d6d5243-86ac-4160-97bb-df2d5e8b2160): ALTER TABLE "public"."Goals" ADD COLUMN "previousStatus" TEXT;
Executing (9d6d5243-86ac-4160-97bb-df2d5e8b2160): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220328144415-add-previous-status-to-goals: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220424000000-restore-topicgoals: migrating =======
Executing (ad9e055a-4f6f-4142-92e8-a42112640c73): START TRANSACTION;
Connection validated successfully
Executing (ad9e055a-4f6f-4142-92e8-a42112640c73): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220424000000-restore-topicgoals.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ad9e055a-4f6f-4142-92e8-a42112640c73): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (ad9e055a-4f6f-4142-92e8-a42112640c73): ALTER TABLE "public"."Topics" ADD COLUMN "mapsTo" INTEGER;
Executing (ad9e055a-4f6f-4142-92e8-a42112640c73): DO $$\n          ------------------------------------------------------------------------------------\n          BEGIN\n            DROP TABLE IF EXISTS "__temp_TopicGoals";\n            CREATE TEMP TABLE "__temp_TopicGoals" (\n              id integer NOT NULL,\n              "topicId" integer NOT NULL,\n              "goalId" integer NOT NULL,\n              "createdAt" timestamp with time zone NOT NULL,\n              "updatedAt" timestamp with time zone NOT NULL\n            );\n            ------------------------------------------------------------------------------------\n            ALTER TABLE "Topics"\n            DROP CONSTRAINT "Topics_name_key";\n            ------------------------------------------------------------------------------------\n            ALTER TABLE "Topics"\n            ADD CONSTRAINT "Topics_name_key" UNIQUE (name, "deletedAt", "mapsTo");\n            ------------------------------------------------------------------------------------\n          END$$;
Executing (ad9e055a-4f6f-4142-92e8-a42112640c73): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (ad9e055a-4f6f-4142-92e8-a42112640c73): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220424000000-restore-topicgoals: migrated (0.100s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220425000000-goal-templates: migrating =======
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): START TRANSACTION;
Connection validated successfully
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220425000000-goal-templates.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ActivityReportGoals" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_DisconnectedGoals_closeSuspendReason' GROUP BY 1
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TYPE "public"."enum_DisconnectedGoals_closeSuspendReason" AS ENUM('Duplicate goal', 'Recipient request', 'TTA complete', 'Key staff turnover / vacancies', 'Recipient is not responding', 'Regional Office request');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "DisconnectedGoals" ("id"   SERIAL , "name" TEXT NOT NULL, "status" VARCHAR(255), "timeframe" VARCHAR(255), "isFromSmartsheetTtaPlan" BOOLEAN, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "closeSuspendReason" "public"."enum_DisconnectedGoals_closeSuspendReason", "closeSuspendContext" TEXT, "endDate" TIMESTAMP WITH TIME ZONE, "previousStatus" VARCHAR(255), PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_GoalTemplates_creationMethod' GROUP BY 1
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TYPE "public"."enum_GoalTemplates_creationMethod" AS ENUM('Automatic', 'Curated');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "GoalTemplates" ("id"   SERIAL , "hash" TEXT NOT NULL, "templateName" TEXT NOT NULL, "regionId" INTEGER REFERENCES "Regions" ("id"), "creationMethod" "public"."enum_GoalTemplates_creationMethod" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "lastUsed" TIMESTAMP WITH TIME ZONE, "templateNameModifiedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceGoals" INTEGER[] NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ObjectiveTemplates_creationMethod' GROUP BY 1
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TYPE "public"."enum_ObjectiveTemplates_creationMethod" AS ENUM('Automatic', 'Curated');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ObjectiveTemplates" ("id"   SERIAL , "hash" TEXT NOT NULL, "templateTitle" TEXT NOT NULL, "regionId" INTEGER REFERENCES "Regions" ("id"), "creationMethod" "public"."enum_ObjectiveTemplates_creationMethod" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "lastUsed" TIMESTAMP WITH TIME ZONE, "templateTitleModifiedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceObjectives" INTEGER[] NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ObjectiveTemplateResources" ("id"   SERIAL , "userProvidedUrl" VARCHAR(255) NOT NULL, "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ObjectiveTemplateTopics" ("id"   SERIAL , "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "GoalTemplateObjectiveTemplates" ("id"   SERIAL , "goalTemplateId" INTEGER NOT NULL REFERENCES "GoalTemplates" ("id"), "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ObjectiveRoles" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ObjectiveTemplateRoles" ("id"   SERIAL , "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Roles" ADD COLUMN "isSpecialist" BOOLEAN;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Roles" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Roles" ADD COLUMN "mapsTo" INTEGER;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): DO $$\n          BEGIN\n            CREATE TEMP TABLE "TempRoles" AS\n            SELECT\n              MIN(r."id") "id",\n              r.name,\n              r."fullName",\n              MIN(r."createdAt") "createdAt",\n              MAX(r."updatedAt") "updatedAt",\n              MAX(r."deletedAt") "deletedAt",\n              r."isSpecialist",\n              r."mapsTo"\n            FROM "Roles" r\n            GROUP BY  r.name, r."fullName", r."isSpecialist", r."mapsTo"\n            ORDER BY  r.name, r."fullName", r."isSpecialist", r."mapsTo";\n            ------------------------------------------------------------------------------------\n            TRUNCATE TABLE\n              "Roles",\n              "RoleTopics",\n              "ObjectiveRoles",\n              "ObjectiveTemplateRoles"\n            RESTART IDENTITY;\n            ------------------------------------------------------------------------------------\n            INSERT INTO "Roles" (\n              "id",\n              "name",\n              "fullName",\n              "createdAt",\n              "updatedAt",\n              "deletedAt",\n              "isSpecialist",\n              "mapsTo"\n            )\n            SELECT\n              "id",\n              "name",\n              "fullName",\n              "createdAt",\n              "updatedAt",\n              "deletedAt",\n              "isSpecialist",\n              "mapsTo"\n            FROM "TempRoles";\n\n            PERFORM SETVAL('"Roles_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "Roles"), 1), false);\n            ------------------------------------------------------------------------------------\n            UPDATE "Roles"\n            SET "isSpecialist" = true\n            WHERE "fullName" in (\n              'Family Engagement Specialist',\n              'Health Specialist',\n              'Early Childhood Specialist',\n              'System Specialist',\n              'Grantee Specialist',\n              'Grants Specialist'\n            );\n            ------------------------------------------------------------------------------------\n            UPDATE "Roles"\n            SET "isSpecialist" = false\n            WHERE "isSpecialist" IS NULL;\n            ------------------------------------------------------------------------------------\n            ALTER TABLE "Roles"\n            ALTER COLUMN "isSpecialist"\n            SET NOT NULL;\n            ------------------------------------------------------------------------------------\n            UPDATE ONLY "Roles" r1\n            SET\n              "deletedAt" = NOW(),\n              "mapsTo" = r2.id\n            FROM "Roles" r2\n            WHERE r1."fullName" = 'Grants Specialist'\n            AND r2."fullName" = 'Grantee Specialist';\n            ------------------------------------------------------------------------------------\n            DROP TABLE "TempRoles";\n          END$$;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "goalTemplateId" INTEGER REFERENCES "GoalTemplates" ("id") ON UPDATE CASCADE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "grantId" INTEGER REFERENCES "Grants" ("id") ON UPDATE CASCADE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "onApprovedAR" BOOLEAN;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): DO $$\n          BEGIN\n          ------------------------------------------------------------------------------------\n          UPDATE ONLY "Goals"\n          SET "onApprovedAR" = false\n          WHERE "onApprovedAR" IS NULL;\n          ------------------------------------------------------------------------------------\n          ALTER TABLE "Goals"\n          ALTER COLUMN "onApprovedAR"\n          SET NOT NULL;\n          ------------------------------------------------------------------------------------\n          END$$;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "objectiveTemplateId" INTEGER REFERENCES "ObjectiveTemplates" ("id") ON UPDATE CASCADE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "otherEntityId" INTEGER REFERENCES "OtherEntities" ("id") ON UPDATE CASCADE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "onApprovedAR" BOOLEAN;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): DO $$\n          BEGIN\n          ------------------------------------------------------------------------------------\n          UPDATE ONLY "Objectives"\n          SET "onApprovedAR" = false\n          WHERE "onApprovedAR" IS NULL;\n          ------------------------------------------------------------------------------------\n          ALTER TABLE "Objectives"\n          ALTER COLUMN "onApprovedAR"\n          SET NOT NULL;\n          ------------------------------------------------------------------------------------\n          END$$;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "ttaProvided" TEXT;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): INSERT INTO "ObjectiveTopics" ("objectiveId", "topicId", "createdAt", "updatedAt")\n          SELECT\n              gtart."objectiveId",\n              gtart."topicId",\n              MIN(gtart."createdAt") "createdAt",\n              MAX(gtart."updatedAt") "updatedAt"\n          FROM (\n              SELECT\n                  o.id "objectiveId",\n                  tg."topicId",\n                  MIN(tg."createdAt") "createdAt",\n                  MAX(tg."updatedAt") "updatedAt"\n              FROM "Objectives" o\n              JOIN "TopicGoals" tg\n              on o."goalId" = tg."goalId"\n              LEFT JOIN "ObjectiveTopics" ot\n              ON o.id = ot."objectiveId"\n              WHERE ot.id is null\n              GROUP BY\n                  o.id,\n                  tg."topicId"\n              UNION\n              SELECT\n                  art."objectiveId",\n                  t.id "topicId",\n                  MIN(art."createdAt") "createdAt",\n                  MAX(art."updatedAt") "updatedAt"\n              FROM (\n                  SELECT\n                      aro."objectiveId",\n                      UNNEST(ar.topics) topic,\n                      MIN(ar."createdAt") "createdAt",\n                      MAX(ar."updatedAt") "updatedAt"\n                  FROM "ActivityReports" ar\n                  JOIN "ActivityReportObjectives" aro\n                  ON ar.id = aro."activityReportId"\n                  GROUP BY\n                      aro."objectiveId",\n                      UNNEST(ar.topics)\n                  ) art\n              LEFT JOIN "Topics" t\n              ON art.topic = t.name\n              AND t."deletedAt" is null\n              LEFT JOIN "ObjectiveTopics" ot\n              ON art."objectiveId" = ot."objectiveId"\n              AND t.id = ot."topicId"\n              WHERE ot.id IS null\n              AND  t.id IS NOT null\n              GROUP BY\n                  art."objectiveId",\n                  t.id\n              ) gtart\n          GROUP BY\n              gtart."objectiveId",\n              gtart."topicId";
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): DROP TABLE IF EXISTS "TopicGoals";
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): DO $$\n          BEGIN\n            -- 1. create a unified temptable to match all goals to grants: __all_distinct_grants_goals\n            CREATE TEMP TABLE "__all_distinct_grants_goals" AS\n            WITH\n              all_grants as (\n                SELECT\n                  "gr"."id" "grantId",\n                  gr.status,\n                  gr."regionId",\n                  g.id "goalId"\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                JOIN "ActivityRecipients" arp\n                ON aro."activityReportId" = arp."activityReportId"\n                JOIN "Grants" gr\n                ON arp."grantId" = gr.id\n                UNION\n                SELECT\n                  "gr"."id" "grantId",\n                  gr.status,\n                  gr."regionId",\n                  g.id "goalId"\n                FROM "Goals" g\n                JOIN "GrantGoals" gg\n                ON g.id = gg."goalId"\n                JOIN "Grants" gr\n                ON gg."grantId" = gr.id\n              )\n              SELECT DISTINCT *\n              FROM all_grants;\n            ------------------------------------------------------------------------------------\n            -- 2. Populate GoalTemplates\n            INSERT INTO "GoalTemplates" (\n              "hash",\n              "templateName",\n              "regionId",\n              "creationMethod",\n              "createdAt",\n              "updatedAt",\n              "lastUsed",\n              "templateNameModifiedAt",\n              "sourceGoals")\n            SELECT DISTINCT\n              md5(NULLIF(TRIM(g.name),'')) "hash",\n              TRIM(g.name) "name",\n              adg."regionId",\n              'Automatic'::"enum_GoalTemplates_creationMethod",\n              min(g."createdAt") "createdAt",\n              NOW() "updatedAt",\n              max(g."createdAt") "lastUsed",\n              NOW() "templateNameModifiedAt",\n              array_agg(DISTINCT g.id) "sourceGoals"\n            FROM "Goals" g\n            JOIN "__all_distinct_grants_goals" adg\n            ON g.id = adg."goalId"\n            WHERE adg."regionId" IS NOT NULL\n            AND NULLIF(TRIM(g.name),'') IS NOT NULL\n            GROUP BY\n              md5(NULLIF(TRIM(g.name),'')),\n              TRIM(g.name),\n              adg."regionId";\n            ------------------------------------------------------------------------------------\n            -- 3. Populate DisconnectedGoals with the goals that do not link to any grants\n            INSERT INTO "DisconnectedGoals" (\n              "name",\n              "status",\n              "timeframe",\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "endDate",\n              "previousStatus")\n            SELECT DISTINCT\n              g."name",\n              g."status",\n              g."timeframe",\n              g."isFromSmartsheetTtaPlan",\n              g."createdAt",\n              g."updatedAt",\n              ("g"."closeSuspendReason"::TEXT)::"enum_DisconnectedGoals_closeSuspendReason",\n              g."closeSuspendContext",\n              g."endDate",\n              g."previousStatus"\n            FROM "Goals" g\n            LEFT JOIN "__all_distinct_grants_goals" adg\n            ON g.id = adg."goalId"\n            WHERE adg."goalId" is null;\n            ------------------------------------------------------------------------------------\n            -- 4. Populate ObjectiveTemplates\n            INSERT INTO "ObjectiveTemplates" (\n              "hash",\n              "templateTitle",\n              "regionId",\n              "creationMethod",\n              "createdAt",\n              "updatedAt",\n              "lastUsed",\n              "templateTitleModifiedAt",\n              "sourceObjectives")\n            SELECT DISTINCT\n              md5(nullif(TRIM(o.title),'')),\n              TRIM(o.title),\n              ar."regionId" "regionId",\n              'Automatic'::"enum_ObjectiveTemplates_creationMethod",\n              min(o."createdAt") "createdAt",\n                NOW() "updatedAt",\n                max(o."createdAt") "lastUsed",\n                NOW() "templateNameModifiedAt",\n              array_agg(DISTINCT o.id) "sourceObjectives"\n            FROM "Objectives" o\n            LEFT JOIN "ActivityReportObjectives" aro\n            ON o."id" = aro."objectiveId"\n            LEFT JOIN "ActivityReports" ar\n            ON aro."activityReportId" = ar."id"\n            WHERE NULLIF(TRIM(o.title),'') IS NOT NULL\n            GROUP BY\n              md5(nullif(TRIM(o.title),'')),\n              TRIM(o.title),\n              ar."regionId";\n            ------------------------------------------------------------------------------------\n            -- 5. Populate ObjectiveTemplateTopics\n            INSERT INTO "ObjectiveTemplateTopics" (\n              "objectiveTemplateId",\n              "topicId",\n              "createdAt",\n              "updatedAt")\n            SELECT DISTINCT\n              o.id,\n              ot."topicId",\n              MIN(ot."createdAt"),\n              MAX(ot."updatedAt")\n            FROM "ObjectiveTemplates" o\n            JOIN "ObjectiveTopics" ot\n            ON ot."objectiveId" = any (o."sourceObjectives"::int[])\n            GROUP BY\n              o.id,\n              ot."topicId";\n            ------------------------------------------------------------------------------------\n            -- 6. Populate ObjectiveTemplateResources\n            INSERT INTO "ObjectiveTemplateResources" (\n              "objectiveTemplateId",\n              "userProvidedUrl",\n              "createdAt",\n              "updatedAt")\n            SELECT DISTINCT\n              ot.id,\n              "or"."userProvidedUrl",\n              MIN("or"."createdAt"),\n              MAX("or"."updatedAt")\n            FROM "ObjectiveTemplates" ot\n            JOIN "ObjectiveResources" "or"\n            ON "or"."objectiveId" = any (ot."sourceObjectives"::int[])\n            GROUP BY\n              ot.id,\n              "or"."userProvidedUrl";\n            ------------------------------------------------------------------------------------\n            -- 7. Populate discrete temp goals per grant, deduplicated and split into progressions\n            CREATE TEMP TABLE "__temp_goals"\n            (\n                "id" serial,\n                "grantId" integer,\n                "name" text COLLATE pg_catalog."default",\n                "status" character varying(255) COLLATE pg_catalog."default",\n                "timeframe" text COLLATE pg_catalog."default",\n                "isFromSmartsheetTtaPlan" boolean,\n                "createdAt" timestamp with time zone NOT NULL,\n                "updatedAt" timestamp with time zone NOT NULL,\n                "closeSuspendReason" "enum_Goals_closeSuspendReason",\n                "closeSuspendContext" text COLLATE pg_catalog."default",\n                "goalTemplateId" integer,\n                "onApprovedAR" boolean,\n                "originalGoalIds" integer[]\n            );\n\n            WITH\n              goal_data AS (\n                SELECT DISTINCT\n                  adg."grantId",\n                  "g"."id",\n                  "g"."name",\n                  NULLIF(TRIM("g"."status"),'') "status",\n                  "g"."timeframe",\n                  "g"."isFromSmartsheetTtaPlan",\n                  "g"."createdAt",\n                  "g"."updatedAt",\n                  "g"."closeSuspendReason",\n                  "g"."closeSuspendContext",\n                  adg.status AS grstatus,\n                  MD5(trim(g.name)) AS gname_md5,\n                  CASE COALESCE(NULLIF(TRIM(g.status),''),'')\n                    WHEN 'Draft' THEN 0\n                    WHEN 'Not Started' THEN 1\n                    WHEN 'In Progress' THEN 2\n                    WHEN 'Completed' THEN 4\n                    WHEN 'Closed' THEN 4\n                    WHEN 'Ceased/Suspended' THEN 3\n                    ELSE -1\n                  END AS gstatus_num,\n                  adg."regionId"\n                FROM "Goals" g\n                JOIN "__all_distinct_grants_goals" adg\n                ON g."id" = adg."goalId"\n              ),\n              orderable_goals AS (\n                SELECT\n                  *,\n                  ROW_NUMBER() OVER (PARTITION BY "grantId", "gname_md5" ORDER BY "updatedAt" ASC, "gstatus_num" ASC) AS "stableOrder"\n                FROM goal_data\n              ),\n              flagged_goals AS (\n                SELECT\n                  *,\n                  CASE\n                    WHEN\n                      (LEAD("gstatus_num") OVER (PARTITION BY "grantId", "gname_md5" ORDER BY "stableOrder")) < "gstatus_num"\n                      OR\n                      (LEAD("gstatus_num") OVER (PARTITION BY "grantId", "gname_md5" ORDER BY "stableOrder")) IS NULL\n                    THEN 1\n                    ELSE 0\n                  END AS "retain_flag"\n                FROM orderable_goals\n              ),\n              goal_progressions as (\n                SELECT\n                  *,\n                  "grantId" || '-' || "gname_md5" || '-' || SUM("retain_flag") OVER (PARTITION BY "grantId", "gname_md5" ORDER BY "stableOrder" DESC ROWS UNBOUNDED PRECEDING) AS "progression_id"\n                FROM flagged_goals\n                ORDER BY "grantId", "gname_md5", "stableOrder"\n              ),\n              goal_merges as (\n                SELECT\n                  gpa."grantId",\n                  gpa.id "primaryId",\n                  gpb.id "subId"\n                FROM goal_progressions gpa\n                LEFT JOIN goal_progressions gpb\n                ON gpa."grantId" = gpb."grantId"\n                AND gpa."progression_id" = gpb."progression_id"\n                AND gpa."retain_flag" = 1\n                AND gpb."retain_flag" = 0\n              ),\n              approved_goals as (\n                SELECT distinct\n                  g.id "goalId",\n                  bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                JOIN "ActivityReportObjectives" aro\n                ON o."id" = aro."objectiveId"\n                JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar."id"\n                group by g.id\n                order by g.id\n              )\n              INSERT INTO "__temp_goals" (\n                "grantId",\n                "name",\n                "status",\n                "timeframe",\n                "isFromSmartsheetTtaPlan",\n                "createdAt",\n                "updatedAt",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "goalTemplateId",\n                "onApprovedAR",\n                "originalGoalIds"\n              )\n              SELECT\n                gda."grantId",\n                gda."name",\n                (array_agg(NULLIF(TRIM(gda."status"),'') order by gda.gstatus_num desc))[1] "status",\n                (array_remove(array_agg(gdb."timeframe" order by gdb."updatedAt"),NULL))[1] "timeframe",\n                SUM(COALESCE(gdb."isFromSmartsheetTtaPlan",false)::int) > 0 "isFromSmartsheetTtaPlan",\n                MIN(gdb."createdAt") "createdAt",\n                MAX(gdb."updatedAt") "updatedAt",\n                (array_remove(array_agg(gdb."closeSuspendReason" order by gdb."updatedAt"),NULL))[1] "closeSuspendReason",\n                (array_remove(array_agg(gdb."closeSuspendContext" order by gdb."updatedAt"),NULL))[1] "closeSuspendContext",\n                gt.id "goalTemplateId",\n                COALESCE(bool_or(ag."onApprovedAR"),false) "onApprovedAR",\n                array_agg(gdb."id") "originalGoalIds"\n              FROM goal_data gda\n              JOIN goal_merges gm\n              ON gda."grantId" = gm."grantId"\n              and gda."id" = gm."primaryId"\n              LEFT JOIN goal_data gdb\n              ON gdb."grantId" = gm."grantId"\n              AND (gdb."id" = gm."primaryId"\n                OR gdb."id" = gm."subId")\n              JOIN "GoalTemplates" gt\n              ON gda.id = any (gt."sourceGoals"::int[])\n              AND gda."regionId" = gt."regionId"\n              LEFT JOIN approved_goals ag\n              ON gdb."id" = ag."goalId"\n              GROUP BY\n                gda."grantId",\n                gda."name",\n                gt.id\n              order by\n                MIN(gdb."createdAt"),\n                gda."grantId";\n            ------------------------------------------------------------------------------------\n            -- 8. Populate discrete temp objectives per goal per grant or other entity, deduplicated and\n            --    split into progressions\n            CREATE TEMP TABLE "__temp_objectives"\n            (\n                "id" serial,\n                "otherEntityId" integer,\n                "goalId" integer,\n                "title" text COLLATE pg_catalog."default",\n                "status" character varying(255) COLLATE pg_catalog."default",\n                "createdAt" timestamp with time zone NOT NULL DEFAULT now(),\n                "updatedAt" timestamp with time zone NOT NULL DEFAULT now(),\n                "objectiveTemplateId" integer,\n                "onApprovedAR" boolean,\n                "originalObjectiveIds" integer[]\n            );\n\n            WITH\n              otherentity_objectives AS (\n                SELECT DISTINCT\n                  oe.id "otherEntityId",\n                  aro."objectiveId",\n                  a."regionId"\n                FROM "OtherEntities" oe\n                JOIN "ActivityRecipients" ar\n                ON oe.id = ar."otherEntityId"\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n                JOIN "ActivityReportObjectives" aro\n                ON ar."activityReportId" = aro."activityReportId"\n                order by oe.id, aro."objectiveId"\n              ),\n              objective_otherentity_data AS (\n                SELECT DISTINCT\n                  oo."otherEntityId",\n                  "o"."id",\n                  "o"."title",\n                  "o"."status",\n                  "o"."createdAt",\n                  "o"."updatedAt",\n                  MD5(trim(o.title)) AS otitle_md5,\n                  CASE COALESCE(o.status,'')\n                    WHEN 'Draft' THEN 0\n                    WHEN 'Not Started' THEN 1\n                    WHEN 'In Progress' THEN 2\n                    WHEN 'Complete' THEN 4\n                    WHEN 'Suspended' THEN 3\n                    ELSE -1\n                  END AS ostatus_num,\n                  oo."regionId"\n                FROM "Objectives" o\n                JOIN "otherentity_objectives" oo\n                ON o."id" = oo."objectiveId"\n                WHERE "o"."title" IS NOT null\n              ),\n              objective_goal_data AS (\n                SELECT DISTINCT\n                  tg."id" "goalId",\n                  "o"."id",\n                  "o"."title",\n                  "o"."status",\n                  "o"."createdAt",\n                  "o"."updatedAt",\n                  MD5(trim(o.title)) AS otitle_md5,\n                  CASE COALESCE(o.status,'')\n                    WHEN 'Draft' THEN 0\n                    WHEN 'Not Started' THEN 1\n                    WHEN 'In Progress' THEN 2\n                    WHEN 'Complete' THEN 4\n                    WHEN 'Suspended' THEN 3\n                    ELSE -1\n                  END AS ostatus_num,\n                  gr."regionId"\n                FROM "Objectives" o\n                JOIN "__temp_goals" tg\n                ON o."goalId" = any (tg."originalGoalIds"::int[])\n                JOIN "Grants" gr\n                ON tg."grantId" = gr.id\n              ),\n              objective_data AS (\n                SELECT\n                  ood."otherEntityId",\n                  null "goalId",\n                  ood."id",\n                  ood."title",\n                  ood."status",\n                  ood."createdAt",\n                  ood."updatedAt",\n                  ood.otitle_md5,\n                  ood.ostatus_num,\n                  ood."regionId"\n                FROM objective_otherentity_data ood\n                UNION\n                SELECT\n                  null "otherEntityId",\n                  ogd."goalId",\n                  ogd."id",\n                  ogd."title",\n                  ogd."status",\n                  ogd."createdAt",\n                  ogd."updatedAt",\n                  ogd.otitle_md5,\n                  ogd.ostatus_num,\n                  ogd."regionId"\n                FROM objective_goal_data ogd\n              ),\n              orderable_objectives AS (\n                SELECT\n                  *,\n                  ROW_NUMBER() OVER (PARTITION BY "otherEntityId", "goalId", "otitle_md5" ORDER BY "updatedAt" ASC, ostatus_num ASC) AS "stableOrder"\n                FROM objective_data\n              ),\n              flagged_objectives AS (\n                SELECT\n                  *,\n                  CASE\n                    WHEN\n                      (LEAD("ostatus_num") OVER (PARTITION BY "otherEntityId", "goalId", "otitle_md5" ORDER BY "stableOrder")) < "ostatus_num"\n                      OR\n                      (LEAD("ostatus_num") OVER (PARTITION BY "otherEntityId", "goalId", "otitle_md5" ORDER BY "stableOrder")) IS NULL\n                    THEN 1\n                    ELSE 0\n                  END AS "retain_flag"\n                FROM orderable_objectives\n              ),\n              objective_progressions as (\n                SELECT\n                  *,\n                  "otherEntityId" || '-' || "goalId" || '-' || "otitle_md5" || '-' || SUM("retain_flag") OVER (PARTITION BY "otherEntityId", "goalId", "otitle_md5" ORDER BY "stableOrder" DESC ROWS UNBOUNDED PRECEDING) AS "progression_id"\n                FROM flagged_objectives\n                ORDER BY "otherEntityId", "goalId", "otitle_md5", "stableOrder"\n              ),\n              objective_merges as (\n                SELECT\n                  opa."otherEntityId",\n                  opa."goalId",\n                  opa.id "primaryId",\n                  opb.id "subId"\n                FROM objective_progressions opa\n                LEFT JOIN objective_progressions opb\n                ON COALESCE(opa."otherEntityId",-1) = COALESCE(opa."otherEntityId",-1)\n                AND COALESCE(opa."goalId",-1) = COALESCE(opb."goalId",-1)\n                AND opa."progression_id" = opb."progression_id"\n                AND opa."retain_flag" = 1\n                AND opb."retain_flag" = 0\n              ),\n              approved_objectives as (\n                SELECT distinct\n                  o.id "objectiveId",\n                  bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n                FROM "Objectives" o\n                LEFT JOIN "ActivityReportObjectives" aro\n                ON o."id" = aro."objectiveId"\n                LEFT JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar."id"\n                group by o.id\n                order by o.id\n              )\n              INSERT INTO "__temp_objectives" (\n                "otherEntityId",\n                "goalId",\n                "title",\n                "status",\n                "createdAt",\n                "updatedAt",\n                "objectiveTemplateId",\n                "onApprovedAR",\n                "originalObjectiveIds"\n              )\n              SELECT\n                oda."otherEntityId",\n                oda."goalId",\n                oda."title",\n                (array_agg(oda."status" order by oda.ostatus_num desc))[1] "status",\n                MIN(odb."createdAt") "createdAt",\n                MAX(odb."updatedAt") "updatedAt",\n                ot.id "objectiveTemplateId",\n                COALESCE(bool_or(ao."onApprovedAR"),false) "onApprovedAR",\n                array_agg(odb."id") "originalObjectiveIds"\n              FROM objective_data oda\n              LEFT JOIN objective_merges om\n              ON COALESCE(oda."otherEntityId",-1) = COALESCE(om."otherEntityId",-1)\n              AND COALESCE(oda."goalId",-1) = COALESCE(om."goalId",-1)\n              AND oda."id" = om."primaryId"\n              LEFT JOIN objective_data odb\n              ON COALESCE(odb."otherEntityId",-1) = COALESCE(om."otherEntityId",-1)\n              AND COALESCE(odb."goalId",-1) = COALESCE(om."goalId",-1)\n              AND (odb."id" = om."primaryId"\n                OR odb."id" = om."subId")\n              JOIN "ObjectiveTemplates" ot\n              ON oda.id = any (ot."sourceObjectives"::int[])\n              AND oda."regionId" = ot."regionId"\n              LEFT JOIN approved_objectives ao\n              ON odb.id = ao."objectiveId"\n              GROUP BY\n                oda."otherEntityId",\n                oda."goalId",\n                oda."title",\n                ot.id\n              order by\n                MIN(odb."createdAt"),\n                oda."otherEntityId",\n                oda."goalId";\n            ------------------------------------------------------------------------------------\n            -- 9. Populate  temp objectives topics\n            CREATE TEMP TABLE "__temp_objectives_topics"\n            (\n                "id" serial,\n                "objectiveId" integer NOT NULL,\n                "topicId" integer NOT NULL,\n                "createdAt" timestamp with time zone NOT NULL,\n                "updatedAt" timestamp with time zone NOT NULL\n            );\n\n            INSERT INTO "__temp_objectives_topics" (\n              "objectiveId",\n              "topicId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "o"."id" "objectiveId",\n              "oto"."topicId",\n              MIN("oto"."createdAt"),\n              MAX("oto"."updatedAt")\n            FROM "ObjectiveTopics" "oto"\n            JOIN "__temp_objectives" "o"\n            ON "oto"."id" = any (o."originalObjectiveIds"::int[])\n            GROUP BY\n              "o"."id",\n              "oto"."topicId";\n            ------------------------------------------------------------------------------------\n            -- 10. Populate  temp objectives resources\n            CREATE TEMP TABLE "__temp_objectives_resources"\n            (\n                "id" serial,\n                "userProvidedUrl" character varying(255) COLLATE pg_catalog."default" NOT NULL,\n                "objectiveId" integer NOT NULL,\n                "createdAt" timestamp with time zone NOT NULL,\n                "updatedAt" timestamp with time zone NOT NULL\n            );\n\n            INSERT INTO "__temp_objectives_resources" (\n              "userProvidedUrl",\n              "objectiveId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "ore"."userProvidedUrl",\n              "o"."id" "objectiveId",\n              MIN("ore"."createdAt"),\n              MAX("ore"."updatedAt")\n            FROM "ObjectiveResources" "ore"\n            JOIN "__temp_objectives" "o"\n            ON "ore"."id" = any (o."originalObjectiveIds"::int[])\n            GROUP BY\n              "ore"."userProvidedUrl",\n              "o"."id";\n            ------------------------------------------------------------------------------------\n            -- 11. Populate temp activity report objectives\n            CREATE TEMP TABLE "__temp_activity_report_objectives"\n            (\n                id serial,\n                "activityReportId" integer NOT NULL,\n                "objectiveId" integer NOT NULL,\n                "createdAt" timestamp with time zone NOT NULL DEFAULT now(),\n                "updatedAt" timestamp with time zone NOT NULL DEFAULT now(),\n                "ttaProvided" text\n            );\n\n            INSERT INTO "__temp_activity_report_objectives" (\n              "activityReportId",\n              "objectiveId",\n              "createdAt",\n              "updatedAt",\n              "ttaProvided"\n            )\n            SELECT\n              "aro"."activityReportId",\n              o."id" "objectiveId",\n              MIN("aro"."createdAt"),\n              MAX("aro"."updatedAt"),\n              TRIM(string_agg(oo."ttaProvided", E'\n'))\n            FROM "ActivityReportObjectives" aro\n            JOIN "__temp_objectives" "o"\n            ON "aro"."objectiveId" = any (o."originalObjectiveIds"::int[])\n            JOIN "Objectives" oo\n            ON aro."objectiveId" = oo.id\n            GROUP BY\n              "aro"."activityReportId",\n              o."id";\n            ------------------------------------------------------------------------------------\n            -- 12. Truncate all tables that directly reference goals and objectives\n            TRUNCATE TABLE\n              "ActivityReportGoals",\n              "ActivityReportObjectives",\n              "ObjectiveRoles",\n              "ObjectiveTemplateRoles",\n              "ObjectiveResources",\n              "ObjectiveTopics",\n              "Objectives",\n              "Goals",\n              "GrantGoals"\n            RESTART IDENTITY;\n            ------------------------------------------------------------------------------------\n            -- 13. Repopulate Goals from temp table\n            INSERT INTO "Goals" (\n              "id",\n              "grantId",\n              "name",\n              "status",\n              "timeframe",\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "goalTemplateId",\n              "onApprovedAR"\n            )\n            SELECT\n              "id",\n              "grantId",\n              "name",\n              "status",\n              "timeframe",\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "goalTemplateId",\n              "onApprovedAR"\n            FROM "__temp_goals";\n\n            PERFORM SETVAL('"Goals_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "Goals"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 14. Repopulate Objectives from temp table\n            INSERT INTO "Objectives"(\n              "id",\n              "otherEntityId",\n              "goalId",\n              "title",\n              "status",\n              "createdAt",\n              "updatedAt",\n              "objectiveTemplateId",\n              "onApprovedAR"\n            )\n            SELECT\n              "id",\n              "otherEntityId",\n              "goalId",\n              "title",\n              "status",\n              "createdAt",\n              "updatedAt",\n              "objectiveTemplateId",\n              "onApprovedAR"\n            FROM "__temp_objectives";\n\n            PERFORM SETVAL('"Objectives_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "Objectives"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 15. Repopulate ObjectiveTopics from temp table\n            INSERT INTO "ObjectiveTopics" (\n              "id",\n              "objectiveId",\n              "topicId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "id",\n              "objectiveId",\n              "topicId",\n              "createdAt",\n              "updatedAt"\n            FROM "__temp_objectives_topics";\n\n            PERFORM SETVAL('"ObjectiveTopics_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "ObjectiveTopics"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 16. Repopulate ObjectiveResources from temp table\n            INSERT INTO "ObjectiveResources" (\n              "id",\n              "userProvidedUrl",\n              "objectiveId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "id",\n              "userProvidedUrl",\n              "objectiveId",\n              "createdAt",\n              "updatedAt"\n            FROM "__temp_objectives_resources";\n\n            PERFORM SETVAL('"ObjectiveResources_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "ObjectiveResources"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 17. Repopulate ActivityReportObjectives from temp table\n            INSERT INTO "ActivityReportObjectives"(\n              "id",\n              "activityReportId",\n              "objectiveId",\n              "createdAt",\n              "updatedAt",\n              "ttaProvided"\n            )\n            SELECT\n              "id",\n              "activityReportId",\n              "objectiveId",\n              "createdAt",\n              "updatedAt",\n              "ttaProvided"\n            FROM "__temp_activity_report_objectives";\n\n            PERFORM SETVAL('"ActivityReportObjectives_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "ActivityReportObjectives"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 18. Drop all temp tables used\n            DROP TABLE\n              "__all_distinct_grants_goals",\n              "__temp_goals",\n              "__temp_objectives",\n              "__temp_objectives_topics",\n              "__temp_objectives_resources",\n              "__temp_activity_report_objectives";\n            ------------------------------------------------------------------------------------\n            -- 19. Drop sourceGoals column from GoalTemplates\n            ALTER TABLE "GoalTemplates"\n            DROP COLUMN "sourceGoals";\n            ------------------------------------------------------------------------------------\n            -- 20. Drop sourceObjectives column from ObjectiveTemplates\n            ALTER TABLE "ObjectiveTemplates"\n            DROP COLUMN "sourceObjectives";\n            ------------------------------------------------------------------------------------\n            -- 21. Populate GoalTemplateObjectiveTemplates\n            INSERT INTO "GoalTemplateObjectiveTemplates" (\n              "objectiveTemplateId",\n              "goalTemplateId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              o."objectiveTemplateId",\n              g."goalTemplateId",\n              MIN(o."createdAt"),\n              MAX(o."updatedAt")\n            FROM "Objectives" o\n            JOIN "Goals" g\n            ON o."goalId" = g."id"\n            GROUP BY\n              o."objectiveTemplateId",\n              g."goalTemplateId";\n            ------------------------------------------------------------------------------------\n            -- 22. Populate goal status for all goals based on rules defined on TTAHub-813\n            WITH\n              rule_1 AS (\n                SELECT\n                  g.id "goalId",\n                  'Closed' status\n                FROM "Goals" g\n                JOIN "Grants" gr\n                ON g."grantId" = gr.id\n                JOIN "Grants" gr2\n                ON gr."recipientId" = gr2."recipientId"\n                GROUP BY g.id\n                HAVING SUM((gr2.status = 'Active')::int) = 0\n                AND SUM((gr2.status = 'Inactive')::int) > 0\n              ),\n              rule_2 AS (\n                SELECT\n                  g.id "goalId",\n                  'Closed' status\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                AND o.status = 'Complete'\n                JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar.id\n                GROUP BY g.id\n                HAVING SUM((ar."ttaType" = '{training}')::int) > 0\n                AND SUM((ar."ttaType" != '{training}')::int) = 0\n              ),\n              rule_3 AS (\n                SELECT\n                  g.id "goalId",\n                  'In Progress' status\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                AND o.status in ('In Progress', 'Complete')\n                JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar.id\n              ),\n              rule_4 AS (\n                SELECT\n                  g.id "goalId",\n                  'Not Started' status\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar.id\n                group by g.id\n                having array_agg(distinct o.status)::text = '{"Not Started"}'\n              ),\n              rule_5 AS (\n                SELECT\n                  g.id "goalId",\n                  'Not Started' status\n                FROM "Goals" g\n                LEFT JOIN "Objectives" o\n                ON g.id = o."goalId"\n                LEFT JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                WHERE aro.id is null\n                AND g."isFromSmartsheetTtaPlan" = true\n                AND NOW() - g."createdAt" < '1 year'\n              ),\n              rule_6 AS (\n                SELECT\n                  g.id "goalId",\n                  'Closed' status\n                FROM "Goals" g\n                LEFT JOIN "Objectives" o\n                ON g.id = o."goalId"\n                LEFT JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                WHERE aro.id is null\n                AND g."isFromSmartsheetTtaPlan" = true\n                AND NOW() - g."createdAt" > '1 year'\n              ),\n              status_rules AS (\n                SELECT\n                  g.id "goalId",\n                  COALESCE(g.status, r1.status,r2.status,r3.status,r4.status,r5.status,r6.status) status\n                FROM "Goals" g\n                LEFT JOIN rule_1 r1\n                ON g.id = r1."goalId"\n                LEFT JOIN rule_2 r2\n                ON g.id = r2."goalId"\n                LEFT JOIN rule_3 r3\n                ON g.id = r3."goalId"\n                LEFT JOIN rule_4 r4\n                ON g.id = r4."goalId"\n                LEFT JOIN rule_5 r5\n                ON g.id = r5."goalId"\n                LEFT JOIN rule_6 r6\n                ON g.id = r6."goalId"\n              )\n              UPDATE "Goals" g\n              SET status = sr.status\n              FROM status_rules sr\n              WHERE g.id = sr."goalId";\n\n              UPDATE "Goals" g\n              SET status = 'Suspended'\n              WHERE g.status = 'Ceased/Suspended';\n\n              UPDATE "Goals" g\n              SET status = 'Closed'\n              WHERE g.status = 'Completed';\n            ------------------------------------------------------------------------------------\n            -- 23. Populate ActivityReportGoals\n            INSERT INTO "ActivityReportGoals" (\n              "activityReportId",\n              "goalId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              aro."activityReportId",\n              o."goalId",\n              MIN(aro."createdAt"),\n              MAX(aro."updatedAt")\n            FROM "Objectives" o\n            JOIN "ActivityReportObjectives" aro\n            ON o.id = aro."objectiveId"\n            WHERE o."goalId" IS NOT NULL\n            GROUP BY\n              aro."activityReportId",\n              o."goalId";\n            ------------------------------------------------------------------------------------\n            -- 24. Drop GrantGoals\n            DROP TABLE "GrantGoals";\n            ------------------------------------------------------------------------------------\n          END$$;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "Goals" ALTER COLUMN "grantId" SET NOT NULL;ALTER TABLE "Goals" ALTER COLUMN "grantId" DROP DEFAULT;ALTER TABLE "Goals" ALTER COLUMN "grantId" TYPE INTEGER;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" DROP COLUMN "ttaProvided";
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ActivityReportFiles" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveFiles" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ObjectiveFiles" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): CREATE TABLE IF NOT EXISTS "ObjectiveTemplateFiles" ("id"   SERIAL , "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): DO $$\n          BEGIN\n            INSERT INTO "ActivityReportFiles" (\n              "activityReportId",\n              "fileId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "activityReportId",\n              id,\n              "createdAt",\n              "updatedAt"\n            FROM "Files";\n\n            ALTER TABLE "Files"\n            DROP COLUMN "activityReportId";\n          END$$;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "firstNotStartedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "lastNotStartedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "firstInProgressAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "lastInProgressAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "firstCeasedSuspendedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "lastCeasedSuspendedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "firstClosedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "lastClosedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "firstCompletedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Goals" ADD COLUMN "lastCompletedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "firstNotStartedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "lastNotStartedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "firstInProgressAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "lastInProgressAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "firstCompleteAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "lastCompleteAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "firstSuspendedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): ALTER TABLE "public"."Objectives" ADD COLUMN "lastSuspendedAt" TIMESTAMP WITH TIME ZONE;
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (088e3dc1-16f9-4204-94e3-bae9253afd82): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220425000000-goal-templates: migrated (0.997s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220520133458-add-collaborator-roles: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "CollaboratorRoles" ("id"   SERIAL , "activityReportCollaboratorId" INTEGER NOT NULL REFERENCES "ActivityReportCollaborators" ("id") ON DELETE CASCADE, "role" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220520133458-add-collaborator-roles: migrated (0.042s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220527150122-create-next-steps-date: migrating =======
Executing (47f4b964-a01d-4002-8555-7b913f98f440): START TRANSACTION;
Connection validated successfully
Executing (47f4b964-a01d-4002-8555-7b913f98f440): ALTER TABLE "public"."NextSteps" ADD COLUMN "completeDate" DATE;
Executing (47f4b964-a01d-4002-8555-7b913f98f440): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220527150122-create-next-steps-date: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220608030125-add-new-user-roles: migrating =======
Executing (default): ALTER TYPE "enum_Users_role" ADD VALUE 'National Center';
Connection validated successfully
Executing (default): ALTER TYPE "enum_ActivityReports_creatorRole" ADD VALUE 'National Center';
Connection validated successfully
Executing (default): ALTER TYPE "enum_Users_role" ADD VALUE 'Customer Service Contract';
Connection validated successfully
Executing (default): ALTER TYPE "enum_ActivityReports_creatorRole" ADD VALUE 'Customer Service Contract';
Connection validated successfully
Executing (default): ALTER TYPE "enum_Users_role" ADD VALUE 'Other Federal Staff';
Connection validated successfully
Executing (default): ALTER TYPE "enum_ActivityReports_creatorRole" ADD VALUE 'Other Federal Staff';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220608030125-add-new-user-roles: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220706152116-add-uei-to-recipient: migrating =======
Executing (7c415388-7eb4-489e-9026-4900368ab0ce): START TRANSACTION;
Connection validated successfully
Executing (7c415388-7eb4-489e-9026-4900368ab0ce): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220706152116-add-uei-to-recipient.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7c415388-7eb4-489e-9026-4900368ab0ce): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (7c415388-7eb4-489e-9026-4900368ab0ce): ALTER TABLE "public"."Recipients" ADD COLUMN "uei" VARCHAR(255) DEFAULT '';
Executing (7c415388-7eb4-489e-9026-4900368ab0ce): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (7c415388-7eb4-489e-9026-4900368ab0ce): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220706152116-add-uei-to-recipient: migrated (0.097s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220715000000-remove-duplicate-legacy-topics: migrating =======
Executing (c4f4283f-bd56-4a6b-a965-1bd7b3b9507f): START TRANSACTION;
Connection validated successfully
Executing (c4f4283f-bd56-4a6b-a965-1bd7b3b9507f): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220715000000-remove-duplicate-legacy-topics.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c4f4283f-bd56-4a6b-a965-1bd7b3b9507f): DO $$\n          BEGIN\n            CREATE TEMP TABLE "TempLegacyTopics" AS\n            SELECT\n              ti.id "topicId",\n              tv."mapsTo"\n            FROM "Topics" tv\n            JOIN "Topics" ti\n            ON tv.name = ti.name\n            AND tv."deletedAt" IS NOT NULL\n            AND ti."deletedAt" IS NULL\n            AND ti."createdAt" > '2022-07-13';\n            ------------------------------------------------------------------------------------\n            UPDATE "ObjectiveTopics" ot\n            SET\n              "topicId" = tlt."mapsTo"\n            FROM "TempLegacyTopics" tlt\n            WHERE ot."topicId" = tlt."topicId"\n            AND tlt."mapsTo" IS NOT NULL;\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTopics" ot\n            USING "TempLegacyTopics" tlt\n            WHERE ot."topicId" = tlt."topicId"\n            AND tlt."mapsTo" IS NULL;\n            ------------------------------------------------------------------------------------\n            UPDATE "ObjectiveTemplateTopics" ott\n            SET\n              "topicId" = tlt."mapsTo"\n            FROM "TempLegacyTopics" tlt\n            WHERE ott."topicId" = tlt."topicId"\n            AND tlt."mapsTo" IS NOT NULL;\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplateTopics" ott\n            USING "TempLegacyTopics" tlt\n            WHERE ott."topicId" = tlt."topicId"\n            AND tlt."mapsTo" IS NULL;\n            ------------------------------------------------------------------------------------\n            DELETE FROM "Topics" t\n            USING "TempLegacyTopics" tlt\n            WHERE t."id" = tlt."topicId";\n            ------------------------------------------------------------------------------------\n            DROP TABLE "TempLegacyTopics";\n          END$$;
Executing (c4f4283f-bd56-4a6b-a965-1bd7b3b9507f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220715000000-remove-duplicate-legacy-topics: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220724152116-create-mailer: migrating =======
Executing (06171094-247c-4984-b7fb-82a169d20988): START TRANSACTION;
Connection validated successfully
Executing (06171094-247c-4984-b7fb-82a169d20988): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220724152116-create-mailer.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_MailerLogs_action' GROUP BY 1
Connection validated successfully
Executing (default): CREATE TYPE "public"."enum_MailerLogs_action" AS ENUM('collaboratorAssigned', 'changesRequested', 'approverAssigned', 'reportApproved', 'collaboratorDigest', 'changesRequestedDigest', 'approverAssignedDigest', 'reportApprovedDigest');
Connection validated successfully
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "MailerLogs" ("id"   BIGSERIAL , "jobId" VARCHAR(255) NOT NULL, "emailTo" VARCHAR(255)[] NOT NULL, "action" "public"."enum_MailerLogs_action" NOT NULL, "subject" VARCHAR(255) NOT NULL, "activityReports" INTEGER[] NOT NULL, "success" BOOLEAN, "result" JSON, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (06171094-247c-4984-b7fb-82a169d20988): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220724152116-create-mailer: migrated (0.059s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220725000000-remove-erroneous-records: migrating =======
Executing (d9eb14f2-f9e9-42e7-9f41-957cb297f705): START TRANSACTION;
Connection validated successfully
Executing (d9eb14f2-f9e9-42e7-9f41-957cb297f705): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220725000000-remove-erroneous-records.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d9eb14f2-f9e9-42e7-9f41-957cb297f705): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (d9eb14f2-f9e9-42e7-9f41-957cb297f705): DO $$\n          BEGIN\n            CREATE TEMP TABLE "erroneousAROs" AS\n            SELECT\n              aro.id "aroId",\n              aro."objectiveId"\n            FROM  "ActivityReportObjectives" aro\n            JOIN "Objectives" o\n            ON aro."objectiveId" = o.id\n            JOIN "Goals" g\n            ON o."goalId" = g.id\n            LEFT JOIN "ActivityRecipients" r\n            ON aro."activityReportId" = r."activityReportId"\n            AND g."grantId" = r."grantId"\n            WHERE r.id IS NULL;\n            ------------------------------------------------------------------------------------\n            CREATE TEMP TABLE "erroneousARGs" AS\n            SELECT\n              arg.id "argId",\n              arg."goalId"\n            FROM  "ActivityReportGoals" arg\n            JOIN "Goals" g\n            ON arg."goalId" = g.id\n            LEFT JOIN "ActivityRecipients" r\n            ON arg."activityReportId" = r."activityReportId"\n            AND g."grantId" = r."grantId"\n            WHERE r.id is null;\n            ------------------------------------------------------------------------------------\n            CREATE TEMP TABLE "erroneousObjectives" AS\n            WITH\n            "erroneousAROsByObjective" AS (\n              Select\n                "objectiveId",\n                ARRAY_AGG("aroId" ORDER BY "aroId") aros\n              FROM "erroneousAROs" earo\n              GROUP BY "objectiveId"\n            ),\n            "AROsByObjective" as (\n              Select\n                o.id "objectiveId",\n                ARRAY_AGG(aro.id ORDER BY aro.id) aros\n              FROM "Objectives" o\n              JOIN "ActivityReportObjectives" aro\n              ON o.id = aro."objectiveId"\n              GROUP BY o.id\n            )\n            SELECT\n              earoo."objectiveId",\n              o."goalId"\n            FROM "erroneousAROsByObjective" earoo\n            JOIN "AROsByObjective" aroo\n            ON earoo."objectiveId" = aroo."objectiveId"\n            AND earoo."aros" = aroo."aros"\n            JOIN "Objectives" o\n            ON earoo."objectiveId" = o.id;\n            ------------------------------------------------------------------------------------\n            CREATE TEMP TABLE "erroneousGoals" AS\n            WITH\n            "erroneousObjectivesByGoal" AS (\n              SELECT\n                eo."goalId",\n                ARRAY_AGG(eo."objectiveId" ORDER BY eo."objectiveId") objectives\n              FROM "erroneousObjectives" eo\n              GROUP BY eo."goalId"\n            ),\n            "objectivesByGoal" AS (\n              SELECT\n                g.id "goalId",\n                ARRAY_AGG(o."id" ORDER BY o."id") objectives\n              FROM "Goals" g\n              JOIN "Objectives" o\n              ON g.id = o."goalId"\n              WHERE "isFromSmartsheetTtaPlan" = false\n              GROUP BY g.id\n            )\n            SELECT\n              eog."goalId"\n            FROM "erroneousObjectivesByGoal" eog\n            JOIN "objectivesByGoal" og\n            ON eog."goalId" = og."goalId"\n            AND eog.objectives = og.objectives;\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 34754\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "erroneousAROs" earo\n            WHERE aro.id = earo."aroId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 28357\n            DELETE FROM "ActivityReportGoals" arg\n            USING "erroneousARGs" earg\n            WHERE arg.id = earg."argId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 0\n            DELETE FROM "ObjectiveFiles" "of"\n            USING "erroneousObjectives" eo\n            WHERE "of"."objectiveId" = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 0\n            DELETE FROM "ObjectiveResources" "or"\n            USING "erroneousObjectives" eo\n            WHERE "or"."objectiveId" = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 0\n            DELETE FROM "ObjectiveRoles" "or"\n            USING "erroneousObjectives" eo\n            WHERE "or"."objectiveId" = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 3951\n            DELETE FROM "ObjectiveTopics" ot\n            USING "erroneousObjectives" eo\n            WHERE ot."objectiveId" = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 29591\n            DELETE FROM "Objectives" o\n            USING "erroneousObjectives" eo\n            WHERE o.id = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 4\n            DELETE FROM "Goals" g\n            USING "erroneousGoals" eg\n            WHERE g.id = eg."goalId";\n            ------------------------------------------------------------------------------------\n            DROP TABLE\n              "erroneousAROs",\n              "erroneousARGs",\n              "erroneousObjectives",\n              "erroneousGoals";\n          END$$;
Executing (d9eb14f2-f9e9-42e7-9f41-957cb297f705): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (d9eb14f2-f9e9-42e7-9f41-957cb297f705): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220725000000-remove-erroneous-records: migrated (0.119s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220725000000-remove-extra-resources-data: migrating =======
Executing (85236d9c-7edd-486d-a340-ab7fb77d53f7): START TRANSACTION;
Connection validated successfully
Executing (85236d9c-7edd-486d-a340-ab7fb77d53f7): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220725000000-remove-extra-resources-data.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (85236d9c-7edd-486d-a340-ab7fb77d53f7): UPDATE "ActivityReports" SET "nonECLKCResourcesUsed" =\n          (select array_remove("nonECLKCResourcesUsed", '{"value":""}'))\n          where  '{"value":""}' = ANY ("nonECLKCResourcesUsed");
Executing (85236d9c-7edd-486d-a340-ab7fb77d53f7): UPDATE "ActivityReports" SET "ECLKCResourcesUsed" =\n            (select array_remove("ECLKCResourcesUsed", '{"value":""}'))\n            where  '{"value":""}' = ANY ("ECLKCResourcesUsed");
Executing (85236d9c-7edd-486d-a340-ab7fb77d53f7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220725000000-remove-extra-resources-data: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220728000000-revert-g-13970: migrating =======
Executing (01512a6b-b480-4ff7-9ea0-af7301e03848): START TRANSACTION;
Connection validated successfully
Executing (01512a6b-b480-4ff7-9ea0-af7301e03848): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220728000000-revert-g-13970.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (01512a6b-b480-4ff7-9ea0-af7301e03848): UPDATE "Goals"\n         SET\n           status = 'In Progress',\n           "closeSuspendReason" = NULL,\n           "closeSuspendContext" = NULL\n         WHERE id IN (13970, 33134, 33132, 33133, 33131, 32561, 32562, 32563, 32560, 27334, 34063, 31864);
Executing (01512a6b-b480-4ff7-9ea0-af7301e03848): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220728000000-revert-g-13970: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220802000000-goal-objective-metadata-caching: migrating =======
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): START TRANSACTION;
Connection validated successfully
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220802000000-goal-objective-metadata-caching.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "name" TEXT;
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "status" VARCHAR(255);
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "timeframe" TEXT;
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): CREATE TYPE "public"."enum_ActivityReportGoals_closeSuspendReason" AS ENUM('Duplicate goal', 'Recipient request', 'TTA complete', 'Key staff turnover / vacancies', 'Recipient is not responding', 'Regional Office request');ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "closeSuspendReason" "public"."enum_ActivityReportGoals_closeSuspendReason";
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "closeSuspendContext" TEXT;
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "endDate" TIMESTAMP WITH TIME ZONE;
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): UPDATE ONLY "ActivityReportGoals" arg\n          SET\n            "name" = g."name",\n            "status" = g."status",\n            "endDate" = g."endDate",\n            "timeframe" = g."timeframe",\n            "closeSuspendReason" = g."closeSuspendReason"::text::"enum_ActivityReportGoals_closeSuspendReason",\n            "closeSuspendContext" = g."closeSuspendContext"\n          FROM "Goals" g\n          WHERE arg."goalId" = g.id;
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "title" TEXT;
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "status" VARCHAR(255);
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): UPDATE ONLY "ActivityReportObjectives" aro\n          SET\n            "title" = o."title",\n            "status" = o.status\n          FROM "Objectives" o\n          WHERE aro."objectiveId" = o.id;
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "ActivityReportObjectiveFiles" ADD CONSTRAINT "ActivityReportObjectiveFiles_activityReportObjectiveId_fileId_uk" UNIQUE ("activityReportObjectiveId", "fileId");
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveResources" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userProvidedUrl" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "ActivityReportObjectiveResources" ADD CONSTRAINT "ActivityReportObjectiveResources_activityReportObjectiveId_userProvidedUrl_uk" UNIQUE ("activityReportObjectiveId", "userProvidedUrl");
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): INSERT INTO "ActivityReportObjectiveResources"\n          (\n            "userProvidedUrl",\n            "activityReportObjectiveId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            r."userProvidedUrl",\n            aro.id "activityReportObjectiveId",\n            aro."updatedAt" "createdAt",\n            aro."updatedAt" "updatedAt"\n          FROM "ActivityReportObjectives" aro\n          JOIN "ObjectiveResources" r\n          ON aro."objectiveId" = r."objectiveId";
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveRoles" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "ActivityReportObjectiveRoles" ADD CONSTRAINT "ActivityReportObjectiveRoles_activityReportObjectiveId_roleId_uk" UNIQUE ("activityReportObjectiveId", "roleId");
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): INSERT INTO "ActivityReportObjectiveRoles"\n          (\n            "roleId",\n            "activityReportObjectiveId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            r."roleId",\n            aro.id "activityReportObjectiveId",\n            aro."updatedAt" "createdAt",\n            aro."updatedAt" "updatedAt"\n          FROM "ActivityReportObjectives" aro\n          JOIN "ObjectiveRoles" r\n          ON aro."objectiveId" = r."objectiveId";
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveTopics" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): ALTER TABLE "ActivityReportObjectiveTopics" ADD CONSTRAINT "ActivityReportObjectiveTopics_activityReportObjectiveId_topicId_uk" UNIQUE ("activityReportObjectiveId", "topicId");
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): INSERT INTO "ActivityReportObjectiveTopics"\n          (\n            "topicId",\n            "activityReportObjectiveId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            ot."topicId",\n            aro.id "activityReportObjectiveId",\n            aro."updatedAt" "createdAt",\n            aro."updatedAt" "updatedAt"\n          FROM "ActivityReportObjectives" aro\n          JOIN "ObjectiveTopics" ot\n          ON aro."objectiveId" = ot."objectiveId";
Executing (3b4209ac-c079-493e-8e71-e105672feb6f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220802000000-goal-objective-metadata-caching: migrated (0.234s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220804175018-add-created-via-to-goals: migrating =======
Executing (5395820c-d73a-478e-aed8-9ba1d814e4be): START TRANSACTION;
Connection validated successfully
Executing (5395820c-d73a-478e-aed8-9ba1d814e4be): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220804175018-add-created-via-to-goals.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5395820c-d73a-478e-aed8-9ba1d814e4be): CREATE TYPE "public"."enum_Goals_createdVia" AS ENUM('imported', 'activityReport', 'rtr');ALTER TABLE "public"."Goals" ADD COLUMN "createdVia" "public"."enum_Goals_createdVia";
Executing (5395820c-d73a-478e-aed8-9ba1d814e4be): UPDATE "Goals" SET "createdVia" = 'imported' WHERE "isFromSmartsheetTtaPlan" IS true;\n      UPDATE "Goals" SET "createdVia" = 'activityReport' WHERE "isFromSmartsheetTtaPlan" IS NULL OR "isFromSmartsheetTtaPlan" = false;
Executing (5395820c-d73a-478e-aed8-9ba1d814e4be): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220804175018-add-created-via-to-goals: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220808170215-unify-roles-table: migrating =======
Executing (b15c793c-bb75-4073-bc28-f9eb7b531e88): START TRANSACTION;
Connection validated successfully
Executing (b15c793c-bb75-4073-bc28-f9eb7b531e88): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220808170215-unify-roles-table.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b15c793c-bb75-4073-bc28-f9eb7b531e88): -- update current roles\n      UPDATE "Roles" SET "fullName" = 'Other Federal Staff' WHERE "fullName" = 'Central Office: Other Divisions';\n      UPDATE "Roles" SET "name" = 'OFS' WHERE "fullName" = 'Other Federal Staff';\n      UPDATE "Roles" SET "fullName" = 'COR' WHERE "name" = 'COR';\n      UPDATE "Roles" SET "fullName" = 'Central Office' WHERE "fullName" = 'Central Office: TTA and Comprehensive Services Division';\n\n      -- insert new roles\n      INSERT INTO "Roles" ("name", "fullName", "isSpecialist", "createdAt", "updatedAt") VALUES ('NC', 'National Center', false, now(), now());\n      INSERT INTO "Roles" ("name", "fullName", "isSpecialist", "createdAt", "updatedAt") VALUES ('CSC', 'Customer Service Contact', false, now(), now());
Executing (b15c793c-bb75-4073-bc28-f9eb7b531e88): CREATE TABLE IF NOT EXISTS "UserRoles" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE, "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, UNIQUE ("userId", "roleId"), PRIMARY KEY ("id"));
Executing (b15c793c-bb75-4073-bc28-f9eb7b531e88): DO\n        $$\n        DECLARE\n            u record;\n        BEGIN\n     WITH\n         "RolesForUser" as (\n             SELECT\n                 id "userId",\n                 UNNEST("role")::text "roleName"\n             FROM "Users"\n         )\n     INSERT INTO "UserRoles"\n     (\n          "userId",\n          "roleId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT DISTINCT\n          rfu."userId",\n          r.id "roleId",\n          now() "createdAt",\n          now() "updatedAt"\n      FROM "RolesForUser" rfu\n      JOIN "Roles" r\n      ON rfu."roleName" = r."fullName"\n      ORDER BY 1,2;\n        END;\n        $$\n        LANGUAGE plpgsql;
Executing (b15c793c-bb75-4073-bc28-f9eb7b531e88): ALTER TABLE "public"."Users" DROP COLUMN "role";
Executing (b15c793c-bb75-4073-bc28-f9eb7b531e88): DROP TYPE public."enum_Users_role";
Executing (b15c793c-bb75-4073-bc28-f9eb7b531e88): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220808170215-unify-roles-table: migrated (0.064s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220809151140-update-collaborator-roles: migrating =======
Executing (dd32027d-806a-4e2f-b564-6860cd5c66d2): START TRANSACTION;
Connection validated successfully
Executing (dd32027d-806a-4e2f-b564-6860cd5c66d2): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220809151140-update-collaborator-roles.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TABLE "public"."CollaboratorRoles" ADD COLUMN "roleId" INTEGER REFERENCES "Roles" ("id");
Connection validated successfully
Executing (dd32027d-806a-4e2f-b564-6860cd5c66d2): UPDATE "CollaboratorRoles" cr\n        SET "roleId" = r.id\n        FROM "Roles" r\n        WHERE cr.role = r."fullName";
Executing (dd32027d-806a-4e2f-b564-6860cd5c66d2): ALTER TABLE "public"."CollaboratorRoles" DROP COLUMN "role";
Executing (dd32027d-806a-4e2f-b564-6860cd5c66d2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220809151140-update-collaborator-roles: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220812205424-new-ar-topics: migrating =======
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): START TRANSACTION;
Connection validated successfully
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220812205424-new-ar-topics.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): INSERT INTO "Topics"\n          ("name", "createdAt", "updatedAt")\n          VALUES\n          ('Child Screening and Assessment', current_timestamp, current_timestamp),\n          ('Teaching / Caregiving Practices', current_timestamp, current_timestamp),\n          ('Disabilities Services', current_timestamp, current_timestamp),\n          ('Ongoing Monitoring Management System', current_timestamp, current_timestamp),\n          ('Training and Professional Development', current_timestamp, current_timestamp);
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): UPDATE "Topics" t1 \n        SET \n            "mapsTo" = t2.id, \n            "deletedAt" = current_timestamp \n        FROM "Topics" t2 \n        WHERE t1.name = 'Child Assessment, Development, Screening' \n        AND t2.name = 'Child Screening and Assessment' \n        AND t1."deletedAt" IS NULL;
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): UPDATE "Topics" t1 \n        SET \n            "mapsTo" = t2.id, \n            "deletedAt" = current_timestamp \n        FROM "Topics" t2 \n        WHERE t1.name = 'Teaching Practices / Teacher-Child Interactions' \n        AND t2.name = 'Teaching / Caregiving Practices' \n        AND t1."deletedAt" IS NULL;
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): UPDATE "Topics" t1 \n        SET \n            "mapsTo" = t2.id \n        FROM "Topics" t2 \n        WHERE t1.name = 'Child Assessment, Development, Screening' \n        AND t2.name = 'Child Screening and Assessment' \n        AND t2."deletedAt" IS NULL;
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): UPDATE "Topics" t1 \n        SET \n            "mapsTo" = t2.id \n        FROM "Topics" t2 \n        WHERE t1.name = 'Teaching Practices / Teacher-Child Interactions' \n        AND t2.name = 'Teaching / Caregiving Practices' \n        AND t2."deletedAt" IS NULL;
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): UPDATE "ActivityReports" \n        SET \n            topics = array_replace(topics, 'Child Assessment, Development, Screening', 'Child Screening and Assessment') \n        WHERE topics @> '{"Child Assessment, Development, Screening"}';
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): UPDATE "ActivityReports" \n        SET \n            topics = array_replace(topics, 'Teaching Practices / Teacher-Child Interactions', 'Teaching / Caregiving Practices') \n        WHERE topics @> '{"Teaching Practices / Teacher-Child Interactions"}';
Executing (9d745be0-e74c-4733-b6a6-8b8d1399c9d2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220812205424-new-ar-topics: migrated (0.040s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220819014844-user-settings-table: migrating =======
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): START TRANSACTION;
Connection validated successfully
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): CREATE TABLE IF NOT EXISTS "UserSettings" ("id"   SERIAL , "class" VARCHAR(255) NOT NULL, "key" VARCHAR(255) NOT NULL, "default" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenReportSubmittedForReview', '"never"', current_timestamp, current_timestamp)
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenChangeRequested', '"never"', current_timestamp, current_timestamp)
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenReportApproval', '"never"', current_timestamp, current_timestamp)
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenAppointedCollaborator', '"never"', current_timestamp, current_timestamp)
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): CREATE TABLE IF NOT EXISTS "UserSettingOverrides" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "userSettingId" INTEGER NOT NULL REFERENCES "UserSettings" ("id"), "value" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): CREATE INDEX "user_setting_overrides_user_id_user_setting_id" ON "UserSettingOverrides" ("userId", "userSettingId")
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): ALTER TABLE "UserSettingOverrides" ADD CONSTRAINT "UserSettingOverrides_userId_userSettingId_uk" UNIQUE ("userId", "userSettingId");
Executing (01b4f005-bd2b-4b32-8133-e3b1ebe05c43): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220819014844-user-settings-table: migrated (0.100s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220824042254-user-validation-status: migrating =======
Executing (9eab1ace-8462-4b4f-8993-9e9b007b41e1): START TRANSACTION;
Connection validated successfully
Executing (9eab1ace-8462-4b4f-8993-9e9b007b41e1): CREATE TABLE IF NOT EXISTS "UserValidationStatus" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "type" VARCHAR(255) NOT NULL, "token" VARCHAR(255), "validatedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (9eab1ace-8462-4b4f-8993-9e9b007b41e1): CREATE INDEX "user_validation_status_user_id_type" ON "UserValidationStatus" ("userId", "type")
Executing (9eab1ace-8462-4b4f-8993-9e9b007b41e1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220824042254-user-validation-status: migrated (0.052s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220902172413-ar-reason-grantee-to-recipient: migrating =======
Executing (51a2c156-a980-4954-8b2d-95c17ae9dfc1): START TRANSACTION;
Connection validated successfully
Executing (51a2c156-a980-4954-8b2d-95c17ae9dfc1): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220902172413-ar-reason-grantee-to-recipient.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (51a2c156-a980-4954-8b2d-95c17ae9dfc1): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (51a2c156-a980-4954-8b2d-95c17ae9dfc1): UPDATE "ActivityReports"\n          SET "reason" = ARRAY_REPLACE("reason", 'New Grantee', 'New Recipient')\n          WHERE "reason" @> '{"New Grantee"}';
Executing (51a2c156-a980-4954-8b2d-95c17ae9dfc1): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (51a2c156-a980-4954-8b2d-95c17ae9dfc1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220902172413-ar-reason-grantee-to-recipient: migrated (0.134s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220922152714-add-version-to-activity-reports: migrating =======
Executing (80acb579-8997-47bf-9632-2a016d2f75b5): START TRANSACTION;
Connection validated successfully
Executing (80acb579-8997-47bf-9632-2a016d2f75b5): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220922152714-add-version-to-activity-reports.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (80acb579-8997-47bf-9632-2a016d2f75b5): ALTER TABLE "public"."ActivityReports" ADD COLUMN "version" INTEGER NOT NULL DEFAULT 1;
Executing (80acb579-8997-47bf-9632-2a016d2f75b5): UPDATE "ActivityReports" SET "version" = 0 WHERE "legacyId" IS NOT null; \n      UPDATE "ActivityReports" SET "version" = 1 WHERE "legacyId" IS null;
Executing (80acb579-8997-47bf-9632-2a016d2f75b5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220922152714-add-version-to-activity-reports: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220928150520-unify-objective-complete-status-data: migrating =======
Executing (e4652eb6-fa0b-468c-8536-f28f850173d8): START TRANSACTION;
Connection validated successfully
Executing (e4652eb6-fa0b-468c-8536-f28f850173d8): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20220928150520-unify-objective-complete-status-data.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e4652eb6-fa0b-468c-8536-f28f850173d8): UPDATE "Objectives" SET "status" = 'Complete' WHERE "status" = 'Completed'
Executing (e4652eb6-fa0b-468c-8536-f28f850173d8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220928150520-unify-objective-complete-status-data: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221012130706-add-is-rttapa-to-goals: migrating =======
Executing (2e2f7f6f-aee5-4c07-b5db-7dcdae0932b0): START TRANSACTION;
Connection validated successfully
Executing (2e2f7f6f-aee5-4c07-b5db-7dcdae0932b0): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20221012130706-add-is-rttapa-to-goals.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2e2f7f6f-aee5-4c07-b5db-7dcdae0932b0): CREATE TYPE "public"."enum_Goals_isRttapa" AS ENUM('Yes', 'No');ALTER TABLE "public"."Goals" ADD COLUMN "isRttapa" "public"."enum_Goals_isRttapa";
Executing (2e2f7f6f-aee5-4c07-b5db-7dcdae0932b0): UPDATE "Goals" SET "isRttapa" = 'Yes' WHERE "isFromSmartsheetTtaPlan" IS true;
Executing (2e2f7f6f-aee5-4c07-b5db-7dcdae0932b0): CREATE TYPE "public"."enum_ActivityReportGoals_isRttapa" AS ENUM('Yes', 'No');ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "isRttapa" "public"."enum_ActivityReportGoals_isRttapa";
Executing (2e2f7f6f-aee5-4c07-b5db-7dcdae0932b0): UPDATE "ActivityReportGoals" SET "isRttapa" = 'Yes' WHERE "goalId" IN (SELECT "id" FROM "Goals" WHERE "Goals"."isFromSmartsheetTtaPlan" IS true);
Executing (2e2f7f6f-aee5-4c07-b5db-7dcdae0932b0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221012130706-add-is-rttapa-to-goals: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221017000000-missing-objectives: migrating =======
Executing (8346fef1-7d14-411c-b625-ed562b12d75a): START TRANSACTION;
Connection validated successfully
Executing (8346fef1-7d14-411c-b625-ed562b12d75a): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221017000000-missing-objectives.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8346fef1-7d14-411c-b625-ed562b12d75a): ----------------------------------------------------------------------------------------------------\n          -- 1. Create ActivityReportGoals for each of the goals linked via ActivityReportObjectives\n          -----------------------------------------------------------------------------------------------------\n          WITH\n            "GoalsThroughObjectives" AS (\n              SELECT DISTINCT\n                aro."activityReportId",\n                o."goalId",\n                g."grantId",\n                md5(g."name") "goalHash"\n              FROM "ActivityReportObjectives" aro\n              JOIN "Objectives" o\n              ON aro."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              WHERE o."goalId" IS NOT NULL\n            ),\n            "GoalsDirect" AS (\n              SELECT DISTINCT\n                arg."activityReportId",\n                arg."goalId",\n                g."grantId",\n                md5(g."name") "goalHash"\n              FROM "ActivityReportGoals" arg\n              JOIN "Goals" g\n              ON arg."goalId" = g.id\n            ),\n            "MissingDirectGoals" AS (\n              SELECT *\n              FROM "GoalsThroughObjectives"\n              EXCEPT\n              SELECT *\n              FROM "GoalsDirect"\n            )\n            INSERT INTO "ActivityReportGoals"\n            (\n              "activityReportId",\n              "goalId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT DISTINCT\n              aro."activityReportId",\n              o."goalId",\n              MIN(aro."createdAt") "createdAt",\n              MAX(aro."updatedAt") "updatedAt"\n            FROM "ActivityReportObjectives" aro\n            LEFT JOIN "Objectives" o\n            ON aro."objectiveId" = o.id\n            LEFT JOIN "Goals" g\n            ON o."goalId" = g.id\n            JOIN "MissingDirectGoals" m\n            ON aro."activityReportId" = m."activityReportId"\n            AND o."goalId" = m."goalId"\n            AND g."grantId" = m."grantId"\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."activityReportId" = aro."activityReportId"\n            AND arg."goalId" = o."goalId"\n            WHERE arg.id IS NULL\n            GROUP BY\n              aro."activityReportId",\n              o."goalId";\n\n          ----------------------------------------------------------------------------------------------------\n          -- 2. Identify all reports with inconsistencies between recipients and connected goals and objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_incomplete_reports";\n          CREATE TEMP TABLE "temp_incomplete_reports" AS\n          WITH\n            "through_goals" AS (\n              SELECT\n                ar."activityReportId",\n                a."calculatedStatus",\n                array_agg(distinct ar."grantId" order by ar."grantId") "recipientGrantIds",\n                array_agg(distinct g."grantId" order by g."grantId") "goalGrantIds",\n                array[]::text[] "distinctObjectives",\n                array_agg(distinct md5(g.name) order by md5(g.name)) "distinctGoals"\n                FROM "ActivityRecipients" ar\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n              JOIN "Grants" gr\n              ON ar."grantId" = gr.id\n              AND a."startDate" < gr."endDate"\n              LEFT JOIN "ActivityReportGoals" arg\n              ON ar."activityReportId" = arg."activityReportId"\n              LEFT JOIN "Goals" g\n              ON arg."goalId" = g.id\n              JOIN "Grants" gr2\n              ON g."grantId" = gr2.id\n              AND a."startDate" < gr2."endDate"\n              WHERE g."grantId" is not null\n              GROUP BY ar."activityReportId", a."calculatedStatus"\n              HAVING\n              array_agg(distinct ar."grantId" order by ar."grantId") != array_agg(distinct g."grantId" order by g."grantId")\n              AND ARRAY_LENGTH(ARRAY(\n                SELECT UNNEST(array_agg(distinct ar."grantId" order by ar."grantId"))\n                INTERSECT\n                SELECT UNNEST(array_agg(distinct g."grantId" order by g."grantId"))\n              ),1) > 0\n            ),\n            "through_objectives" AS (\n              SELECT\n                ar."activityReportId",\n                a."calculatedStatus",\n                array_agg(distinct ar."grantId" order by ar."grantId") "recipientGrantIds",\n                array_agg(distinct g."grantId" order by g."grantId") "goalGrantIds",\n                array_agg(distinct md5(o.title) order by md5(o.title)) "distinctObjectives",\n                array_agg(distinct md5(g.name) order by md5(g.name)) "distinctGoals"\n              FROM "ActivityRecipients" ar\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n              JOIN "Grants" gr\n              ON ar."grantId" = gr.id\n              AND a."startDate" < gr."endDate"\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON ar."activityReportId" = aro."activityReportId"\n              LEFT JOIN "Objectives" o\n              ON aro."objectiveId" = o.id\n              LEFT JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "Grants" gr2\n              ON g."grantId" = gr2.id\n              AND a."startDate" < gr2."endDate"\n              WHERE g."grantId" is not null\n              GROUP BY ar."activityReportId", a."calculatedStatus"\n              HAVING\n                array_agg(distinct ar."grantId" order by ar."grantId") != array_agg(distinct g."grantId" order by g."grantId")\n                AND ARRAY_LENGTH(ARRAY(\n                  SELECT UNNEST(array_agg(distinct ar."grantId" order by ar."grantId"))\n                  INTERSECT\n                  SELECT UNNEST(array_agg(distinct g."grantId" order by g."grantId"))\n                ),1) > 0\n            ),\n            "through_both_unmerged" AS (\n              SELECT *\n              FROM "through_goals"\n              UNION\n              SELECT *\n              FROM "through_objectives"\n            ),\n            "through_both" AS (\n              SELECT\n                tbu."activityReportId",\n                tbu."calculatedStatus",\n                ARRAY_AGG(DISTINCT w.v) "recipientGrantIds",\n                ARRAY_AGG(DISTINCT x.v) "goalGrantIds",\n                ARRAY_AGG(DISTINCT y.v) "distinctObjectives",\n                ARRAY_AGG(DISTINCT z.v) "distinctGoals"\n              FROM "through_both_unmerged" tbu\n              CROSS JOIN LATERAL UNNEST(tbu."recipientGrantIds") AS w(v)\n              CROSS JOIN LATERAL UNNEST(tbu."goalGrantIds") AS x(v)\n              CROSS JOIN LATERAL UNNEST(tbu."distinctObjectives") AS y(v)\n              CROSS JOIN LATERAL UNNEST(tbu."distinctGoals") AS z(v)\n              GROUP BY tbu."activityReportId", "calculatedStatus"\n              ORDER BY tbu."activityReportId"\n            )\n            SELECT\n              *,\n              ARRAY(SELECT UNNEST("recipientGrantIds") INTERSECT SELECT UNNEST("goalGrantIds")) "intersectionGrantId",\n              ARRAY(SELECT UNNEST("recipientGrantIds") EXCEPT SELECT UNNEST("goalGrantIds")) "onlyRecipientGrantId",\n              ARRAY(SELECT UNNEST("goalGrantIds") EXCEPT SELECT UNNEST("recipientGrantIds")) "onlyGoalGrantId"\n            FROM "through_both";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 3. Identify missing goals.\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals";\n          CREATE TEMP TABLE "temp_missing_goals" AS\n          SELECT\n            ir."activityReportId",\n            md5(g.name) "goalHash",\n            g.name "name",\n            CASE\n              WHEN 'Closed' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Closed'\n              WHEN 'Suspended' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Suspended'\n              WHEN 'In Progress' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'In Progress'\n              WHEN 'Not Started' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Not Started'\n            END status,\n            (ARRAY_AGG(g.timeframe ORDER BY g.id desc))[1] timeframe,\n            bool_or(g."isFromSmartsheetTtaPlan")  "isFromSmartsheetTtaPlan",\n            MIN(g."createdAt") "createdAt",\n            MAX(g."updatedAt") "updatedAt",\n            ARRAY_AGG(g."closeSuspendReason" ORDER BY g.id) "closeSuspendReason",\n            ARRAY_AGG(g."closeSuspendContext" ORDER BY g.id) "closeSuspendContext",\n            MIN(g."endDate") "endDate",\n            ARRAY_AGG(g."previousStatus") "previousStatus",\n            MIN(g."goalTemplateId") "goalTemplateId",\n            MIN(g."grantId") "grantId",\n            bool_or(g."onApprovedAR") "onApprovedAR",\n            MIN(g."firstNotStartedAt") "firstNotStartedAt",\n            MAX(g."lastNotStartedAt") "lastNotStartedAt",\n            MIN(g."firstInProgressAt") "firstInProgressAt",\n            MAX(g."lastInProgressAt") "lastInProgressAt",\n            MIN(g."firstCeasedSuspendedAt") "firstCeasedSuspendedAt",\n            MAX(g."lastCeasedSuspendedAt") "lastCeasedSuspendedAt",\n            MIN(g."firstClosedAt") "firstClosedAt",\n            MAX(g."lastClosedAt") "lastClosedAt",\n            MIN(g."firstCompletedAt") "firstCompletedAt",\n            MAX(g."lastCompletedAt") "lastCompletedAt"\n          FROM "temp_incomplete_reports" ir\n          JOIN "ActivityReportGoals" arg\n          ON ir."activityReportId" = arg."activityReportId"\n          JOIN "Goals" g\n          ON arg."goalId" = g.id\n          AND g."grantId" = ANY(ir."intersectionGrantId")\n          AND md5(g.name) = ANY(ir."distinctGoals")\n          GROUP BY\n            ir."activityReportId",\n            g.name;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 4. Find missing goals for the grants identified that already exist\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_already_exist";\n          CREATE TEMP TABLE "temp_missing_goals_already_exist" AS\n          SELECT DISTINCT\n            g.id "goalId"\n          FROM "temp_incomplete_reports" ir\n          CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n          JOIN "temp_missing_goals" mg\n          ON ir."activityReportId" = mg."activityReportId"\n          AND mg."goalHash" = ANY(ir."distinctGoals")\n          LEFT JOIN "Goals" g\n          ON g."grantId" = orgi."grantId"\n          AND md5(g.name) = mg."goalHash"\n          WHERE g.id IS NOT NULL;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 5. Create missing goals for the grants identified\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_added";\n          CREATE TEMP TABLE "temp_missing_goals_added" AS\n          WITH "inserted" AS (\n            INSERT INTO "Goals"\n            (\n              name,\n              status,\n              timeframe,\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "endDate",\n              "previousStatus",\n              "goalTemplateId",\n              "grantId",\n              "onApprovedAR",\n              "firstNotStartedAt",\n              "lastNotStartedAt",\n              "firstInProgressAt",\n              "lastInProgressAt",\n              "firstCeasedSuspendedAt",\n              "lastCeasedSuspendedAt",\n              "firstClosedAt",\n              "lastClosedAt",\n              "firstCompletedAt",\n              "lastCompletedAt"\n            )\n            SELECT DISTINCT\n              mg.name,\n              mg.status,\n              mg.timeframe,\n              mg."isFromSmartsheetTtaPlan",\n              mg."createdAt",\n              mg."updatedAt",\n              mg."closeSuspendReason"[1] "closeSuspendReason",\n              mg."closeSuspendContext"[1] "closeSuspendContext",\n              mg."endDate",\n              mg."previousStatus"[1] "previousStatus",\n              mg."goalTemplateId",\n              orgi."grantId",\n              mg."onApprovedAR",\n              mg."firstNotStartedAt",\n              mg."lastNotStartedAt",\n              mg."firstInProgressAt",\n              mg."lastInProgressAt",\n              mg."firstCeasedSuspendedAt",\n              mg."lastCeasedSuspendedAt",\n              mg."firstClosedAt",\n              mg."lastClosedAt",\n              mg."firstCompletedAt",\n              mg."lastCompletedAt"\n            FROM "temp_incomplete_reports" ir\n            CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n            JOIN "temp_missing_goals" mg\n            ON ir."activityReportId" = mg."activityReportId"\n            AND mg."goalHash" = ANY(ir."distinctGoals")\n            LEFT JOIN "Goals" g\n            ON g."grantId" = orgi."grantId"\n            AND md5(g.name) = mg."goalHash"\n            WHERE g.id IS NULL\n            RETURNING\n              id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 6. Collect new and existing goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_added_and_existing";\n          CREATE TEMP TABLE "temp_missing_goals_added_and_existing" AS\n          SELECT *\n          FROM "temp_missing_goals_already_exist"\n          UNION\n          SELECT *\n          FROM "temp_missing_goals_added";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 7. Create new ActivityReportGoals for added goals and found goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_args_added";\n          CREATE TEMP TABLE "temp_missing_args_added" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ActivityReportGoals"\n              (\n                "activityReportId",\n                "goalId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT DISTINCT\n                ir."activityReportId",\n                g.id "goalId",\n                MIN(arg2."createdAt") "createdAt",\n                MAX(arg2."updatedAt") "updatedAt"\n              FROM "temp_missing_goals_added_and_existing" mga\n              JOIN "Goals" g\n              ON mga."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              LEFT JOIN "ActivityReportGoals" arg\n              ON ir."activityReportId" = arg."activityReportId"\n              AND g.id = arg."goalId"\n              JOIN "ActivityReportGoals" arg2\n              ON ir."activityReportId" = arg2."activityReportId"\n              JOIN "Goals" g2\n              ON arg2."goalId" = g2.id\n              AND g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              WHERE arg.id IS NULL\n              GROUP BY\n                ir."activityReportId",\n                g.id\n              RETURNING\n                id "activityReportGoalId"\n            )\n            SELECT\n              "activityReportGoalId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 8. Collect and calculate onApprovedAR for newly added goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_goals_now_on_approved_ar";\n          CREATE TEMP TABLE "temp_goals_now_on_approved_ar" AS\n          SELECT\n            mga."goalId",\n            'approved' = any(array_agg(distinct ar."calculatedStatus")) "onApprovedAR"\n          FROM "temp_missing_goals_added_and_existing" mga\n          JOIN "Goals" g\n          ON mga."goalId" = g.id\n          JOIN "ActivityReportGoals" arg\n          ON mga."goalId" = arg."goalId"\n          LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n          GROUP BY mga."goalId"\n          HAVING bool_or(g."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n          -----------------------------------------------------------------------------------------------------\n          -- 9. Update onApprovedAR for goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_goals_on_approved_ar_updated";\n          CREATE TEMP TABLE "temp_goals_on_approved_ar_updated" AS\n          WITH\n            "updated" AS (\n              UPDATE "Goals" g\n              SET\n                "onApprovedAR" = t."onApprovedAR"\n              FROM "temp_goals_now_on_approved_ar" t\n              WHERE g.id = t."goalId"\n              RETURNING\n                id "goalId"\n            )\n            SELECT\n              "goalId"\n            FROM "updated";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 9. Identify missing objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objectives";\n            CREATE TEMP TABLE "temp_missing_objectives" AS\n            SELECT\n              ir."activityReportId",\n              md5(o.title) "objectiveHash",\n              ARRAY_AGG(DISTINCT md5(g.name)) "goalHashs",\n              MIN(o.id) "objectiveId",\n              o.title,\n              o.status,\n              MIN(o."createdAt") "createdAt",\n              MIN(o."updatedAt") "updatedAt",\n              MIN(o."objectiveTemplateId") "objectiveTemplateId",\n              MIN(o."otherEntityId") "otherEntityId",\n              BOOL_OR(o."onApprovedAR") "onApprovedAR",\n              MIN(o."firstNotStartedAt") "firstNotStartedAt",\n              MIN(o."lastNotStartedAt") "lastNotStartedAt",\n              MIN(o."firstInProgressAt") "firstInProgressAt",\n              MIN(o."lastInProgressAt") "lastInProgressAt",\n              MIN(o."firstCompleteAt") "firstCompleteAt",\n              MIN(o."lastCompleteAt") "lastCompleteAt",\n              MIN(o."firstSuspendedAt") "firstSuspendedAt",\n              MIN(o."lastSuspendedAt") "lastSuspendedAt"\n            FROM "temp_incomplete_reports" ir\n            JOIN "ActivityReportObjectives" aro\n            ON ir."activityReportId" = aro."activityReportId"\n            JOIN "Objectives" o\n            ON aro."objectiveId" = o.id\n            AND md5(o.title) = ANY(ir."distinctObjectives")\n            JOIN "Goals" g\n            ON o."goalId" = g.id\n            AND g."grantId" = ANY(ir."intersectionGrantId")\n            AND md5(g.name) = ANY(ir."distinctGoals")\n            GROUP BY\n              ir."activityReportId",\n              o.title,\n              o.status;\n\n            -----------------------------------------------------------------------------------------------------\n            -- 10. Find missing objectives for the grants identified that already exist\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objectives_already_exist";\n            CREATE TEMP TABLE "temp_missing_objectives_already_exist" AS\n            SELECT DISTINCT\n              o.id "objectiveId"\n            FROM "temp_incomplete_reports" ir\n            CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n            JOIN "temp_missing_objectives" mo\n            ON ir."activityReportId" = mo."activityReportId"\n            JOIN "Goals" g\n            ON g."grantId" = orgi."grantId"\n            AND md5(g.name) = ANY(mo."goalHashs")\n            LEFT JOIN "Objectives" o\n            ON g.id = o."goalId"\n            and md5(o.title) = mo."objectiveHash"\n            WHERE o.id IS NOT NULL;\n\n            -----------------------------------------------------------------------------------------------------\n            -- 12. Create missing objectives for the grants identified\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objectives_added";\n            CREATE TEMP TABLE "temp_missing_objectives_added" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "Objectives"\n                (\n                  "goalId",\n                  title,\n                  status,\n                  "createdAt",\n                  "updatedAt",\n                  "objectiveTemplateId",\n                  "otherEntityId",\n                  "onApprovedAR",\n                  "firstNotStartedAt",\n                  "lastNotStartedAt",\n                  "firstInProgressAt",\n                  "lastInProgressAt",\n                  "firstCompleteAt",\n                  "lastCompleteAt",\n                  "firstSuspendedAt",\n                  "lastSuspendedAt"\n                )\n                SELECT DISTINCT\n                  g.id "goalId",\n                  mo.title,\n                  mo.status,\n                  mo."createdAt",\n                  mo."updatedAt",\n                  mo."objectiveTemplateId",\n                  mo."otherEntityId",\n                  mo."onApprovedAR",\n                  mo."firstNotStartedAt",\n                  mo."lastNotStartedAt",\n                  mo."firstInProgressAt",\n                  mo."lastInProgressAt",\n                  mo."firstCompleteAt",\n                  mo."lastCompleteAt",\n                  mo."firstSuspendedAt",\n                  mo."lastSuspendedAt"\n                FROM "temp_incomplete_reports" ir\n                CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n                JOIN "temp_missing_objectives" mo\n                ON ir."activityReportId" = mo."activityReportId"\n                JOIN "Goals" g\n                ON g."grantId" = orgi."grantId"\n                AND md5(g.name) = ANY(mo."goalHashs")\n                LEFT JOIN "Objectives" o\n                ON g.id = o."goalId"\n                and md5(o.title) = mo."objectiveHash"\n                WHERE o.id IS NULL\n                RETURNING\n                  id "objectiveId"\n              )\n              SELECT\n                "objectiveId"\n              FROM "inserted";\n            -----------------------------------------------------------------------------------------------------\n            -- 13. Collect new and existing objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objectives_added_and_existing";\n            CREATE TEMP TABLE "temp_missing_objectives_added_and_existing" AS\n            SELECT *\n            FROM "temp_missing_objectives_already_exist"\n            UNION\n            SELECT *\n            FROM "temp_missing_objectives_added";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 14. Create new ActivityReportObjectives for added and found objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_aros_added";\n            CREATE TEMP TABLE "temp_missing_aros_added" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "ActivityReportObjectives"\n                (\n                  "activityReportId",\n                  "objectiveId",\n                  "createdAt",\n                  "updatedAt",\n                  "ttaProvided"\n                )\n                SELECT\n                  ir."activityReportId",\n                  o.id "objectiveId",\n                  MIN(aro2."createdAt") "createdAt",\n                  MAX(aro2."updatedAt") "updatedAt",\n                  ARRAY_AGG(aro2."ttaProvided")\n                FROM "temp_missing_objectives_added_and_existing" moa\n                JOIN "Objectives" o\n                ON moa."objectiveId" = o.id\n                JOIN "Goals" g\n                ON o."goalId" = g.id\n                JOIN "temp_incomplete_reports" ir\n                ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n                AND md5(g.name) = ANY(ir."distinctGoals")\n                AND md5(o.title) = ANY(ir."distinctObjectives")\n                LEFT JOIN "ActivityReportObjectives" aro\n                ON ir."activityReportId" = aro."activityReportId"\n                AND o.id = aro."objectiveId"\n                JOIN "ActivityReportObjectives" aro2\n                ON ir."activityReportId" = aro2."activityReportId"\n                JOIN "Objectives" o2\n                ON aro2."objectiveId" = o2.id\n                AND md5(o.title) = md5(o2.title)\n                JOIN "Goals" g2\n                ON o2."goalId" = g2.id\n                AND g2."grantId" = ANY(ir."intersectionGrantId")\n                AND md5(g.name) = md5(g2.name)\n                WHERE aro.id IS NULL\n                GROUP BY\n                  ir."activityReportId",\n                  o.id\n                RETURNING\n                  id "activityReportObjectiveId"\n              )\n              SELECT\n                "activityReportObjectiveId"\n              FROM "inserted";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 15. Create new Objective files for added and found objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objective_files";\n            CREATE TEMP TABLE "temp_missing_objective_files" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "ObjectiveFiles"\n                (\n                  "objectiveId",\n                  "fileId",\n                  "createdAt",\n                  "updatedAt"\n                )\n                SELECT\n                  o.id "objectiveId",\n                  f2."fileId",\n                  MIN(f2."createdAt") "createdAt",\n                  MAX(f2."updatedAt") "updatedAt"\n                FROM "temp_missing_objectives_added_and_existing" moa\n                JOIN "Objectives" o\n                ON moa."objectiveId" = o.id\n                JOIN "Goals" g\n                ON o."goalId" = g.id\n                JOIN "temp_incomplete_reports" ir\n                ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n                AND md5(g.name) = ANY(ir."distinctGoals")\n                AND md5(o.title) = ANY(ir."distinctObjectives")\n                LEFT JOIN "ObjectiveFiles" f\n                ON o.id = f."objectiveId"\n                LEFT JOIN "Goals" g2\n                ON g2."grantId" = ANY(ir."intersectionGrantId")\n                AND md5(g.name) = md5(g2.name)\n                LEFT JOIN "Objectives" o2\n                ON g2.id = o2."goalId"\n                AND md5(o.title) = md5(o2.title)\n                LEFT JOIN "ObjectiveFiles" f2\n                ON o2.id = f2."objectiveId"\n                WHERE f.id IS NULL\n                AND f2."fileId" IS NOT NULL\n                GROUP BY\n                  o.id,\n                  f2."fileId"\n                RETURNING\n                  id "objectiveFileId"\n              )\n              SELECT\n                "objectiveFileId"\n              FROM "inserted";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 16. Create new Objective resources for added and found objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objective_Resources";\n            CREATE TEMP TABLE "temp_missing_objective_Resources" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "ObjectiveResources"\n                (\n                  "objectiveId",\n                  "userProvidedUrl",\n                  "createdAt",\n                  "updatedAt"\n                )\n                SELECT\n                  o.id "objectiveId",\n                  r2."userProvidedUrl",\n                  MIN(r2."createdAt") "createdAt",\n                  MAX(r2."updatedAt") "updatedAt"\n                FROM "temp_missing_objectives_added_and_existing" moa\n                JOIN "Objectives" o\n                ON moa."objectiveId" = o.id\n                JOIN "Goals" g\n                ON o."goalId" = g.id\n                JOIN "temp_incomplete_reports" ir\n                ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n                AND md5(g.name) = ANY(ir."distinctGoals")\n                AND md5(o.title) = ANY(ir."distinctObjectives")\n                LEFT JOIN "ObjectiveResources" r\n                ON o.id = r."objectiveId"\n                LEFT JOIN "Goals" g2\n                ON g2."grantId" = ANY(ir."intersectionGrantId")\n                AND md5(g.name) = md5(g2.name)\n                LEFT JOIN "Objectives" o2\n                ON g2.id = o2."goalId"\n                AND md5(o.title) = md5(o2.title)\n                LEFT JOIN "ObjectiveResources" r2\n                ON o2.id = r2."objectiveId"\n                WHERE r.id IS NULL\n                AND r2."userProvidedUrl" IS NOT NULL\n                GROUP BY\n                  o.id,\n                  r2."userProvidedUrl"\n                RETURNING\n                  id "objectiveResourceId"\n              )\n              SELECT\n                "objectiveResourceId"\n              FROM "inserted";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 17. Create new Objective Roles for added and found objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objective_Roles";\n            CREATE TEMP TABLE "temp_missing_objective_Roles" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "ObjectiveRoles"\n                (\n                  "objectiveId",\n                  "roleId",\n                  "createdAt",\n                  "updatedAt"\n                )\n                SELECT\n                  o.id "objectiveId",\n                  r2."roleId",\n                  MIN(r2."createdAt") "createdAt",\n                  MAX(r2."updatedAt") "updatedAt"\n                FROM "temp_missing_objectives_added_and_existing" moa\n                JOIN "Objectives" o\n                ON moa."objectiveId" = o.id\n                JOIN "Goals" g\n                ON o."goalId" = g.id\n                JOIN "temp_incomplete_reports" ir\n                ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n                AND md5(g.name) = ANY(ir."distinctGoals")\n                AND md5(o.title) = ANY(ir."distinctObjectives")\n                LEFT JOIN "ObjectiveRoles" r\n                ON o.id = r."objectiveId"\n                LEFT JOIN "Goals" g2\n                ON g2."grantId" = ANY(ir."intersectionGrantId")\n                AND md5(g.name) = md5(g2.name)\n                LEFT JOIN "Objectives" o2\n                ON g2.id = o2."goalId"\n                AND md5(o.title) = md5(o2.title)\n                LEFT JOIN "ObjectiveRoles" r2\n                ON o2.id = r2."objectiveId"\n                WHERE r.id IS NULL\n                AND r2."roleId" IS NOT NULL\n                GROUP BY\n                  o.id,\n                  r2."roleId"\n                RETURNING\n                  id "objectiveRoleId"\n              )\n              SELECT\n                "objectiveRoleId"\n              FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 18. Create new Objective Topics for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objective_Topics";\n          CREATE TEMP TABLE "temp_missing_objective_Topics" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ObjectiveTopics"\n              (\n                "objectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT\n                o.id "objectiveId",\n                t2."topicId",\n                MIN(t2."createdAt") "createdAt",\n                MAX(t2."updatedAt") "updatedAt"\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ObjectiveTopics" t\n              ON o.id = t."objectiveId"\n              LEFT JOIN "Goals" g2\n              ON g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              LEFT JOIN "Objectives" o2\n              ON g2.id = o2."goalId"\n              AND md5(o.title) = md5(o2.title)\n              LEFT JOIN "ObjectiveTopics" t2\n              ON o2.id = t2."objectiveId"\n              WHERE t.id IS NULL\n              AND t2."topicId" IS NOT NULL\n              GROUP BY\n                o.id,\n                t2."topicId"\n              RETURNING\n                id "objectiveTopicId"\n            )\n            SELECT\n              "objectiveTopicId"\n            FROM "inserted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 19. Collect and calculate onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_now_on_approved_ar";\n        CREATE TEMP TABLE "temp_objectives_now_on_approved_ar" AS\n        SELECT\n          moa."objectiveId",\n          'approved' = any(array_agg(distinct ar."calculatedStatus")) "onApprovedAR"\n        FROM "temp_missing_objectives_added_and_existing" moa\n        JOIN "Objectives" o\n        ON moa."objectiveId" = o.id\n        JOIN "ActivityReportObjectives" aro\n        ON moa."objectiveId" = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        GROUP BY moa."objectiveId"\n        HAVING bool_or(o."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 20. Update onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar_updated";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar_updated" AS\n        WITH\n          "updated" AS (\n            UPDATE "Objectives" o\n            SET\n              "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_objectives_now_on_approved_ar" t\n            WHERE o.id = t."objectiveId"\n            RETURNING\n              id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "updated";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 21. Collect args to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_args_to_be_deleted";\n        CREATE TEMP TABLE "temp_args_to_be_deleted" AS\n        SELECT DISTINCT\n          arg.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "ActivityReportGoals" arg\n        ON ir."activityReportId" = arg."activityReportId"\n        AND g.id = arg."goalId";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 22. Deleted args\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_args_deleted";\n        CREATE TEMP TABLE "temp_args_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "ActivityReportGoals" arg\n            USING "temp_args_to_be_deleted" argd\n            WHERE arg.id = argd.id\n            RETURNING\n              arg.id "argId"\n          )\n          SELECT\n            "argId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 23. Collect aros to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_aros_to_be_deleted";\n        CREATE TEMP TABLE "temp_aros_to_be_deleted" AS\n        SELECT DISTINCT\n          aro.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        JOIN "ActivityReportObjectives" aro\n        ON ir."activityReportId" = aro."activityReportId"\n        AND o.id = aro."objectiveId";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 24. Delete aros\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_aros_deleted";\n        CREATE TEMP TABLE "temp_aros_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "temp_aros_to_be_deleted" arod\n            WHERE aro.id = arod.id\n            RETURNING\n              aro.id "aroId"\n          )\n          SELECT\n            "aroId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 25. Collect objectives to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_to_be_deleted";\n        CREATE TEMP TABLE "temp_objectives_to_be_deleted" AS\n        SELECT\n          o.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        WHERE aro.id IS NULL;\n\n        -----------------------------------------------------------------------------------------------------\n        -- 26. Collect objectives to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar" AS\n        SELECT\n          o.id,\n          bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        WHERE aro.id IS NOT NULL\n        GROUP\n          BY o.id\n        HAVING\n          bool_or(o."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 27. Delete Objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_deleted";\n        CREATE TEMP TABLE "temp_objectives_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "Objectives" o\n            USING "temp_objectives_to_be_deleted" od\n            WHERE o.id = od.id\n            RETURNING\n              o.id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 28. Update onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar_updated2";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar_updated2" AS\n        WITH\n          "updated" AS (\n            UPDATE "Objectives" o\n            SET "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_objectives_on_approved_ar" t\n            WHERE o.id = t."id"\n            RETURNING\n              o.id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "updated";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 29. Collect goals to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_to_be_deleted";\n        CREATE TEMP TABLE "temp_goals_to_be_deleted" AS\n        SELECT g.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        LEFT JOIN "Objectives" o\n        ON g.id = o."goalId"\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        WHERE arg.id IS NULL\n        AND o.id IS NULL;\n\n        -----------------------------------------------------------------------------------------------------\n        -- 30. Collect and calculate onApprovedAR for goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_on_approved_ar";\n        CREATE TEMP TABLE "temp_goals_on_approved_ar" AS\n        SELECT\n          g.id,\n          bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        WHERE arg.id IS NOT NULL\n        GROUP BY g.id\n        HAVING bool_or(g."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 31. Delete goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_deleted";\n        CREATE TEMP TABLE "temp_goals_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "Goals" g\n            USING "temp_goals_to_be_deleted" gd\n            WHERE g.id = gd.id\n            RETURNING\n              g.id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 32. Update onApprovedAR for goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_on_approved_ar_updated2";\n        CREATE TEMP TABLE "temp_goals_on_approved_ar_updated2" AS\n        WITH\n          "updated" AS (\n            UPDATE "Goals" g\n            SET "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_goals_on_approved_ar" t\n            WHERE g.id = t."id"\n            RETURNING\n              g.id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "updated";\n\n\n        -----------------------------------------------------------------------------------------------------\n        -- 33. Output of some counts from steps above\n        -----------------------------------------------------------------------------------------------------\n        /*\n        SELECT\n        'incomplete_reports' "name",\n        count(*) cnt\n        FROM "temp_incomplete_reports"\n        UNION\n        SELECT\n        'missing_goals_added' "name",\n        count(*) cnt\n        FROM "temp_missing_goals_added_and_existing"\n        UNION\n        SELECT\n        'missing_args_added' "name",\n        count(*) cnt\n        FROM "temp_missing_args_added"\n        UNION\n        SELECT\n        'goals_on_approved_ar_updated' "name",\n        count(*) cnt\n        FROM "temp_goals_on_approved_ar_updated"\n        UNION\n        SELECT\n        'missing_objectives_added' "name",\n        count(*) cnt\n        FROM "temp_missing_objectives_added_and_existing"\n        UNION\n        SELECT\n        'missing_aros_added' "name",\n        count(*) cnt\n        FROM "temp_missing_aros_added"\n        UNION\n        SELECT\n        'objectives_on_approved_ar_updated' "name",\n        count(*) cnt\n        FROM "temp_objectives_on_approved_ar_updated";\n        */
Executing (8346fef1-7d14-411c-b625-ed562b12d75a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221017000000-missing-objectives: migrated (0.437s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221018174734-remove-objective-roles: migrating =======
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): START TRANSACTION;
Connection validated successfully
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221018174734-remove-objective-roles.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): SELECT "ZAFRemoveAuditingOnTable"('ActivityReportObjectiveRoles');
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveRoles');
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): DROP TABLE IF EXISTS "ZALActivityReportObjectiveRoles";
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): DROP TABLE IF EXISTS "ZALObjectiveRoles";
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): DROP TABLE IF EXISTS "ActivityReportObjectiveRoles";
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): DROP TABLE IF EXISTS "ObjectiveRoles";
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (f2dde65b-896d-4041-88d9-7595deb352b0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221018174734-remove-objective-roles: migrated (0.235s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221103000000-emergent-goals-not-rttapa: migrating =======
Executing (267bcfe6-1d1d-43a6-bfd6-47695ecad710): START TRANSACTION;
Connection validated successfully
Executing (267bcfe6-1d1d-43a6-bfd6-47695ecad710): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221103000000-emergent-goals-not-rttapa.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (267bcfe6-1d1d-43a6-bfd6-47695ecad710): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (267bcfe6-1d1d-43a6-bfd6-47695ecad710): UPDATE "Goals" g\n          SET "isRttapa" = 'No'::"enum_Goals_isRttapa"\n          WHERE COALESCE(g."isFromSmartsheetTtaPlan",false) = false;
Executing (267bcfe6-1d1d-43a6-bfd6-47695ecad710): UPDATE "ActivityReportGoals" arg\n          SET "isRttapa" = (g."isRttapa"::TEXT)::"enum_ActivityReportGoals_isRttapa"\n          FROM "Goals" g\n          WHERE arg."goalId" = g.id\n          AND arg."isRttapa" IS NULL\n          AND g."isRttapa" IS NOT NULL;
Executing (267bcfe6-1d1d-43a6-bfd6-47695ecad710): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (267bcfe6-1d1d-43a6-bfd6-47695ecad710): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221103000000-emergent-goals-not-rttapa: migrated (0.189s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221104000000-template-race-condition: migrating =======
Executing (d31c2286-5a94-4191-bf5a-bb50873dd86d): START TRANSACTION;
Connection validated successfully
Executing (d31c2286-5a94-4191-bf5a-bb50873dd86d): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221104000000-template-race-condition.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d31c2286-5a94-4191-bf5a-bb50873dd86d): DO $$\n          BEGIN\n            CREATE TEMP TABLE "TempDuplicateGoalTemplates" AS\n            SELECT\n              min(gt.id) "goalTemplateId",\n              dgt.id "duplicateGoalTemplateId",\n              dgt.hash,\n              dgt."regionId"\n            FROM "GoalTemplates" gt\n            JOIN "GoalTemplates" dgt\n            ON gt.hash = dgt.hash\n            AND gt.id < dgt.id\n            GROUP BY 2,3,4;\n            ------------------------------------------------------------------------------------\n            UPDATE "Goals" g\n            SET\n              "goalTemplateId" = tdgt."goalTemplateId"\n            FROM "TempDuplicateGoalTemplates" tdgt\n            WHERE g."goalTemplateId" = tdgt."duplicateGoalTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "GoalTemplateDates" AS (\n                SELECT\n                  gt.id "goalTemplateId",\n                  min(gt2."createdAt") "createdAt",\n                  max(gt2."updatedAt") "updatedAt",\n                  max(gt2."lastUsed") "lastUsed",\n                  max(gt2."templateNameModifiedAt") "templateNameModifiedAt"\n                FROM "GoalTemplates" gt\n                JOIN "TempDuplicateGoalTemplates" tdgt\n                ON gt.id = tdgt."goalTemplateId"\n                JOIN "GoalTemplates" gt2\n                ON tdgt."goalTemplateId" = gt2.id\n                OR tdgt."duplicateGoalTemplateId" = gt2.id\n                GROUP BY 1\n              )\n            UPDATE "GoalTemplates" gt\n            SET\n              "createdAt" = gtd."createdAt",\n              "updatedAt" = gtd."updatedAt",\n              "lastUsed" = gtd."lastUsed",\n              "templateNameModifiedAt" = gtd."templateNameModifiedAt"\n            FROM "GoalTemplateDates" gtd\n            WHERE gt.id = gtd."goalTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "GoalTemplateObjectiveTemplatesToUpdate" AS (\n                SELECT\n                  gtot.id "goalTemplateObjectiveTemplateId",\n                  tdgt."goalTemplateId",\n                  tdgt."duplicateGoalTemplateId",\n                  gtot."objectiveTemplateId",\n                  gtot."createdAt",\n                  gtot."updatedAt"\n                FROM "GoalTemplateObjectiveTemplates" gtot\n                JOIN "TempDuplicateGoalTemplates" tdgt\n                ON gtot."objectiveTemplateId" = tdgt."duplicateGoalTemplateId"\n                LEFT JOIN "GoalTemplateObjectiveTemplates" gtot2\n                ON tdgt."goalTemplateId" = gtot2."goalTemplateId"\n                AND gtot."objectiveTemplateId" = gtot2."objectiveTemplateId"\n                WHERE gtot2.id IS NULL\n              )\n            UPDATE "GoalTemplateObjectiveTemplates" gtot\n            SET  "goalTemplateId" = gtotu."goalTemplateId"\n            FROM "GoalTemplateObjectiveTemplatesToUpdate" gtotu\n            WHERE gtot.id = gtotu."goalTemplateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            UPDATE "GoalTemplateObjectiveTemplates" gtot\n            SET  "goalTemplateId" = tdgt."goalTemplateId"\n            FROM "TempDuplicateGoalTemplates" tdgt\n            WHERE gtot."goalTemplateId" = tdgt."duplicateGoalTemplateId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "GoalTemplates" gt\n            USING "TempDuplicateGoalTemplates" tdgt\n            WHERE gt."id" = tdgt."duplicateGoalTemplateId";\n            ------------------------------------------------------------------------------------\n            DROP TABLE "TempDuplicateGoalTemplates";\n          END$$;
Executing (d31c2286-5a94-4191-bf5a-bb50873dd86d): DO $$\n          BEGIN\n            CREATE TEMP TABLE "TempDuplicateObjectiveTemplates" AS\n            SELECT\n              min(ot.id) "objectiveTemplateId",\n              dot.id "duplicateObjectiveTemplateId",\n              dot.hash,\n              dot."regionId"\n            FROM "ObjectiveTemplates" ot\n            JOIN "ObjectiveTemplates" dot\n            ON ot.hash = dot.hash\n            AND ot.id < dot.id\n            GROUP BY 2,3,4;\n            ------------------------------------------------------------------------------------\n            UPDATE "Objectives" o\n            SET\n              "objectiveTemplateId" = tdot."objectiveTemplateId"\n            FROM "TempDuplicateObjectiveTemplates" tdot\n            WHERE o."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "ObjectiveTemplateDates" AS (\n                SELECT\n                  ot.id "objectiveTemplateId",\n                  min(ot2."createdAt") "createdAt",\n                  max(ot2."updatedAt") "updatedAt",\n                  max(ot2."lastUsed") "lastUsed",\n                  max(ot2."templateTitleModifiedAt") "templateTitleModifiedAt"\n                FROM "ObjectiveTemplates" ot\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON ot.id = tdot."objectiveTemplateId"\n                JOIN "ObjectiveTemplates" ot2\n                ON tdot."objectiveTemplateId" = ot2.id\n                OR tdot."duplicateObjectiveTemplateId" = ot2.id\n                GROUP BY 1\n              )\n            UPDATE "ObjectiveTemplates" ot\n            SET\n              "createdAt" = otd."createdAt",\n              "updatedAt" = otd."updatedAt",\n              "lastUsed" = otd."lastUsed",\n              "templateTitleModifiedAt" = otd."templateTitleModifiedAt"\n            FROM "ObjectiveTemplateDates" otd\n            WHERE ot.id = otd."objectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "GoalTemplateObjectiveTemplatesToUpdate" AS (\n                SELECT\n                  gtot.id "goalTemplateObjectiveTemplateId",\n                  tdot."objectiveTemplateId",\n                  tdot."duplicateObjectiveTemplateId",\n                  gtot."goalTemplateId",\n                  gtot."createdAt",\n                  gtot."updatedAt"\n                FROM "GoalTemplateObjectiveTemplates" gtot\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON gtot."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId"\n                LEFT JOIN "GoalTemplateObjectiveTemplates" gtot2\n                ON tdot."objectiveTemplateId" = gtot2."objectiveTemplateId"\n                AND gtot."goalTemplateId" = gtot2."goalTemplateId"\n                WHERE gtot2.id IS NULL\n              )\n            UPDATE "GoalTemplateObjectiveTemplates" gtot\n            SET  "objectiveTemplateId" = gtotu."objectiveTemplateId"\n            FROM "GoalTemplateObjectiveTemplatesToUpdate" gtotu\n            WHERE gtot.id = gtotu."goalTemplateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "GoalTemplateObjectiveTemplates" gtot\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE gtot."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "ObjectiveTemplateFilesToUpdate" AS (\n                SELECT\n                  otf.id "objectiveTemplateFileId",\n                  tdot."objectiveTemplateId",\n                  tdot."duplicateObjectiveTemplateId",\n                  otf."fileId",\n                  otf."createdAt",\n                  otf."updatedAt"\n                FROM "ObjectiveTemplateFiles" otf\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON otf."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId"\n                LEFT JOIN "ObjectiveTemplateFiles" otf2\n                ON tdot."objectiveTemplateId" = otf2."objectiveTemplateId"\n                AND otf."fileId" = otf2."fileId"\n                WHERE otf2.id IS NULL\n              )\n            UPDATE "ObjectiveTemplateFiles" otf\n            SET\n              "objectiveTemplateId" = otfu."objectiveTemplateId"\n            FROM "ObjectiveTemplateFilesToUpdate" otfu\n            WHERE otf.id = otfu."objectiveTemplateFileId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplateFiles" otf\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE otf."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "ObjectiveTemplateResourcesToUpdate" AS (\n                SELECT\n                  otr.id "objectiveTemplateResourceId",\n                  tdot."objectiveTemplateId",\n                  tdot."duplicateObjectiveTemplateId",\n                  otr."userProvidedUrl",\n                  otr."createdAt",\n                  otr."updatedAt"\n                FROM "ObjectiveTemplateResources" otr\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON otr."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId"\n                LEFT JOIN "ObjectiveTemplateResources" otr2\n                ON tdot."objectiveTemplateId" = otr2."objectiveTemplateId"\n                AND otr."userProvidedUrl" = otr2."userProvidedUrl"\n                WHERE otr2.id IS NULL\n              )\n            UPDATE "ObjectiveTemplateResources" otr\n            SET\n              "objectiveTemplateId" = otru."objectiveTemplateId"\n            FROM "ObjectiveTemplateResourcesToUpdate" otru\n            WHERE otr.id = otru."objectiveTemplateResourceId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplateResources" otr\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE otr."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "ObjectiveTemplateTopicsToUpdate" AS (\n                SELECT\n                  ott.id "objectiveTemplateTopicId",\n                  tdot."objectiveTemplateId",\n                  tdot."duplicateObjectiveTemplateId",\n                  ott."topicId",\n                  ott."createdAt",\n                  ott."updatedAt"\n                FROM "ObjectiveTemplateTopics" ott\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON ott."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId"\n                LEFT JOIN "ObjectiveTemplateTopics" ott2\n                ON tdot."objectiveTemplateId" = ott2."objectiveTemplateId"\n                AND ott."topicId" = ott2."topicId"\n                WHERE ott2.id IS NULL\n              )\n            UPDATE "ObjectiveTemplateTopics" ott\n            SET\n              "objectiveTemplateId" = ottu."objectiveTemplateId"\n            FROM "ObjectiveTemplateTopicsToUpdate" ottu\n            WHERE ott.id = ottu."objectiveTemplateTopicId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplateTopics" ott\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE ott."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplates" ot\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE ot."id" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            DROP TABLE "TempDuplicateObjectiveTemplates";\n          END$$;
Executing (d31c2286-5a94-4191-bf5a-bb50873dd86d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221104000000-template-race-condition: migrated (0.059s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221117-133423-create-aro-sort-column: migrating =======
Executing (2268f8a0-03a8-4962-ba8e-5f63be6276c2): START TRANSACTION;
Connection validated successfully
Executing (2268f8a0-03a8-4962-ba8e-5f63be6276c2): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20221117-133423-create-aro-sort-column.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2268f8a0-03a8-4962-ba8e-5f63be6276c2): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "arOrder" INTEGER DEFAULT 1;
Executing (2268f8a0-03a8-4962-ba8e-5f63be6276c2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221117-133423-create-aro-sort-column: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221117151412-add-rtr-order-to-objectives: migrating =======
Executing (ad69a23e-7590-439d-8a4d-404ef77210aa): START TRANSACTION;
Connection validated successfully
Executing (ad69a23e-7590-439d-8a4d-404ef77210aa): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221117151412-add-rtr-order-to-objectives.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ad69a23e-7590-439d-8a4d-404ef77210aa): ALTER TABLE "public"."Objectives" ADD COLUMN "rtrOrder" INTEGER DEFAULT 1;
Executing (ad69a23e-7590-439d-8a4d-404ef77210aa): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221117151412-add-rtr-order-to-objectives: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221121200321-add-actively-edited-to-activity-report-goal: migrating =======
Executing (7f240303-ba7f-41f8-abd8-4ec6b1cad194): START TRANSACTION;
Connection validated successfully
Executing (7f240303-ba7f-41f8-abd8-4ec6b1cad194): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20221121200321-add-actively-edited-to-activity-report-goal.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7f240303-ba7f-41f8-abd8-4ec6b1cad194): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "isActivelyEdited" BOOLEAN;
Executing (7f240303-ba7f-41f8-abd8-4ec6b1cad194): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221121200321-add-actively-edited-to-activity-report-goal: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221122125923-update-aro-completed-status: migrating =======
Executing (fd0b791f-56e8-4309-b53d-9bb16221bc0a): START TRANSACTION;
Connection validated successfully
Executing (fd0b791f-56e8-4309-b53d-9bb16221bc0a): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20221122125923-update-aro-completed-status.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (fd0b791f-56e8-4309-b53d-9bb16221bc0a): UPDATE "ActivityReportObjectives" SET "status" = 'Complete' WHERE "status" = 'Completed'
Executing (fd0b791f-56e8-4309-b53d-9bb16221bc0a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221122125923-update-aro-completed-status: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221129000000-dedupe-objectives: migrating =======
Executing (abcefd6f-cd97-4759-8c05-cbc265cf85e1): START TRANSACTION;
Connection validated successfully
Executing (abcefd6f-cd97-4759-8c05-cbc265cf85e1): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221129000000-dedupe-objectives.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (abcefd6f-cd97-4759-8c05-cbc265cf85e1): WITH\n          obj_recovered_dates AS (\n            SELECT\n              data_id recovered_obj_id,\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Not Started') "firstNotStartedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Not Started') "lastNotStartedAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'In Progress') "firstInProgressAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'In Progress') "lastInProgressAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Suspended') "firstSuspendedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Suspended') "lastSuspendedAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Complete') "firstCompleteAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Complete') "lastCompleteAt"\n            FROM public."ZALObjectives"\n            WHERE new_row_data ->> 'status' IS NOT NULL\n            GROUP BY 1\n          )\n          UPDATE "Objectives" o\n          SET\n            "firstNotStartedAt" = ord."firstNotStartedAt",\n            "lastNotStartedAt" = ord."lastNotStartedAt",\n            "firstInProgressAt" = ord."firstInProgressAt",\n            "lastInProgressAt" = ord."lastInProgressAt",\n            "firstSuspendedAt" = ord."firstSuspendedAt",\n            "lastSuspendedAt" = ord."lastSuspendedAt",\n            "firstCompleteAt" = ord."firstCompleteAt",\n            "lastCompleteAt" = ord."lastCompleteAt"\n          FROM obj_recovered_dates ord\n          WHERE o.id = recovered_obj_id\n          ;
Executing (abcefd6f-cd97-4759-8c05-cbc265cf85e1): WITH\n          goal_recovered_dates AS (\n            SELECT\n              data_id recovered_goal_id,\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Not Started') "firstNotStartedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Not Started') "lastNotStartedAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'In Progress') "firstInProgressAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'In Progress') "lastInProgressAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Suspended') "firstCeasedSuspendedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Suspended') "lastCeasedSuspendedAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Closed') "firstClosedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Closed') "lastClosedAt"\n            FROM public."ZALGoals"\n            WHERE new_row_data ->> 'status' IS NOT NULL\n            GROUP BY 1\n          )\n          UPDATE "Goals" g\n          SET\n            "firstNotStartedAt" = grd."firstNotStartedAt",\n            "lastNotStartedAt" = grd."lastNotStartedAt",\n            "firstInProgressAt" = grd."firstInProgressAt",\n            "lastInProgressAt" = grd."lastInProgressAt",\n            "firstCeasedSuspendedAt" = grd."firstCeasedSuspendedAt",\n            "lastCeasedSuspendedAt" = grd."lastCeasedSuspendedAt",\n            "firstClosedAt" = grd."firstClosedAt",\n            "lastClosedAt" = grd."lastClosedAt"\n          FROM goal_recovered_dates grd\n          WHERE g.id = recovered_goal_id\n          ;
Executing (abcefd6f-cd97-4759-8c05-cbc265cf85e1): WITH\n          -- make easily sortable statuses\n          status_order AS (\n            SELECT\n              'Not Started' AS statname,\n              1 AS statrank\n            UNION SELECT 'In Progress',2\n            UNION SELECT 'Complete', 4\n          ),\n          -- collect duplicate objectives based on matching title and goalId\n          grouped_objectives AS (\n            SELECT\n              *,\n              COALESCE("goalId",0) || '-' || COALESCE("otherEntityId",0) || '-' || MD5(TRIM(title))\n              AS group_id,\n              CASE WHEN status = 'Complete' THEN 1 ELSE 0 END\n              AS seq_end -- Complete objectives end a sequence within a group\n            FROM "Objectives"\n          ),\n          -- break groups of duplicates into sets that will be consolidated to a single objective\n          -- when a 'Complete' ends a sequence of duplicate objectives within a group, they form a set\n          -- the complete objective will inherit all the data associated with the objectives of that set\n          objective_sets AS (\n            SELECT\n              *,\n                group_id || '-' ||\n                SUM(seq_end) OVER (PARTITION BY group_id ORDER BY "updatedAt" DESC)\n              AS obj_set_id\n            FROM grouped_objectives\n          ),\n          set_aggregates AS (\n            SELECT\n              obj_set_id AS aggregate_osid,\n              COUNT(*) AS os_count,\n              TRIM(title) trimmed_title,\n              MIN("createdAt") min_createdat,\n              MAX("updatedAt") max_updatedat,\n              MIN("objectiveTemplateId") min_obj_template_id,\n              BOOL_OR("onApprovedAR") any_onapprovedar,\n              MIN("firstNotStartedAt") new_fnotstartedat,\n              MAX("lastNotStartedAt") new_lnotstartedat,\n              MIN("firstInProgressAt") new_finprogressat,\n              MAX("lastInProgressAt") new_linprogressat,\n              MIN("firstCompleteAt") new_fcompleteat,\n              MAX("lastCompleteAt") new_lcompleteat,\n              MIN("firstSuspendedAt") new_fsuspendedat,\n              MAX("lastSuspendedAt") new_lsuspendedat\n            FROM objective_sets\n            GROUP BY 1,3\n            HAVING COUNT(*) > 1\n          ),\n          -- Rank objectives within sets to find the objective with the most-advanced status and latest update\n          -- only one set within a dupe group can lack a Complete objective, so at most one objective per dupe group will survive deduping with a non-complete status\n          ranked_objectives AS (\n            SELECT\n              *,\n              ROW_NUMBER() OVER (PARTITION BY obj_set_id ORDER BY statrank DESC, "updatedAt" DESC)\n              AS obj_rank\n            FROM objective_sets os\n            LEFT JOIN status_order so\n              ON status = statname\n          ),\n          --- for each of the three datasets merge objectives into the older records as described\n          updated_objectives AS (\n            UPDATE "Objectives" o\n            SET\n              "createdAt" = min_createdat,\n              "updatedAt" = max_updatedat,\n              "objectiveTemplateId" = min_obj_template_id,\n              "onApprovedAR" = any_onapprovedar,\n              "firstNotStartedAt" = new_fnotstartedat,\n              "lastNotStartedAt" = new_lnotstartedat,\n              "firstInProgressAt" = new_finprogressat,\n              "lastInProgressAt" = new_linprogressat,\n              "firstCompleteAt" = new_fcompleteat,\n              "lastCompleteAt" = new_lcompleteat,\n              "firstSuspendedAt" = new_fsuspendedat,\n              "lastSuspendedAt" = new_lsuspendedat\n            FROM ranked_objectives ro\n            JOIN set_aggregates sa\n              ON sa.aggregate_osid = ro.obj_set_id\n            WHERE o.id = ro.id\n              AND ro.obj_rank = 1\n              AND sa.os_count > 1\n            RETURNING\n              o.id\n          ),\n          -- create a unified list of affected objectives and which objectives inherit their metadata\n          affected_objectives AS (\n            SELECT\n              uo.id inheriting_oid,\n              all_o.id donor_oid\n            FROM updated_objectives uo\n            JOIN objective_sets os\n              ON uo.id = os.id\n            JOIN objective_sets all_o\n              ON os.obj_set_id = all_o.obj_set_id\n          ),\n          --- migrate/merge/delete metadata table values from newer objectives into the older objectives\n          affected_objective_files AS (\n            SELECT\n              of.id,\n              ao.inheriting_oid,\n              ROW_NUMBER() OVER (\n                PARTITION BY ao.inheriting_oid, of."fileId"\n                ORDER BY "createdAt", of.id\n              ) AS dupe_rank,\n              ao.donor_oid = ao.inheriting_oid AS on_inheriting_obj\n            FROM affected_objectives ao\n            JOIN "ObjectiveFiles" of\n              ON ao.donor_oid = of."objectiveId"\n            WHERE ao.inheriting_oid <> ao.donor_oid\n          ),\n          -- Move objective file links from deduped objectives to the inheriting objective, or delete the linking record if the file is a dupe\n          migrated_objective_files AS (\n            UPDATE "ObjectiveFiles" f\n            SET\n              "objectiveId" = aof.inheriting_oid\n            FROM affected_objective_files aof\n            WHERE aof.id = f.id\n              AND NOT on_inheriting_obj\n              AND dupe_rank = 1\n            RETURNING\n              aof.id\n          ),\n          deleted_objective_files AS (\n            DELETE FROM "ObjectiveFiles" f\n            USING affected_objective_files aof\n            WHERE f.id = aof.id\n              AND dupe_rank > 1\n            RETURNING\n              aof.id\n          ),\n          affected_objective_resources AS (\n            SELECT\n              or_.id,\n              ao.inheriting_oid,\n              ROW_NUMBER() OVER (\n                PARTITION BY ao.inheriting_oid, or_."userProvidedUrl"\n                ORDER BY "createdAt", or_.id\n              ) AS dupe_rank,\n              ao.donor_oid = ao.inheriting_oid AS on_inheriting_obj\n            FROM affected_objectives ao\n            JOIN "ObjectiveResources" or_\n              ON ao.donor_oid = or_."objectiveId"\n          ),\n          migrated_objective_resources AS (\n            UPDATE "ObjectiveResources" r\n            SET\n              "objectiveId" = aor.inheriting_oid\n            FROM affected_objective_resources aor\n            WHERE aor.id = r.id\n              AND NOT on_inheriting_obj\n              AND dupe_rank = 1\n            RETURNING\n              aor.id\n          ),\n          deleted_objective_resources AS (\n            DELETE FROM "ObjectiveResources" r\n            USING affected_objective_resources aor\n            WHERE r.id = aor.id\n              AND dupe_rank > 1\n            RETURNING\n              aor.id\n          ),\n          affected_objective_topics AS (\n            SELECT\n              ot.id,\n              ao.inheriting_oid,\n              ROW_NUMBER() OVER (\n                PARTITION BY ao.inheriting_oid, ot."topicId"\n                ORDER BY "createdAt", ot.id\n              ) AS dupe_rank,\n              ao.donor_oid = ao.inheriting_oid AS on_inheriting_obj\n            FROM affected_objectives ao\n            JOIN "ObjectiveTopics" ot\n              ON ao.donor_oid = ot."objectiveId"\n          ),\n          migrated_objective_topics AS (\n            UPDATE "ObjectiveTopics" r\n            SET\n              "objectiveId" = aot.inheriting_oid\n            FROM affected_objective_topics aot\n            WHERE aot.id = r.id\n              AND NOT on_inheriting_obj\n              AND dupe_rank = 1\n            RETURNING\n              aot.id\n          ),\n          deleted_objective_topics AS (\n            DELETE FROM "ObjectiveTopics" t\n            USING affected_objective_topics aot\n            WHERE t.id = aot.id\n              AND dupe_rank > 1\n            RETURNING\n              aot.id\n          ),\n          --- migrate/merge/delete ARO records to use the top ranked objectives\n          ranked_aros AS (\n            SELECT\n              aro.id,\n              ao.inheriting_oid,\n              ROW_NUMBER() OVER (\n                PARTITION BY ao.inheriting_oid, aro."activityReportId"\n                ORDER BY "createdAt", aro.id\n              ) AS dupe_rank,\n              ao.donor_oid = ao.inheriting_oid AS on_inheriting_obj,\n              aro."activityReportId" ar_id,\n              aro."ttaProvided" tta_provided\n            FROM affected_objectives ao\n            JOIN "ActivityReportObjectives" aro\n              ON ao.donor_oid = aro."objectiveId"\n          ),\n          affected_aros AS (\n            SELECT\n              raro.id,\n              raro.inheriting_oid,\n              raro.dupe_rank,\n              raro.on_inheriting_obj,\n              raro.ar_id,\n              top_rank.id inheriting_aroid\n            FROM ranked_aros raro\n            JOIN ranked_aros top_rank\n              ON raro.inheriting_oid = top_rank.inheriting_oid\n              AND raro.ar_id = top_rank.ar_id\n              AND top_rank.dupe_rank = 1\n          ),\n          -- Handle the possibility that different AROs for different duplicate Objs have different ttaProvided\n          -- This is more of a theoretical issue than one we expect to see in the data,\n          -- so it will hopefully do nothing, but this assures that if they do exist, the\n          -- different texts aren't lost, merely concatenated.\n          tta_provided_agg AS (\n            SELECT\n              inheriting_oid,\n              ar_id,\n              STRING_AGG(DISTINCT tta_provided, ', ') tta_provided_concat\n            FROM ranked_aros\n            GROUP BY 1,2\n          ),\n          -- Doing the update here even if it's already on the inheriting objective because of\n          -- the tta provided concatenation\n          migrated_aros AS (\n            UPDATE "ActivityReportObjectives" aro\n            SET\n              "objectiveId" = aaro.inheriting_oid,\n              "ttaProvided" = tta_provided_concat\n            FROM affected_aros aaro\n            JOIN tta_provided_agg tpa\n              ON tpa.inheriting_oid = aaro.inheriting_oid\n              AND aaro.ar_id = tpa.ar_id\n            WHERE aaro.id = aro.id\n              AND dupe_rank = 1\n            RETURNING\n              aaro.id\n          ),\n          -- do the same migrations with linking records attaching to AROs as were done with\n          -- linking records attaching to Objectives\n          affected_aro_files AS (\n            SELECT\n              arof.id,\n              aaro.inheriting_aroid,\n              ROW_NUMBER() OVER (\n                PARTITION BY arof."fileId", aaro.inheriting_aroid\n                ORDER BY aaro.dupe_rank, arof.id\n              ) AS dupe_rank,\n              aaro.dupe_rank = 1 AS on_inheriting_aro\n            FROM affected_aros aaro\n            JOIN "ActivityReportObjectiveFiles" arof\n              ON aaro.id = arof."activityReportObjectiveId"\n          ),\n          migrated_aro_files AS (\n            UPDATE "ActivityReportObjectiveFiles" arof\n            SET\n              "activityReportObjectiveId" = inheriting_aroid\n            FROM affected_aro_files aarof\n            WHERE aarof.id = arof.id\n              AND dupe_rank = 1\n              AND NOT on_inheriting_aro\n            RETURNING\n              arof.id\n          ),\n          deleted_aro_files AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING affected_aro_files aarof\n            WHERE aarof.id = arof.id\n              AND dupe_rank > 1\n            RETURNING\n              arof.id\n          ),\n          affected_aro_resources AS (\n            SELECT\n              aror.id,\n              aaro.inheriting_aroid,\n              ROW_NUMBER() OVER (\n                PARTITION BY aaro.inheriting_aroid, aror."userProvidedUrl"\n                ORDER BY aaro.dupe_rank, aror.id\n              ) AS dupe_rank,\n              aaro.dupe_rank = 1 AS on_inheriting_aro\n            FROM affected_aros aaro\n            JOIN "ActivityReportObjectiveResources" aror\n              ON aaro.id = aror."activityReportObjectiveId"\n          ),\n          migrated_aro_resources AS (\n            UPDATE "ActivityReportObjectiveResources" aror\n            SET\n              "activityReportObjectiveId" = inheriting_aroid\n            FROM affected_aro_resources aaror\n            WHERE aaror.id = aror.id\n              AND dupe_rank = 1\n              AND NOT on_inheriting_aro\n            RETURNING\n              aror.id\n          ),\n          deleted_aro_resources AS (\n            DELETE FROM "ActivityReportObjectiveResources" aror\n            USING affected_aro_resources aaror\n            WHERE aaror.id = aror.id\n              AND dupe_rank > 1\n            RETURNING\n              aror.id\n          ),\n          affected_aro_topics AS (\n            SELECT\n              arot.id,\n              aaro.inheriting_aroid,\n              ROW_NUMBER() OVER (\n                PARTITION BY aaro.inheriting_aroid, arot."topicId"\n                ORDER BY aaro.dupe_rank, arot.id\n              ) AS dupe_rank,\n              aaro.dupe_rank = 1 AS on_inheriting_aro\n            FROM affected_aros aaro\n            JOIN "ActivityReportObjectiveTopics" arot\n              ON aaro.id = arot."activityReportObjectiveId"\n          ),\n          migrated_aro_topics AS (\n            UPDATE "ActivityReportObjectiveTopics" arot\n            SET\n              "activityReportObjectiveId" = inheriting_aroid\n            FROM affected_aro_topics aarot\n            WHERE aarot.id = arot.id\n              AND dupe_rank = 1\n              AND NOT on_inheriting_aro\n            RETURNING\n              arot.id\n          ),\n          deleted_aro_topics AS (\n            DELETE FROM "ActivityReportObjectiveTopics" arot\n            USING affected_aro_topics aarot\n            WHERE aarot.id = arot.id\n              AND dupe_rank > 1\n            RETURNING\n              arot.id\n          ),\n          deleted_aros AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING affected_aros aaro\n            WHERE aro.id = aaro.id\n              AND dupe_rank > 1\n            RETURNING\n              aaro.id\n          ),\n          --- delete the donor objectives\n          deleted_objectives AS (\n            DELETE FROM "Objectives" o\n            USING affected_objectives ao\n            WHERE o.id = ao.donor_oid\n              AND ao.inheriting_oid <> ao.donor_oid\n            RETURNING\n              o.id\n          )\n          --- results\n          SELECT 'updated_objectives', count(*)\n          FROM updated_objectives\n          UNION\n          SELECT 'migrated_objective_files', count(*)\n          FROM migrated_objective_files\n          UNION\n          SELECT 'deleted_objective_files', count(*)\n          FROM deleted_objective_files\n          UNION\n          SELECT 'migrated_objective_resources', count(*)\n          FROM migrated_objective_resources\n          UNION\n          SELECT 'deleted_objective_resources', count(*)\n          FROM deleted_objective_resources\n          UNION\n          SELECT 'migrated_objective_topics', count(*)\n          FROM migrated_objective_topics\n          UNION\n          SELECT 'deleted_objective_topics', count(*)\n          FROM deleted_objective_topics\n          UNION\n          SELECT 'migrated_aros', count(*)\n          FROM migrated_aros\n          UNION\n          SELECT 'migrated_aro_files', count(*)\n          FROM migrated_aro_files\n          UNION\n          SELECT 'deleted_aro_files', count(*)\n          FROM deleted_aro_files\n          UNION\n          SELECT 'migrated_aro_resources', count(*)\n          FROM migrated_aro_resources\n          UNION\n          SELECT 'deleted_aro_resources', count(*)\n          FROM deleted_aro_resources\n          UNION\n          SELECT 'migrated_aro_topics', count(*)\n          FROM migrated_aro_topics\n          UNION\n          SELECT 'deleted_aro_topics', count(*)\n          FROM deleted_aro_topics\n          UNION\n          SELECT 'deleted_aros', count(*)\n          FROM deleted_aros\n          UNION\n          SELECT 'deleted_objectives', count(*)\n          FROM deleted_objectives;
Executing (abcefd6f-cd97-4759-8c05-cbc265cf85e1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221129000000-dedupe-objectives: migrated (0.041s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221201231306-user-settings-ps-emails: migrating =======
Executing (150d468e-f070-44eb-bfd1-cb56a03c648f): START TRANSACTION;
Connection validated successfully
Executing (150d468e-f070-44eb-bfd1-cb56a03c648f): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenRecipientReportApprovedProgramSpecialist', '"never"', current_timestamp, current_timestamp)
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE 'recipientReportApproved';\n        ALTER TYPE "enum_MailerLogs_action" ADD VALUE 'recipientReportApprovedDigest';
Connection validated successfully
Executing (150d468e-f070-44eb-bfd1-cb56a03c648f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221201231306-user-settings-ps-emails: migrated (0.033s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221206165155-alter-resource-column: migrating =======
Executing (c662186c-4b48-4307-902d-85cbdb098176): START TRANSACTION;
Connection validated successfully
Executing (c662186c-4b48-4307-902d-85cbdb098176): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20221206165155-alter-resource-column.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c662186c-4b48-4307-902d-85cbdb098176): ALTER TABLE "ObjectiveResources" ALTER COLUMN "userProvidedUrl" SET NOT NULL;ALTER TABLE "ObjectiveResources" ALTER COLUMN "userProvidedUrl" DROP DEFAULT;ALTER TABLE "ObjectiveResources" ALTER COLUMN "userProvidedUrl" TYPE TEXT;
Executing (c662186c-4b48-4307-902d-85cbdb098176): ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "userProvidedUrl" SET NOT NULL;ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "userProvidedUrl" DROP DEFAULT;ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "userProvidedUrl" TYPE TEXT;
Executing (c662186c-4b48-4307-902d-85cbdb098176): ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "userProvidedUrl" SET NOT NULL;ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "userProvidedUrl" DROP DEFAULT;ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "userProvidedUrl" TYPE TEXT;
Executing (c662186c-4b48-4307-902d-85cbdb098176): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221206165155-alter-resource-column: migrated (0.047s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221213153251-add-created-via-to-objectives: migrating =======
Executing (bcc4123b-ddf7-400b-8ff3-f83deaebbcc3): START TRANSACTION;
Connection validated successfully
Executing (bcc4123b-ddf7-400b-8ff3-f83deaebbcc3): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20221213153251-add-created-via-to-objectives.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (bcc4123b-ddf7-400b-8ff3-f83deaebbcc3): CREATE TYPE "public"."enum_Objectives_createdVia" AS ENUM('activityReport', 'rtr');ALTER TABLE "public"."Objectives" ADD COLUMN "createdVia" "public"."enum_Objectives_createdVia";
Executing (bcc4123b-ddf7-400b-8ff3-f83deaebbcc3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221213153251-add-created-via-to-objectives: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230110204839-remove-goals-objectives-feature-flag: migrating =======
Executing (cb75becc-8e96-4760-a904-c1931dcd7353): START TRANSACTION;
Connection validated successfully
Executing (cb75becc-8e96-4760-a904-c1931dcd7353): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230110204839-remove-goals-objectives-feature-flag.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (cb75becc-8e96-4760-a904-c1931dcd7353): -- remove references to deprecated values\n        UPDATE "Users"\n                  SET "flags" = array_remove("flags", 'recipient_goals_objectives')\n        WHERE 'recipient_goals_objectives' = ANY("flags");\n\n        -- rename the existing type\n        ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n\n        -- create the new type using FLAGS:\n        CREATE TYPE "enum_Users_flags" AS ENUM();\n\n        -- update the columns to use the new type\n        ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n        ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n        ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n\n        -- remove the old type\n        DROP TYPE "enum_Users_flags_old";
Executing (cb75becc-8e96-4760-a904-c1931dcd7353): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230110204839-remove-goals-objectives-feature-flag: migrated (0.039s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230119000000-create-groups: migrating =======
Executing (7c101ca1-e3b2-412a-bb9c-3ee7e647b122): START TRANSACTION;
Connection validated successfully
Executing (7c101ca1-e3b2-412a-bb9c-3ee7e647b122): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230119000000-create-groups.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7c101ca1-e3b2-412a-bb9c-3ee7e647b122): CREATE TABLE IF NOT EXISTS "Groups" ("id"   SERIAL , "name" TEXT UNIQUE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (7c101ca1-e3b2-412a-bb9c-3ee7e647b122): CREATE TABLE IF NOT EXISTS "GroupGrants" ("id"   SERIAL , "grantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "groupId" INTEGER NOT NULL REFERENCES "Groups" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (7c101ca1-e3b2-412a-bb9c-3ee7e647b122): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230119000000-create-groups: migrated (0.065s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230124000000-missing-objectives: migrating =======
Executing (46b28fde-eb43-4f30-9c6e-5749688d5149): START TRANSACTION;
Connection validated successfully
Executing (46b28fde-eb43-4f30-9c6e-5749688d5149): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230124000000-missing-objectives.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (46b28fde-eb43-4f30-9c6e-5749688d5149): ----------------------------------------------------------------------------------------------------\n          -- 1. Create ActivityReportGoals for each of the goals linked via ActivityReportObjectives\n          -----------------------------------------------------------------------------------------------------\n          WITH\n            "GoalsThroughObjectives" AS (\n              SELECT DISTINCT\n                aro."activityReportId",\n                o."goalId",\n                g."grantId",\n                md5(g."name") "goalHash"\n              FROM "ActivityReportObjectives" aro\n              JOIN "Objectives" o\n              ON aro."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              WHERE o."goalId" IS NOT NULL\n            ),\n            "GoalsDirect" AS (\n              SELECT DISTINCT\n                arg."activityReportId",\n                arg."goalId",\n                g."grantId",\n                md5(g."name") "goalHash"\n              FROM "ActivityReportGoals" arg\n              JOIN "Goals" g\n              ON arg."goalId" = g.id\n            ),\n            "MissingDirectGoals" AS (\n              SELECT *\n              FROM "GoalsThroughObjectives"\n              EXCEPT\n              SELECT *\n              FROM "GoalsDirect"\n            )\n            INSERT INTO "ActivityReportGoals"\n            (\n              "activityReportId",\n              "goalId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT DISTINCT\n              aro."activityReportId",\n              o."goalId",\n              MIN(aro."createdAt") "createdAt",\n              MAX(aro."updatedAt") "updatedAt"\n            FROM "ActivityReportObjectives" aro\n            LEFT JOIN "Objectives" o\n            ON aro."objectiveId" = o.id\n            LEFT JOIN "Goals" g\n            ON o."goalId" = g.id\n            JOIN "MissingDirectGoals" m\n            ON aro."activityReportId" = m."activityReportId"\n            AND o."goalId" = m."goalId"\n            AND g."grantId" = m."grantId"\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."activityReportId" = aro."activityReportId"\n            AND arg."goalId" = o."goalId"\n            WHERE arg.id IS NULL\n            GROUP BY\n              aro."activityReportId",\n              o."goalId";\n\n          ----------------------------------------------------------------------------------------------------\n          -- 2. Identify all reports with inconsistencies between recipients and connected goals and objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_incomplete_reports";\n          CREATE TEMP TABLE "temp_incomplete_reports" AS\n          WITH\n            "through_goals" AS (\n              SELECT\n                ar."activityReportId",\n                a."calculatedStatus",\n                array_agg(distinct ar."grantId" order by ar."grantId") "recipientGrantIds",\n                array_agg(distinct g."grantId" order by g."grantId") "goalGrantIds",\n                array[]::text[] "distinctObjectives",\n                array_agg(distinct md5(g.name) order by md5(g.name)) "distinctGoals"\n                FROM "ActivityRecipients" ar\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n              JOIN "Grants" gr\n              ON ar."grantId" = gr.id\n              AND a."startDate" < gr."endDate"\n              LEFT JOIN "ActivityReportGoals" arg\n              ON ar."activityReportId" = arg."activityReportId"\n              LEFT JOIN "Goals" g\n              ON arg."goalId" = g.id\n              JOIN "Grants" gr2\n              ON g."grantId" = gr2.id\n              AND a."startDate" < gr2."endDate"\n              WHERE g."grantId" is not null\n              GROUP BY ar."activityReportId", a."calculatedStatus"\n              HAVING\n              array_agg(distinct ar."grantId" order by ar."grantId") != array_agg(distinct g."grantId" order by g."grantId")\n              AND ARRAY_LENGTH(ARRAY(\n                SELECT UNNEST(array_agg(distinct ar."grantId" order by ar."grantId"))\n                INTERSECT\n                SELECT UNNEST(array_agg(distinct g."grantId" order by g."grantId"))\n              ),1) > 0\n            ),\n            "through_objectives" AS (\n              SELECT\n                ar."activityReportId",\n                a."calculatedStatus",\n                array_agg(distinct ar."grantId" order by ar."grantId") "recipientGrantIds",\n                array_agg(distinct g."grantId" order by g."grantId") "goalGrantIds",\n                array_agg(distinct md5(o.title) order by md5(o.title)) "distinctObjectives",\n                array_agg(distinct md5(g.name) order by md5(g.name)) "distinctGoals"\n              FROM "ActivityRecipients" ar\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n              JOIN "Grants" gr\n              ON ar."grantId" = gr.id\n              AND a."startDate" < gr."endDate"\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON ar."activityReportId" = aro."activityReportId"\n              LEFT JOIN "Objectives" o\n              ON aro."objectiveId" = o.id\n              LEFT JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "Grants" gr2\n              ON g."grantId" = gr2.id\n              AND a."startDate" < gr2."endDate"\n              WHERE g."grantId" is not null\n              GROUP BY ar."activityReportId", a."calculatedStatus"\n              HAVING\n                array_agg(distinct ar."grantId" order by ar."grantId") != array_agg(distinct g."grantId" order by g."grantId")\n                AND ARRAY_LENGTH(ARRAY(\n                  SELECT UNNEST(array_agg(distinct ar."grantId" order by ar."grantId"))\n                  INTERSECT\n                  SELECT UNNEST(array_agg(distinct g."grantId" order by g."grantId"))\n                ),1) > 0\n            ),\n            "through_both_unmerged" AS (\n              SELECT *\n              FROM "through_goals"\n              UNION\n              SELECT *\n              FROM "through_objectives"\n            ),\n            "through_both" AS (\n              SELECT\n                tbu."activityReportId",\n                tbu."calculatedStatus",\n                ARRAY_AGG(DISTINCT w.v) "recipientGrantIds",\n                ARRAY_AGG(DISTINCT x.v) "goalGrantIds",\n                ARRAY_AGG(DISTINCT y.v) "distinctObjectives",\n                ARRAY_AGG(DISTINCT z.v) "distinctGoals"\n              FROM "through_both_unmerged" tbu\n              CROSS JOIN LATERAL UNNEST(tbu."recipientGrantIds") AS w(v)\n              CROSS JOIN LATERAL UNNEST(tbu."goalGrantIds") AS x(v)\n              CROSS JOIN LATERAL UNNEST(tbu."distinctObjectives") AS y(v)\n              CROSS JOIN LATERAL UNNEST(tbu."distinctGoals") AS z(v)\n              GROUP BY tbu."activityReportId", "calculatedStatus"\n              ORDER BY tbu."activityReportId"\n            )\n            SELECT\n              *,\n              ARRAY(SELECT UNNEST("recipientGrantIds") INTERSECT SELECT UNNEST("goalGrantIds")) "intersectionGrantId",\n              ARRAY(SELECT UNNEST("recipientGrantIds") EXCEPT SELECT UNNEST("goalGrantIds")) "onlyRecipientGrantId",\n              ARRAY(SELECT UNNEST("goalGrantIds") EXCEPT SELECT UNNEST("recipientGrantIds")) "onlyGoalGrantId"\n            FROM "through_both";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 3. Identify missing goals.\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals";\n          CREATE TEMP TABLE "temp_missing_goals" AS\n          SELECT\n            ir."activityReportId",\n            md5(g.name) "goalHash",\n            g.name "name",\n            CASE\n              WHEN 'Closed' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Closed'\n              WHEN 'Suspended' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Suspended'\n              WHEN 'In Progress' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'In Progress'\n              WHEN 'Not Started' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Not Started'\n            END status,\n            (ARRAY_AGG(g.timeframe ORDER BY g.id desc))[1] timeframe,\n            bool_or(g."isFromSmartsheetTtaPlan")  "isFromSmartsheetTtaPlan",\n            MIN(g."createdAt") "createdAt",\n            MAX(g."updatedAt") "updatedAt",\n            ARRAY_AGG(g."closeSuspendReason" ORDER BY g.id) "closeSuspendReason",\n            ARRAY_AGG(g."closeSuspendContext" ORDER BY g.id) "closeSuspendContext",\n            MIN(g."endDate") "endDate",\n            ARRAY_AGG(g."previousStatus") "previousStatus",\n            MIN(g."goalTemplateId") "goalTemplateId",\n            MIN(g."grantId") "grantId",\n            bool_or(g."onApprovedAR") "onApprovedAR",\n            MIN(g."firstNotStartedAt") "firstNotStartedAt",\n            MAX(g."lastNotStartedAt") "lastNotStartedAt",\n            MIN(g."firstInProgressAt") "firstInProgressAt",\n            MAX(g."lastInProgressAt") "lastInProgressAt",\n            MIN(g."firstCeasedSuspendedAt") "firstCeasedSuspendedAt",\n            MAX(g."lastCeasedSuspendedAt") "lastCeasedSuspendedAt",\n            MIN(g."firstClosedAt") "firstClosedAt",\n            MAX(g."lastClosedAt") "lastClosedAt",\n            MIN(g."firstCompletedAt") "firstCompletedAt",\n            MAX(g."lastCompletedAt") "lastCompletedAt"\n          FROM "temp_incomplete_reports" ir\n          JOIN "ActivityReportGoals" arg\n          ON ir."activityReportId" = arg."activityReportId"\n          JOIN "Goals" g\n          ON arg."goalId" = g.id\n          AND g."grantId" = ANY(ir."intersectionGrantId")\n          AND md5(g.name) = ANY(ir."distinctGoals")\n          GROUP BY\n            ir."activityReportId",\n            g.name;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 4. Find missing goals for the grants identified that already exist\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_already_exist";\n          CREATE TEMP TABLE "temp_missing_goals_already_exist" AS\n          SELECT DISTINCT\n            g.id "goalId"\n          FROM "temp_incomplete_reports" ir\n          CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n          JOIN "temp_missing_goals" mg\n          ON ir."activityReportId" = mg."activityReportId"\n          AND mg."goalHash" = ANY(ir."distinctGoals")\n          LEFT JOIN "Goals" g\n          ON g."grantId" = orgi."grantId"\n          AND md5(g.name) = mg."goalHash"\n          WHERE g.id IS NOT NULL;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 5. Create missing goals for the grants identified\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_added";\n          CREATE TEMP TABLE "temp_missing_goals_added" AS\n          WITH "inserted" AS (\n            INSERT INTO "Goals"\n            (\n              name,\n              status,\n              timeframe,\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "endDate",\n              "previousStatus",\n              "goalTemplateId",\n              "grantId",\n              "onApprovedAR",\n              "firstNotStartedAt",\n              "lastNotStartedAt",\n              "firstInProgressAt",\n              "lastInProgressAt",\n              "firstCeasedSuspendedAt",\n              "lastCeasedSuspendedAt",\n              "firstClosedAt",\n              "lastClosedAt",\n              "firstCompletedAt",\n              "lastCompletedAt"\n            )\n            SELECT DISTINCT\n              mg.name,\n              mg.status,\n              mg.timeframe,\n              mg."isFromSmartsheetTtaPlan",\n              mg."createdAt",\n              mg."updatedAt",\n              mg."closeSuspendReason"[1] "closeSuspendReason",\n              mg."closeSuspendContext"[1] "closeSuspendContext",\n              mg."endDate",\n              mg."previousStatus"[1] "previousStatus",\n              mg."goalTemplateId",\n              orgi."grantId",\n              mg."onApprovedAR",\n              mg."firstNotStartedAt",\n              mg."lastNotStartedAt",\n              mg."firstInProgressAt",\n              mg."lastInProgressAt",\n              mg."firstCeasedSuspendedAt",\n              mg."lastCeasedSuspendedAt",\n              mg."firstClosedAt",\n              mg."lastClosedAt",\n              mg."firstCompletedAt",\n              mg."lastCompletedAt"\n            FROM "temp_incomplete_reports" ir\n            CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n            JOIN "temp_missing_goals" mg\n            ON ir."activityReportId" = mg."activityReportId"\n            AND mg."goalHash" = ANY(ir."distinctGoals")\n            LEFT JOIN "Goals" g\n            ON g."grantId" = orgi."grantId"\n            AND md5(g.name) = mg."goalHash"\n            WHERE g.id IS NULL\n            RETURNING\n              id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 6. Collect new and existing goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_added_and_existing";\n          CREATE TEMP TABLE "temp_missing_goals_added_and_existing" AS\n          SELECT *\n          FROM "temp_missing_goals_already_exist"\n          UNION\n          SELECT *\n          FROM "temp_missing_goals_added";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 7. Create new ActivityReportGoals for added goals and found goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_args_added";\n          CREATE TEMP TABLE "temp_missing_args_added" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ActivityReportGoals"\n              (\n                "activityReportId",\n                "goalId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT DISTINCT\n                ir."activityReportId",\n                g.id "goalId",\n                MIN(arg2."createdAt") "createdAt",\n                MAX(arg2."updatedAt") "updatedAt"\n              FROM "temp_missing_goals_added_and_existing" mga\n              JOIN "Goals" g\n              ON mga."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              LEFT JOIN "ActivityReportGoals" arg\n              ON ir."activityReportId" = arg."activityReportId"\n              AND g.id = arg."goalId"\n              JOIN "ActivityReportGoals" arg2\n              ON ir."activityReportId" = arg2."activityReportId"\n              JOIN "Goals" g2\n              ON arg2."goalId" = g2.id\n              AND g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              WHERE arg.id IS NULL\n              GROUP BY\n                ir."activityReportId",\n                g.id\n              RETURNING\n                id "activityReportGoalId"\n            )\n            SELECT\n              "activityReportGoalId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 8. Collect and calculate onApprovedAR for newly added goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_goals_now_on_approved_ar";\n          CREATE TEMP TABLE "temp_goals_now_on_approved_ar" AS\n          SELECT\n            mga."goalId",\n            'approved' = any(array_agg(distinct ar."calculatedStatus")) "onApprovedAR"\n          FROM "temp_missing_goals_added_and_existing" mga\n          JOIN "Goals" g\n          ON mga."goalId" = g.id\n          JOIN "ActivityReportGoals" arg\n          ON mga."goalId" = arg."goalId"\n          LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n          GROUP BY mga."goalId"\n          HAVING bool_or(g."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n          -----------------------------------------------------------------------------------------------------\n          -- 9. Update onApprovedAR for goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_goals_on_approved_ar_updated";\n          CREATE TEMP TABLE "temp_goals_on_approved_ar_updated" AS\n          WITH\n            "updated" AS (\n              UPDATE "Goals" g\n              SET\n                "onApprovedAR" = t."onApprovedAR"\n              FROM "temp_goals_now_on_approved_ar" t\n              WHERE g.id = t."goalId"\n              RETURNING\n                id "goalId"\n            )\n            SELECT\n              "goalId"\n            FROM "updated";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 9. Identify missing objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objectives";\n          CREATE TEMP TABLE "temp_missing_objectives" AS\n          SELECT\n            ir."activityReportId",\n            md5(o.title) "objectiveHash",\n            ARRAY_AGG(DISTINCT md5(g.name)) "goalHashs",\n            MIN(o.id) "objectiveId",\n            o.title,\n            o.status,\n            MIN(o."createdAt") "createdAt",\n            MIN(o."updatedAt") "updatedAt",\n            MIN(o."objectiveTemplateId") "objectiveTemplateId",\n            MIN(o."otherEntityId") "otherEntityId",\n            BOOL_OR(o."onApprovedAR") "onApprovedAR",\n            MIN(o."firstNotStartedAt") "firstNotStartedAt",\n            MIN(o."lastNotStartedAt") "lastNotStartedAt",\n            MIN(o."firstInProgressAt") "firstInProgressAt",\n            MIN(o."lastInProgressAt") "lastInProgressAt",\n            MIN(o."firstCompleteAt") "firstCompleteAt",\n            MIN(o."lastCompleteAt") "lastCompleteAt",\n            MIN(o."firstSuspendedAt") "firstSuspendedAt",\n            MIN(o."lastSuspendedAt") "lastSuspendedAt"\n          FROM "temp_incomplete_reports" ir\n          JOIN "ActivityReportObjectives" aro\n          ON ir."activityReportId" = aro."activityReportId"\n          JOIN "Objectives" o\n          ON aro."objectiveId" = o.id\n          AND md5(o.title) = ANY(ir."distinctObjectives")\n          JOIN "Goals" g\n          ON o."goalId" = g.id\n          AND g."grantId" = ANY(ir."intersectionGrantId")\n          AND md5(g.name) = ANY(ir."distinctGoals")\n          GROUP BY\n            ir."activityReportId",\n            o.title,\n            o.status;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 10. Find missing objectives for the grants identified that already exist\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objectives_already_exist";\n          CREATE TEMP TABLE "temp_missing_objectives_already_exist" AS\n          SELECT DISTINCT\n            o.id "objectiveId"\n          FROM "temp_incomplete_reports" ir\n          CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n          JOIN "temp_missing_objectives" mo\n          ON ir."activityReportId" = mo."activityReportId"\n          JOIN "Goals" g\n          ON g."grantId" = orgi."grantId"\n          AND md5(g.name) = ANY(mo."goalHashs")\n          LEFT JOIN "Objectives" o\n          ON g.id = o."goalId"\n          and md5(o.title) = mo."objectiveHash"\n          WHERE o.id IS NOT NULL;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 12. Create missing objectives for the grants identified\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objectives_added";\n          CREATE TEMP TABLE "temp_missing_objectives_added" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "Objectives"\n              (\n                "goalId",\n                title,\n                status,\n                "createdAt",\n                "updatedAt",\n                "objectiveTemplateId",\n                "otherEntityId",\n                "onApprovedAR",\n                "firstNotStartedAt",\n                "lastNotStartedAt",\n                "firstInProgressAt",\n                "lastInProgressAt",\n                "firstCompleteAt",\n                "lastCompleteAt",\n                "firstSuspendedAt",\n                "lastSuspendedAt"\n              )\n              SELECT DISTINCT\n                g.id "goalId",\n                mo.title,\n                mo.status,\n                mo."createdAt",\n                mo."updatedAt",\n                mo."objectiveTemplateId",\n                mo."otherEntityId",\n                mo."onApprovedAR",\n                mo."firstNotStartedAt",\n                mo."lastNotStartedAt",\n                mo."firstInProgressAt",\n                mo."lastInProgressAt",\n                mo."firstCompleteAt",\n                mo."lastCompleteAt",\n                mo."firstSuspendedAt",\n                mo."lastSuspendedAt"\n              FROM "temp_incomplete_reports" ir\n              CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n              JOIN "temp_missing_objectives" mo\n              ON ir."activityReportId" = mo."activityReportId"\n              JOIN "Goals" g\n              ON g."grantId" = orgi."grantId"\n              AND md5(g.name) = ANY(mo."goalHashs")\n              LEFT JOIN "Objectives" o\n              ON g.id = o."goalId"\n              and md5(o.title) = mo."objectiveHash"\n              WHERE o.id IS NULL\n              RETURNING\n                id "objectiveId"\n            )\n            SELECT\n              "objectiveId"\n            FROM "inserted";\n          -----------------------------------------------------------------------------------------------------\n          -- 13. Collect new and existing objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objectives_added_and_existing";\n          CREATE TEMP TABLE "temp_missing_objectives_added_and_existing" AS\n          SELECT *\n          FROM "temp_missing_objectives_already_exist"\n          UNION\n          SELECT *\n          FROM "temp_missing_objectives_added";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 14. Create new ActivityReportObjectives for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_aros_added";\n          CREATE TEMP TABLE "temp_missing_aros_added" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ActivityReportObjectives"\n              (\n                "activityReportId",\n                "objectiveId",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided"\n              )\n              SELECT\n                ir."activityReportId",\n                o.id "objectiveId",\n                MIN(aro2."createdAt") "createdAt",\n                MAX(aro2."updatedAt") "updatedAt",\n                ARRAY_AGG(aro2."ttaProvided")\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON ir."activityReportId" = aro."activityReportId"\n              AND o.id = aro."objectiveId"\n              JOIN "ActivityReportObjectives" aro2\n              ON ir."activityReportId" = aro2."activityReportId"\n              JOIN "Objectives" o2\n              ON aro2."objectiveId" = o2.id\n              AND md5(o.title) = md5(o2.title)\n              JOIN "Goals" g2\n              ON o2."goalId" = g2.id\n              AND g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              WHERE aro.id IS NULL\n              GROUP BY\n                ir."activityReportId",\n                o.id\n              RETURNING\n                id "activityReportObjectiveId"\n            )\n            SELECT\n              "activityReportObjectiveId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 15. Create new Objective files for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objective_files";\n          CREATE TEMP TABLE "temp_missing_objective_files" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ObjectiveFiles"\n              (\n                "objectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT\n                o.id "objectiveId",\n                f2."fileId",\n                MIN(f2."createdAt") "createdAt",\n                MAX(f2."updatedAt") "updatedAt"\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ObjectiveFiles" f\n              ON o.id = f."objectiveId"\n              LEFT JOIN "Goals" g2\n              ON g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              LEFT JOIN "Objectives" o2\n              ON g2.id = o2."goalId"\n              AND md5(o.title) = md5(o2.title)\n              LEFT JOIN "ObjectiveFiles" f2\n              ON o2.id = f2."objectiveId"\n              WHERE f.id IS NULL\n              AND f2."fileId" IS NOT NULL\n              GROUP BY\n                o.id,\n                f2."fileId"\n              RETURNING\n                id "objectiveFileId"\n            )\n            SELECT\n              "objectiveFileId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 16. Create new Objective resources for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objective_Resources";\n          CREATE TEMP TABLE "temp_missing_objective_Resources" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ObjectiveResources"\n              (\n                "objectiveId",\n                "userProvidedUrl",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT\n                o.id "objectiveId",\n                r2."userProvidedUrl",\n                MIN(r2."createdAt") "createdAt",\n                MAX(r2."updatedAt") "updatedAt"\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ObjectiveResources" r\n              ON o.id = r."objectiveId"\n              LEFT JOIN "Goals" g2\n              ON g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              LEFT JOIN "Objectives" o2\n              ON g2.id = o2."goalId"\n              AND md5(o.title) = md5(o2.title)\n              LEFT JOIN "ObjectiveResources" r2\n              ON o2.id = r2."objectiveId"\n              WHERE r.id IS NULL\n              AND r2."userProvidedUrl" IS NOT NULL\n              GROUP BY\n                o.id,\n                r2."userProvidedUrl"\n              RETURNING\n                id "objectiveResourceId"\n            )\n            SELECT\n              "objectiveResourceId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 17. Create new Objective Roles for added and found objectives\n          -- REMOVED because ObjectiveRoles does not exist\n          -----------------------------------------------------------------------------------------------------\n            \n\n          -----------------------------------------------------------------------------------------------------\n          -- 18. Create new Objective Topics for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objective_Topics";\n          CREATE TEMP TABLE "temp_missing_objective_Topics" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ObjectiveTopics"\n              (\n                "objectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT\n                o.id "objectiveId",\n                t2."topicId",\n                MIN(t2."createdAt") "createdAt",\n                MAX(t2."updatedAt") "updatedAt"\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ObjectiveTopics" t\n              ON o.id = t."objectiveId"\n              LEFT JOIN "Goals" g2\n              ON g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              LEFT JOIN "Objectives" o2\n              ON g2.id = o2."goalId"\n              AND md5(o.title) = md5(o2.title)\n              LEFT JOIN "ObjectiveTopics" t2\n              ON o2.id = t2."objectiveId"\n              WHERE t.id IS NULL\n              AND t2."topicId" IS NOT NULL\n              GROUP BY\n                o.id,\n                t2."topicId"\n              RETURNING\n                id "objectiveTopicId"\n            )\n            SELECT\n              "objectiveTopicId"\n            FROM "inserted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 19. Collect and calculate onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_now_on_approved_ar";\n        CREATE TEMP TABLE "temp_objectives_now_on_approved_ar" AS\n        SELECT\n          moa."objectiveId",\n          'approved' = any(array_agg(distinct ar."calculatedStatus")) "onApprovedAR"\n        FROM "temp_missing_objectives_added_and_existing" moa\n        JOIN "Objectives" o\n        ON moa."objectiveId" = o.id\n        JOIN "ActivityReportObjectives" aro\n        ON moa."objectiveId" = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        GROUP BY moa."objectiveId"\n        HAVING bool_or(o."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 20. Update onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar_updated";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar_updated" AS\n        WITH\n          "updated" AS (\n            UPDATE "Objectives" o\n            SET\n              "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_objectives_now_on_approved_ar" t\n            WHERE o.id = t."objectiveId"\n            RETURNING\n              id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "updated";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 21. Collect args to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_args_to_be_deleted";\n        CREATE TEMP TABLE "temp_args_to_be_deleted" AS\n        SELECT DISTINCT\n          arg.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "ActivityReportGoals" arg\n        ON ir."activityReportId" = arg."activityReportId"\n        AND g.id = arg."goalId";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 22. Deleted args\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_args_deleted";\n        CREATE TEMP TABLE "temp_args_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "ActivityReportGoals" arg\n            USING "temp_args_to_be_deleted" argd\n            WHERE arg.id = argd.id\n            RETURNING\n              arg.id "argId"\n          )\n          SELECT\n            "argId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 23. Collect aros to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_aros_to_be_deleted";\n        CREATE TEMP TABLE "temp_aros_to_be_deleted" AS\n        SELECT DISTINCT\n          aro.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        JOIN "ActivityReportObjectives" aro\n        ON ir."activityReportId" = aro."activityReportId"\n        AND o.id = aro."objectiveId";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 24. Delete aros\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_aros_deleted";\n        CREATE TEMP TABLE "temp_aros_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "temp_aros_to_be_deleted" arod\n            WHERE aro.id = arod.id\n            RETURNING\n              aro.id "aroId"\n          )\n          SELECT\n            "aroId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 25. Collect objectives to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_to_be_deleted";\n        CREATE TEMP TABLE "temp_objectives_to_be_deleted" AS\n        SELECT\n          o.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        WHERE aro.id IS NULL;\n\n        -----------------------------------------------------------------------------------------------------\n        -- 26. Collect objectives to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar" AS\n        SELECT\n          o.id,\n          bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        WHERE aro.id IS NOT NULL\n        GROUP\n          BY o.id\n        HAVING\n          bool_or(o."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 27. Delete Objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_deleted";\n        CREATE TEMP TABLE "temp_objectives_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "Objectives" o\n            USING "temp_objectives_to_be_deleted" od\n            WHERE o.id = od.id\n            RETURNING\n              o.id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 28. Update onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar_updated2";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar_updated2" AS\n        WITH\n          "updated" AS (\n            UPDATE "Objectives" o\n            SET "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_objectives_on_approved_ar" t\n            WHERE o.id = t."id"\n            RETURNING\n              o.id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "updated";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 29. Collect goals to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_to_be_deleted";\n        CREATE TEMP TABLE "temp_goals_to_be_deleted" AS\n        SELECT g.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        LEFT JOIN "Objectives" o\n        ON g.id = o."goalId"\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        WHERE arg.id IS NULL\n        AND o.id IS NULL;\n\n        -----------------------------------------------------------------------------------------------------\n        -- 30. Collect and calculate onApprovedAR for goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_on_approved_ar";\n        CREATE TEMP TABLE "temp_goals_on_approved_ar" AS\n        SELECT\n          g.id,\n          bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        WHERE arg.id IS NOT NULL\n        GROUP BY g.id\n        HAVING bool_or(g."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 31. Delete goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_deleted";\n        CREATE TEMP TABLE "temp_goals_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "Goals" g\n            USING "temp_goals_to_be_deleted" gd\n            WHERE g.id = gd.id\n            RETURNING\n              g.id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 32. Update onApprovedAR for goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_on_approved_ar_updated2";\n        CREATE TEMP TABLE "temp_goals_on_approved_ar_updated2" AS\n        WITH\n          "updated" AS (\n            UPDATE "Goals" g\n            SET "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_goals_on_approved_ar" t\n            WHERE g.id = t."id"\n            RETURNING\n              g.id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "updated";\n\n\n        -----------------------------------------------------------------------------------------------------\n        -- 33. Output of some counts from steps above\n        -----------------------------------------------------------------------------------------------------\n        /*\n        SELECT\n        'incomplete_reports' "name",\n        count(*) cnt\n        FROM "temp_incomplete_reports"\n        UNION\n        SELECT\n        'missing_goals_added' "name",\n        count(*) cnt\n        FROM "temp_missing_goals_added_and_existing"\n        UNION\n        SELECT\n        'missing_args_added' "name",\n        count(*) cnt\n        FROM "temp_missing_args_added"\n        UNION\n        SELECT\n        'goals_on_approved_ar_updated' "name",\n        count(*) cnt\n        FROM "temp_goals_on_approved_ar_updated"\n        UNION\n        SELECT\n        'missing_objectives_added' "name",\n        count(*) cnt\n        FROM "temp_missing_objectives_added_and_existing"\n        UNION\n        SELECT\n        'missing_aros_added' "name",\n        count(*) cnt\n        FROM "temp_missing_aros_added"\n        UNION\n        SELECT\n        'objectives_on_approved_ar_updated' "name",\n        count(*) cnt\n        FROM "temp_objectives_on_approved_ar_updated";\n        */
Executing (46b28fde-eb43-4f30-9c6e-5749688d5149): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230124000000-missing-objectives: migrated (0.134s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230125000000-rtr-goal-performance: migrating =======
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): START TRANSACTION;
Connection validated successfully
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230125000000-rtr-goal-performance.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "public"."Goals" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "public"."Objectives" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "public"."ObjectiveFiles" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "public"."ObjectiveResources" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "public"."ObjectiveTopics" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "public"."ObjectiveFiles" ADD COLUMN "onApprovedAR" BOOLEAN DEFAULT false;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "public"."ObjectiveResources" ADD COLUMN "onApprovedAR" BOOLEAN DEFAULT false;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "public"."ObjectiveTopics" ADD COLUMN "onApprovedAR" BOOLEAN DEFAULT false;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): WITH\n            "GoalsOnARs" AS (\n              SELECT\n                g.id,\n                (arg.id IS NOT NULL) "onAR"\n              FROM "Goals" g\n              LEFT JOIN "ActivityReportGoals" arg\n              ON g.id = arg."goalId"\n            )\n          UPDATE "Goals" g\n          SET "onAR" = goa."onAR"\n          FROM "GoalsOnARs" goa\n          WHERE g.id = goa.id;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): WITH\n            "ObjectivesOnARs" AS (\n              SELECT\n                o.id,\n                (aro.id IS NOT NULL) "onAR"\n              FROM "Objectives" o\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON o.id = aro."objectiveId"\n            )\n          UPDATE "Objectives" o\n          SET "onAR" = ooa."onAR"\n          FROM "ObjectivesOnARs" ooa\n          WHERE o.id = ooa.id;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): WITH\n            "ObjectiveFilesOnARs" AS (\n              SELECT\n                "of"."id",\n                (arof.id IS NOT NULL) "onAR",\n                (arof.id IS NOT NULL\n                AND ar."calculatedStatus"::text = 'approved') "onApprovedAR"\n              FROM "ObjectiveFiles" "of"\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON "of"."objectiveId" = aro."objectiveId"\n              LEFT JOIN "ActivityReportObjectiveFiles" arof\n              ON aro.id = arof."activityReportObjectiveId"\n              AND "of"."fileId" = arof."fileId"\n              LEFT JOIN "ActivityReports" ar\n              ON aro."activityReportId" = ar.id\n            )\n          UPDATE "ObjectiveFiles" "of"\n          SET\n            "onAR" = ofoa."onAR",\n            "onApprovedAR" = ofoa."onApprovedAR"\n          FROM "ObjectiveFilesOnARs" ofoa\n          WHERE "of".id = ofoa.id;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): WITH\n            "ObjectiveResourcesOnARs" AS (\n              SELECT\n                "or"."id",\n                (aror.id IS NOT NULL) "onAR",\n                (aror.id IS NOT NULL\n                AND ar."calculatedStatus"::text = 'approved') "onApprovedAR"\n              FROM "ObjectiveResources" "or"\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON "or"."objectiveId" = aro."objectiveId"\n              LEFT JOIN "ActivityReportObjectiveResources" aror\n              ON aro.id = aror."activityReportObjectiveId"\n              AND "or"."userProvidedUrl" = aror."userProvidedUrl"\n              LEFT JOIN "ActivityReports" ar\n              ON aro."activityReportId" = ar.id\n            )\n          UPDATE "ObjectiveResources" "or"\n          SET\n            "onAR" = oroa."onAR",\n            "onApprovedAR" = oroa."onApprovedAR"\n          FROM "ObjectiveResourcesOnARs" oroa\n          WHERE "or".id = oroa.id;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): WITH\n            "ObjectiveTopicsOnARs" AS (\n              SELECT\n                ot."id",\n                (arot.id IS NOT NULL) "onAR",\n                (arot.id IS NOT NULL\n                AND ar."calculatedStatus"::text = 'approved') "onApprovedAR"\n              FROM "ObjectiveTopics" ot\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON ot."objectiveId" = aro."objectiveId"\n              LEFT JOIN "ActivityReportObjectiveTopics" arot\n              ON aro.id = arot."activityReportObjectiveId"\n              AND ot."topicId" = arot."topicId"\n              LEFT JOIN "ActivityReports" ar\n              ON aro."activityReportId" = ar.id\n            )\n          UPDATE "ObjectiveTopics" ot\n          SET\n            "onAR" = otoa."onAR",\n            "onApprovedAR" = otoa."onApprovedAR"\n          FROM "ObjectiveTopicsOnARs" otoa\n          WHERE ot.id = otoa.id;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "Goals" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "Goals" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "Goals" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "Objectives" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "Objectives" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "Objectives" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "ObjectiveResources" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "ObjectiveResources" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "ObjectiveResources" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onApprovedAR" SET NOT NULL;ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onApprovedAR" SET DEFAULT false;ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onApprovedAR" TYPE BOOLEAN;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "ObjectiveResources" ALTER COLUMN "onApprovedAR" SET NOT NULL;ALTER TABLE "ObjectiveResources" ALTER COLUMN "onApprovedAR" SET DEFAULT false;ALTER TABLE "ObjectiveResources" ALTER COLUMN "onApprovedAR" TYPE BOOLEAN;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onApprovedAR" SET NOT NULL;ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onApprovedAR" SET DEFAULT false;ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onApprovedAR" TYPE BOOLEAN;
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (b5167721-a74a-471b-b1d7-218c5355c9f5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230125000000-rtr-goal-performance: migrated (0.166s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230205000000-add-resources-dashboard-feature-flag: migrating =======
Executing (default): DO $$ BEGIN\n          ALTER TYPE "enum_Users_flags" ADD VALUE 'resources_dashboard';\n        EXCEPTION\n          WHEN duplicate_object THEN null;\n        END $$;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230205000000-add-resources-dashboard-feature-flag: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230206000000-resources-phase-0: migrating =======
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): START TRANSACTION;
Connection validated successfully
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230206000000-resources-phase-0.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-subpart-eligibility-recruitment-selection-enrollment-attendance'\n            WHERE id in (555)\n            AND "userProvidedUrl" = '1302 Subpart A—Eligibility, Recruitment, Selection, Enrollment, and Attendance | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-subpart-eligibility-recruitment-selection-enrollment-attendance'\n            WHERE id in (2594)\n            AND "userProvidedUrl" = '1302 Subpart E—Family and Community Engagement Program Services | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/coaching-corner-series https://cultivatelearning.uw.edu/circle-time-magazine/'\n            WHERE id in (2729)\n            AND "userProvidedUrl" = 'Coaching Corner Series | ECLKC (hhs.gov), Circle Time Magazine - Cultivate Learning (uw.edu) ';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/fiscal-management/article/comparability-wages'\n            WHERE id in (2085)\n            AND "userProvidedUrl" = 'Comparability of Wages | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/program-planning/foundations-excellence/foundations-excellence'\n            WHERE id in (1799, 1800)\n            AND "userProvidedUrl" = 'Foundations for Excellence | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/guiding-questions-active-supervision-safety'\n            WHERE id in (680)\n            AND "userProvidedUrl" = 'Guiding Questions for Active Supervision and Safety | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii https://eclkc.ohs.acf.hhs.gov/professional-development/article/15-minute-service-suites'\n            WHERE id in (568)\n            AND "userProvidedUrl" = 'Head Start Performance Standards: Head Start Program Performance Standards | ECLKC (hhs.gov)  15-Minute In-Service Suites:https://eclkc.ohs.acf.hhs.gov/professional-development/article/15-minute-service-suites';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-91-staff-qualifications-competency-requirements'\n            WHERE id in (451, 452)\n            AND "userProvidedUrl" = 'Head Start Program Performancehttps://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-91-staff-qualifications-competency-requirements';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-44-child-nutrition https://eclkc.ohs.acf.hhs.gov/sites/default/files/video/attachments/family-style-dining-tips.pdf'\n            WHERE id in (2577)\n            AND "userProvidedUrl" = 'Head Start Program Performance Standards 1302.44 https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-44-child-nutrition  Tips for Family Style Dining https://eclkc.ohs.acf.hhs.gov/sites/default/files/video/attachments/family-style-dining-tips.pdf';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-91-staff-qualifications-competency-requirements'\n            WHERE id in (1371, 1372)\n            AND "userProvidedUrl" = 'Head Start Program Performance Standards- 1302.91 Staff qualifications and competency requirements https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-91-staff-qualifications-competency-requirements';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/head-start-work-heart-work-ohs-priorities'\n            WHERE id in (252)\n            AND "userProvidedUrl" = 'Head Start Work Is Heart Work: OHS Priorities | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-subpart-eligibility-recruitment-selection-enrollment-attendance'\n            WHERE id in (2598)\n            AND "userProvidedUrl" = 'http://1302 Subpart E—Family and Community Engagement Program Services | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-subpart-eligibility-recruitment-selection-enrollment-attendance'\n            WHERE id in (2466)\n            AND "userProvidedUrl" = 'http://1302 Subpart E—Family and Community Engagement Program Services | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-11-determining-community-strengths-needs-resources https://eclkc.ohs.acf.hhs.gov/program-planning/community-assessment-foundation-program-planning-head-start/community-assessment-foundation-program-planning-head-start'\n            WHERE id in (11314, 11315, 11930)\n            AND "userProvidedUrl" = 'http://eclkc.ohs.hhs.gov/45CFR 1302.11(b)(2) Community Assessment: The Foundation for Program Planning';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-11-determining-community-strengths-needs-resources https://eclkc.ohs.acf.hhs.gov/program-planning/community-assessment-foundation-program-planning-head-start/community-assessment-foundation-program-planning-head-start'\n            WHERE id in (11956, 11957, 12699)\n            AND "userProvidedUrl" = 'http://eclkc.ohs.hhs.gov/45CFR 1302.11(b)(2) Community Assessment: The Foundation for Program Planning';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/family-engagement/article/journeys-hope-courage'\n            WHERE id in (2600)\n            AND "userProvidedUrl" = 'http://Journeys of Hope and Courage | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/family-engagement/article/journeys-hope-courage'\n            WHERE id in (2468)\n            AND "userProvidedUrl" = 'http://Journeys of Hope and Courage | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/school-readiness/article/parent-family-community-engagement-pfce-framework'\n            WHERE id in (2599)\n            AND "userProvidedUrl" = 'http://Parent, Family, and Community Engagement (PFCE) Framework | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/school-readiness/article/parent-family-community-engagement-pfce-framework'\n            WHERE id in (2467)\n            AND "userProvidedUrl" = 'http://Parent, Family, and Community Engagement (PFCE) Framework | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://childrenslearninginstitute.org/resources/'\n            WHERE id in (10199)\n            AND "userProvidedUrl" = 'https://childrenslearninginstitute.org/resources/ https://';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/importance-schedules-routines https://eclkc.ohs.acf.hhs.gov/school-readiness/ https://challengingbehavior.org/pyramid-model/behavior-intervention/pbs/'\n            WHERE id in (1297, 1300, 1303, 2083)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/importance-schedules-routines https://eclkc.ohs.acf.hhs.gov/school-readiness/https://challengingbehavior.org/pyramid-model/behavior-intervention/pbs/';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/importance-schedules-routines https://eclkc.ohs.acf.hhs.gov/school-readiness/ https://challengingbehavior.org/pyramid-model/behavior-intervention/pbs/'\n            WHERE id in (1325, 1328, 1950)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/importance-schedules-routines https://eclkc.ohs.acf.hhs.gov/school-readiness/https://challengingbehavior.org/pyramid-model/behavior-intervention/pbs/';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/browse/keyword/relationship-based-practices https://eclkc.ohs.acf.hhs.gov/family-engagement/relationship-based-competencies-support-family-engagement/relationship-based-competencies-support-family-engagement'\n            WHERE id in (12731)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/browse/keyword/relationship-based-practices Relationship-Based Competencies to Support Family Engagement (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/browse/keyword/relationship-based-practices https://eclkc.ohs.acf.hhs.gov/family-engagement/relationship-based-competencies-support-family-engagement/relationship-based-competencies-support-family-engagement'\n            WHERE id in (13548)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/browse/keyword/relationship-based-practices Relationship-Based Competencies to Support Family Engagement (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide https://eclkc.ohs.acf.hhs.gov/video/expectations-2022-2023-program-year'\n            WHERE id in (1248)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide, Expectations for the 2022-2023 Program Year (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide https://eclkc.ohs.acf.hhs.gov/video/expectations-2022-2023-program-year'\n            WHERE id in (1270)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide, Expectations for the 2022-2023 Program Year (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide https://eclkc.ohs.acf.hhs.gov/video/expectations-2022-2023-program-year'\n            WHERE id in (190)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide, Expectations for the 2022-2023 Program Year (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15-minutos'\n            WHERE id in (12220, 12223, 12226, 12229, 12232, 12235, 12238, 12241)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15- minutos';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15-minutos'\n            WHERE id in (13026, 13029, 13032, 13035, 13038, 13041, 13044, 13047)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15- minutos';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15-minutos'\n            WHERE id in (190)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15- minutos';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act'\n            WHERE id in (16147, 16148, 16149, 16150)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/Head Start Act';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-642-powers-functions-head-start-agencies'\n            WHERE id in (16151, 16152, 16153, 16154)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/Head Start Act 642 (d)(2)(A-I)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-642-powers-functions-head-start-agencies'\n            WHERE id in (17183, 17184, 17185, 17186)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/Head Start Act 642 (d)(2)(A-I)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/human-resources/home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledge-skills'\n            WHERE id in (166)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/humanresources/ home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledgeskills';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/human-resources/home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledge-skills'\n            WHERE id in (152)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/humanresources/ home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledgeskills';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/human-resources/home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledge-skills'\n            WHERE id in (49)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/humanresources/ home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledgeskills';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (789)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/mental-health/article/understanding-trauma-  healing-adults';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (780)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/mental-health/article/understanding-trauma-  healing-adults';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (13776, 13777, 13778, 13779, 13780, 13781, 13782, 13783, 13784)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl House Framework, Early Childhood Learning and Outcomes Framework, Parent and Family Engagement Framework, Education Manager’s Calendar, Head Start Program Performance Standards.';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (14651, 14652, 14653, 14654, 14655, 14656, 14657, 14658, 14659)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl House Framework, Early Childhood Learning and Outcomes Framework, Parent and Family Engagement Framework, Education Manager’s Calendar, Head Start Program Performance Standards.';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (15724)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl Program leaders guide PBCIA resources for practice-based coaching. CLASS crosswalk, 15-minute in-service suite creating a caring community, IPD Beginning Teacher Series';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (16729)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl Program leaders guide PBCIA resources for practice-based coaching. CLASS crosswalk, 15-minute in-service suite creating a caring community, IPD Beginning Teacher Series';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (839)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl Program leaders guide PBCIA resources for practice-based coaching. CLASS crosswalk, 15-minute in-service suite creating a caring community, IPD Beginning Teacher Series';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-648a-staff-qualifications-development'\n            WHERE id in (168)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/headstart- act/sec-648a-staff-qualifications-development';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-648a-staff-qualifications-development'\n            WHERE id in (154)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/headstart- act/sec-648a-staff-qualifications-development';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-648a-staff-qualifications-development'\n            WHERE id in (51)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/headstart- act/sec-648a-staff-qualifications-development';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-program-performance-standards-showcase/safety-practices https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1304-1-purpose https://eclkc.ohs.acf.hhs.gov/program-management'\n            WHERE id in (14927)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-program-performance-standards-showcase/safety-practices 1304.1 Purpose. | ECLKC (hhs.gov) Program Management | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-program-performance-standards-showcase/safety-practices https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1304-1-purpose https://eclkc.ohs.acf.hhs.gov/program-management'\n            WHERE id in (15849)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-program-performance-standards-showcase/safety-practices 1304.1 Purpose. | ECLKC (hhs.gov) Program Management | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-components-implementation-strategies'\n            WHERE id in (12642, 12643, 12644, 12645, 12646, 12647, 12648, 12649, 12650, 12651, 12652, 12653, 12654, 12655, 12656, 12657)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional- development/article/practice- based-coaching- components-implementation-strategies';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-components-implementation-strategies'\n            WHERE id in (13459, 13460, 13461, 13462, 13463, 13464, 13465, 13466, 13467, 13468, 13469, 13470, 13471, 13472, 13473, 13474)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional- development/article/practice- based-coaching- components-implementation-strategies';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-pbc'\n            WHERE id in (12566, 12568, 12570, 12572, 12574, 12577, 12579, 12581, 12583, 12585)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professionaldevelopment/ article/practice-based-coaching-pbc';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-pbc'\n            WHERE id in (13378, 13380, 13382, 13384, 13385)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professionaldevelopment/ article/practice-based-coaching-pbc';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/program-planning/article/program-planning-cycle https://eclkc.ohs.acf.hhs.gov/organizational-leadership/article/management-systems-wheel'\n            WHERE id in (297, 299, 301, 303, 305, 307, 309, 311, 313, 315)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/program-planning/article/program-planning-cycle  Management Systems Wheel https://eclkc.ohs.acf.hhs.gov/organizational-leadership/article/management-systems-wheel';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/education-manager-planning-calendar https://eclkc.ohs.acf.hhs.gov/video/expectations-2022-2023-program-year'\n            WHERE id in (1282)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/education-manager-planning-calendar, Expectations for the 2022-2023 Program Year (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=A-Z%20School%20Readiness&start=0'\n            WHERE id in (17046)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=A-Z%20School%20Readiness&start=0&filter=&site=*';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=A-Z%20School%20Readiness&start=0'\n            WHERE id in (18119)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=A-Z%20School%20Readiness&start=0&filter=&site=*';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=ERSEA&start=10'\n            WHERE id in (558)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=ERSEA&start=10&filter=&site=*';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=ERSEA&start=10'\n            WHERE id in (543, 1396)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=ERSEA&start=10&filter=&site=*';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/sites/default/files/pdf/health-competencies-assessment.pdf https://eclkc.ohs.acf.hhs.gov/health-services-management/article/head-start-health-services-competencies'\n            WHERE id in (11104)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/sites/default/files/pdf/health-competencies-assessment.pdf Health Service Competencies';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/sites/default/files/pdf/health-competencies-assessment.pdf https://eclkc.ohs.acf.hhs.gov/health-services-management/article/head-start-health-services-competencies'\n            WHERE id in (11746)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/sites/default/files/pdf/health-competencies-assessment.pdf Health Service Competencies';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/organizational-leadership/article/management-systems-wheel'\n            WHERE id in (11309)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.hhs.gov/management Head Start Management Wheel Systems';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://mypeers.mangoapps.com/ce/pulse/user/teams/project_teams/uploaded_files?project_id=1360260&folder=6182710'\n            WHERE id in (9328, 9329, 9330, 9331, 9332, 9333, 9334, 9335, 15055, 15056, 15057, 15058, 15059, 15060)\n            AND "userProvidedUrl" = 'https://mypeers.mangoapps.com/ce/pulse/user/teams/project_teams/uploaded_ files?project_id=1360260&folder=6182710';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://mypeers.mangoapps.com/ce/pulse/user/teams/project_teams/uploaded_files?project_id=1360260&folder=6182710'\n            WHERE id in (10585, 10586, 10587, 10588, 10589, 10590, 10591, 10592, 15979, 15980, 15981, 15982, 15983, 15984)\n            AND "userProvidedUrl" = 'https://mypeers.mangoapps.com/ce/pulse/user/teams/project_teams/uploaded_ files?project_id=1360260&folder=6182710';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (2406)\n            AND "userProvidedUrl" = 'https://nrckids.org/files/CFOC4 pdf- FINAL.pdf';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (2272, 17220)\n            AND "userProvidedUrl" = 'https://nrckids.org/files/CFOC4 pdf- FINAL.pdf';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (10295)\n            AND "userProvidedUrl" = 'https://www.healthystartepic.org/wp-content/uploads/2019/04/AStEPPOpioidUseDiscussionGuide.pdf Mothers and Babies: An Intervention to Prevent Postpartum Depression (webinar)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/family-engagement/article/journeys-hope-courage'\n            WHERE id in (2596)\n            AND "userProvidedUrl" = 'Journeys of Hope and Courage | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/school-readiness/article/parent-family-community-engagement-pfce-framework'\n            WHERE id in (2595)\n            AND "userProvidedUrl" = 'Parent, Family, and Community Engagement (PFCE) Framework | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-pbc https://eclkc.ohs.acf.hhs.gov/publication/practice-based-coaching-pbc-coach-competencies'\n            WHERE id in (779)\n            AND "userProvidedUrl" = 'Practice-Based Coaching (PBC) | ECLKC (hhs.gov)  The Practice-Based Coaching Coach Competencies (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q='\n            WHERE id in (556)\n            AND "userProvidedUrl" = 'Search | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://youtu.be/u4ZoJKF_VuA'\n            WHERE id in (2087)\n            AND "userProvidedUrl" = 'Start with why -- how great leaders inspire action | Simon Sinek | TEDxPugetSound - YouTube';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://youtu.be/u4ZoJKF_VuA'\n            WHERE id in (573)\n            AND "userProvidedUrl" = 'Start with why -- how great leaders inspire action | Simon Sinek | TEDxPugetSound - YouTube';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/family-support-well-being/article/taking-care-ourselves-stress-relaxation'\n            WHERE id in (934)\n            AND "userProvidedUrl" = 'Taking Care of Ourselves: Stress and Relaxation | ECLKC (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/practice-based-coaching-pbc-coach-competencies'\n            WHERE id in (782)\n            AND "userProvidedUrl" = 'The Practice-Based Coaching Coach Competencies (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/transportation-services-checklist'\n            WHERE id in (1365)\n            AND "userProvidedUrl" = 'Transportation Services Checklist (hhs.gov)';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://www.federalregister.gov/documents/2019/11/26/2019-25634/head-start-program'\n            WHERE id in (9265)\n            AND "userProvidedUrl" = 'www.federalregister.gov/documents/2019/11/26/2019-25634/head-start-program';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'http://www.teachstone.com'\n            WHERE id in (774, 775, 776)\n            AND "userProvidedUrl" = 'www.teachstone.com';
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): WITH\n      "ActivityReportObjectiveResourcesURLs" AS (\n        SELECT\n          id,\n          (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          "userProvidedUrl",\n          "activityReportObjectiveId",\n          "createdAt",\n          "updatedAt"\n        FROM "ActivityReportObjectiveResources"\n      ),\n      "ActivityReportObjectiveResourcesSource" AS (\n        SELECT\n          ru.id,\n          u.url,\n          ru."userProvidedUrl",\n          ru."activityReportObjectiveId",\n          ru."createdAt",\n          ru."updatedAt"\n        FROM "ActivityReportObjectiveResources" r\n        JOIN "ActivityReportObjectiveResourcesURLs" ru\n        ON r.id = ru.id\n        CROSS JOIN UNNEST(ru.urls) u(url)\n        WHERE r."userProvidedUrl" like '%' || u.url || '%'\n        AND trim(r."userProvidedUrl") != u.url\n        ORDER BY r.id\n      ),\n      "ActivityReportObjectiveResourcesCounts" AS (\n        SELECT\n          id,\n          count(url) cnt\n        FROM "ActivityReportObjectiveResourcesSource"\n        GROUP BY id\n      ),\n      "UpdateActivityReportObjectiveResources" AS (\n        UPDATE "ActivityReportObjectiveResources" "or"\n        SET\n          "userProvidedUrl" = ors.url\n        FROM "ActivityReportObjectiveResourcesSource" ors\n        JOIN "ActivityReportObjectiveResourcesCounts" orc\n        ON ors.id = orc.id\n        WHERE "or".id = ors.id\n        AND orc.cnt = 1\n        RETURNING\n          "or".id "activityReportObjectiveResourceId"\n      ),\n      "NewActivityReportObjectiveResources" AS (\n        INSERT INTO "ActivityReportObjectiveResources" (\n          "userProvidedUrl",\n          "activityReportObjectiveId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          ors.url "userProvidedUrl",\n          ors."activityReportObjectiveId",\n          ors."createdAt",\n          ors."updatedAt"\n        FROM "ActivityReportObjectiveResourcesSource" ors\n        JOIN "ActivityReportObjectiveResourcesCounts" orc\n        ON ors.id = orc.id\n        WHERE orc.cnt != 1\n        RETURNING\n          id "activityReportObjectiveResourceId"\n      ),\n      "DeleteActivityReportObjectiveResources" AS (\n        DELETE FROM "ActivityReportObjectiveResources" "or"\n        USING "ActivityReportObjectiveResourcesCounts" orc\n        WHERE "or".id = "orc".id\n        AND orc.cnt != 1\n        RETURNING\n          "or".id "activityReportObjectiveResourceId"\n      ),\n      "MalformedActivityReportObjectiveResources" AS (\n        SELECT\n          r.id\n        FROM "ActivityReportObjectiveResources" r\n        LEFT JOIN "ActivityReportObjectiveResourcesURLs" ru\n        ON r.id = ru.id\n        WHERE ru.id IS NULL\n      ),\n      "DeleteMalformedActivityReportObjectiveResources" AS (\n        DELETE FROM "ActivityReportObjectiveResources" "or"\n        USING "MalformedActivityReportObjectiveResources" mor\n        WHERE "or".id = "mor".id\n        RETURNING\n          "or".id "activityReportObjectiveResourceId"\n      ),\n      "AffectedActivityReportObjectiveResources" AS (\n        SELECT\n          "activityReportObjectiveResourceId",\n          'updated' "action",\n          'ActivityReportObjectiveResources' "table"\n        FROM "UpdateActivityReportObjectiveResources"\n        UNION\n        SELECT\n          "activityReportObjectiveResourceId",\n          'created' "action",\n          'ActivityReportObjectiveResources' "table"\n        FROM "NewActivityReportObjectiveResources"\n        UNION\n        SELECT\n          "activityReportObjectiveResourceId",\n          'replaced' "action",\n          'ActivityReportObjectiveResources' "table"\n        FROM "DeleteActivityReportObjectiveResources"\n        UNION\n        SELECT\n          "activityReportObjectiveResourceId",\n          'removed' "action",\n          'ActivityReportObjectiveResources' "table"\n        FROM "DeleteMalformedActivityReportObjectiveResources"\n      ),\n      "ActivityReportObjectiveResourcesSync" AS (\n        SELECT\n          aro."objectiveId",\n          aror."userProvidedUrl",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          true "onAR",\n          bool_or(COALESCE(ar."calculatedStatus"::text, '') = 'approved') "onApprovedAR"\n        FROM "ActivityReportObjectiveResources" aror\n        JOIN "AffectedActivityReportObjectiveResources" aaror\n        ON aror.id = aaror."activityReportObjectiveResourceId"\n        AND aaror."action" IN ('updated', 'created')\n        JOIN "ActivityReportObjectives" aro\n        ON aror."activityReportObjectiveId" = aro.id\n        JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        GROUP BY\n          aro."objectiveId",\n          aror."userProvidedUrl"\n      ),\n      "UpdateObjectiveResources" AS (\n        UPDATE "ObjectiveResources" "or"\n        SET\n          "createdAt" = LEAST("or"."createdAt",arors."createdAt"),\n          "updatedAt" = GREATEST("or"."updatedAt",arors."updatedAt"),\n          "onAR" = ("or"."onAR" OR arors."onAR"),\n          "onApprovedAR" = ("or"."onApprovedAR" OR arors."onApprovedAR")\n        FROM "ActivityReportObjectiveResourcesSync" arors\n        WHERE "or"."objectiveId" = arors."objectiveId"\n        AND "or"."userProvidedUrl" = arors."userProvidedUrl"\n        RETURNING\n          id "objectiveResourceId"\n      ),\n      "NewObjectiveResources" AS (\n        INSERT INTO "ObjectiveResources" (\n          "userProvidedUrl",\n          "objectiveId",\n          "createdAt",\n          "updatedAt",\n          "onAR",\n          "onApprovedAR"\n        )\n        SELECT\n          arors."userProvidedUrl",\n          arors."objectiveId",\n          arors."createdAt",\n          arors."updatedAt",\n          arors."onAR",\n          arors."onApprovedAR"\n        FROM  "ActivityReportObjectiveResourcesSync" arors\n        LEFT JOIN "ObjectiveResources" "or"\n        ON "or"."objectiveId" = arors."objectiveId"\n        AND "or"."userProvidedUrl" = arors."userProvidedUrl"\n        WHERE "or".id IS NULL\n        RETURNING\n          id "objectiveResourceId"\n      ),\n      "AffectedObjectiveResources" AS (\n        SELECT\n          "objectiveResourceId",\n          'updated' "action",\n          'ObjectiveResources' "table"\n        FROM "UpdateObjectiveResources"\n        UNION\n        SELECT\n          "objectiveResourceId",\n          'created' "action",\n          'ObjectiveResources' "table"\n        FROM "NewObjectiveResources"\n      ),\n      "ObjectiveResourcesSync" AS (\n        SELECT\n          "o"."objectiveTemplateId",\n          "or"."userProvidedUrl",\n          MIN("or"."createdAt") "createdAt",\n          MAX("or"."updatedAt") "updatedAt"\n        FROM "ObjectiveResources" "or"\n        JOIN "AffectedObjectiveResources" aor\n        ON "or".id = aor."objectiveResourceId"\n        AND aor."action" IN ('updated', 'created')\n        JOIN "Objectives" o\n        ON "or"."objectiveId" = o.id\n        WHERE o."objectiveTemplateId" IS NOT NULL\n        GROUP BY\n          "o"."objectiveTemplateId",\n          "or"."userProvidedUrl"\n      ),\n      "UpdateObjectiveTemplateResources" AS (\n        UPDATE "ObjectiveTemplateResources" "otr"\n        SET\n          "createdAt" = LEAST("otr"."createdAt",ors."createdAt"),\n          "updatedAt" = GREATEST("otr"."updatedAt",ors."updatedAt")\n        FROM "ObjectiveResourcesSync" ors\n        WHERE "otr"."objectiveTemplateId" = ors."objectiveTemplateId"\n        AND "otr"."userProvidedUrl" = ors."userProvidedUrl"\n        RETURNING\n          id "objectiveTemplateResourceId"\n      ),\n      "NewObjectiveTemplateResources" AS (\n        INSERT INTO "ObjectiveTemplateResources" (\n          "userProvidedUrl",\n          "objectiveTemplateId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          ors."userProvidedUrl",\n          ors."objectiveTemplateId",\n          ors."createdAt",\n          ors."updatedAt"\n        FROM  "ObjectiveResourcesSync" ors\n        LEFT JOIN "ObjectiveTemplateResources" "otr"\n        ON "otr"."objectiveTemplateId" = ors."objectiveTemplateId"\n        AND "otr"."userProvidedUrl" = ors."userProvidedUrl"\n        WHERE "otr".id IS NULL\n        RETURNING\n          id "objectiveTemplateResourceId"\n      ),\n      "AffectedObjectiveTemplateResources" AS (\n        SELECT\n          "objectiveTemplateResourceId",\n          'updated' "action",\n          'ObjectiveTemplateResources' "table"\n        FROM "UpdateObjectiveTemplateResources"\n        UNION\n        SELECT\n          "objectiveTemplateResourceId",\n          'created' "action",\n          'ObjectiveTemplateResources' "table"\n        FROM "NewObjectiveTemplateResources"\n      )\n      SELECT\n        "table",\n        "action",\n        count("activityReportObjectiveResourceId")\n      FROM "AffectedActivityReportObjectiveResources"\n      GROUP BY\n        "table",\n        "action"\n      UNION\n      SELECT\n        "table",\n        "action",\n        count("objectiveResourceId")\n      FROM "AffectedObjectiveResources"\n      GROUP BY\n        "table",\n        "action"\n      UNION\n      SELECT\n        "table",\n        "action",\n        count("objectiveTemplateResourceId")\n      FROM "AffectedObjectiveTemplateResources"\n      GROUP BY\n        "table",\n        "action";
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): WITH\n        "ObjectiveResourcesURLs" AS (\n            SELECT\n                id,\n                (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n                "userProvidedUrl",\n                "objectiveId",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n            FROM "ObjectiveResources"\n        ),\n        "ObjectiveResourcesSource" AS (\n            SELECT\n                ru.id,\n                u.url,\n                ru."userProvidedUrl",\n                ru."objectiveId",\n                ru."createdAt",\n                ru."updatedAt",\n                ru."onAR",\n                ru."onApprovedAR"\n            FROM "ObjectiveResources" r\n            JOIN "ObjectiveResourcesURLs" ru\n            ON r.id = ru.id\n            CROSS JOIN UNNEST(ru.urls) u(url)\n            WHERE r."userProvidedUrl" like '%' || u.url || '%'\n            AND trim(r."userProvidedUrl") != u.url\n            ORDER BY r.id\n        ),\n        "ObjectiveResourcesCounts" AS (\n            SELECT\n                id,\n                count(url) cnt\n            FROM "ObjectiveResourcesSource"\n            GROUP BY id\n        ),\n        "UpdateObjectiveResources" AS (\n            UPDATE "ObjectiveResources" "or"\n            SET\n                "userProvidedUrl" = ors.url\n            FROM "ObjectiveResourcesSource" ors\n            JOIN "ObjectiveResourcesCounts" orc\n            ON ors.id = orc.id\n            WHERE "or".id = ors.id\n            AND orc.cnt = 1\n            RETURNING\n              "or".id "objectiveResourceId"\n        ),\n        "NewObjectiveResources" AS (\n            INSERT INTO "ObjectiveResources" (\n                "userProvidedUrl",\n                "objectiveId",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n            )\n            SELECT\n                ors.url "userProvidedUrl",\n                ors."objectiveId",\n                ors."createdAt",\n                ors."updatedAt",\n                ors."onAR",\n                ors."onApprovedAR"\n            FROM "ObjectiveResourcesSource" ors\n            JOIN "ObjectiveResourcesCounts" orc\n            ON ors.id = orc.id\n            WHERE orc.cnt != 1\n            RETURNING\n                id "objectiveResourceId"\n        ),\n        "DeleteObjectiveResources" AS (\n            DELETE FROM "ObjectiveResources" "or"\n            USING "ObjectiveResourcesCounts" orc\n            WHERE "or".id = "orc".id\n            AND orc.cnt != 1\n            RETURNING\n              "or".id "objectiveResourceId"\n        ),\n        "MalformedObjectiveResources" AS (\n            SELECT\n                r.id\n            FROM "ObjectiveResources" r\n            LEFT JOIN "ObjectiveResourcesURLs" ru\n            ON r.id = ru.id\n            WHERE ru.id IS NULL\n        ),\n        "DeleteMalformedObjectiveResources" AS (\n            DELETE FROM "ObjectiveResources" "or"\n            USING "MalformedObjectiveResources" mor\n            WHERE "or".id = "mor".id\n            RETURNING\n              "or".id "objectiveResourceId"\n        ),\n        "AffectedObjectiveResources" AS (\n          SELECT\n            "objectiveResourceId",\n            'updated' "action",\n            'ObjectiveResources' "table"\n          FROM "UpdateObjectiveResources"\n          UNION\n          SELECT\n            "objectiveResourceId",\n            'created' "action",\n            'ObjectiveResources' "table"\n          FROM "NewObjectiveResources"\n          UNION\n          SELECT\n            "objectiveResourceId",\n            'replaced' "action",\n            'ObjectiveResources' "table"\n          FROM "DeleteObjectiveResources"\n          UNION\n          SELECT\n            "objectiveResourceId",\n            'removed' "action",\n            'ObjectiveResources' "table"\n          FROM "DeleteMalformedObjectiveResources"\n        ),\n        "ObjectiveResourcesSync" AS (\n          SELECT\n            "o"."objectiveTemplateId",\n            "or"."userProvidedUrl",\n            MIN("or"."createdAt") "createdAt",\n            MAX("or"."updatedAt") "updatedAt"\n          FROM "ObjectiveResources" "or"\n          JOIN "AffectedObjectiveResources" aor\n          ON "or".id = aor."objectiveResourceId"\n          AND aor."action" IN ('updated', 'created')\n          JOIN "Objectives" o\n          ON "or"."objectiveId" = o.id\n          WHERE o."objectiveTemplateId" IS NOT NULL\n          GROUP BY\n            "o"."objectiveTemplateId",\n            "or"."userProvidedUrl"\n        ),\n        "UpdateObjectiveTemplateResources" AS (\n          UPDATE "ObjectiveTemplateResources" "otr"\n          SET\n            "createdAt" = LEAST("otr"."createdAt",ors."createdAt"),\n            "updatedAt" = GREATEST("otr"."updatedAt",ors."updatedAt")\n          FROM "ObjectiveResourcesSync" ors\n          WHERE "otr"."objectiveTemplateId" = ors."objectiveTemplateId"\n          AND "otr"."userProvidedUrl" = ors."userProvidedUrl"\n          RETURNING\n            id "objectiveTemplateResourceId"\n        ),\n        "NewObjectiveTemplateResources" AS (\n          INSERT INTO "ObjectiveTemplateResources" (\n            "userProvidedUrl",\n            "objectiveTemplateId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            ors."userProvidedUrl",\n            ors."objectiveTemplateId",\n            ors."createdAt",\n            ors."updatedAt"\n          FROM  "ObjectiveResourcesSync" ors\n          LEFT JOIN "ObjectiveTemplateResources" "otr"\n          ON "otr"."objectiveTemplateId" = ors."objectiveTemplateId"\n          AND "otr"."userProvidedUrl" = ors."userProvidedUrl"\n          WHERE "otr".id IS NULL\n          RETURNING\n            id "objectiveTemplateResourceId"\n        ),\n        "AffectedObjectiveTemplateResources" AS (\n          SELECT\n            "objectiveTemplateResourceId",\n            'updated' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "UpdateObjectiveTemplateResources"\n          UNION\n          SELECT\n            "objectiveTemplateResourceId",\n            'created' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "NewObjectiveTemplateResources"\n        )\n        SELECT\n          "table",\n          "action",\n          count("objectiveResourceId")\n        FROM "AffectedObjectiveResources"\n        GROUP BY\n          "table",\n          "action"\n        UNION\n        SELECT\n          "table",\n          "action",\n          count("objectiveTemplateResourceId")\n        FROM "AffectedObjectiveTemplateResources"\n        GROUP BY\n          "table",\n          "action";
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): WITH\n        "ObjectiveTemplateResourcesURLs" AS (\n            SELECT\n                id,\n                (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n                "userProvidedUrl",\n                "objectiveTemplateId",\n                "createdAt",\n                "updatedAt"\n            FROM "ObjectiveTemplateResources"\n        ),\n        "ObjectiveTemplateResourcesSource" AS (\n            SELECT\n                ru.id,\n                u.url,\n                ru."userProvidedUrl",\n                ru."objectiveTemplateId",\n                ru."createdAt",\n                ru."updatedAt"\n            FROM "ObjectiveTemplateResources" r\n            JOIN "ObjectiveTemplateResourcesURLs" ru\n            ON r.id = ru.id\n            CROSS JOIN UNNEST(ru.urls) u(url)\n            WHERE r."userProvidedUrl" like '%' || u.url || '%'\n            AND trim(r."userProvidedUrl") != u.url\n            ORDER BY r.id\n        ),\n        "ObjectiveTemplateResourcesCounts" AS (\n            SELECT\n                id,\n                count(url) cnt\n            FROM "ObjectiveTemplateResourcesSource"\n            GROUP BY id\n        ),\n        "UpdateObjectiveTemplateResources" AS (\n            UPDATE "ObjectiveTemplateResources" "or"\n            SET\n                "userProvidedUrl" = ors.url\n            FROM "ObjectiveTemplateResourcesSource" ors\n            JOIN "ObjectiveTemplateResourcesCounts" orc\n            ON ors.id = orc.id\n            WHERE "or".id = ors.id\n            AND orc.cnt = 1\n            RETURNING\n              "or".id "objectiveTemplateResourceId"\n        ),\n        "NewObjectiveTemplateResources" AS (\n            INSERT INTO "ObjectiveTemplateResources" (\n                "userProvidedUrl",\n                "objectiveTemplateId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                ors.url "userProvidedUrl",\n                ors."objectiveTemplateId",\n                ors."createdAt",\n                ors."updatedAt"\n            FROM "ObjectiveTemplateResourcesSource" ors\n            JOIN "ObjectiveTemplateResourcesCounts" orc\n            ON ors.id = orc.id\n            WHERE orc.cnt != 1\n            RETURNING\n                id "objectiveTemplateResourceId"\n        ),\n        "DeleteObjectiveTemplateResources" AS (\n            DELETE FROM "ObjectiveTemplateResources" "or"\n            USING "ObjectiveTemplateResourcesCounts" orc\n            WHERE "or".id = "orc".id\n            AND orc.cnt != 1\n            RETURNING\n              "or".id "objectiveTemplateResourceId"\n        ),\n        "MalformedObjectiveTemplateResources" AS (\n            SELECT\n                r.id\n            FROM "ObjectiveTemplateResources" r\n            LEFT JOIN "ObjectiveTemplateResourcesURLs" ru\n            ON r.id = ru.id\n            WHERE ru.id IS NULL\n        ),\n        "DeleteMalformedObjectiveTemplateResources" AS (\n            DELETE FROM "ObjectiveTemplateResources" "or"\n            USING "MalformedObjectiveTemplateResources" mor\n            WHERE "or".id = "mor".id\n            RETURNING\n              "or".id "objectiveTemplateResourceId"\n        ),\n        "AffectedObjectiveTemplateResources" AS (\n          SELECT\n            "objectiveTemplateResourceId",\n            'updated' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "UpdateObjectiveTemplateResources"\n          UNION\n          SELECT\n            "objectiveTemplateResourceId",\n            'created' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "NewObjectiveTemplateResources"\n          UNION\n          SELECT\n            "objectiveTemplateResourceId",\n            'replaced' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "DeleteObjectiveTemplateResources"\n          UNION\n          SELECT\n            "objectiveTemplateResourceId",\n            'removed' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "DeleteMalformedObjectiveTemplateResources"\n        )\n        SELECT\n          "table",\n          "action",\n          count("objectiveTemplateResourceId")\n        FROM "AffectedObjectiveTemplateResources"\n        GROUP BY\n          "table",\n          "action";
Executing (2360b7dd-ea11-4b0c-9765-e28480b7e387): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230206000000-resources-phase-0: migrated (0.120s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230206000000-resources-phase-1: migrating =======
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): START TRANSACTION;
Connection validated successfully
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230206000000-resources-phase-1.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TABLE IF NOT EXISTS "Resources" ("id"   SERIAL , "url" TEXT NOT NULL, "domain" TEXT NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ActivityReportResources_sourceFields' GROUP BY 1
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TYPE "public"."enum_ActivityReportResources_sourceFields" AS ENUM('nonECLKCResourcesUsed', 'ECLKCResourcesUsed', 'context', 'additionalNotes', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TABLE IF NOT EXISTS "ActivityReportResources" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_ActivityReportResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_NextStepResources_sourceFields' GROUP BY 1
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TYPE "public"."enum_NextStepResources_sourceFields" AS ENUM('note', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TABLE IF NOT EXISTS "NextStepResources" ("id"   SERIAL , "nextStepId" INTEGER NOT NULL REFERENCES "NextSteps" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_NextStepResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_GoalResources_sourceFields' GROUP BY 1
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TYPE "public"."enum_GoalResources_sourceFields" AS ENUM('name', 'timeframe', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TABLE IF NOT EXISTS "GoalResources" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_GoalResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "onAR" BOOLEAN NOT NULL DEFAULT false, "onApprovedAR" BOOLEAN NOT NULL DEFAULT false, PRIMARY KEY ("id"));
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_GoalTemplateResources_sourceFields' GROUP BY 1
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TYPE "public"."enum_GoalTemplateResources_sourceFields" AS ENUM('name', 'timeframe', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TABLE IF NOT EXISTS "GoalTemplateResources" ("id"   SERIAL , "goalTemplateId" INTEGER NOT NULL REFERENCES "GoalTemplates" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_GoalTemplateResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ActivityReportGoalResources_sourceFields' GROUP BY 1
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TYPE "public"."enum_ActivityReportGoalResources_sourceFields" AS ENUM('name', 'timeframe', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TABLE IF NOT EXISTS "ActivityReportGoalResources" ("id"   SERIAL , "activityReportGoalId" INTEGER NOT NULL REFERENCES "ActivityReportGoals" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_ActivityReportGoalResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): ALTER TABLE "public"."ObjectiveResources" ADD COLUMN "resourceId" INTEGER REFERENCES "Resources" ("id");
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TYPE "public"."enum_ObjectiveResources_sourceFields" AS ENUM('title', 'resource');ALTER TABLE "public"."ObjectiveResources" ADD COLUMN "sourceFields" "public"."enum_ObjectiveResources_sourceFields"[];
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): ALTER TABLE "public"."ObjectiveTemplateResources" ADD COLUMN "resourceId" INTEGER REFERENCES "Resources" ("id");
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TYPE "public"."enum_ObjectiveTemplateResources_sourceFields" AS ENUM('title', 'resource');ALTER TABLE "public"."ObjectiveTemplateResources" ADD COLUMN "sourceFields" "public"."enum_ObjectiveTemplateResources_sourceFields"[];
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): ALTER TABLE "public"."ActivityReportObjectiveResources" ADD COLUMN "resourceId" INTEGER REFERENCES "Resources" ("id");
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): CREATE TYPE "public"."enum_ActivityReportObjectiveResources_sourceFields" AS ENUM('title', 'ttaProvided', 'resource');ALTER TABLE "public"."ActivityReportObjectiveResources" ADD COLUMN "sourceFields" "public"."enum_ActivityReportObjectiveResources_sourceFields"[];
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "ARResources" AS (\n        SELECT\n            id "activityReportId",\n            "nonECLKCResourcesUsed",\n            "ECLKCResourcesUsed",\n            "createdAt",\n            "updatedAt"\n        FROM "ActivityReports" a\n        WHERE ( a."nonECLKCResourcesUsed" is not null\n               AND  ARRAY_LENGTH(a."nonECLKCResourcesUsed",1) > 0\n               AND nullIf(a."nonECLKCResourcesUsed"[1],'') IS NOT null)\n        OR (a."ECLKCResourcesUsed" is not null\n            AND  ARRAY_LENGTH(a."ECLKCResourcesUsed",1) > 0\n            AND nullIf(a."ECLKCResourcesUsed"[1],'') IS NOT null)\n        order by ID\n      ),\n      "ARNResources" AS (\n        SELECT\n            arr."activityReportId",\n            (regexp_matches(ne.resource,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n            'nonECLKCResourcesUsed' "sourceField",\n            arr."createdAt",\n            arr."updatedAt"\n        FROM "ARResources" arr\n        CROSS JOIN UNNEST(arr."nonECLKCResourcesUsed") AS ne(resource)\n      ),\n      "AREResources" AS (\n        SELECT\n            arr."activityReportId",\n            (regexp_matches(ne.resource,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n            'ECLKCResourcesUsed' "sourceField",\n            arr."createdAt",\n            arr."updatedAt"\n        FROM "ARResources" arr\n        CROSS JOIN UNNEST(arr."ECLKCResourcesUsed") AS ne(resource)\n      ),\n      "ARCResources" AS (\n        SELECT\n          a.id "activityReportId",\n          (regexp_matches(a.context,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'context' "sourceField",\n          a."createdAt",\n          a."updatedAt"\n        FROM "ActivityReports" a\n      ),\n      "ARAResources" AS (\n        SELECT\n          a.id "activityReportId",\n          (regexp_matches(a."additionalNotes",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'additionalNotes' "sourceField",\n          a."createdAt",\n          a."updatedAt"\n        FROM "ActivityReports" a\n      ),\n      "ClusteredARResources" AS (\n        SELECT *\n        FROM "ARNResources"\n        UNION\n        SELECT *\n        FROM "AREResources"\n        UNION\n        SELECT *\n        FROM "ARCResources"\n        UNION\n        SELECT *\n        FROM "ARAResources"\n      ),\n      "AllARResources" AS (\n        SELECT\n          carr."activityReportId",\n          carr."sourceField",\n          (regexp_match(url,'^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          carr."createdAt" "createdAt",\n          carr."updatedAt" "updatedAt"\n        FROM "ClusteredARResources" carr\n        CROSS JOIN UNNEST(carr.urls) u(url)\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aarr."domain",\n          aarr.url,\n          MIN(aarr."createdAt") "createdAt",\n          MAX(aarr."updatedAt") "updatedAt"\n        FROM "AllARResources" aarr\n        GROUP BY\n          aarr."domain",\n          aarr.url\n        ORDER BY\n          MIN(aarr."createdAt")\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      )\n      INSERT INTO "ActivityReportResources" (\n        "activityReportId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        aarr."activityReportId",\n        nr."resourceId",\n        ARRAY_AGG(DISTINCT aarr."sourceField")::"enum_ActivityReportResources_sourceFields"[] "sourceFields",\n        MIN(aarr."createdAt") "createdAt",\n        MAX(aarr."updatedAt") "updatedAt"\n      FROM "AllARResources" aarr\n      JOIN "NewResources" nr\n      ON aarr."domain" = nr."domain"\n      AND aarr.url = nr.url\n      GROUP BY\n        aarr."activityReportId",\n        nr."resourceId"\n      ORDER BY\n        aarr."activityReportId",\n        nr."resourceId",\n        MIN(aarr."createdAt"),\n        MAX(aarr."updatedAt");
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "NextStepsUrls" AS (\n        SELECT\n          ns.id "nextStepId",\n          (regexp_matches(ns.note,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          ns."createdAt",\n          ns."updatedAt"\n        FROM "NextSteps" ns\n      ),\n      "NextStepsUrlDomain" AS (\n        SELECT\n          nsu."nextStepId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          nsu."createdAt",\n          nsu."updatedAt"\n        FROM "NextStepsUrls" nsu\n        CROSS JOIN UNNEST(nsu.urls) u(url)\n      ),\n      "NextStepResources" AS (\n        SELECT\n          nsud."domain",\n          nsud.url,\n          MIN(nsud."createdAt") "createdAt",\n          MAX(nsud."updatedAt") "updatedAt"\n        FROM "NextStepsUrlDomain" nsud\n        GROUP BY\n          nsud."domain",\n          nsud.url\n        ORDER BY\n          MIN(nsud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", nsr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", nsr."updatedAt")\n        FROM "NextStepResources" nsr\n        JOIN "Resources" r2\n        ON nsr."domain" = r2."domain"\n        AND nsr.url = r2.url\n        WHERE nsr."domain" = r."domain"\n        AND nsr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          nsr."domain",\n          nsr.url,\n          nsr."createdAt",\n          nsr."updatedAt"\n        FROM "NextStepResources" nsr\n        LEFT JOIN "Resources" r\n        ON nsr."domain" = r."domain"\n        AND nsr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          nsr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      INSERT INTO "NextStepResources" (\n        "nextStepId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        nsud."nextStepId",\n        ar."resourceId",\n        ARRAY['note']::"enum_NextStepResources_sourceFields"[] "sourceFields",\n        nsud."createdAt",\n        nsud."updatedAt"\n      FROM "NextStepsUrlDomain" nsud\n      JOIN "AffectedResources" ar\n      ON nsud."domain" = ar."domain"\n      AND nsud.url = ar.url\n      ORDER BY\n        nsud."nextStepId",\n        ar."resourceId",\n        nsud."createdAt",\n        nsud."updatedAt";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "GoalUrls" AS (\n        SELECT\n          g.id "goalId",\n          (regexp_matches(g.name,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'name' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "Goals" g\n        UNION\n        SELECT\n          g.id "goalId",\n          (regexp_matches(g."timeframe",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'timeframe' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "Goals" g\n      ),\n      "GoalUrlDomain" AS (\n        SELECT\n          gu."goalId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          gu."sourceField",\n          gu."createdAt",\n          gu."updatedAt"\n        FROM "GoalUrls" gu\n        CROSS JOIN UNNEST(gu.urls) u(url)\n      ),\n      "FoundGoalResources" AS (\n        SELECT\n          gud."goalId",\n          gud."domain",\n          gud.url,\n          ARRAY_AGG(gud."sourceField") "sourceFields",\n          MIN(gud."createdAt") "createdAt",\n          MAX(gud."updatedAt") "updatedAt"\n        FROM "GoalUrlDomain" gud\n        GROUP BY\n          gud."goalId",\n          gud."domain",\n          gud.url\n        ORDER BY\n          MIN(gud."createdAt")\n      ),\n      "FoundResources" AS (\n        SELECT\n          fgr."domain",\n          fgr.url,\n          MIN(fgr."createdAt") "createdAt",\n          MAX(fgr."updatedAt") "updatedAt"\n        FROM "FoundGoalResources" fgr\n        GROUP BY\n          fgr."domain",\n          fgr.url\n        ORDER BY\n          MIN(fgr."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", fr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", fr."updatedAt")\n        FROM "FoundResources" fr\n        JOIN "Resources" r2\n        ON fr."domain" = r2."domain"\n        AND fr.url = r2.url\n        WHERE fr."domain" = r."domain"\n        AND fr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          fr."domain",\n          fr.url,\n          fr."createdAt",\n          fr."updatedAt"\n        FROM "FoundResources" fr\n        LEFT JOIN "Resources" r\n        ON fr."domain" = r."domain"\n        AND fr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          fr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      INSERT INTO "GoalResources" (\n        "goalId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        fgr."goalId",\n        ar."resourceId",\n        fgr."sourceFields"::"enum_GoalResources_sourceFields"[] "sourceFields",\n        fgr."createdAt",\n        fgr."updatedAt"\n      FROM "FoundGoalResources" fgr\n      JOIN "AffectedResources" ar\n      ON fgr."domain" = ar."domain"\n      AND fgr.url = ar.url\n      ORDER BY\n        fgr."goalId",\n        ar."resourceId",\n        fgr."createdAt",\n        fgr."updatedAt";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "GoalTemplateUrls" AS (\n        SELECT\n          g.id "goalTemplateId",\n          (regexp_matches(g."templateName",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'name' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "GoalTemplates" g\n      ),\n      "GoalTemplateUrlDomain" AS (\n        SELECT\n          gu."goalTemplateId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          gu."sourceField",\n          gu."createdAt",\n          gu."updatedAt"\n        FROM "GoalTemplateUrls" gu\n        CROSS JOIN UNNEST(gu.urls) u(url)\n      ),\n      "FoundGoalTemplateResources" AS (\n        SELECT\n          gud."goalTemplateId",\n          gud."domain",\n          gud.url,\n          ARRAY_AGG(gud."sourceField") "sourceFields",\n          MIN(gud."createdAt") "createdAt",\n          MAX(gud."updatedAt") "updatedAt"\n        FROM "GoalTemplateUrlDomain" gud\n        GROUP BY\n          gud."goalTemplateId",\n          gud."domain",\n          gud.url\n        ORDER BY\n          MIN(gud."createdAt")\n      ),\n      "FoundResources" AS (\n        SELECT\n          fgr."domain",\n          fgr.url,\n          MIN(fgr."createdAt") "createdAt",\n          MAX(fgr."updatedAt") "updatedAt"\n        FROM "FoundGoalTemplateResources" fgr\n        GROUP BY\n          fgr."domain",\n          fgr.url\n        ORDER BY\n          MIN(fgr."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", fr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", fr."updatedAt")\n        FROM "FoundResources" fr\n        JOIN "Resources" r2\n        ON fr."domain" = r2."domain"\n        AND fr.url = r2.url\n        WHERE fr."domain" = r."domain"\n        AND fr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          fr."domain",\n          fr.url,\n          fr."createdAt",\n          fr."updatedAt"\n        FROM "FoundResources" fr\n        LEFT JOIN "Resources" r\n        ON fr."domain" = r."domain"\n        AND fr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          fr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      INSERT INTO "GoalTemplateResources" (\n        "goalTemplateId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        fgr."goalTemplateId",\n        ar."resourceId",\n        fgr."sourceFields"::"enum_GoalTemplateResources_sourceFields"[] "sourceFields",\n        fgr."createdAt",\n        fgr."updatedAt"\n      FROM "FoundGoalTemplateResources" fgr\n      JOIN "AffectedResources" ar\n      ON fgr."domain" = ar."domain"\n      AND fgr.url = ar.url\n      ORDER BY\n        fgr."goalTemplateId",\n        ar."resourceId",\n        fgr."createdAt",\n        fgr."updatedAt";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "GoalUrls" AS (\n        SELECT\n          g.id "activityReportGoalId",\n          (regexp_matches(g.name,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'name' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "ActivityReportGoals" g\n        UNION\n        SELECT\n          g.id "activityReportGoalId",\n          (regexp_matches(g."timeframe",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'timeframe' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "ActivityReportGoals" g\n      ),\n      "GoalUrlDomain" AS (\n        SELECT\n          gu."activityReportGoalId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          gu."sourceField",\n          gu."createdAt",\n          gu."updatedAt"\n        FROM "GoalUrls" gu\n        CROSS JOIN UNNEST(gu.urls) u(url)\n      ),\n      "FoundGoalResources" AS (\n        SELECT\n          gud."activityReportGoalId",\n          gud."domain",\n          gud.url,\n          ARRAY_AGG(gud."sourceField") "sourceFields",\n          MIN(gud."createdAt") "createdAt",\n          MAX(gud."updatedAt") "updatedAt"\n        FROM "GoalUrlDomain" gud\n        GROUP BY\n          gud."activityReportGoalId",\n          gud."domain",\n          gud.url\n        ORDER BY\n          MIN(gud."createdAt")\n      ),\n      "FoundResources" AS (\n        SELECT\n          fgr."domain",\n          fgr.url,\n          MIN(fgr."createdAt") "createdAt",\n          MAX(fgr."updatedAt") "updatedAt"\n        FROM "FoundGoalResources" fgr\n        GROUP BY\n          fgr."domain",\n          fgr.url\n        ORDER BY\n          MIN(fgr."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", fr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", fr."updatedAt")\n        FROM "FoundResources" fr\n        JOIN "Resources" r2\n        ON fr."domain" = r2."domain"\n        AND fr.url = r2.url\n        WHERE fr."domain" = r."domain"\n        AND fr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          fr."domain",\n          fr.url,\n          fr."createdAt",\n          fr."updatedAt"\n        FROM "FoundResources" fr\n        LEFT JOIN "Resources" r\n        ON fr."domain" = r."domain"\n        AND fr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          fr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      INSERT INTO "ActivityReportGoalResources" (\n        "activityReportGoalId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        fgr."activityReportGoalId",\n        ar."resourceId",\n        fgr."sourceFields"::"enum_ActivityReportGoalResources_sourceFields"[] "sourceFields",\n        fgr."createdAt",\n        fgr."updatedAt"\n      FROM "FoundGoalResources" fgr\n      JOIN "AffectedResources" ar\n      ON fgr."domain" = ar."domain"\n      AND fgr.url = ar.url\n      ORDER BY\n        fgr."activityReportGoalId",\n        ar."resourceId",\n        fgr."createdAt",\n        fgr."updatedAt";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "ObjectiveResourcesURLs" AS (\n        SELECT\n          id "objectiveResourceId",\n          (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          "createdAt",\n          "updatedAt"\n        FROM "ObjectiveResources"\n      ),\n      "ObjectiveResourcesUrlDomain" AS (\n        SELECT\n          oru."objectiveResourceId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          oru."createdAt",\n          oru."updatedAt"\n        FROM "ObjectiveResourcesURLs" oru\n        CROSS JOIN UNNEST(oru.urls) u(url)\n      ),\n      "ObjectiveResourcesResources" AS (\n        SELECT\n          orud."domain",\n          orud.url,\n          MIN(orud."createdAt") "createdAt",\n          MAX(orud."updatedAt") "updatedAt"\n        FROM "ObjectiveResourcesUrlDomain" orud\n        GROUP BY\n          orud."domain",\n          orud.url\n        ORDER BY\n          MIN(orud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", orr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", orr."updatedAt")\n        FROM "ObjectiveResourcesResources" orr\n        JOIN "Resources" r2\n        ON orr."domain" = r2."domain"\n        AND orr.url = r2.url\n        WHERE orr."domain" = r."domain"\n        AND orr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          orr."domain",\n          orr.url,\n          orr."createdAt",\n          orr."updatedAt"\n        FROM "ObjectiveResourcesResources" orr\n        LEFT JOIN "Resources" r\n        ON orr."domain" = r."domain"\n        AND orr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          orr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      UPDATE "ObjectiveResources" "or"\n      SET\n        "resourceId" = ar."resourceId",\n        "sourceFields" = ARRAY['resource']::"enum_ObjectiveResources_sourceFields"[]\n      FROM "ObjectiveResourcesUrlDomain" orud\n      JOIN "AffectedResources" ar\n      ON orud."domain" = ar."domain"\n      AND orud.url = ar.url\n      WHERE "or".id = orud."objectiveResourceId";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "ObjectiveUrls" AS (\n        SELECT\n          o.id "objectiveId",\n          (regexp_matches(o.title,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          o."createdAt",\n          o."updatedAt",\n          o."onAR",\n          o."onApprovedAR"\n        FROM "Objectives" o\n      ),\n      "ObjectiveTitleUrlDomain" AS (\n        SELECT\n          ou."objectiveId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          ou."createdAt",\n          ou."updatedAt",\n          ou."onAR",\n          ou."onApprovedAR",\n          'title' "sourceField"\n        FROM "ObjectiveUrls" ou\n        CROSS JOIN UNNEST(ou.urls) u(url)\n      ),\n      "ObjectiveCurrentUrlDomain" AS (\n        SELECT\n          o."objectiveId",\n          r."domain",\n          r.url,\n          o."createdAt",\n          o."updatedAt",\n          o."onAR",\n          o."onApprovedAR",\n          sf."sourceField"::TEXT "sourceField"\n        FROM "ObjectiveResources" o\n        JOIN "Resources" r\n        ON o."resourceId" = r.id\n        CROSS JOIN UNNEST(o."sourceFields") sf("sourceField")\n      ),\n      "ObjectiveAllUrlDomain" AS (\n        SELECT *\n        FROM "ObjectiveTitleUrlDomain"\n        UNION\n        SELECT *\n        FROM "ObjectiveCurrentUrlDomain"\n      ),\n      "ObjectiveUrlDomain" AS (\n        SELECT\n          oaud."objectiveId",\n          oaud."domain",\n          oaud.url,\n          MIN(oaud."createdAt") "createdAt",\n          MAX(oaud."updatedAt") "updatedAt",\n          BOOL_OR(oaud."onAR") "onAR",\n          BOOL_OR(oaud."onApprovedAR") "onApprovedAR",\n          ARRAY_AGG(DISTINCT oaud."sourceField") "sourceFields",\n          BOOL_OR(oaud."sourceField" = 'title') "isAutoDetected"\n        FROM "ObjectiveAllUrlDomain" oaud\n        GROUP BY\n          oaud."objectiveId",\n          oaud."domain",\n          oaud.url\n      ),\n      "ObjectiveDetectedResources" AS (\n        SELECT\n          oud."domain",\n          oud.url,\n          MIN(oud."createdAt") "createdAt",\n          MAX(oud."updatedAt") "updatedAt"\n        FROM "ObjectiveUrlDomain" oud\n        WHERE NOT('resource' = ANY(oud."sourceFields")\n          AND array_length(oud."sourceFields", 1) = 1)\n        GROUP BY\n          oud."domain",\n          oud.url\n        ORDER BY\n          MIN(oud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", odr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", odr."updatedAt")\n        FROM "ObjectiveDetectedResources" odr\n        WHERE odr."domain" = r."domain"\n        AND odr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          odr."domain",\n          odr.url,\n          odr."createdAt",\n          odr."updatedAt"\n        FROM "ObjectiveDetectedResources" odr\n        LEFT JOIN "Resources" r\n        ON odr."domain" = r."domain"\n        AND odr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          odr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      ),\n      "UpdateObjectiveResources" AS (\n        UPDATE "ObjectiveResources" r\n        SET\n          "resourceId" = ar."resourceId",\n          "createdAt" = LEAST(r."createdAt", oud."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", oud."updatedAt"),\n          "sourceFields" = COALESCE(oud."sourceFields"::"enum_ObjectiveResources_sourceFields"[], r."sourceFields"),\n          "onAR" = (r."onAR" OR oud."onAR"),\n          "onApprovedAR" = (r."onApprovedAR" OR oud."onApprovedAR")\n        FROM "ObjectiveUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        WHERE oud."objectiveId" = r."objectiveId"\n        AND oud.url = r."userProvidedUrl"\n        RETURNING\n          r.id "objectiveResourceId"\n      ),\n      "NewObjectiveResources" AS (\n        INSERT INTO "ObjectiveResources" (\n          "userProvidedUrl",\n          "objectiveId",\n          "createdAt",\n          "updatedAt",\n          "onAR",\n          "onApprovedAR",\n          "resourceId",\n          "sourceFields"\n        )\n        SELECT\n          oud.url "userProvidedUrl",\n          oud."objectiveId",\n          oud."createdAt",\n          oud."updatedAt",\n          oud."onAR",\n          oud."onApprovedAR",\n          ar."resourceId",\n          ARRAY['title']::"enum_ObjectiveResources_sourceFields"[] "sourceFields"\n        FROM "ObjectiveUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        LEFT JOIN "ObjectiveResources" r\n        ON oud."objectiveId" = r."objectiveId"\n        AND oud.url = r."userProvidedUrl"\n        WHERE r.id IS NULL\n        ORDER BY\n          oud."createdAt",\n          ar."resourceId"\n        RETURNING\n          id "objectiveResourceId"\n      ),\n      "AffectedObjectiveResources" AS (\n        SELECT\n          "objectiveResourceId",\n          'updated' "action"\n        FROM "UpdateObjectiveResources"\n        UNION\n        SELECT\n          "objectiveResourceId",\n          'created' "action"\n        FROM "NewObjectiveResources"\n      )\n      SELECT\n        "action",\n        count("objectiveResourceId")\n      FROM "AffectedObjectiveResources"\n      GROUP BY "action";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "ObjectiveTemplateResourcesURLs" AS (\n        SELECT\n          id "objectiveTemplateResourceId",\n          (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          "createdAt",\n          "updatedAt"\n        FROM "ObjectiveTemplateResources"\n      ),\n      "ObjectiveTemplateResourcesUrlDomain" AS (\n        SELECT\n          oru."objectiveTemplateResourceId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          oru."createdAt",\n          oru."updatedAt"\n        FROM "ObjectiveTemplateResourcesURLs" oru\n        CROSS JOIN UNNEST(oru.urls) u(url)\n      ),\n      "ObjectiveTemplateResourcesResources" AS (\n        SELECT\n          orud."domain",\n          orud.url,\n          MIN(orud."createdAt") "createdAt",\n          MAX(orud."updatedAt") "updatedAt"\n        FROM "ObjectiveTemplateResourcesUrlDomain" orud\n        GROUP BY\n          orud."domain",\n          orud.url\n        ORDER BY\n          MIN(orud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", orr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", orr."updatedAt")\n        FROM "ObjectiveTemplateResourcesResources" orr\n        JOIN "Resources" r2\n        ON orr."domain" = r2."domain"\n        AND orr.url = r2.url\n        WHERE orr."domain" = r."domain"\n        AND orr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          orr."domain",\n          orr.url,\n          orr."createdAt",\n          orr."updatedAt"\n        FROM "ObjectiveTemplateResourcesResources" orr\n        LEFT JOIN "Resources" r\n        ON orr."domain" = r."domain"\n        AND orr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          orr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      UPDATE "ObjectiveTemplateResources" "or"\n      SET\n        "resourceId" = ar."resourceId",\n        "sourceFields" = ARRAY['resource']::"enum_ObjectiveTemplateResources_sourceFields"[]\n      FROM "ObjectiveTemplateResourcesUrlDomain" orud\n      JOIN "AffectedResources" ar\n      ON orud."domain" = ar."domain"\n      AND orud.url = ar.url\n      WHERE "or".id = orud."objectiveTemplateResourceId";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "ObjectiveTemplateUrls" AS (\n        SELECT\n          o.id "objectiveTemplateId",\n          (regexp_matches(o."templateTitle",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          o."createdAt",\n          o."updatedAt"\n        FROM "ObjectiveTemplates" o\n      ),\n      "ObjectiveTemplateTitleUrlDomain" AS (\n        SELECT\n          ou."objectiveTemplateId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          ou."createdAt",\n          ou."updatedAt",\n          'title' "sourceField"\n        FROM "ObjectiveTemplateUrls" ou\n        CROSS JOIN UNNEST(ou.urls) u(url)\n      ),\n      "ObjectiveTemplateCurrentUrlDomain" AS (\n        SELECT\n          o."objectiveTemplateId",\n          r."domain",\n          r.url,\n          o."createdAt",\n          o."updatedAt",\n          sf."sourceField"::TEXT "sourceField"\n        FROM "ObjectiveTemplateResources" o\n        JOIN "Resources" r\n        ON o."resourceId" = r.id\n        CROSS JOIN UNNEST(o."sourceFields") sf("sourceField")\n      ),\n      "ObjectiveTemplateAllUrlDomain" AS (\n        SELECT *\n        FROM "ObjectiveTemplateTitleUrlDomain"\n        UNION\n        SELECT *\n        FROM "ObjectiveTemplateCurrentUrlDomain"\n      ),\n      "ObjectiveTemplateUrlDomain" AS (\n        SELECT\n          oaud."objectiveTemplateId",\n          oaud."domain",\n          oaud.url,\n          MIN(oaud."createdAt") "createdAt",\n          MAX(oaud."updatedAt") "updatedAt",\n          ARRAY_AGG(DISTINCT oaud."sourceField") "sourceFields",\n          BOOL_OR(oaud."sourceField" = 'title') "isAutoDetected"\n        FROM "ObjectiveTemplateAllUrlDomain" oaud\n        GROUP BY\n          oaud."objectiveTemplateId",\n          oaud."domain",\n          oaud.url\n      ),\n      "ObjectiveTemplateDetectedResources" AS (\n        SELECT\n          oud."domain",\n          oud.url,\n          MIN(oud."createdAt") "createdAt",\n          MAX(oud."updatedAt") "updatedAt"\n        FROM "ObjectiveTemplateUrlDomain" oud\n        WHERE NOT('resource' = ANY(oud."sourceFields")\n          AND array_length(oud."sourceFields", 1) = 1)\n        GROUP BY\n          oud."domain",\n          oud.url\n        ORDER BY\n          MIN(oud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", odr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", odr."updatedAt")\n        FROM "ObjectiveTemplateDetectedResources" odr\n        WHERE odr."domain" = r."domain"\n        AND odr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          odr."domain",\n          odr.url,\n          odr."createdAt",\n          odr."updatedAt"\n        FROM "ObjectiveTemplateDetectedResources" odr\n        LEFT JOIN "Resources" r\n        ON odr."domain" = r."domain"\n        AND odr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          odr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      ),\n      "UpdateObjectiveTemplateResources" AS (\n        UPDATE "ObjectiveTemplateResources" r\n        SET\n          "resourceId" = ar."resourceId",\n          "createdAt" = LEAST(r."createdAt", oud."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", oud."updatedAt"),\n          "sourceFields" = COALESCE(oud."sourceFields"::"enum_ObjectiveTemplateResources_sourceFields"[], r."sourceFields")\n        FROM "ObjectiveTemplateUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        WHERE oud."objectiveTemplateId" = r."objectiveTemplateId"\n        AND oud.url = r."userProvidedUrl"\n        RETURNING\n          r.id "objectiveTemplateResourceId"\n      ),\n      "NewObjectiveTemplateResources" AS (\n        INSERT INTO "ObjectiveTemplateResources" (\n          "userProvidedUrl",\n          "objectiveTemplateId",\n          "createdAt",\n          "updatedAt",\n          "resourceId",\n          "sourceFields"\n        )\n        SELECT\n          oud.url "userProvidedUrl",\n          oud."objectiveTemplateId",\n          oud."createdAt",\n          oud."updatedAt",\n          ar."resourceId",\n          ARRAY['title']::"enum_ObjectiveTemplateResources_sourceFields"[] "sourceFields"\n        FROM "ObjectiveTemplateUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        LEFT JOIN "ObjectiveTemplateResources" r\n        ON oud."objectiveTemplateId" = r."objectiveTemplateId"\n        AND oud.url = r."userProvidedUrl"\n        WHERE r.id IS NULL\n        ORDER BY\n          oud."createdAt",\n          ar."resourceId"\n        RETURNING\n          id "objectiveTemplateResourceId"\n      ),\n      "AffectedObjectiveTemplateResources" AS (\n        SELECT\n          "objectiveTemplateResourceId",\n          'updated' "action"\n        FROM "UpdateObjectiveTemplateResources"\n        UNION\n        SELECT\n          "objectiveTemplateResourceId",\n          'created' "action"\n        FROM "NewObjectiveTemplateResources"\n      )\n      SELECT\n        "action",\n        count("objectiveTemplateResourceId")\n      FROM "AffectedObjectiveTemplateResources"\n      GROUP BY "action";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "ObjectiveResourcesURLs" AS (\n        SELECT\n          id "objectiveResourceId",\n          (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          "createdAt",\n          "updatedAt"\n        FROM "ActivityReportObjectiveResources"\n      ),\n      "ObjectiveResourcesUrlDomain" AS (\n        SELECT\n          oru."objectiveResourceId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          oru."createdAt",\n          oru."updatedAt"\n        FROM "ObjectiveResourcesURLs" oru\n        CROSS JOIN UNNEST(oru.urls) u(url)\n      ),\n      "ObjectiveResourcesResources" AS (\n        SELECT\n          orud."domain",\n          orud.url,\n          MIN(orud."createdAt") "createdAt",\n          MAX(orud."updatedAt") "updatedAt"\n        FROM "ObjectiveResourcesUrlDomain" orud\n        GROUP BY\n          orud."domain",\n          orud.url\n        ORDER BY\n          MIN(orud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", orr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", orr."updatedAt")\n        FROM "ObjectiveResourcesResources" orr\n        JOIN "Resources" r2\n        ON orr."domain" = r2."domain"\n        AND orr.url = r2.url\n        WHERE orr."domain" = r."domain"\n        AND orr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          orr."domain",\n          orr.url,\n          orr."createdAt",\n          orr."updatedAt"\n        FROM "ObjectiveResourcesResources" orr\n        LEFT JOIN "Resources" r\n        ON orr."domain" = r."domain"\n        AND orr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          orr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      UPDATE "ActivityReportObjectiveResources" "or"\n      SET\n        "resourceId" = ar."resourceId",\n        "sourceFields" = ARRAY['resource']::"enum_ActivityReportObjectiveResources_sourceFields"[]\n      FROM "ObjectiveResourcesUrlDomain" orud\n      JOIN "AffectedResources" ar\n      ON orud."domain" = ar."domain"\n      AND orud.url = ar.url\n      WHERE "or".id = orud."objectiveResourceId";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): WITH\n      "ObjectiveTitleUrls" AS (\n        SELECT\n          o.id "activityReportObjectiveId",\n          (regexp_matches(o.title,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          o."createdAt",\n          o."updatedAt",\n          'title'::"enum_ActivityReportObjectiveResources_sourceFields" "sourceField"\n        FROM "ActivityReportObjectives" o\n      ),\n      "ObjectiveTtaProvidedUrls" AS (\n        SELECT\n          o.id "activityReportObjectiveId",\n          (regexp_matches(o."ttaProvided",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          o."createdAt",\n          o."updatedAt",\n          'ttaProvided'::"enum_ActivityReportObjectiveResources_sourceFields" "sourceField"\n        FROM "ActivityReportObjectives" o\n      ),\n      "ObjectiveUrls" AS (\n        SELECT *\n        FROM "ObjectiveTitleUrls"\n        UNION\n        SELECT *\n        FROM "ObjectiveTtaProvidedUrls"\n      ),\n      "ObjectiveIncomingUrlDomain" AS (\n        SELECT\n          ou."activityReportObjectiveId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          ou."createdAt",\n          ou."updatedAt",\n          ou."sourceField"\n        FROM "ObjectiveUrls" ou\n        CROSS JOIN UNNEST(ou.urls) u(url)\n      ),\n      "ObjectiveCurrentUrlDomain" AS (\n        SELECT\n          o."activityReportObjectiveId",\n          r."domain",\n          r.url,\n          o."createdAt",\n          o."updatedAt",\n          sf."sourceField" "sourceField"\n        FROM "ActivityReportObjectiveResources" o\n        JOIN "Resources" r\n        ON o."resourceId" = r.id\n        CROSS JOIN UNNEST(o."sourceFields") sf("sourceField")\n      ),\n      "ObjectiveAllUrlDomain" AS (\n        SELECT *\n        FROM "ObjectiveIncomingUrlDomain"\n        UNION\n        SELECT *\n        FROM "ObjectiveCurrentUrlDomain"\n      ),\n      "ObjectiveUrlDomain" AS (\n        SELECT\n          oaud."activityReportObjectiveId",\n          oaud."domain",\n          oaud.url,\n          MIN(oaud."createdAt") "createdAt",\n          MAX(oaud."updatedAt") "updatedAt",\n          ARRAY_AGG(DISTINCT oaud."sourceField") "sourceFields"\n        FROM "ObjectiveAllUrlDomain" oaud\n        GROUP BY\n          oaud."activityReportObjectiveId",\n          oaud."domain",\n          oaud.url\n      ),\n      "ObjectiveDetectedResources" AS (\n        SELECT\n          oud."domain",\n          oud.url,\n          MIN(oud."createdAt") "createdAt",\n          MAX(oud."updatedAt") "updatedAt"\n        FROM "ObjectiveUrlDomain" oud\n        WHERE NOT('resource'::"enum_ActivityReportObjectiveResources_sourceFields" = ANY(oud."sourceFields")\n          AND array_length(oud."sourceFields", 1) = 1)\n        GROUP BY\n          oud."domain",\n          oud.url\n        ORDER BY\n          MIN(oud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", odr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", odr."updatedAt")\n        FROM "ObjectiveDetectedResources" odr\n        WHERE odr."domain" = r."domain"\n        AND odr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          odr."domain",\n          odr.url,\n          odr."createdAt",\n          odr."updatedAt"\n        FROM "ObjectiveDetectedResources" odr\n        LEFT JOIN "Resources" r\n        ON odr."domain" = r."domain"\n        AND odr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          odr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      ),\n      "UpdateObjectiveResources" AS (\n        UPDATE "ActivityReportObjectiveResources" r\n        SET\n          "resourceId" = ar."resourceId",\n          "createdAt" = LEAST(r."createdAt", oud."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", oud."updatedAt"),\n          "sourceFields" = COALESCE(oud."sourceFields"::"enum_ActivityReportObjectiveResources_sourceFields"[], r."sourceFields")\n        FROM "ObjectiveUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        WHERE oud."activityReportObjectiveId" = r."activityReportObjectiveId"\n        AND oud.url = r."userProvidedUrl"\n        AND oud."sourceFields" != r."sourceFields"\n        RETURNING\n          r.id "activityReportObjectiveResourceId"\n      ),\n      "NewObjectiveResources" AS (\n        INSERT INTO "ActivityReportObjectiveResources" (\n          "userProvidedUrl",\n          "activityReportObjectiveId",\n          "createdAt",\n          "updatedAt",\n          "resourceId",\n          "sourceFields"\n        )\n        SELECT\n          oud.url "userProvidedUrl",\n          oud."activityReportObjectiveId",\n          oud."createdAt",\n          oud."updatedAt",\n          ar."resourceId",\n          oud."sourceFields"::"enum_ActivityReportObjectiveResources_sourceFields"[] "sourceFields"\n        FROM "ObjectiveUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        LEFT JOIN "ActivityReportObjectiveResources" r\n        ON oud."activityReportObjectiveId" = r."activityReportObjectiveId"\n        AND oud.url = r."userProvidedUrl"\n        WHERE r.id IS NULL\n        ORDER BY\n          oud."createdAt",\n          ar."resourceId"\n        RETURNING\n          id "activityReportObjectiveResourceId"\n      ),\n      "AffectedObjectiveResources" AS (\n        SELECT\n          "activityReportObjectiveResourceId",\n          'updated' "action"\n        FROM "UpdateObjectiveResources"\n        UNION\n        SELECT\n          "activityReportObjectiveResourceId",\n          'created' "action"\n        FROM "NewObjectiveResources"\n      )\n      SELECT\n        "action",\n        count("activityReportObjectiveResourceId")\n      FROM "AffectedObjectiveResources"\n      GROUP BY "action";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): ALTER TABLE "public"."ActivityReportObjectiveResources" DROP COLUMN "userProvidedUrl";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): ALTER TABLE "public"."ObjectiveTemplateResources" DROP COLUMN "userProvidedUrl";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): ALTER TABLE "public"."ObjectiveResources" DROP COLUMN "userProvidedUrl";
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "resourceId" SET NOT NULL;ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "resourceId" DROP DEFAULT;ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "resourceId" TYPE INTEGER;
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "resourceId" SET NOT NULL;ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "resourceId" DROP DEFAULT;ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "resourceId" TYPE INTEGER;
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): ALTER TABLE "ObjectiveResources" ALTER COLUMN "resourceId" SET NOT NULL;ALTER TABLE "ObjectiveResources" ALTER COLUMN "resourceId" DROP DEFAULT;ALTER TABLE "ObjectiveResources" ALTER COLUMN "resourceId" TYPE INTEGER;
Executing (8a3b826c-5ac1-4911-b5c5-87be3955dc1f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230206000000-resources-phase-1: migrated (0.332s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230208151755-ar-submitted-date: migrating =======
Executing (e4655ddb-bf8a-40dc-81f5-8af076333ca1): START TRANSACTION;
Connection validated successfully
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "submittedDate" DATE;
Connection validated successfully
Executing (default): UPDATE\n      "ActivityReports" ar\n        SET\n            "submittedDate" = s."submittedDate"\n        FROM\n            (\n            SELECT\n            data_id "activityReportId",\n            MIN(dml_timestamp) "firstSubmittedDate",\n            MAX(dml_timestamp) "submittedDate"\n            FROM "ZALActivityReports" za\n            WHERE dml_type = 'UPDATE'\n            AND new_row_data ->> 'submissionStatus' = 'submitted'\n            AND old_row_data ->> 'submissionStatus' != 'submitted'\n            GROUP BY 1\n          ) s\n        WHERE\n            ar."id" = s."activityReportId";
Connection validated successfully
Executing (e4655ddb-bf8a-40dc-81f5-8af076333ca1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230208151755-ar-submitted-date: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230209000000-correct_legacy_ttatype: migrating =======
Executing (96e47811-7657-4bbc-8ae8-1c93ab4e70a9): START TRANSACTION;
Connection validated successfully
Executing (96e47811-7657-4bbc-8ae8-1c93ab4e70a9): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230209000000-correct_legacy_ttatype.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (96e47811-7657-4bbc-8ae8-1c93ab4e70a9): UPDATE "ActivityReports"\n          SET "ttaType" =\n            CASE "ttaType"\n              WHEN '{"Technical Assistance"}' THEN ARRAY['technical-assistance']\n              WHEN '{"Training"}' THEN ARRAY['training']\n              WHEN '{"Both"}' THEN ARRAY['training','technical-assistance']\n              WHEN '{}' THEN NULL\n              ELSE "ttaType"\n            END\n          WHERE "ttaType" NOT IN ('{training}','{training,technical-assistance}','{technical-assistance}');
Executing (96e47811-7657-4bbc-8ae8-1c93ab4e70a9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230209000000-correct_legacy_ttatype: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230214142150-add-site-alert: migrating =======
Executing (a7d504a4-9e65-4a01-9ad7-d15218d26026): START TRANSACTION;
Connection validated successfully
Executing (a7d504a4-9e65-4a01-9ad7-d15218d26026): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230214142150-add-site-alert.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a7d504a4-9e65-4a01-9ad7-d15218d26026): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_SiteAlerts_status' GROUP BY 1
Executing (a7d504a4-9e65-4a01-9ad7-d15218d26026): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_SiteAlerts_variant' GROUP BY 1
Executing (a7d504a4-9e65-4a01-9ad7-d15218d26026): CREATE TYPE "public"."enum_SiteAlerts_status" AS ENUM('Unpublished', 'Published');
Executing (a7d504a4-9e65-4a01-9ad7-d15218d26026): CREATE TYPE "public"."enum_SiteAlerts_variant" AS ENUM('info', 'emergency');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (a7d504a4-9e65-4a01-9ad7-d15218d26026): CREATE TABLE IF NOT EXISTS "SiteAlerts" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "startDate" TIMESTAMP WITH TIME ZONE NOT NULL, "endDate" TIMESTAMP WITH TIME ZONE NOT NULL, "title" TEXT NOT NULL, "message" TEXT NOT NULL, "status" "public"."enum_SiteAlerts_status", "variant" "public"."enum_SiteAlerts_variant", "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (a7d504a4-9e65-4a01-9ad7-d15218d26026): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230214142150-add-site-alert: migrated (0.066s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230215000000-goal-status-cleanup: migrating =======
Executing (3d727a25-fdaa-4435-948a-6a591b8209aa): START TRANSACTION;
Connection validated successfully
Executing (3d727a25-fdaa-4435-948a-6a591b8209aa): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230215000000-goal-status-cleanup.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3d727a25-fdaa-4435-948a-6a591b8209aa): WITH\n            "GoalFixes" AS (\n              select\n                g.id,\n                'Draft' "status"\n              FROM "Goals" g\n              LEFT JOIN "ActivityReportGoals" arg\n              ON g.id = arg."goalId"\n              LEFT JOIN "ActivityReports" a\n              ON arg."activityReportId" = a.id\n              WHERE NULLIF(g.status,'') IS NULL\n              AND arg.id IS NULL\n              AND g."createdVia" != 'imported'\n              order by g.id\n            )\n          UPDATE "Goals" g\n          SET "status" = gf."status"\n          FROM "GoalFixes" gf\n          WHERE g.id = gf.id;
Executing (3d727a25-fdaa-4435-948a-6a591b8209aa): WITH\n            "GoalFixes" AS (\n              select\n                g.id,\n                'Not Started' "status"\n              FROM "Goals" g\n              LEFT JOIN "ActivityReportGoals" arg\n              ON g.id = arg."goalId"\n              LEFT JOIN "ActivityReports" a\n              ON arg."activityReportId" = a.id\n              WHERE NULLIF(g.status,'') IS NULL\n              AND arg.id IS NULL\n              AND g."createdVia" = 'imported'\n              order by g.id\n            )\n          UPDATE "Goals" g\n          SET "status" = gf."status"\n          FROM "GoalFixes" gf\n          WHERE g.id = gf.id;
Executing (3d727a25-fdaa-4435-948a-6a591b8209aa): WITH\n            "GoalFixes" AS (\n              select\n                g.id,\n                (ARRAY_AGG(g2."createdVia"))[1] "createdVia"\n              FROM "Goals" g\n              LEFT JOIN "ActivityReportGoals" arg\n              ON g.id = arg."goalId"\n              LEFT JOIN "ActivityReports" a\n              ON arg."activityReportId" = a.id\n              LEFT JOIN "Goals" g2\n              ON g."goalTemplateId" = g2."goalTemplateId"\n              AND g2."createdVia" IS NOT NULL\n              WHERE g."createdVia" IS NULL\n              AND arg.id IS NOT NULL\n              AND g2.id IS NOT NULL\n              group by 1\n              order by g.id\n            )\n          UPDATE "Goals" g\n          SET "createdVia" = gf."createdVia"\n          FROM "GoalFixes" gf\n          WHERE g.id = gf.id;
Executing (3d727a25-fdaa-4435-948a-6a591b8209aa): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230215000000-goal-status-cleanup: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230216200028-add-rttapa-feature-flag: migrating =======
Executing (36a268e4-a1da-4ca3-b80a-850afd3b1389): START TRANSACTION;
Connection validated successfully
Executing (36a268e4-a1da-4ca3-b80a-850afd3b1389): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230216200028-add-rttapa-feature-flag.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (36a268e4-a1da-4ca3-b80a-850afd3b1389): DO $$ BEGIN\n        ALTER TYPE "enum_Users_flags" ADD VALUE 'rttapa_form';\n      EXCEPTION\n        WHEN duplicate_object THEN null;\n      END $$;
Executing (36a268e4-a1da-4ca3-b80a-850afd3b1389): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230216200028-add-rttapa-feature-flag: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230220173627-create-regional-goal-dash-feature-flag: migrating =======
Executing (c38430b3-2cf0-4f68-b8a0-6d2b87aa7d3c): START TRANSACTION;
Connection validated successfully
Executing (c38430b3-2cf0-4f68-b8a0-6d2b87aa7d3c): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230220173627-create-regional-goal-dash-feature-flag.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c38430b3-2cf0-4f68-b8a0-6d2b87aa7d3c): DO $$ BEGIN\n      ALTER TYPE "enum_Users_flags" ADD VALUE 'regional_goal_dashboard';\n      EXCEPTION\n      WHEN duplicate_object THEN null;\n      END $$;
Executing (c38430b3-2cf0-4f68-b8a0-6d2b87aa7d3c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230220173627-create-regional-goal-dash-feature-flag: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230223193406-add-alert-size-variant: migrating =======
Executing (2a698b19-ddf8-4429-a40e-3125065ca6a1): START TRANSACTION;
Connection validated successfully
Executing (2a698b19-ddf8-4429-a40e-3125065ca6a1): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230223193406-add-alert-size-variant.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2a698b19-ddf8-4429-a40e-3125065ca6a1): CREATE TYPE "public"."enum_SiteAlerts_size" AS ENUM('standard', 'slim', 'large');ALTER TABLE "public"."SiteAlerts" ADD COLUMN "size" "public"."enum_SiteAlerts_size" NOT NULL DEFAULT 'standard';
Executing (2a698b19-ddf8-4429-a40e-3125065ca6a1): UPDATE "SiteAlerts" SET "size" = 'large'
Executing (2a698b19-ddf8-4429-a40e-3125065ca6a1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230223193406-add-alert-size-variant: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230301200028-anv-statistics-feature-flag: migrating =======
Executing (bae4e4a3-e408-44a1-8b33-9f6b5d0cd43b): START TRANSACTION;
Connection validated successfully
Executing (bae4e4a3-e408-44a1-8b33-9f6b5d0cd43b): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230301200028-anv-statistics-feature-flag.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (bae4e4a3-e408-44a1-8b33-9f6b5d0cd43b): DO $$ BEGIN\n          ALTER TYPE "enum_Users_flags" ADD VALUE 'anv_statistics';\n        EXCEPTION\n          WHEN duplicate_object THEN null;\n        END $$;
Executing (bae4e4a3-e408-44a1-8b33-9f6b5d0cd43b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230301200028-anv-statistics-feature-flag: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230307124028-create-and-update-topics: migrating =======
Executing (92465940-cfef-4053-b7d8-6bae8db004c1): START TRANSACTION;
Connection validated successfully
Executing (92465940-cfef-4053-b7d8-6bae8db004c1): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230307124028-create-and-update-topics.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (92465940-cfef-4053-b7d8-6bae8db004c1): INSERT INTO "Topics"\n            ("name", "createdAt", "updatedAt")\n            VALUES\n            ('Fatherhood / Male Caregiving', current_timestamp, current_timestamp);
Executing (92465940-cfef-4053-b7d8-6bae8db004c1): INSERT INTO "Topics"\n        ("name", "createdAt", "updatedAt")\n        VALUES\n        ('Ongoing Monitoring and Continuous Improvement', current_timestamp, current_timestamp);\n\n        UPDATE "Topics" t1\n        SET\n            "mapsTo" = t2.id,\n            "deletedAt" = current_timestamp\n        FROM "Topics" t2\n        WHERE t1.name = 'Ongoing Monitoring Management System'\n        AND t2.name = 'Ongoing Monitoring and Continuous Improvement'\n        AND t1."deletedAt" IS NULL;
Executing (92465940-cfef-4053-b7d8-6bae8db004c1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230307124028-create-and-update-topics: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230315124028-remove-unique-group-name: migrating =======
Executing (76bee67f-dd5c-4d29-8bf4-100e4ee187ab): START TRANSACTION;
Connection validated successfully
Executing (76bee67f-dd5c-4d29-8bf4-100e4ee187ab): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230315124028-remove-unique-group-name.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (76bee67f-dd5c-4d29-8bf4-100e4ee187ab): ALTER TABLE "Groups"\n        DROP CONSTRAINT "Groups_name_key";
Executing (76bee67f-dd5c-4d29-8bf4-100e4ee187ab): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230315124028-remove-unique-group-name: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230321000000-rttapa-pilot-model: migrating =======
Executing (9c21f5b9-2cb5-4df9-8338-5619ebae07e3): START TRANSACTION;
Connection validated successfully
Executing (9c21f5b9-2cb5-4df9-8338-5619ebae07e3): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230321000000-rttapa-pilot-model.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9c21f5b9-2cb5-4df9-8338-5619ebae07e3): CREATE TABLE IF NOT EXISTS "RttapaPilots" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "recipientId" INTEGER NOT NULL REFERENCES "Recipients" ("id"), "regionId" INTEGER NOT NULL REFERENCES "Regions" ("id"), "notes" TEXT, "goals" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "reviewDate" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (9c21f5b9-2cb5-4df9-8338-5619ebae07e3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230321000000-rttapa-pilot-model: migrated (0.040s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230322150923-add-rtr-order-goals: migrating =======
Executing (a873434e-631d-435b-8d37-64621d321ef4): START TRANSACTION;
Connection validated successfully
Executing (a873434e-631d-435b-8d37-64621d321ef4): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230322150923-add-rtr-order-goals.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a873434e-631d-435b-8d37-64621d321ef4): ALTER TABLE "public"."Goals" ADD COLUMN "rtrOrder" INTEGER DEFAULT 1;
Executing (a873434e-631d-435b-8d37-64621d321ef4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230322150923-add-rtr-order-goals: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230323000000-fei-template-goal: migrating =======
Executing (526f58a6-949d-49ee-a109-47c98cc71439): START TRANSACTION;
Connection validated successfully
Executing (526f58a6-949d-49ee-a109-47c98cc71439): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230323000000-fei-template-goal.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (526f58a6-949d-49ee-a109-47c98cc71439): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_GoalTemplateFieldPrompts_fieldType' GROUP BY 1
Executing (526f58a6-949d-49ee-a109-47c98cc71439): CREATE TYPE "public"."enum_GoalTemplateFieldPrompts_fieldType" AS ENUM('multiselect');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (526f58a6-949d-49ee-a109-47c98cc71439): CREATE TABLE IF NOT EXISTS "GoalTemplateFieldPrompts" ("id"   SERIAL , "goalTemplateId" INTEGER NOT NULL REFERENCES "GoalTemplates" ("id"), "ordinal" INTEGER NOT NULL, "title" TEXT NOT NULL, "prompt" TEXT NOT NULL, "hint" TEXT, "caution" TEXT, "fieldType" "public"."enum_GoalTemplateFieldPrompts_fieldType", "options" TEXT[], "validations" JSON, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (526f58a6-949d-49ee-a109-47c98cc71439): CREATE TABLE IF NOT EXISTS "GoalFieldResponses" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "goalTemplateFieldPromptId" INTEGER NOT NULL REFERENCES "GoalTemplateFieldPrompts" ("id"), "response" TEXT[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "onAR" BOOLEAN NOT NULL, "onApprovedAR" BOOLEAN NOT NULL, PRIMARY KEY ("id"));
Executing (526f58a6-949d-49ee-a109-47c98cc71439): CREATE TABLE IF NOT EXISTS "ActivityReportGoalFieldResponses" ("id"   SERIAL , "activityReportGoalId" INTEGER NOT NULL REFERENCES "ActivityReportGoals" ("id"), "goalTemplateFieldPromptId" INTEGER NOT NULL REFERENCES "GoalTemplateFieldPrompts" ("id"), "response" TEXT[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (526f58a6-949d-49ee-a109-47c98cc71439): INSERT INTO "GoalTemplates" (\n          hash,\n          "templateName",\n          "regionId",\n          "creationMethod",\n          "createdAt",\n          "updatedAt",\n          "lastUsed",\n          "templateNameModifiedAt"\n        ) Values (\n          MD5(TRIM('(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)')),\n          '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)',\n          null,\n          'Curated'::"enum_GoalTemplates_creationMethod",\n          current_timestamp,\n          current_timestamp,\n          NULL,\n          current_timestamp\n        );
Executing (526f58a6-949d-49ee-a109-47c98cc71439): INSERT INTO "GoalTemplateFieldPrompts" (\n          "goalTemplateId",\n          ordinal,\n          "title",\n          "prompt",\n          "hint",\n          "caution",\n          "fieldType",\n          "options",\n          "validations",\n          "createdAt",\n          "updatedAt"\n        ) Values (\n          (SELECT id FROM "GoalTemplates" WHERE "templateName" = '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)'),\n          1,\n          TRIM('FEI root cause'),\n          TRIM('Select FEI root cause'),\n          'Maximum of 2',\n          'Each recipient should have an FEI root cause. If you''re not sure, please check their Recipient TTA Record and identify it there.',\n          'multiselect',\n          ARRAY['Community Partnerships','Facilities','Family Circumstances','Other ECE Care Options','Workforce'],\n          '{"required":"Select a root cause","rules":[{"name":"maxSelections","value":2,"message":"You can only select 2 options"}]}'::JSON,\n          current_timestamp,\n          current_timestamp\n        );
Executing (526f58a6-949d-49ee-a109-47c98cc71439): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230323000000-fei-template-goal: migrated (0.114s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230327203917-impersonation-audit-log: migrating =======
Executing (22b17466-1209-4cee-b951-01bd70487072): START TRANSACTION;
Connection validated successfully
Executing (22b17466-1209-4cee-b951-01bd70487072): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230327203917-impersonation-audit-log.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (22b17466-1209-4cee-b951-01bd70487072): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (22b17466-1209-4cee-b951-01bd70487072): DROP FUNCTION IF EXISTS "ZAFAddAuditingOnTable"(varchar(63));
Executing (22b17466-1209-4cee-b951-01bd70487072): CREATE OR REPLACE FUNCTION "ZAFAddAuditingOnTable"(t_name varchar(63), t_create_audit_table boolean DEFAULT true)\n          RETURNS VOID\n          LANGUAGE plpgsql AS\n        $func$\n        BEGIN\n          RAISE NOTICE 'Adding Auditing on %', t_name;\n\n          -- Only create the AL table when t_create_audit_table is true\n          IF t_create_audit_table THEN\n            PERFORM "ZAFCreateALTable"(t_name);\n          END IF;\n\n          PERFORM "ZAFCreateALFunction"(t_name);\n          PERFORM "ZAFCreateALTrigger"(t_name);\n          PERFORM "ZAFCreateAuditTruncateTable"(t_name);\n          PERFORM "ZAFCreateALNoUpdate"(t_name);\n          PERFORM "ZAFCreateALNoDelete"(t_name);\n          PERFORM "ZAFCreateALNoTruncate"(t_name);\n        END\n        $func$;
Executing (22b17466-1209-4cee-b951-01bd70487072): CREATE OR REPLACE FUNCTION "ZAFCreateALFunction"(t_name varchar(63))\n          RETURNS VOID\n          LANGUAGE plpgsql AS\n        $func$\n        BEGIN\n          EXECUTE format($sql$\n              CREATE OR REPLACE FUNCTION %I ()\n                RETURNS trigger\n                LANGUAGE plpgsql AS\n                $body$\n                DECLARE\n                    CREATED_BY bigint;\n                    IMPERSONATING bigint;\n                    TRANSACTION_ID uuid;\n                    SESSION_SIG TEXT;\n                    DESCRIPTOR_ID int;\n                    UNIQUE_OLD jsonb;\n                    UNIQUE_NEW jsonb;\n                    IS_LOGGABLE boolean;\n                BEGIN\n                    CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true),'')::BIGINT, -1);\n                    IMPERSONATING := COALESCE(NULLIF(current_setting('audit.impersonationUserId', true),'')::BIGINT, -1);\n\n                    TRANSACTION_ID := COALESCE(\n                        NULLIF(current_setting('audit.transactionId', true),'')::uuid,\n                        lpad(txid_current()::text,32,'0')::uuid);\n\n                    SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n                    DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                        NULLIF(current_setting('audit.auditDescriptor', true), '')::TEXT);\n\n                    IF (TG_OP = 'INSERT') THEN\n                        INSERT INTO %I (\n                            data_id,\n                            old_row_data,\n                            new_row_data,\n                            dml_type,\n                            dml_timestamp,\n                            dml_by,\n                            dml_as,\n                            dml_txid,\n                            session_sig,\n                            descriptor_id\n                        )\n                        VALUES(\n                            NEW.id,\n                            null,\n                            to_jsonb(NEW),\n                            'INSERT',\n                            CURRENT_TIMESTAMP,\n                            CREATED_BY,\n                            IMPERSONATING,\n                            TRANSACTION_ID,\n                            SESSION_SIG,\n                            DESCRIPTOR_ID\n                        );\n\n                        RETURN NEW;\n                    ELSIF (TG_OP = 'UPDATE') THEN\n                        SELECT\n                        json_object(array_agg(a."columnName"),array_agg(a.pre_value)) AS pre,\n                        json_object(array_agg(a."columnName"),array_agg(a.post_value)) AS post,\n                        (count(trigerable) - count(NULLIF(trigerable,TRUE)) > 0) AS loggable\n                        INTO\n                        UNIQUE_OLD,\n                        UNIQUE_NEW,\n                        IS_LOGGABLE\n                        FROM (\n                            SELECT\n                            pre.key AS "columnName",\n                            pre.value #>> '{}' AS pre_value,\n                            post.value #>> '{}' AS post_value,\n                            NOT COALESCE(filter."columnName" = filter."columnName",FALSE) as trigerable\n                            FROM jsonb_each(to_jsonb(OLD)) AS pre\n                            INNER JOIN jsonb_each(to_jsonb(NEW)) AS post\n                            ON pre.key = post.key\n                            AND pre.value IS DISTINCT FROM post.value\n                            LEFT JOIN "ZAFilter" filter\n                            ON pre.key = filter."columnName"\n                            and ( filter."tableName" = %L OR filter."tableName" IS NULL)\n                        ) a;\n\n                        IF IS_LOGGABLE THEN\n                        INSERT INTO %I (\n                            data_id,\n                            old_row_data,\n                            new_row_data,\n                            dml_type,\n                            dml_timestamp,\n                            dml_by,\n                            dml_as,\n                            dml_txid,\n                            session_sig,\n                            descriptor_id\n                        )\n                        VALUES(\n                            NEW.id,\n                            UNIQUE_OLD,\n                            UNIQUE_NEW,\n                            'UPDATE',\n                            CURRENT_TIMESTAMP,\n                            CREATED_BY,\n                            IMPERSONATING,\n                            TRANSACTION_ID,\n                            SESSION_SIG,\n                            DESCRIPTOR_ID\n                        );\n                        END IF;\n                        RETURN NEW;\n                    ELSIF (TG_OP = 'DELETE') THEN\n                    INSERT INTO %I (\n                        data_id,\n                        old_row_data,\n                        new_row_data,\n                        dml_type,\n                        dml_timestamp,\n                        dml_by,\n                        dml_as,\n                        dml_txid,\n                        session_sig,\n                        descriptor_id\n                    )\n                    VALUES(\n                        OLD.id,\n                        to_jsonb(OLD),\n                        null,\n                        'DELETE',\n                        CURRENT_TIMESTAMP,\n                        CREATED_BY,\n                        IMPERSONATING,\n                        TRANSACTION_ID,\n                        SESSION_SIG,\n                        DESCRIPTOR_ID\n                    );\n\n                    RETURN OLD;\n                    END IF;\n\n                END;\n                $body$;$sql$,\n              'ZALF' || t_name,\n              'ZAL' || t_name,\n              t_name,\n              'ZAL' || t_name,\n              'ZAL' || t_name);\n        END\n        $func$;
Executing (22b17466-1209-4cee-b951-01bd70487072): CREATE OR REPLACE FUNCTION "ZAFCreateALTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            RAISE NOTICE 'Create Audit Log Table: %','ZAL' || t_name;\n            EXECUTE format($sql$\n                CREATE TABLE IF NOT EXISTS %I (\n                  id BIGSERIAL,\n                  data_id bigint NOT NULL,\n                  dml_type dml_type NOT NULL,\n                  old_row_data jsonb,\n                  new_row_data jsonb,\n                  dml_timestamp timestamp NOT NULL,\n                  dml_by bigint NOT NULL,\n                  dml_as bigint NOT NULL,\n                  dml_txid uuid NOT NULL,\n                  session_sig TEXT NULL,\n                  descriptor_id INT,\n                  PRIMARY KEY (id)\n                  );$sql$,\n                  'ZAL' || t_name);\n          END\n          $func$;
Executing (22b17466-1209-4cee-b951-01bd70487072): CREATE OR REPLACE FUNCTION "ZAFRemoveAuditingOnTable"(t_name varchar(63))\n          RETURNS VOID\n          LANGUAGE plpgsql AS\n        $func$\n        BEGIN\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALT' || t_name,\n              t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALF' || t_name);\n\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALTruncateT' || t_name,\n              t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALTruncateF' || t_name);\n\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALNoTruncateT' || t_name,\n              'ZAL' || t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALNoTruncateF' || t_name);\n\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALNoDeleteT' || t_name,\n              'ZAL' || t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALNoDeleteF' || t_name);\n\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALNoUpdateT' || t_name,\n              'ZAL' || t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALNoUpdateF' || t_name);\n        END\n        $func$;
Executing (22b17466-1209-4cee-b951-01bd70487072): DO $$\n        DECLARE\n          obj record;\n        BEGIN\n          FOR obj IN\n            SELECT table_name as "tableName"\n            FROM information_schema.tables\n            WHERE table_schema='public'\n              AND table_type='BASE TABLE'\n              AND table_name != 'SequelizeMeta'\n              AND table_name != 'RequestErrors'\n              AND table_name NOT LIKE 'ZAL%'\n          LOOP\n            RAISE INFO 'Audit Tables: Update auditing on "%"', obj."tableName";\n\n            -- Remove auditing from table\n            PERFORM "ZAFRemoveAuditingOnTable"(obj."tableName"::text);\n\n            -- Add new dml_as column\n            EXECUTE format($sql$\n              ALTER TABLE %I\n              ADD COLUMN "dml_as" bigint $sql$,\n              'ZAL' || obj."tableName"::text);\n\n            -- Fix type of dml_by - was int, should be bigint\n            EXECUTE format($sql$\n              ALTER TABLE %I\n              ALTER COLUMN "dml_by" TYPE bigint $sql$,\n              'ZAL' || obj."tableName"::text);\n\n            -- Restore auditing on table without recreating the table (hence false arg)\n            PERFORM "ZAFAddAuditingOnTable"(obj."tableName"::text, false);\n\n          END LOOP;\n        END$$;
Executing (22b17466-1209-4cee-b951-01bd70487072): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (22b17466-1209-4cee-b951-01bd70487072): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230327203917-impersonation-audit-log: migrated (1.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230328124028-remove-orphan-goals: migrating =======
Executing (90f81e16-97e8-4b28-aeb0-3b6434886c4a): START TRANSACTION;
Connection validated successfully
Executing (90f81e16-97e8-4b28-aeb0-3b6434886c4a): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230328124028-remove-orphan-goals.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (90f81e16-97e8-4b28-aeb0-3b6434886c4a): /*\n        TTAHUB-1130: Delete Orphan Goals\n            This removes any goals created via the Activity Report\n            page that are NOT associated with a report.\n        */\n        -- 1.) Create Orphan GOALS Id's Temp Table.\n        SELECT G."id" AS "goalId"\n        INTO TEMP TEMP_ORPHAN_GOAL_IDS\n        FROM "Goals" G\n        WHERE COALESCE(G."createdVia",\n                      'activityReport') = 'activityReport'\n          AND COALESCE(G."isFromSmartsheetTtaPlan",\n                    FALSE) = FALSE\n          AND G."id" NOT IN\n            (SELECT DISTINCT "goalId"\n              FROM "ActivityReportGoals");\n\n        -- 2.) Create Orphan OBJECTIVE Id's Temp Table.\n        SELECT *\n        INTO TEMP TEMP_ORPHAN_OBJECTIVE_IDS\n        FROM\n          (\n            -- Orphan Objectives linked to orphan Goals.\n            SELECT O."id" AS "objectiveId"\n            FROM "Objectives" O\n            INNER JOIN TEMP_ORPHAN_GOAL_IDS G ON O."goalId" = G."goalId"\n            WHERE O."id" NOT IN\n                (SELECT DISTINCT "objectiveId"\n                  FROM "ActivityReportObjectives")\n            UNION -- Orphan Objectives not linked to Goals.\n          SELECT O."id" AS "objectiveId"\n            FROM "Objectives" O\n            LEFT JOIN "ActivityReportObjectives" ARO ON O.ID = ARO."objectiveId"\n            WHERE ARO.ID IS NULL\n              AND COALESCE(O."createdVia", 'activityReport') = 'activityReport' ) AS TMP;\n\n        -- 3.) Clean Objective Orphan Topics.\n        DROP TABLE IF EXISTS temp_results_count;\n        WITH deletedObjectiveTopics AS (\n        DELETE\n        FROM "ObjectiveTopics"\n        WHERE "objectiveId" IN\n            (SELECT "objectiveId"\n              FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n        RETURNING *)\n        SELECT 'Objective Topics', count(*)\n        INTO TEMP temp_results_count\n        FROM deletedObjectiveTopics;\n\n        -- 4.) Clean Objective Orphan Resources.\n        WITH objectiveResources AS (\n          DELETE\n          FROM "ObjectiveResources"\n          WHERE "objectiveId" IN\n              (SELECT "objectiveId"\n                FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n        RETURNING *)\n        INSERT INTO temp_results_count\n        SELECT 'Objective Resources', count(*)\n        FROM objectiveResources;\n\n        -- 5.) Clean Objective Orphan Files.\n        -- 5a.) Create Temp Table of Files being used by reports or non-orphan Objectives.\n        SELECT *\n        INTO TEMP TEMP_USED_OBJECTIVE_FILES_IDS\n        FROM\n          (\n            SELECT o."fileId"\n            FROM "ObjectiveFiles" o\n            WHERE o."objectiveId" NOT IN\n                (SELECT "objectiveId"\n                  FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n            UNION\n            SELECT DISTINCT AROF."fileId"\n            FROM "ActivityReportObjectiveFiles" AROF\n            UNION\n            SELECT DISTINCT ARF."fileId"\n            FROM "ActivityReportFiles" ARF) AS TMP;\n\n      -- 5b.) Clean Objective Files.\n      WITH objectiveFiless AS (\n          DELETE\n          FROM "ObjectiveFiles"\n          WHERE "objectiveId" IN\n              (SELECT "objectiveId"\n                FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Objective Files', count(*)\n      FROM objectiveFiless;\n\n      -- 5c.) Clean files only used by Orphan Objectives.\n      WITH files AS (\n          DELETE\n          FROM "Files"\n          WHERE "id" NOT IN\n              (SELECT "fileId"\n                FROM TEMP_USED_OBJECTIVE_FILES_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Files', count(*)\n      FROM files;\n\n      -- 6.) Clean Objective Orphan's.\n      WITH objectives AS (\n          DELETE\n          FROM "Objectives"\n          WHERE "id" IN\n              (SELECT "objectiveId"\n                FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Objectives', count(*)\n      FROM objectives;\n\n      -- 7.) Clean Goal Orphan Resources.\n      -- 7a.) Create Temp Table of Resources being used by reports or non-orphan Objectives.\n          SELECT *\n      INTO TEMP TEMP_USED_OBJECTIVE_RESOURCE_IDS\n          FROM\n            (\n              SELECT O."resourceId"\n              FROM "ObjectiveResources" O\n              WHERE O."objectiveId" NOT IN\n                  (SELECT "objectiveId"\n                    FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n              UNION\n              SELECT DISTINCT ARR."resourceId"\n              FROM "ActivityReportResources" ARR\n              UNION\n              SELECT DISTINCT NSR."resourceId"\n              FROM "NextStepResources" NSR\n              UNION\n              SELECT DISTINCT OTR."resourceId"\n              FROM "ObjectiveTemplateResources" OTR\n              UNION\n              SELECT DISTINCT AROR."resourceId"\n              FROM "ActivityReportObjectiveResources" AROR) AS TMP;\n\n      -- 7b.) Clean Objective Resources.\n      WITH goalResources AS (\n          DELETE\n          FROM "GoalResources"\n          WHERE "goalId" IN\n              (SELECT "goalId"\n                FROM TEMP_ORPHAN_GOAL_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Goal Resources', count(*)\n      FROM goalResources;\n\n      -- 7c.) Clean resources only used by Orphan Objectives.\n      WITH resources AS (\n          DELETE\n          FROM "Resources"\n          WHERE "id" NOT IN\n              (SELECT "resourceId"\n                FROM TEMP_USED_OBJECTIVE_RESOURCE_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Resources', count(*)\n      FROM resources;\n\n      -- 8.) Clean Goal Orphan's.\n      WITH goals AS (\n            DELETE\n            FROM "Goals"\n            WHERE "id" IN\n                (SELECT "goalId"\n                  FROM TEMP_ORPHAN_GOAL_IDS)\n        RETURNING *)\n        INSERT INTO temp_results_count\n        SELECT 'Goals', count(*)\n        FROM goals;\n\n        -- 9.) DROP temp tables.\n        DROP TABLE TEMP_ORPHAN_GOAL_IDS;\n        DROP TABLE TEMP_ORPHAN_OBJECTIVE_IDS;\n        DROP TABLE TEMP_USED_OBJECTIVE_FILES_IDS;\n        DROP TABLE TEMP_USED_OBJECTIVE_RESOURCE_IDS;\n\n        -- 10.) Select Results.\n        SELECT * FROM temp_results_count;
Executing (90f81e16-97e8-4b28-aeb0-3b6434886c4a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230328124028-remove-orphan-goals: migrated (0.051s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230330130554-goal-duplicate-cleanup: migrating =======
Executing (2e9cadf3-3ae5-4108-b515-ddfaa94fd650): START TRANSACTION;
Connection validated successfully
Executing (2e9cadf3-3ae5-4108-b515-ddfaa94fd650): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230330130554-goal-duplicate-cleanup.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2e9cadf3-3ae5-4108-b515-ddfaa94fd650): -- Collect Pre Count Stats\n        DROP TABLE IF EXISTS "PreCountStatsByRegion";\n        CREATE TEMP TABLE "PreCountStatsByRegion" AS (\n            SELECT\n                gr."regionId",\n                COUNT(DISTINCT g."id") "GoalsTotal",\n                COUNT(DISTINCT arg."id") "ActivityReportGoalsTotal",\n                COUNT(DISTINCT argr."id") "ActivityReportGoalResourcesTotal",\n                COUNT(DISTINCT oj."id") "ObjectivesTotal",\n                COUNT(DISTINCT ojf."id") "ObjectiveFilesTotal",\n                COUNT(DISTINCT ojr."id") "ObjectiveResourcesTotal",\n                COUNT(DISTINCT ojt."id") "ObjectiveTopicsTotal",\n                COUNT(DISTINCT aro."id") "ActivityReportObjectivesTotal",\n                COUNT(DISTINCT arof."id") "ActivityReportObjectiveFilesTotal",\n                COUNT(DISTINCT aror."id") "ActivityReportObjectiveResourcesTotal",\n                COUNT(DISTINCT arot."id") "ActivityReportObjectiveTopicsTotal"\n            FROM "Grants" gr\n            FULL OUTER JOIN "Goals" g ON gr."id" = g."grantId"\n            FULL OUTER JOIN "ActivityReportGoals" arg ON g."id" = arg."goalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argr ON arg."id" = argr."activityReportGoalId"\n            FULL OUTER JOIN "Objectives" oj ON g."id" = oj."goalId"\n            FULL OUTER JOIN "ObjectiveFiles" ojf ON oj."id" = ojf."objectiveId"\n            FULL OUTER JOIN "ObjectiveResources" ojr ON oj."id" = ojr."objectiveId"\n            FULL OUTER JOIN "ObjectiveTopics" ojt ON oj."id" = ojt."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectives" aro ON oj."id" = aro."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveFiles" arof ON aro."id" = arof."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveResources" aror ON aro."id" = aror."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveTopics" arot ON aro."id" = arot."activityReportObjectiveId"\n            GROUP BY gr."regionId"\n        );\n        INSERT INTO "PreCountStatsByRegion"\n        SELECT\n            -1 "regionId",\n            SUM("GoalsTotal"),\n            SUM("ActivityReportGoalsTotal"),\n            SUM("ActivityReportGoalResourcesTotal"),\n            SUM("ObjectivesTotal"),\n            SUM("ObjectiveFilesTotal"),\n            SUM("ObjectiveResourcesTotal"),\n            SUM("ObjectiveTopicsTotal"),\n            SUM("ActivityReportObjectivesTotal"),\n            SUM("ActivityReportObjectiveFilesTotal"),\n            SUM("ActivityReportObjectiveResourcesTotal"),\n            SUM("ActivityReportObjectiveTopicsTotal")\n        FROM "PreCountStatsByRegion";\n        SELECT * FROM "PreCountStatsByRegion";\n\n        DROP TABLE IF EXISTS "DupGoalsOnARs";\n        CREATE TEMP TABLE "DupGoalsOnARs" AS (\n            SELECT\n            array_remove(ARRAY_AGG(DISTINCT arg."activityReportId"), NULL) "activityReportIds",\n            g."grantId",\n            MD5(TRIM(g.name)) "goalHash",\n            ARRAY_AGG(DISTINCT g.id ORDER BY g.id) "goalIds",\n            array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)) "toRemoveGoals",\n            MIN(g.id) "toUpdateGoal",\n            COUNT(DISTINCT g.id) "goalCnt",\n            g."status" = 'Closed' "statusClosed"\n            FROM "Goals" g\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."goalId" = g.id\n            LEFT JOIN "GoalTemplates" gt\n            ON g."goalTemplateId" = gt.id\n            GROUP BY 2,3,8\n            HAVING ARRAY_LENGTH(array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)), 1) > 0\n            ORDER BY 5 DESC\n        );\n        -- SELECT * FROM "DupGoalsOnARs";\n\n        DROP TABLE IF EXISTS "GoalsToModify";\n        CREATE TEMP TABLE "GoalsToModify" AS (\n            SELECT DISTINCT\n                g2."grantId",\n                TRIM(g.name) "name",\n                dgoa."goalHash",\n                CASE\n                    WHEN 'Closed' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Closed' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Closed'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(g."status"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Not Started'\n                    WHEN 'Draft' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Draft' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Draft'\n                    ELSE COALESCE((ARRAY_AGG(g2."status"))[1], 'Not Started')\n                END "status",\n                (ARRAY_AGG(COALESCE(g2.timeframe, g.timeframe)))[1] timeframe,\n                BOOL_OR(g2."isFromSmartsheetTtaPlan" OR g."isFromSmartsheetTtaPlan") "isFromSmartsheetTtaPlan",\n                MIN(LEAST(g2."createdAt",g."createdAt")) "createdAt",\n                MAX(GREATEST(g2."updatedAt", g."updatedAt")) "updatedAt",\n                g2."closeSuspendReason",\n                g2."closeSuspendContext",\n                MAX(GREATEST(g2."endDate", g."endDate")) "endDate",\n                CASE\n                    WHEN 'Closed' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Closed' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Closed'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Not Started'\n                    WHEN 'Draft' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Draft' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Draft'\n                    ELSE COALESCE((ARRAY_AGG(g2."previousStatus"))[1], 'Not Started')\n                END "previousStatus",\n                MIN(g."goalTemplateId") "goalTemplateId",\n                BOOL_OR(COALESCE(g2."onApprovedAR", FALSE) OR g."onApprovedAR") "onApprovedAR",\n                MIN(LEAST(g2."firstNotStartedAt", g."firstNotStartedAt")) "firstNotStartedAt",\n                MAX(GREATEST(g2."lastNotStartedAt", g."lastNotStartedAt")) "lastNotStartedAt",\n                MIN(LEAST(g2."firstInProgressAt", g."firstInProgressAt")) "firstInProgressAt",\n                MAX(GREATEST(g2."lastInProgressAt", g."lastInProgressAt")) "lastInProgressAt",\n                MIN(LEAST(g2."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt")) "firstCeasedSuspendedAt",\n                MAX(GREATEST(g2."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt")) "lastCeasedSuspendedAt",\n                MIN(LEAST(g2."firstClosedAt", g."firstClosedAt")) "firstClosedAt",\n                MAX(GREATEST(g2."lastClosedAt", g."lastClosedAt")) "lastClosedAt",\n                MIN(LEAST(g2."firstCompletedAt", g."firstCompletedAt")) "firstCompletedAt",\n                MAX(GREATEST(g2."lastCompletedAt", g."lastCompletedAt")) "lastCompletedAt",\n                CASE\n                    WHEN 'imported' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'imported' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'imported'\n                    WHEN 'rtr' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'rtr' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'rtr'\n                    WHEN 'activityReport' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'activityReport' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'activityReport'\n                END "createdVia",\n                CASE\n                    WHEN 'Yes' = ANY(ARRAY_AGG(g."isRttapa"))\n                    OR 'Yes' = ANY(ARRAY_AGG(g2."isRttapa"))\n                    THEN 'Yes'\n                    WHEN 'No' = ANY(ARRAY_AGG(g."isRttapa"))\n                    OR 'No' = ANY(ARRAY_AGG(g2."isRttapa"))\n                    THEN 'No'\n                END "isRttapa",\n                BOOL_OR(COALESCE(g2."onAR", FALSE) OR g."onAR") "onAR",\n                array_remove(ARRAY_AGG(DISTINCT "g".id ORDER by "g".id), MIN("g2".id)) "toRemove",\n                MIN("g2".id) "toUpdate"\n            FROM "Goals" g\n            JOIN "DupGoalsOnARs" dgoa\n            ON g.id = ANY(dgoa."toRemoveGoals")\n            AND g.id != dgoa."toUpdateGoal"\n            JOIN "Goals" g2\n            ON g2.id = dgoa."toUpdateGoal"\n            AND g."grantId" = dgoa."grantId"\n            AND MD5(TRIM(g.name)) = MD5(TRIM(g2.name))\n            GROUP BY 1,2,3,9,10\n        );\n        -- SELECT * FROM "GoalsToModify";\n\n        -- All objectives that are duplicates on goals that are duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnDupGoalsOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnDupGoalsOnARs" AS (\n            SELECT\n                dgoa.*,\n                MD5(TRIM(o.title)) "objectiveHash",\n                o.status = 'Complete' "statusComplete",\n                ARRAY_AGG(o.id ORDER BY o."goalId", o.id) "objectiveIds",\n                array_remove(ARRAY_AGG(o.id ORDER BY o."goalId", o.id),(MIN(o.id) FILTER (WHERE o."goalId" = dgoa."toUpdateGoal"))) "toRemoveObjectives",\n                MIN(o.id) FILTER (WHERE o."goalId" = dgoa."toUpdateGoal") "toUpdateObjective",\n                COUNT(DISTINCT o.id) "objectiveCnt"\n            FROM "Objectives" o\n            JOIN "DupGoalsOnARs" dgoa\n            ON o."goalId" = ANY(dgoa."goalIds")\n            GROUP BY 1,2,3,4,5,6,7,8,9,10\n            HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT o.id), 1) > 1\n            ORDER BY 8 DESC\n        );\n        -- SELECT * FROM "DupObjectivesOnDupGoalsOnARs";\n\n        -- All objectives that are duplicates on goals that are not duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnNonDupGoalsOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnNonDupGoalsOnARs" AS (\n            SELECT DISTINCT\n                array_remove(ARRAY_AGG(DISTINCT aro."activityReportId"), NULL) "activityReportIds",\n                g."grantId",\n                MD5(TRIM(g.name)) "goalHash",\n                ARRAY[g.id] "goalIds",\n                ARRAY[]::int[] "toRemove",\n                g.id "toUpdate",\n                1 "goalCnt",\n                g."status" = 'Closed' "statusClosed",\n                MD5(TRIM(o.title)) "objectiveHash",\n                o.status = 'Complete' "statusComplete",\n                ARRAY_AGG(o.id ORDER BY o.id) "objectiveIds",\n                array_remove(ARRAY_AGG(o.id ORDER BY o.id),MIN(o.id)) "toRemoveObjectives",\n                MIN(o.id) "toUpdateObjective",\n                COUNT(DISTINCT o.id) "objectiveCnt"\n            FROM "Objectives" o\n            LEFT JOIN "ActivityReportObjectives" aro\n            ON aro."objectiveId" = o.id\n            LEFT JOIN "ObjectiveTemplates" ot\n            ON o."objectiveTemplateId" = ot.id\n            JOIN "Goals" g\n            ON o."goalId" = g.id\n            LEFT JOIN "DupObjectivesOnDupGoalsOnARs" doodgoa\n            ON aro."activityReportId" = ANY(doodgoa."activityReportIds")\n            AND g."grantId" = doodgoa."grantId"\n            AND MD5(TRIM(g.name)) = doodgoa."goalHash"\n            AND MD5(TRIM(o.title)) = doodgoa."objectiveHash"\n            AND o.id != ANY(doodgoa."objectiveIds")\n            WHERE doodgoa."grantId" IS NULL \n            GROUP BY 2,3,4,5,6,7,8,9,10\n            HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT o.id), 1) > 1\n            ORDER BY 11 DESC\n        );\n        -- SELECT * FROM "DupObjectivesOnNonDupGoalsOnARs";\n\n        -- All objectives that are duplicates on goals that are (not) duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnARs" AS (\n            SELECT\n            *\n            FROM "DupObjectivesOnDupGoalsOnARs"\n            UNION\n            SELECT\n            *\n            FROM "DupObjectivesOnNonDupGoalsOnARs"\n        );\n        -- SELECT * FROM "DupObjectivesOnARs";\n\n        -- Handle Objectives\n        DROP TABLE IF EXISTS "ObjectivesToModify";\n        CREATE TEMP TABLE "ObjectivesToModify" AS (\n            SELECT DISTINCT\n                dooa."toUpdateGoal" "goalId",\n                TRIM(o."title") "title",\n                dooa."objectiveHash",\n                CASE\n                    WHEN 'Complete' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Complete' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Complete'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(o."status"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Not Started'\n                    ELSE COALESCE((ARRAY_AGG(o2."status"))[1], 'Not Started')\n                END "status",\n                MIN(LEAST("o"."createdAt", "o2"."createdAt")) "createdAt",\n                MAX(GREATEST("o"."updatedAt", "o2"."updatedAt")) "updatedAt",\n                COALESCE(o2."otherEntityId", o."otherEntityId") "otherEntityId",\n                BOOL_OR(COALESCE(o."onApprovedAR", FALSE) OR COALESCE(o2."onApprovedAR", FALSE)) "onApprovedAR",\n                MIN(LEAST("o"."firstNotStartedAt", "o2"."firstNotStartedAt")) "firstNotStartedAt",\n                MAX(GREATEST("o"."lastNotStartedAt", "o2"."lastNotStartedAt")) "lastNotStartedAt",\n                MIN(LEAST("o"."firstInProgressAt", "o2"."firstInProgressAt")) "firstInProgressAt",\n                MAX(GREATEST("o"."lastInProgressAt", "o2"."lastInProgressAt")) "lastInProgressAt",\n                MIN(LEAST("o"."firstCompleteAt", "o2"."firstCompleteAt")) "firstCompleteAt",\n                MAX(GREATEST("o"."lastCompleteAt", "o2"."lastCompleteAt")) "lastCompleteAt",\n                MIN(LEAST("o"."firstSuspendedAt", "o2"."firstSuspendedAt")) "firstSuspendedAt",\n                MAX(GREATEST("o"."lastSuspendedAt", "o2"."lastSuspendedAt")) "lastSuspendedAt",\n                MIN(LEAST(o."rtrOrder", o2."rtrOrder")) "rtrOrder",\n                CASE\n                    WHEN 'rtr' = ANY(ARRAY_AGG(o."createdVia"))\n                    OR 'rtr' = ANY(ARRAY_AGG(o2."createdVia"))\n                    THEN 'rtr'\n                    WHEN 'activityReport' = ANY(ARRAY_AGG(o."createdVia"))\n                    OR 'activityReport' = ANY(ARRAY_AGG(o2."createdVia"))\n                    THEN 'activityReport'\n                    ELSE NULL\n                END "createdVia",\n                BOOL_OR(COALESCE(o."onAR", FALSE) OR COALESCE(o2."onAR", FALSE)) "onAR",\n                ARRAY_AGG(DISTINCT "o".id ORDER by "o".id) "toRemove",\n                MIN("o2".id) "toUpdate"\n            FROM "Objectives" o\n            JOIN "DupObjectivesOnARs" dooa\n            ON o.id = ANY(dooa."toRemoveObjectives")\n            AND o.id != COALESCE(dooa."toUpdateObjective",0)\n            LEFT JOIN "Objectives" o2\n            ON o2.id = dooa."toUpdateObjective"\n            AND o2."goalId" = dooa."toUpdateGoal"\n            GROUP BY 1,2,3,7\n        );\n        -- SELECT * FROM "ObjectivesToModify";\n\n        --somehow there are duplicates in here, so dedupe\n        DROP TABLE IF EXISTS "DeduplicatedObjectivesToModify";\n        CREATE TEMP TABLE "DeduplicatedObjectivesToModify" AS (\n            SELECT DISTINCT ON ("goalId", "objectiveHash")\n                "goalId",\n                TRIM("title") "title",\n                "status",\n                "createdAt",\n                "updatedAt",\n                "otherEntityId",\n                "onApprovedAR",\n                "firstNotStartedAt",\n                "lastNotStartedAt",\n                "firstInProgressAt",\n                "lastInProgressAt",\n                "firstCompleteAt",\n                "lastCompleteAt",\n                "firstSuspendedAt",\n                "lastSuspendedAt",\n                "rtrOrder",\n                "createdVia",\n                "toRemove",\n                "toUpdate",\n                "objectiveHash",\n                "onAR"\n            FROM "ObjectivesToModify"\n            ORDER BY "goalId", "objectiveHash", "createdAt"\n        );\n\n        DROP TABLE IF EXISTS "UniqueObjectivesOnGoalsToBeRemoved";\n        CREATE TEMP TABLE "UniqueObjectivesOnGoalsToBeRemoved" AS (\n            WITH\n                "GoalsToModifyIds" AS (\n                    SELECT\n                        gtm."toUpdate",\n                        tr."toRemove"\n                    FROM "GoalsToModify" gtm\n                    CROSS JOIN UNNEST(gtm."toRemove") tr("toRemove")\n                ),\n                "ObjectivesToModifyIds" AS (\n                    SELECT\n                        dotm."toUpdate",\n                        tr."toRemove"\n                    FROM "DeduplicatedObjectivesToModify" dotm\n                    CROSS JOIN UNNEST(dotm."toRemove") tr("toRemove")\n                )\n            SELECT DISTINCT\n                o.id,\n                o."goalId" "oldGoalId",\n                gtmi."toUpdate" "newGoalId"\n            FROM "Objectives" o\n            JOIN "GoalsToModifyIds" gtmi\n            ON o."goalId" = gtmi."toRemove"\n            LEFT JOIN "ObjectivesToModifyIds" otmi\n            ON o.id = otmi."toRemove"\n            WHERE otmi."toUpdate" IS NULL\n        );\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Shift_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "ShiftObjectives";\n        CREATE TEMP TABLE "ShiftObjectives" AS\n            WITH shift_objectives AS (\n                UPDATE "Objectives" "o"\n                SET\n                    "goalId" = uoogtbr."newGoalId"\n                FROM "UniqueObjectivesOnGoalsToBeRemoved" uoogtbr\n                WHERE "o".id = uoogtbr.id\n                RETURNING\n                "o".id "updated_objective_id",\n                uoogtbr."oldGoalId" "old_goal_id",\n                uoogtbr."newGoalId" "new_goal_id"\n            )\n        SELECT * FROM shift_objectives;\n        -- SELECT * FROM "ShiftObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectives";\n        CREATE TEMP TABLE "InsertObjectives" AS\n        WITH inserted_objectives  AS (\n            INSERT INTO "Objectives"\n            (\n            "goalId",\n            "title",\n            status,\n            "createdAt",\n            "updatedAt",\n            "otherEntityId",\n            "onAR",\n            "onApprovedAR",\n            "firstNotStartedAt",\n            "lastNotStartedAt",\n            "firstInProgressAt",\n            "lastInProgressAt",\n            "firstCompleteAt",\n            "lastCompleteAt",\n            "firstSuspendedAt",\n            "lastSuspendedAt",\n            "rtrOrder",\n            "createdVia"\n            )\n            SELECT\n            "goalId",\n            TRIM("title") "title",\n            status,\n            "createdAt",\n            "updatedAt",\n            "otherEntityId",\n            "onAR",\n            "onApprovedAR",\n            "firstNotStartedAt",\n            "lastNotStartedAt",\n            "firstInProgressAt",\n            "lastInProgressAt",\n            "firstCompleteAt",\n            "lastCompleteAt",\n            "firstSuspendedAt",\n            "lastSuspendedAt",\n            "rtrOrder",\n            "createdVia"::"enum_Objectives_createdVia"\n            FROM "ObjectivesToModify" otm\n            WHERE otm."toUpdate" IS NULL\n            RETURNING\n                id "inserted_objective_id",\n                id "objectiveId",\n                "goalId",\n                MD5(TRIM("title")) "objectiveHash"\n        )\n        SELECT * FROM inserted_objectives;\n        -- SELECT * FROM "InsertObjectives";\n        END;\n\n        -- Update foreign key references in ActivityReportObjectives\n        -- UPDATE "ActivityReportObjectives" aro\n        -- SET "objectiveId" = "InsertObjectives"."inserted_objective_id"\n        -- FROM "InsertObjectives"\n        -- WHERE aro."objectiveId" = "InsertObjectives"."old_objective_id";\n\n        -- somehow there are duplicates in here, so dedupe\n        DROP TABLE IF EXISTS "DeduplicatedInsertObjectives";\n        CREATE TEMP TABLE "DeduplicatedInsertObjectives" AS (\n            SELECT DISTINCT ON ("goalId", "objectiveHash")\n                "objectiveId",\n                "goalId",\n                "objectiveHash"\n            FROM "InsertObjectives"\n            ORDER BY "goalId", "objectiveHash"\n        );\n\n        -- Handle Objectives Metadata tables\n        DROP TABLE IF EXISTS "ObjectivesToModifyMetadata";\n        CREATE TEMP TABLE "ObjectivesToModifyMetadata" AS\n        WITH objectives_to_modify AS (\n            SELECT\n            otm."goalId",\n            otm."title",\n            otm.status,\n            otm."createdAt",\n            otm."updatedAt",\n            otm."otherEntityId",\n            otm."onAR",\n            otm."onApprovedAR",\n            otm."firstNotStartedAt",\n            otm."lastNotStartedAt",\n            otm."firstInProgressAt",\n            otm."lastInProgressAt",\n            otm."firstCompleteAt",\n            otm."lastCompleteAt",\n            otm."firstSuspendedAt",\n            otm."lastSuspendedAt",\n            otm."rtrOrder",\n            otm."createdVia",\n            otm."toRemove",\n            COALESCE(otm."toUpdate", "io"."objectiveId") "toUpdate"\n            FROM "ObjectivesToModify" otm\n            LEFT JOIN "InsertObjectives" "io"\n            ON otm."goalId" = "io"."goalId"\n            AND otm."objectiveHash" = "io"."objectiveHash"\n        )\n        SELECT * FROM objectives_to_modify;\n        -- SELECT * FROM "ObjectivesToModifyMetadata";\n        \n        --Check for Extra Objectives \n\n        -- SELECT "grantId", "goalHash", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(doodgoa)))\n        -- FROM "DupObjectivesOnDupGoalsOnARs" doodgoa\n        -- GROUP BY "grantId", "goalHash", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "grantId", "goalHash", "objectiveHash", COUNT(*) , array_to_json(array_agg(row_to_json(doondgoa)))\n        -- FROM "DupObjectivesOnNonDupGoalsOnARs"doondgoa\n        -- GROUP BY "grantId", "goalHash", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(otm)))\n        -- FROM "ObjectivesToModify" otm\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(io)))\n        -- FROM "InsertObjectives" io\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*)\n        -- FROM "DeduplicatedObjectivesToModify"\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*)\n        -- FROM "DeduplicatedInsertObjectives"\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(otmm)))\n        -- FROM "ObjectivesToModifyMetadata" otmm\n        -- GROUP BY "goalId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT o1."goalId", o1."title", o1."objectiveHash", o2."title", o2."objectiveHash"\n        -- FROM "ObjectivesToModify" o1\n        -- JOIN "ObjectivesToModify" o2\n        -- ON o1."goalId" = o2."goalId"\n        -- AND o1."title" ILIKE o2."title"\n        -- AND o1."objectiveHash" != o2."objectiveHash";\n        \n        -- Validate ObjectiveFiles objectiveId null value\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveFiles" "of"\n        -- JOIN otmm_recast otmm\n        -- ON "of"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveFiles" "of2"\n        -- ON "of2"."objectiveId" = otmm."toUpdate"\n        -- AND "of"."fileId" = "of2"."fileId";\n        \n        -- Handle ObjectiveFiles\n        DROP TABLE IF EXISTS "ObjectiveFilesToModify";\n        CREATE TEMP TABLE "ObjectiveFilesToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "of"."fileId",\n            MIN(LEAST("of"."createdAt", "of2"."createdAt")) "createdAt",\n            MAX(GREATEST("of"."updatedAt", "of2"."updatedAt")) "updatedAt",\n            BOOL_OR("of"."onAR" OR COALESCE("of2"."onAR", FALSE)) "onAR",\n            BOOL_OR("of"."onApprovedAR" OR COALESCE("of2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "of".id ORDER by "of".id) "toRemove" ,\n            (ARRAY_AGG(DISTINCT "of2".id))[1] "toUpdate"\n            FROM "ObjectiveFiles" "of"\n            JOIN otmm_recast otmm\n            ON "of"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveFiles" "of2"\n            ON "of2"."objectiveId" = otmm."toUpdate"\n            AND "of"."fileId" = "of2"."fileId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ObjectiveFilesToModify\n        -- SELECT * FROM "ObjectiveFilesToModify";\n        -- SELECT "objectiveId", "fileId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveFilesToModify" ofmm\n        -- GROUP BY "objectiveId", "fileId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveFiles";\n        CREATE TEMP TABLE "InsertObjectiveFiles" AS\n            WITH objective_files AS ( \n            INSERT INTO "ObjectiveFiles"\n            (\n            "objectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            )\n            SELECT\n            "objectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            FROM "ObjectiveFilesToModify" oftm\n            WHERE oftm."toUpdate" IS NULL and oftm."objectiveId" IS NOT NULL\n            RETURNING\n            id "objectiveFileId",\n            "objectiveId"\n        )\n        SELECT * FROM objective_files;\n        -- SELECT * FROM "InsertObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveFiles";\n        CREATE TEMP TABLE "UpdateObjectiveFiles" AS\n        WITH update_objective_files AS  (\n            UPDATE "ObjectiveFiles" "of"\n            SET\n            "createdAt" = oftm."createdAt",\n            "updatedAt" = oftm."updatedAt",\n            "onAR" = oftm."onAR",\n            "onApprovedAR" = oftm."onApprovedAR"\n            FROM "ObjectiveFilesToModify" oftm\n            WHERE "of".id = oftm."toUpdate"\n            AND (\n                "of"."createdAt" != oftm."createdAt"\n                OR "of"."updatedAt" != oftm."updatedAt"\n                OR "of"."onAR" != oftm."onAR"\n                OR "of"."onApprovedAR" != oftm."onApprovedAR"\n            )\n            RETURNING\n            "of".id "objectiveFileId",\n            "of"."objectiveId"\n        )\n        SELECT * FROM update_objective_files;\n        -- SELECT * FROM "UpdateObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveFiles";\n        CREATE TEMP TABLE "DeleteObjectiveFiles" AS\n        WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveFilesToModify"\n                ),\n            del_objective_files AS (\n            DELETE FROM "ObjectiveFiles" "of"\n            USING otmm_recast oftm\n            WHERE "of".id = to_remove\n            RETURNING\n            "of".id "objectiveFileId",\n            "of"."objectiveId"\n        )\n        SELECT * FROM del_objective_files;\n        -- SELECT * FROM "UpdateObjectiveFiles";\n\n        DROP TABLE IF EXISTS "ObjectiveFileStats";\n        CREATE TEMP TABLE "ObjectiveFileStats" AS (\n            SELECT\n            'ObjectiveFiles' "table",\n            (SELECT COUNT(*) FROM "InsertObjectiveFiles") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectiveFiles") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectiveFiles") "Deletes",\n            (SELECT COUNT(*) FROM "ObjectiveFiles") "post_count"\n        );\n\n        -- Validate ObjectiveResources objectiveId null value\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveResources" "or"\n        -- JOIN otmm_recast otmm\n        -- ON "or"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveResources" "or2"\n        -- ON "or2"."objectiveId" = otmm."toUpdate"\n        -- AND "or"."resourceId" = "or2"."resourceId";\n        \n        -- Handle ObjectiveResources\n\n        DROP TABLE IF EXISTS "ObjectiveResourcesToModify";\n        CREATE TEMP TABLE "ObjectiveResourcesToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "or"."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ObjectiveResources" "orx"\n                CROSS JOIN UNNEST("orx"."sourceFields") sfx("sourceField")\n                WHERE "or"."resourceId" = orx."resourceId"\n                AND (orx."objectiveId" = ANY(ARRAY_AGG("or"."objectiveId"))\n                OR otmm."toUpdate" = orx."objectiveId")\n            ) "sourceFields",\n            MIN(LEAST("or"."createdAt", "or2"."createdAt")) "createdAt",\n            MAX(GREATEST("or"."updatedAt", "or2"."updatedAt")) "updatedAt",\n            BOOL_OR("or"."onAR" OR COALESCE("or2"."onAR", FALSE)) "onAR",\n            BOOL_OR("or"."onApprovedAR" OR COALESCE("or2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "or".id ORDER by "or".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "or2".id))[1] "toUpdate"\n            FROM "ObjectiveResources" "or"\n            JOIN otmm_recast otmm\n            ON "or"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveResources" "or2"\n            ON "or2"."objectiveId" = otmm."toUpdate"\n            AND "or"."resourceId" = "or2"."resourceId"\n            GROUP BY 1,2\n        );\n        -- SELECT * FROM "ObjectiveResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n        \n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveResources";\n        CREATE TEMP TABLE "InsertObjectiveResources" AS\n            WITH  insert_objective_resources AS (\n                INSERT INTO "ObjectiveResources"\n                (\n                "objectiveId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                )\n                SELECT\n                "objectiveId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                FROM "ObjectiveResourcesToModify" ortm\n                WHERE ortm."toUpdate" IS NULL and ortm."objectiveId" IS NOT NULL\n                RETURNING\n                id "objectiveResourceId",\n                "objectiveId"\n            )\n        SELECT * FROM insert_objective_resources;\n        -- SELECT * FROM "InsertObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveResources";\n        CREATE TEMP TABLE "UpdateObjectiveResources" AS\n            WITH update_objective_resources AS (\n                UPDATE "ObjectiveResources" "or"\n                SET\n                "sourceFields" = ortm."sourceFields",\n                "createdAt" = ortm."createdAt",\n                "updatedAt" = ortm."updatedAt",\n                "onAR" = ortm."onAR",\n                "onApprovedAR" = ortm."onApprovedAR"\n                FROM "ObjectiveResourcesToModify" ortm\n                WHERE "or".id = ortm."toUpdate"\n                AND (\n                    "or"."sourceFields" != ortm."sourceFields"\n                    OR "or"."createdAt" != ortm."createdAt"\n                    OR "or"."updatedAt" != ortm."updatedAt"\n                    OR "or"."onAR" != ortm."onAR"\n                    OR "or"."onApprovedAR" != ortm."onApprovedAR"\n                )\n                RETURNING\n                "or".id "objectiveResourceId",\n                "or"."objectiveId"\n            )\n        SELECT * FROM update_objective_resources;\n        -- SELECT * FROM "UpdateObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveResources";\n        CREATE TEMP TABLE "DeleteObjectiveResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveResourcesToModify"\n                ),\n            delete_objective_resources AS\n            (\n                DELETE FROM "ObjectiveResources" "or"\n                USING otmm_recast ortm\n                WHERE "or".id = to_remove\n                RETURNING\n                "or".id "objectiveResourceId",\n                "or"."objectiveId"\n            )\n        SELECT * FROM delete_objective_resources;\n        -- SELECT * FROM "DeleteObjectiveResources";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveResourceStats";\n        CREATE TEMP TABLE "ObjectiveResourceStats" AS\n            (\n                SELECT\n                'ObjectiveResources' "table",\n                (SELECT COUNT(*) FROM "InsertObjectiveResources") "Inserts",\n                (SELECT COUNT(*) FROM "UpdateObjectiveResources") "Updates",\n                (SELECT COUNT(*) FROM "DeleteObjectiveResources") "Deletes",\n                (SELECT COUNT(*) FROM "ObjectiveResources" "or") "post_count"\n            );\n\n        -- Validate ObjectiveTopics objectiveId null values\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveTopics" "ot"\n        -- JOIN  otmm_recast otmm\n        -- ON "ot"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveTopics" "ot2"\n        -- ON "ot2"."objectiveId" = otmm."toUpdate"\n        -- AND "ot"."topicId" = "ot2"."topicId";\n\n        -- Handle ObjectiveTopics\n\n            DROP TABLE IF EXISTS "ObjectiveTopicsToModify";\n            CREATE TEMP TABLE "ObjectiveTopicsToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "ot"."topicId",\n            MIN(LEAST("ot"."createdAt", "ot2"."createdAt")) "createdAt",\n            MAX(GREATEST("ot"."updatedAt", "ot2"."updatedAt")) "updatedAt",\n            BOOL_OR("ot"."onAR" OR COALESCE("ot2"."onAR", FALSE)) "onAR",\n            BOOL_OR("ot"."onApprovedAR" OR COALESCE("ot2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "ot".id ORDER by "ot".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "ot2".id))[1] "toUpdate"\n            FROM "ObjectiveTopics" "ot"\n            JOIN  otmm_recast otmm\n            ON "ot"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveTopics" "ot2"\n            ON "ot2"."objectiveId" = otmm."toUpdate"\n            AND "ot"."topicId" = "ot2"."topicId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ObjectiveTopicsToModify\n        -- SELECT * FROM "ObjectiveTopicsToModify";\n        -- SELECT "topicId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveTopicsToModify" ofmm\n        -- GROUP BY "topicId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveTopics";\n        CREATE TEMP TABLE "InsertObjectiveTopics" AS\n        WITH insert_objective_topics AS (\n            INSERT INTO "ObjectiveTopics"\n            (\n            "objectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            )\n            SELECT\n            "objectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            FROM "ObjectiveTopicsToModify" ottm\n            WHERE ottm."toUpdate" IS NULL AND ottm."objectiveId" IS NOT NULL\n            RETURNING\n            id "objectiveTopicId",\n            "objectiveId"\n        )\n        SELECT * FROM insert_objective_topics;\n        -- SELECT * FROM "InsertObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveTopics";\n        CREATE TEMP TABLE "UpdateObjectiveTopics" AS\n        WITH update_objective_topics AS (\n            UPDATE "ObjectiveTopics" "ot"\n            SET\n            "createdAt" = ottm."createdAt",\n            "updatedAt" = ottm."updatedAt",\n            "onAR" = ottm."onAR",\n            "onApprovedAR" = ottm."onApprovedAR"\n            FROM "ObjectiveTopicsToModify" ottm\n            WHERE "ot".id = ottm."toUpdate"\n            AND (\n                "ot"."createdAt" != ottm."createdAt"\n                OR "ot"."updatedAt" != ottm."updatedAt"\n                OR "ot"."onAR" != ottm."onAR"\n                OR "ot"."onApprovedAR" != ottm."onApprovedAR"\n            )\n            RETURNING\n            "ot".id "objectiveTopicId",\n            "ot"."objectiveId"\n        )\n        SELECT * FROM update_objective_topics;\n        -- SELECT * FROM "UpdateObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveTopics";\n        CREATE TEMP TABLE "DeleteObjectiveTopics" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveTopicsToModify"\n                ),\n            delete_objective_topics AS (\n            DELETE FROM "ObjectiveTopics" "ot"\n            USING otmm_recast ottm\n            WHERE "ot".id = to_remove\n            RETURNING\n            "ot".id "objectiveTopicId",\n            "ot"."objectiveId"\n        )\n        SELECT * FROM delete_objective_topics;\n        -- SELECT * FROM "DeleteObjectiveTopics";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveTopicStats";\n        CREATE TEMP TABLE "ObjectiveTopicStats" AS (\n            SELECT\n            'ObjectiveTopics' "table",\n            (SELECT COUNT(*) FROM "InsertObjectiveTopics") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectiveTopics") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectiveTopics") "Deletes",\n            (SELECT COUNT(*) FROM "ObjectiveTopics" ot) "post_count"\n        );\n        -- Continue Handle Objectives\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectives";\n        CREATE TEMP TABLE "UpdateObjectives" AS\n        WITH update_objectives AS (\n            UPDATE "Objectives" "o"\n            SET\n            "createdAt" = otmm."createdAt",\n            "updatedAt" = otmm."updatedAt",\n            "onAR" = otmm."onAR",\n            "onApprovedAR" = otmm."onApprovedAR",\n            "firstNotStartedAt" = otmm."firstNotStartedAt",\n            "lastNotStartedAt" = otmm."lastNotStartedAt",\n            "firstInProgressAt" = otmm."firstInProgressAt",\n            "lastInProgressAt" = otmm."lastInProgressAt",\n            "firstCompleteAt" = otmm."firstCompleteAt",\n            "lastCompleteAt" = otmm."lastCompleteAt",\n            "firstSuspendedAt" = otmm."firstSuspendedAt",\n            "lastSuspendedAt" = otmm."lastSuspendedAt",\n            "rtrOrder" = otmm."rtrOrder",\n            "createdVia" = otmm."createdVia"::"enum_Objectives_createdVia"\n            FROM "ObjectivesToModifyMetadata" otmm\n            WHERE "o".id = otmm."toUpdate"\n            AND (\n                "o"."createdAt" != otmm."createdAt"\n                OR "o"."updatedAt" != otmm."updatedAt"\n                OR "o"."onAR" != otmm."onAR"\n                OR "o"."onApprovedAR" != otmm."onApprovedAR"\n                OR "o"."firstNotStartedAt" != otmm."firstNotStartedAt"\n                OR "o"."lastNotStartedAt" != otmm."lastNotStartedAt"\n                OR "o"."firstInProgressAt" != otmm."firstInProgressAt"\n                OR "o"."lastInProgressAt" != otmm."lastInProgressAt"\n                OR "o"."firstCompleteAt" != otmm."firstCompleteAt"\n                OR "o"."lastCompleteAt" != otmm."lastCompleteAt"\n                OR "o"."firstSuspendedAt" != otmm."firstSuspendedAt"\n                OR "o"."lastSuspendedAt" != otmm."lastSuspendedAt"\n                OR "o"."rtrOrder" != otmm."rtrOrder"\n                OR "o"."createdVia" != otmm."createdVia"::"enum_Objectives_createdVia"\n            )\n            RETURNING\n            "o".id "updated_objective_id",\n            otmm."toUpdate" "old_objective_id"\n        )\n        SELECT * FROM update_objectives;\n        -- SELECT * FROM "UpdateObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        -- Update foreign key references in ActivityReportObjectives\n        UPDATE "ActivityReportObjectives" aro\n        SET "objectiveId" = "UpdateObjectives"."updated_objective_id"\n        FROM "UpdateObjectives"\n        WHERE aro."objectiveId" = "UpdateObjectives"."old_objective_id";\n        END;\n        \n        -- Handle ActivityReportObjectives\n        DROP TABLE IF EXISTS "ActivityReportObjectivesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectivesToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n                SELECT\n                    otmm."toUpdate" "objectiveId",\n                    aro."activityReportId",\n                    aro.title,\n                    aro.status,\n                    MIN(LEAST(aro."arOrder", aro2."arOrder")) "arOrder",\n                    STRING_AGG(DISTINCT "arox"."ttaProvided", E'\n') "ttaProvided",\n                    MIN(LEAST("aro"."createdAt", "aro2"."createdAt")) "createdAt",\n                    MAX(GREATEST("aro"."updatedAt", "aro2"."updatedAt")) "updatedAt",\n                    ARRAY_AGG(DISTINCT "aro".id ORDER by "aro".id) "toRemove",\n                    (ARRAY_AGG(DISTINCT "aro2".id))[1] "toUpdate"\n                    FROM "ActivityReportObjectives" aro\n                    JOIN  otmm_recast otmm\n                    ON "aro"."objectiveId" = to_remove\n                    LEFT JOIN "ActivityReportObjectives" aro2\n                    ON "aro2"."objectiveId" = otmm."toUpdate"\n                    AND "aro"."activityReportId" = "aro2"."activityReportId"\n                    LEFT JOIN "ActivityReportObjectives" arox\n                        ON "aro"."activityReportId" = arox."activityReportId"\n                        AND (\n                            arox."objectiveId" = "aro"."objectiveId"\n                            OR otmm."toUpdate" = arox."objectiveId"\n                        )\n                    GROUP BY 1,2,3,4\n                    );\n\n        -- Validate Handle ActivityReportObjectivesToModify\n        -- SELECT * FROM "ActivityReportObjectivesToModify";\n        -- SELECT "activityReportId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectivesToModify" ofmm\n        -- GROUP BY "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectives";\n        CREATE TEMP TABLE "InsertActivityReportObjectives" AS\n        WITH insert_activity_report_objectives AS (\n            INSERT INTO "ActivityReportObjectives"\n            (\n            "objectiveId",\n            "activityReportId",\n            title,\n            status,\n            "ttaProvided",\n            "arOrder",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "objectiveId",\n            "activityReportId",\n            TRIM(title) title,\n            status,\n            "ttaProvided",\n            "arOrder",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectivesToModify" oftm\n            WHERE oftm."toUpdate" IS NULL AND oftm."objectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveId",\n            "objectiveId",\n            "activityReportId"\n        )\n        SELECT * FROM insert_activity_report_objectives;\n        -- SELECT * FROM "InsertActivityReportObjectives";\n        END;\n\n        -- Handle ActivityReportObjectives Metadata tables\n        \n        DROP TABLE IF EXISTS "ActivityReportObjectivesToModifyMetadata";\n        CREATE TEMP TABLE "ActivityReportObjectivesToModifyMetadata" AS (\n            SELECT\n            arotm."objectiveId",\n            arotm."activityReportId",\n            arotm.title,\n            arotm.status,\n            arotm."arOrder",\n            arotm."ttaProvided",\n            arotm."createdAt",\n            arotm."updatedAt",\n            arotm."toRemove",\n            COALESCE(arotm."toUpdate", iaro."activityReportObjectiveId") "toUpdate"\n            FROM "ActivityReportObjectivesToModify" arotm\n            LEFT JOIN "InsertActivityReportObjectives" iaro\n            ON arotm."objectiveId" = iaro."objectiveId"\n            AND arotm."activityReportId" = iaro."activityReportId"\n        );\n\n        -- -- Validate Handle ActivityReportObjectivesToModifyMetadata\n        -- SELECT * FROM "ActivityReportObjectivesToModifyMetadata";\n        -- SELECT "objectiveId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectivesToModifyMetadata" ofmm\n        -- GROUP BY "objectiveId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- -- Validate  ActivityReportObjectiveFiles objectiveId null values\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ActivityReportObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ActivityReportObjectiveFiles" arof\n        -- JOIN otmm_recast arotmm\n        -- ON arof."activityReportObjectiveId" = to_remove\n        -- LEFT JOIN "ActivityReportObjectiveFiles" arof2\n        -- ON arof2."activityReportObjectiveId" = arotmm."toUpdate"\n        -- AND arof."fileId" = arof2."fileId";\n\n        -- Handle ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS "ActivityReportObjectiveFilesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveFilesToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModifyMetadata"\n        )\n            SELECT\n            arotmm."toUpdate" "activityReportObjectiveId",\n            arof."fileId",\n            MIN(LEAST("arof"."createdAt", "arof2"."createdAt")) "createdAt",\n            MAX(GREATEST("arof"."updatedAt", "arof2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "arof".id ORDER by "arof".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "arof2".id))[1] "toUpdate"\n            FROM "ActivityReportObjectiveFiles" arof\n            JOIN otmm_recast arotmm\n            ON arof."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveFiles" arof2\n            ON arof2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND arof."fileId" = arof2."fileId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveFilesToModify\n        -- SELECT * FROM "ActivityReportObjectiveFilesToModify";\n        -- SELECT "fileId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveFilesToModify" ofmm\n        -- GROUP BY "fileId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveFiles" AS\n        WITH insert_activity_report_objective_files AS (\n            INSERT INTO "ActivityReportObjectiveFiles"\n            (\n            "activityReportObjectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveFilesToModify" aroftm\n            WHERE aroftm."toUpdate" IS NULL and aroftm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveFileId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_files;\n        -- SELECT * FROM "InsertActivityReportObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveFiles" AS\n        WITH update_activity_report_objective_files AS (\n            UPDATE "ActivityReportObjectiveFiles" "arof"\n            SET\n            "createdAt" = aroftm."createdAt",\n            "updatedAt" = aroftm."updatedAt"\n            FROM "ActivityReportObjectiveFilesToModify" aroftm\n            WHERE "arof".id = aroftm."toUpdate"\n            AND (\n                "arof"."createdAt" != aroftm."createdAt"\n                OR "arof"."updatedAt" != aroftm."updatedAt"\n            )\n            RETURNING\n            "arof".id "activityReportObjectiveFileId",\n            "arof"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_files;\n        -- SELECT * FROM "UpdateActivityReportObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveFiles" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectiveFilesToModify"\n                ),\n        delete_activity_report_objective_files AS (\n            DELETE FROM "ActivityReportObjectiveFiles" "arof"\n            USING otmm_recast aroftm\n            WHERE "arof".id = to_remove\n            RETURNING\n            "arof".id "activityReportObjectiveFileId",\n            "arof"."activityReportObjectiveId"\n        )\n        SELECT * FROM delete_activity_report_objective_files;\n        -- SELECT * FROM "DeleteActivityReportObjectiveFiles";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveFileStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveFileStats" AS (\n            SELECT\n            'ActivityReportObjectiveFiles' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveFiles") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveFiles") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveFiles") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveFiles" arof) "post_count"\n        );\n\n        -- Handle ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS "ActivityReportObjectiveResourcesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveResourcesToModify" AS (\n            WITH arotmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectivesToModifyMetadata"\n                )\n            SELECT\n            arotmm."toUpdate" "activityReportObjectiveId",\n            aror."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ActivityReportObjectiveResources" "arorx"\n                CROSS JOIN UNNEST("arorx"."sourceFields") sfx("sourceField")\n                WHERE "aror"."resourceId" = arorx."resourceId"\n                AND (arorx."activityReportObjectiveId" = ANY(ARRAY_AGG("aror"."activityReportObjectiveId"))\n                OR arotmm."toUpdate" = arorx."activityReportObjectiveId")\n            ) "sourceFields",\n            MIN(LEAST("aror"."createdAt", "aror2"."createdAt")) "createdAt",\n            MAX(GREATEST("aror"."updatedAt", "aror2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "aror".id ORDER by "aror".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "aror2".id))[1] "toUpdate"\n            FROM "ActivityReportObjectiveResources" aror\n            JOIN  arotmm_recast arotmm\n            ON aror."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveResources" aror2\n            ON aror2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND aror."resourceId" = aror2."resourceId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveResourcesToModify\n        -- SELECT * FROM "ActivityReportObjectiveResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveResources";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveResources" AS\n        WITH insert_activity_report_objective_resources AS (\n            INSERT INTO "ActivityReportObjectiveResources"\n            (\n            "activityReportObjectiveId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveResourcesToModify" arortm\n            WHERE arortm."toUpdate" IS NULL and arortm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveResourceId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_resources;\n        -- SELECT * FROM "InsertActivityReportObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveResources";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveResources" AS\n        WITH update_activity_report_objective_resources AS (\n            UPDATE "ActivityReportObjectiveResources" "aror"\n            SET\n            "sourceFields" = arortm."sourceFields",\n            "createdAt" = arortm."createdAt",\n            "updatedAt" = arortm."updatedAt"\n            FROM "ActivityReportObjectiveResourcesToModify" arortm\n            WHERE "aror".id = arortm."toUpdate"\n            AND (\n                "aror"."sourceFields" != arortm."sourceFields"\n                OR "aror"."createdAt" != arortm."createdAt"\n                OR "aror"."updatedAt" != arortm."updatedAt"\n            )\n            RETURNING\n            "aror".id "activityReportObjectiveResourceId",\n            "aror"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_resources;\n        -- SELECT * FROM "UpdateActivityReportObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveResources";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectiveResourcesToModify"\n                ),\n            delete_activity_report_objective_resources AS (\n            DELETE FROM "ActivityReportObjectiveResources" "aror"\n            USING otmm_recast arortm\n            WHERE "aror".id = to_remove\n            RETURNING\n            "aror".id "activityReportObjectiveResourceId",\n            "aror"."activityReportObjectiveId"\n        )\n        SELECT * FROM delete_activity_report_objective_resources;\n        -- SELECT * FROM "DeleteActivityReportObjectiveResources";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveResourceStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveResourceStats" AS (\n            SELECT\n            'ActivityReportObjectiveResources' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveResources") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveResources") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveResources") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveResources" aror) "post_count"\n        );\n\n        -- Handle ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS "ActivityReportObjectiveTopicsToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveTopicsToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModifyMetadata"\n        )\n            SELECT\n                arotmm."toUpdate" "activityReportObjectiveId",\n                arot."topicId",\n                MIN(LEAST("arot"."createdAt", "arot2"."createdAt")) "createdAt",\n                MAX(GREATEST("arot"."updatedAt", "arot2"."updatedAt")) "updatedAt",\n                ARRAY_AGG(DISTINCT "arot".id ORDER by "arot".id) "toRemove",\n                MIN("arot2".id) "toUpdate"\n            FROM "ActivityReportObjectiveTopics" arot\n            JOIN otmm_recast arotmm\n            ON arot."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveTopics" arot2\n            ON arot2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND arot."topicId" = arot2."topicId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveTopicsToModify\n        -- SELECT * FROM "ActivityReportObjectiveTopicsToModify";\n        -- SELECT "topicId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveTopicsToModify" ofmm\n        -- GROUP BY "topicId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveTopics" AS\n        WITH insert_activity_report_objective_topics AS  (\n            INSERT INTO "ActivityReportObjectiveTopics"\n            (\n            "activityReportObjectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveTopicsToModify" arottm\n            WHERE arottm."toUpdate" IS NULL AND arottm."activityReportObjectiveId" IS NOT NULL \n            RETURNING\n            id "activityReportObjectiveTopicId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_topics;\n        -- SELECT * FROM "InsertActivityReportObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveTopics" AS\n        WITH update_activity_report_objective_topics AS (\n            UPDATE "ActivityReportObjectiveTopics" "arot"\n            SET\n            "createdAt" = arottm."createdAt",\n            "updatedAt" = arottm."updatedAt"\n            FROM "ActivityReportObjectiveTopicsToModify" arottm\n            WHERE "arot".id = arottm."toUpdate"\n            AND (\n                "arot"."createdAt" != arottm."createdAt"\n                OR "arot"."updatedAt" != arottm."updatedAt"\n            )\n            RETURNING\n            "arot".id "activityReportObjectiveTopicId",\n            "arot"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_topics;\n        -- SELECT * FROM "UpdateActivityReportObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveTopics" AS\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectiveTopicsToModify"\n            ),\n            delete_activity_report_objective_topics AS (\n                DELETE FROM "ActivityReportObjectiveTopics" "arot"\n                USING otmm_recast arottm\n                WHERE "arot".id = to_remove\n                RETURNING\n                "arot".id "activityReportObjectiveTopicId",\n                "arot"."activityReportObjectiveId"\n            )\n            SELECT * FROM delete_activity_report_objective_topics;\n        -- SELECT * FROM "DeleteActivityReportObjectiveTopics";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveTopicStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveTopicStats" AS (\n            SELECT\n            'ActivityReportObjectiveTopics' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveTopics") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveTopics") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveTopics") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveTopics" arot) "post_count"\n\n        );\n\n        -- Continue Handle ActivityReportObjectives\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectives";\n        CREATE TEMP TABLE "UpdateActivityReportObjectives" AS\n        WITH update_activity_report_objectives AS(\n            UPDATE "ActivityReportObjectives" "aro"\n            SET\n            "arOrder" = arotm."arOrder",\n            "ttaProvided" = arotm."ttaProvided",\n            "createdAt" = arotm."createdAt",\n            "updatedAt" = arotm."updatedAt"\n            FROM "ActivityReportObjectivesToModify" arotm\n            WHERE "aro".id = arotm."toUpdate"\n            AND (\n                "aro"."arOrder" != arotm."arOrder"\n                OR "aro"."ttaProvided" != arotm."ttaProvided"\n                OR "aro"."createdAt" != arotm."createdAt"\n                OR "aro"."updatedAt" != arotm."updatedAt"\n            )\n            RETURNING\n            "aro".id "activityReportObjectiveId",\n            "aro"."objectiveId"\n        )\n        SELECT * FROM update_activity_report_objectives;\n        -- SELECT * FROM "UpdateActivityReportObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectives";\n        CREATE TEMP TABLE "DeleteActivityReportObjectives" AS\n        WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModify"\n        ),\n        -- Delete related rows from ActivityReportObjectiveFiles table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING otmm_recast arotm\n            WHERE arof."activityReportObjectiveId" = to_remove\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" "aro"\n            USING otmm_recast arotm\n            WHERE "aro".id = to_remove\n            RETURNING\n                "aro".id "activityReportObjectiveId",\n                "aro"."objectiveId"\n        )\n        SELECT * FROM deleted_aro;\n        -- SELECT * FROM "DeleteActivityReportObjectives";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveStats" AS (\n            SELECT\n            'ActivityReportObjectives' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectives") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectives") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectives") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectives" aro) "post_count"\n        );\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectives";\n        CREATE TEMP TABLE "DeleteObjectives" AS\n        WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ObjectivesToModify"\n            ),\n        -- Delete related rows from ActivityReportObjectiveFiles table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING "ActivityReportObjectives" aro, otm_recast\n            WHERE aro."objectiveId" = to_remove AND arof."activityReportObjectiveId" = aro.id\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING otm_recast\n            WHERE aro."objectiveId" = to_remove\n            RETURNING aro."objectiveId"\n        ),\n\n        deleted_of AS (\n            DELETE FROM "ObjectiveFiles" of\n            USING otm_recast\n            WHERE of."objectiveId" = to_remove\n            RETURNING of."objectiveId"\n        ),\n        -- Delete rows from Objectives table\n        deleted_o AS (\n            DELETE FROM "Objectives" "o"\n            USING otm_recast\n            WHERE "o".id = to_remove\n            RETURNING\n                "o".id "objectiveId"\n        )\n        SELECT * FROM deleted_o;\n        -- SELECT * FROM "DeleteObjectives";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveStats";\n        CREATE TEMP TABLE "ObjectiveStats" AS (\n            SELECT\n            'Objectives' "table",\n            (SELECT COUNT(*) FROM "InsertObjectives") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectives") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectives") "Deletes",\n            (SELECT COUNT(*) FROM "Objectives" o) "post_count"\n        );\n\n        -- Handle ActivityReportGoals\n        DROP TABLE IF EXISTS "ActivityReportGoalsToModify";\n        CREATE TEMP TABLE "ActivityReportGoalsToModify" AS (\n            SELECT\n            dgoa."toUpdateGoal" "goalId",\n            arg."activityReportId",\n            TRIM(arg.name) "name",\n            arg.status,\n            COALESCE(arg2.timeframe, arg.timeframe) timeframe,\n            arg2."closeSuspendReason",\n            arg2."closeSuspendContext",\n            MAX(GREATEST(arg2."endDate", arg."endDate")) "endDate",\n            CASE\n                WHEN 'Yes' = ANY(ARRAY_AGG(arg."isRttapa"))\n                OR 'Yes' = ANY(ARRAY_AGG(arg2."isRttapa"))\n                THEN 'Yes'\n                WHEN 'No' = ANY(ARRAY_AGG(arg."isRttapa"))\n                OR 'No' = ANY(ARRAY_AGG(arg2."isRttapa"))\n                THEN 'No'\n                ELSE NULL\n            END "isRttapa",\n            BOOL_OR(COALESCE(arg."isActivelyEdited", FALSE) OR COALESCE(arg2."isActivelyEdited", FALSE)) "isActivelyEdited",\n            MIN(LEAST("arg"."createdAt", "arg2"."createdAt")) "createdAt",\n            MAX(GREATEST("arg"."updatedAt", "arg2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "arg".id ORDER by "arg".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "arg2".id))[1] "toUpdate"\n            FROM "ActivityReportGoals" arg\n            JOIN "DupGoalsOnARs" dgoa\n            ON "arg"."goalId" = ANY(dgoa."toRemoveGoals")\n            AND "arg"."goalId" != dgoa."toUpdateGoal"\n            LEFT JOIN "ActivityReportGoals" "arg2"\n            ON "arg2"."goalId" = dgoa."toUpdateGoal"\n            AND "arg"."activityReportId" = "arg2"."activityReportId"\n            GROUP BY 1,2,3,4,5,6,7\n        );\n\n        -- Validate Handle ActivityReportGoalsToModify\n        -- SELECT * FROM "ActivityReportGoalsToModify";\n        -- SELECT "goalId","activityReportId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalsToModify" ofmm\n        -- GROUP BY "goalId", "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoals";\n        CREATE TEMP TABLE "InsertActivityReportGoals" AS\n        WITH insert_activity_report_goals AS (\n            INSERT INTO "ActivityReportGoals"\n            (\n            "goalId",\n            "activityReportId",\n            "name",\n            status,\n            "timeframe",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "endDate",\n            "isRttapa",\n            "isActivelyEdited",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "goalId",\n            "activityReportId",\n            TRIM("name") "name",\n            status,\n            "timeframe",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "endDate",\n            "isRttapa"::"enum_ActivityReportGoals_isRttapa",\n            "isActivelyEdited",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalsToModify" argtm\n            WHERE argtm."toUpdate" IS NULL AND argtm."activityReportId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalId",\n            "goalId",\n            "activityReportId"\n        )\n        SELECT * FROM insert_activity_report_goals;\n        -- SELECT * FROM "InsertActivityReportGoals";\n        END;\n\n        -- Handle ActivityReportGoals Metadata tables\n        DROP TABLE IF EXISTS "ActivityReportGoalsToModifyMetadata";\n        CREATE TEMP TABLE "ActivityReportGoalsToModifyMetadata" AS (\n            SELECT\n            argtm."goalId",\n            argtm."activityReportId",\n            TRIM(argtm.name) "name",\n            argtm.status,\n            argtm."timeframe",\n            argtm."closeSuspendReason",\n            argtm."closeSuspendContext",\n            argtm."endDate",\n            argtm."isRttapa",\n            argtm."isActivelyEdited",\n            argtm."createdAt",\n            argtm."updatedAt",\n        argtm."toRemove",\n            COALESCE(argtm."toUpdate", iarg."activityReportGoalId") "toUpdate"\n            FROM "ActivityReportGoalsToModify" argtm\n            LEFT JOIN "InsertActivityReportGoals" iarg\n            ON argtm."goalId" = iarg."goalId"\n            AND argtm."activityReportId" = iarg."activityReportId"\n        );\n\n        -- Validate Handle ActivityReportGoalsToModifyMetadata\n        -- SELECT * FROM "ActivityReportGoalsToModifyMetadata";\n        -- SELECT "goalId", "activityReportId","toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalsToModifyMetadata" ofmm\n        -- GROUP BY "goalId", "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- Handle ActivityReportGoalResources\n        DROP TABLE IF EXISTS "ActivityReportGoalResourcesToModify";\n        CREATE TEMP TABLE "ActivityReportGoalResourcesToModify" AS (\n          WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ActivityReportGoalsToModifyMetadata"\n            )\n            SELECT\n            argtmm."toUpdate" "activityReportGoalId",\n            argr."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ActivityReportGoalResources" "argrx"\n                CROSS JOIN UNNEST("argrx"."sourceFields") sfx("sourceField")\n                WHERE "argr"."resourceId" = argrx."resourceId"\n                AND (argrx."activityReportGoalId" = ANY(ARRAY_AGG("argr"."activityReportGoalId"))\n                OR argtmm."toUpdate" = argrx."activityReportGoalId")\n            ) "sourceFields",\n            MIN(LEAST("argr"."createdAt", "argr2"."createdAt")) "createdAt",\n            MAX(GREATEST("argr"."updatedAt", "argr2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "argr".id ORDER by "argr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "argr2".id))[1] "toUpdate"\n            FROM "ActivityReportGoalResources" argr\n            JOIN otm_recast argtmm\n            ON argr."activityReportGoalId" = to_remove\n            LEFT JOIN "ActivityReportGoalResources" argr2\n            ON argr2."activityReportGoalId" = argtmm."toUpdate"\n            AND argr."resourceId" = argr2."resourceId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportGoalResourcesToModify\n        -- SELECT * FROM "ActivityReportGoalResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoalResources";\n        CREATE TEMP TABLE "InsertActivityReportGoalResources" AS\n        WITH insert_activity_report_goals_resources AS (\n            INSERT INTO "ActivityReportGoalResources"\n            (\n            "activityReportGoalId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportGoalId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalResourcesToModify" argrtm\n            WHERE argrtm."toUpdate" IS NULL AND argrtm."activityReportGoalId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalResourceId",\n            "activityReportGoalId"\n        )\n        SELECT * FROM insert_activity_report_goals_resources;\n        -- SELECT * FROM "InsertActivityReportGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoalResources";\n        CREATE TEMP TABLE "UpdateActivityReportGoalResources" AS\n        WITH update_activity_report_goals_resources AS  (\n            UPDATE "ActivityReportGoalResources" "argr"\n            SET\n            "sourceFields" = argrtm."sourceFields",\n            "createdAt" = argrtm."createdAt",\n            "updatedAt" = argrtm."updatedAt"\n            FROM "ActivityReportGoalResourcesToModify" argrtm\n            WHERE "argr".id = argrtm."toUpdate"\n            AND (\n                "argr"."sourceFields" != argrtm."sourceFields"\n                OR "argr"."createdAt" != argrtm."createdAt"\n                OR "argr"."updatedAt" != argrtm."updatedAt"\n            )\n            RETURNING\n            "argr".id "activityReportGoalResourceId",\n            "argr"."activityReportGoalId"\n        )\n        SELECT * FROM update_activity_report_goals_resources;\n        -- SELECT * FROM "UpdateActivityReportGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoalResources";\n        CREATE TEMP TABLE "DeleteActivityReportGoalResources" AS\n        WITH delete_activity_report_goals_resources AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalResourcesToModify"\n                )\n            DELETE FROM "ActivityReportGoalResources" "argr"\n            USING otmm_recast argrtm\n            WHERE "argr".id = to_remove\n            RETURNING\n            "argr".id "activityReportGoalResourceId",\n            "argr"."activityReportGoalId"\n        )\n        SELECT * FROM delete_activity_report_goals_resources;\n        -- SELECT * FROM "DeleteActivityReportGoalResources";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalResourceStats";\n        CREATE TEMP TABLE "ActivityReportGoalResourceStats" AS (\n            SELECT\n            'ActivityReportGoalResources' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoalResources") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoalResources") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoalResources") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoalResources" argr) "post_count"\n        );\n\n        -- Continue Handle ActivityReportGoals\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoals";\n        CREATE TEMP TABLE "UpdateActivityReportGoals" AS\n        WITH update_activity_report_goals AS (\n            UPDATE "ActivityReportGoals" "arg"\n            SET\n            "timeframe" = argtm."timeframe",\n            "endDate" = argtm."endDate",\n            "isRttapa" = argtm."isRttapa"::"enum_ActivityReportGoals_isRttapa",\n            "isActivelyEdited" = argtm."isActivelyEdited",\n            "createdAt" = argtm."createdAt",\n            "updatedAt" = argtm."updatedAt"\n            FROM "ActivityReportGoalsToModify" argtm\n            WHERE "arg".id = argtm."toUpdate"\n            AND (\n              "arg"."timeframe" != argtm."timeframe"\n              OR "arg"."endDate" != argtm."endDate"\n              OR "arg"."isRttapa" != argtm."isRttapa"::"enum_ActivityReportGoals_isRttapa"\n              OR "arg"."isActivelyEdited" != argtm."isActivelyEdited"\n              OR "arg"."createdAt" != argtm."createdAt"\n              OR "arg"."updatedAt" != argtm."updatedAt"\n            )\n            RETURNING\n            "arg".id "activityReportGoalId",\n            "arg"."goalId"\n        )SELECT * FROM update_activity_report_goals;\n        -- SELECT * FROM "UpdateActivityReportGoals";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoals";\n        CREATE TEMP TABLE "DeleteActivityReportGoals" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalsToModify"\n                ),\n            delete_activity_report_goals AS  (\n            DELETE FROM "ActivityReportGoals" "arg"\n            USING otmm_recast argtm\n            WHERE "arg".id = to_remove\n            RETURNING\n            "arg".id "activityReportGoalId",\n            "arg"."goalId"\n        )\n        SELECT * FROM delete_activity_report_goals;\n        -- SELECT * FROM "DeleteActivityReportGoals";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalStats";\n        CREATE TEMP TABLE "ActivityReportGoalStats" AS (\n            SELECT\n            'ActivityReportGoals' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoals") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoals") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoals") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoals" ar) "post_count"\n\n        );\n        -- Continue Handle Goals\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_Goals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateGoals";\n        CREATE TEMP TABLE "UpdateGoals" AS\n        WITH update_goals AS (\n            UPDATE "Goals" "g"\n            SET\n            "status" = gtm."status",\n            "timeframe" = gtm."timeframe",\n            "isFromSmartsheetTtaPlan" = gtm."isFromSmartsheetTtaPlan",\n            "createdAt" = gtm."createdAt",\n            "updatedAt" = gtm."updatedAt",\n            "endDate" = gtm."endDate",\n            "previousStatus" = gtm."previousStatus",\n            "goalTemplateId" = gtm."goalTemplateId",\n            "onAR" = gtm."onAR",\n            "onApprovedAR" = gtm."onApprovedAR",\n            "firstNotStartedAt" = gtm."firstNotStartedAt",\n            "lastNotStartedAt" = gtm."lastNotStartedAt",\n            "firstInProgressAt" = gtm."firstInProgressAt",\n            "lastInProgressAt" = gtm."lastInProgressAt",\n            "firstCeasedSuspendedAt" = gtm."firstCeasedSuspendedAt",\n            "lastCeasedSuspendedAt" = gtm."lastCeasedSuspendedAt",\n            "firstClosedAt" = gtm."firstClosedAt",\n            "lastClosedAt" = gtm."lastClosedAt",\n            "firstCompletedAt" = gtm."firstCompletedAt",\n            "lastCompletedAt" = gtm."lastCompletedAt",\n            "isRttapa" = gtm."isRttapa"::"enum_Goals_isRttapa",\n            "createdVia" = gtm."createdVia"::"enum_Goals_createdVia"\n            FROM "GoalsToModify" gtm\n            WHERE "g".id = gtm."toUpdate"\n            AND (\n              "g"."status" != gtm."status"\n              OR "g"."timeframe" != gtm."timeframe"\n              OR "g"."isFromSmartsheetTtaPlan" != gtm."isFromSmartsheetTtaPlan"\n              OR "g"."createdAt" != gtm."createdAt"\n              OR "g"."updatedAt" != gtm."updatedAt"\n              OR "g"."endDate" != gtm."endDate"\n              OR "g"."previousStatus" != gtm."previousStatus"\n              OR "g"."goalTemplateId" != gtm."goalTemplateId"\n              OR "g"."onAR" != gtm."onAR"\n              OR "g"."onApprovedAR" != gtm."onApprovedAR"\n              OR "g"."firstNotStartedAt" != gtm."firstNotStartedAt"\n              OR "g"."lastNotStartedAt" != gtm."lastNotStartedAt"\n              OR "g"."firstInProgressAt" != gtm."firstInProgressAt"\n              OR "g"."lastInProgressAt" != gtm."lastInProgressAt"\n              OR "g"."firstCeasedSuspendedAt" != gtm."firstCeasedSuspendedAt"\n              OR "g"."lastCeasedSuspendedAt" != gtm."lastCeasedSuspendedAt"\n              OR "g"."firstClosedAt" != gtm."firstClosedAt"\n              OR "g"."lastClosedAt" != gtm."lastClosedAt"\n              OR "g"."firstCompletedAt" != gtm."firstCompletedAt"\n              OR "g"."lastCompletedAt" != gtm."lastCompletedAt"\n              OR "g"."isRttapa" != gtm."isRttapa"::"enum_Goals_isRttapa"\n              OR "g"."createdVia" != gtm."createdVia"::"enum_Goals_createdVia"\n            )\n            RETURNING\n            "g".id "goalId"\n        )\n        SELECT * FROM update_goals;\n        -- SELECT * FROM "UpdateGoals";\n        END;\n\n        -- Validate Handle GoalsToModify\n        -- SELECT * FROM "Goals";\n        -- SELECT *, COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "Goals" ofmm\n        -- GROUP BY "id"\n        -- HAVING COUNT(*) > 1;\n\n        -- DROP TABLE IF EXISTS "ViolatingDeleteGoals";\n        -- CREATE TEMP TABLE "ViolatingDeleteGoals" AS\n        -- WITH gtm_recast AS (\n        -- SELECT *,\n        --     UNNEST("toRemove") to_remove\n        -- FROM "GoalsToModify"\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ActivityReportObjectiveFiles table\n        -- violated_arof AS (\n        --     SELECT 'ActivityReportObjectiveFiles' as table_name, \n        --         arof.id as primary_key,\n        --         arof."activityReportObjectiveId" as foreign_key, \n        --         o.id as objective_id, \n        --         array_to_json(array_agg(row_to_json(om))) as raw_objective,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal\n        --     FROM "ActivityReportObjectiveFiles" arof\n        --     LEFT JOIN "ActivityReportObjectives" aro ON arof."activityReportObjectiveId" = aro.id\n        --     LEFT JOIN "Objectives" o ON aro."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     LEFT JOIN "Objectives" om ON om.id = o.id\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY arof.id, arof."activityReportObjectiveId", o.id\n        -- ),\n\n        -- -- Identify rows violating foreign key constraints in ActivityReportObjectives table\n        -- violated_aro AS (\n        --     SELECT 'ActivityReportObjectives' as table_name, \n        --         aro.id as primary_key, \n        --         aro."objectiveId" as foreign_key, \n        --         to_remove as goal_id, \n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal, \n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ActivityReportObjectives" aro\n        --     LEFT JOIN "Objectives" o ON aro."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY aro.id, aro."objectiveId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ObjectiveFiles table\n        -- violated_of AS (\n        --     SELECT 'ObjectiveFiles' as table_name, \n        --         of.id as primary_key, \n        --         of."objectiveId" as foreign_key, \n        --         to_remove as goal_id, \n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal, \n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ObjectiveFiles" of\n        --     LEFT JOIN "Objectives" o ON of."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY of.id, of."objectiveId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in Objectives table\n        -- violated_o AS (\n        --     SELECT 'Objectives' as table_name, \n        --         o.id as primary_key,\n        --         o."goalId" as foreign_key, \n        --         to_remove as goal_id, \n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "Objectives" o\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY o.id, o."goalId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ActivityReportGoals table\n        -- violated_arg AS (\n        --     SELECT 'ActivityReportGoals' as table_name, \n        --         arg.id as primary_key,\n        --         arg."goalId" as foreign_key, \n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal, \n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ActivityReportGoals" arg\n        --     LEFT JOIN "Objectives" o ON o."goalId" = arg."goalId"\n        --     LEFT JOIN gtm_recast ON arg."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY arg.id, arg."goalId", to_remove\n        -- )\n\n        -- -- Display rows violating foreign key constraints\n        -- SELECT * FROM violated_arof\n        -- UNION ALL\n        -- SELECT * FROM violated_aro\n        -- UNION ALL\n        -- SELECT * FROM violated_of\n        -- UNION ALL\n        -- SELECT * FROM violated_o\n        -- UNION ALL\n        -- SELECT * FROM violated_arg;\n        -- SELECT * FROM "ViolatingDeleteGoals";\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_Goals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteGoals";\n        CREATE TEMP TABLE "DeleteGoals" AS\n        WITH gtm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n          FROM "GoalsToModify"\n          ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING "Objectives" o, gtm_recast, "ActivityReportObjectives" aro\n            WHERE o."goalId" = to_remove AND aro."objectiveId" = o.id AND arof."activityReportObjectiveId" = aro.id\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "Objectives" o, gtm_recast\n            WHERE o."goalId" = to_remove AND aro."objectiveId" = o.id\n            RETURNING aro."objectiveId"\n        ),\n        -- Delete related rows from ObjectiveFiles table\n        deleted_of AS (\n            DELETE FROM "ObjectiveFiles" of\n            USING "Objectives" o, gtm_recast\n            WHERE o."goalId" = to_remove AND of."objectiveId" = o.id\n            RETURNING of."objectiveId"\n        ),\n        -- Delete related rows from Objectives table\n        deleted_o AS (\n            DELETE FROM "Objectives" o\n            USING gtm_recast\n            WHERE o."goalId" = to_remove\n            RETURNING o."goalId"\n        ),\n        -- Delete related rows from ActivityReportGoals table\n        deleted_arg AS (\n            DELETE FROM "ActivityReportGoals" arg\n            USING gtm_recast\n            WHERE arg."goalId" = to_remove\n            RETURNING arg."goalId"\n        ),\n        -- Delete rows from Goals table\n        deleted_g AS (\n            DELETE FROM "Goals" "g"\n            USING gtm_recast\n            WHERE "g".id = to_remove\n            RETURNING\n                "g".id "goalId"\n        )\n\n        -- Display deleted rows from Goals table\n        SELECT * FROM deleted_g;\n        -- SELECT * FROM "DeleteGoals";\n        END;\n\n        -- Stats\n\n        DROP TABLE IF EXISTS "GoalStats";\n        CREATE TEMP TABLE "GoalStats" AS (\n            SELECT\n            'Goals' "table",\n            0 "Inserts",\n            (SELECT COUNT(*) FROM "UpdateGoals") "Updates",\n            (SELECT COUNT(*) FROM "DeleteGoals") "Deletes",\n            (SELECT COUNT(*) FROM "Goals" g) "post_count"\n        );\n        \n        DROP TABLE IF EXISTS "PostCountStatsByRegion";\n        CREATE TEMP TABLE "PostCountStatsByRegion" AS (\n            SELECT\n                gr."regionId",\n                COUNT(DISTINCT g."id") "GoalsTotal",\n                COUNT(DISTINCT arg."id") "ActivityReportGoalsTotal",\n                COUNT(DISTINCT argr."id") "ActivityReportGoalResourcesTotal",\n                COUNT(DISTINCT oj."id") "ObjectivesTotal",\n                COUNT(DISTINCT ojf."id") "ObjectiveFilesTotal",\n                COUNT(DISTINCT ojr."id") "ObjectiveResourcesTotal",\n                COUNT(DISTINCT ojt."id") "ObjectiveTopicsTotal",\n                COUNT(DISTINCT aro."id") "ActivityReportObjectivesTotal",\n                COUNT(DISTINCT arof."id") "ActivityReportObjectiveFilesTotal",\n                COUNT(DISTINCT aror."id") "ActivityReportObjectiveResourcesTotal",\n                COUNT(DISTINCT arot."id") "ActivityReportObjectiveTopicsTotal"\n            FROM "Grants" gr\n            FULL OUTER JOIN "Goals" g ON gr."id" = g."grantId"\n            FULL OUTER JOIN "ActivityReportGoals" arg ON g."id" = arg."goalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argr ON arg."id" = argr."activityReportGoalId"\n            FULL OUTER JOIN "Objectives" oj ON g."id" = oj."goalId"\n            FULL OUTER JOIN "ObjectiveFiles" ojf ON oj."id" = ojf."objectiveId"\n            FULL OUTER JOIN "ObjectiveResources" ojr ON oj."id" = ojr."objectiveId"\n            FULL OUTER JOIN "ObjectiveTopics" ojt ON oj."id" = ojt."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectives" aro ON oj."id" = aro."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveFiles" arof ON aro."id" = arof."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveResources" aror ON aro."id" = aror."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveTopics" arot ON aro."id" = arot."activityReportObjectiveId"\n            GROUP BY gr."regionId"\n        );\n        INSERT INTO "PostCountStatsByRegion"\n        SELECT\n            -1 "regionId",\n            SUM("GoalsTotal"),\n            SUM("ActivityReportGoalsTotal"),\n            SUM("ActivityReportGoalResourcesTotal"),\n            SUM("ObjectivesTotal"),\n            SUM("ObjectiveFilesTotal"),\n            SUM("ObjectiveResourcesTotal"),\n            SUM("ObjectiveTopicsTotal"),\n            SUM("ActivityReportObjectivesTotal"),\n            SUM("ActivityReportObjectiveFilesTotal"),\n            SUM("ActivityReportObjectiveResourcesTotal"),\n            SUM("ActivityReportObjectiveTopicsTotal")\n        FROM "PostCountStatsByRegion";\n        SELECT * FROM "PostCountStatsByRegion";\n        \n        WITH "RegionDiffs" AS (\n            SELECT\n                pre."regionId",\n                pre."GoalsTotal" - post."GoalsTotal" AS "GoalsTotalDiff",\n                pre."ActivityReportGoalsTotal" - post."ActivityReportGoalsTotal" AS "ActivityReportGoalsTotalDiff",\n                pre."ActivityReportGoalResourcesTotal" - post."ActivityReportGoalResourcesTotal" AS "ActivityReportGoalResourcesTotalDiff",\n                pre."ObjectivesTotal" - post."ObjectivesTotal" AS "ObjectivesTotalDiff",\n                pre."ObjectiveFilesTotal" - post."ObjectiveFilesTotal" AS "ObjectiveFilesTotalDiff",\n                pre."ObjectiveResourcesTotal" - post."ObjectiveResourcesTotal" AS "ObjectiveResourcesTotalDiff",\n                pre."ObjectiveTopicsTotal" - post."ObjectiveTopicsTotal" AS "ObjectiveTopicsTotalDiff",\n                pre."ActivityReportObjectivesTotal" - post."ActivityReportObjectivesTotal" AS "ActivityReportObjectivesTotalDiff",\n                pre."ActivityReportObjectiveFilesTotal" - post."ActivityReportObjectiveFilesTotal" AS "ActivityReportObjectiveFilesTotalDiff",\n                pre."ActivityReportObjectiveResourcesTotal" - post."ActivityReportObjectiveResourcesTotal" AS "ActivityReportObjectiveResourcesTotalDiff",\n                pre."ActivityReportObjectiveTopicsTotal" - post."ActivityReportObjectiveTopicsTotal" AS "ActivityReportObjectiveTopicsTotalDiff"\n                \n            FROM "PreCountStatsByRegion" pre\n            JOIN "PostCountStatsByRegion" post ON pre."regionId" = post."regionId"\n        )\n        SELECT * FROM "RegionDiffs";\n        \n        WITH "CollectStats" AS (\n            SELECT 1 id, *,\n                (SELECT SUM("GoalsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "GoalStats"\n            UNION\n            SELECT 2 id, *,\n                (SELECT SUM("ActivityReportGoalsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalStats"\n            UNION\n            SELECT 3 id, *,\n                (SELECT SUM("ActivityReportGoalResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalResourceStats"\n            UNION\n            SELECT 4 id, *,\n                (SELECT SUM("ObjectivesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveStats"\n            UNION\n            SELECT 5 id, *,\n                (SELECT SUM("ObjectiveFilesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveFileStats"\n            UNION\n            SELECT 6 id, *,\n                (SELECT SUM("ObjectiveResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveResourceStats"\n            UNION\n            SELECT 7 id, *,\n                (SELECT SUM("ObjectiveTopicsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveTopicStats"\n            UNION\n            SELECT 8 id, *,\n                (SELECT SUM("ActivityReportObjectivesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveStats"\n            UNION\n            SELECT 9 id, *,\n                (SELECT SUM("ActivityReportObjectiveFilesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveFileStats"\n            UNION\n            SELECT 10 id, *,\n                (SELECT SUM("ActivityReportObjectiveResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveResourceStats"\n            UNION\n            SELECT 11 id, *,\n                (SELECT SUM("ActivityReportObjectiveTopicsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveTopicStats"\n        )\n        SELECT *, \n            pre_count - post_count AS diff,\n            post_count - (pre_count - "Deletes" + "Inserts") AS adjusted_diff\n\n        FROM "CollectStats"\n        ORDER BY id;\n        DROP TABLE IF EXISTS  "PreCountStatsByRegion" ;
Executing (2e9cadf3-3ae5-4108-b515-ddfaa94fd650): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230330130554-goal-duplicate-cleanup: migrated (0.213s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230403203917-add-deleted-to-grants-recipients: migrating =======
Executing (0605fdc1-8dfc-4345-b7e0-a71e04c24f4c): START TRANSACTION;
Connection validated successfully
Executing (0605fdc1-8dfc-4345-b7e0-a71e04c24f4c): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230403203917-add-deleted-to-grants-recipients.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0605fdc1-8dfc-4345-b7e0-a71e04c24f4c): ALTER TABLE "public"."Recipients" ADD COLUMN "deleted" BOOLEAN DEFAULT false;
Executing (0605fdc1-8dfc-4345-b7e0-a71e04c24f4c): ALTER TABLE "public"."Grants" ADD COLUMN "deleted" BOOLEAN DEFAULT false;
Executing (0605fdc1-8dfc-4345-b7e0-a71e04c24f4c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230403203917-add-deleted-to-grants-recipients: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230408000001-rewrite_to_use_current_topics: migrating =======
Executing (2a9275a2-c422-4512-979d-ac519dc0e5f2): START TRANSACTION;
Connection validated successfully
Executing (2a9275a2-c422-4512-979d-ac519dc0e5f2): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230408000001-rewrite_to_use_current_topics.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2a9275a2-c422-4512-979d-ac519dc0e5f2): DROP TABLE IF EXISTS renamed_topics;\n        CREATE TEMP TABLE renamed_topics AS\n        SELECT DISTINCT\n          lt.id legacy_tid,\n          lt."mapsTo" current_tid,\n          lt.name legacy_name,\n          ct.name current_name\n        FROM "Topics" lt\n        JOIN "Topics" ct\n          ON lt."mapsTo" = ct.id\n        WHERE lt.name IN ('Teaching Practices / Teacher-Child Interactions', 'Child Assessment, Development, Screening')\n        ;\n\n        DROP TABLE IF EXISTS updated_legacy_ars;\n        CREATE TEMP TABLE updated_legacy_ars AS\n        WITH updater AS (\n          UPDATE "ActivityReports"\n          SET imported = JSONB_SET(\n            imported,\n            ARRAY['topics'],\n            TO_JSONB(REPLACE(imported->>'topics', legacy_name, current_name))\n            )\n          FROM renamed_topics\n          WHERE imported->>'topics' like '%' || legacy_name  || '%'\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        -- Because the updates only update on the first match but multiple changes may\n        -- be needed for each line, the following logic must be executed once per\n        -- topic replacement beyond the first.\n        WITH additional_round AS (\n        UPDATE "ActivityReports"\n        SET imported = JSONB_SET(\n          imported,\n          ARRAY['topics'],\n          TO_JSONB(REPLACE(imported->>'topics', legacy_name, current_name))\n          )\n        FROM renamed_topics\n        WHERE imported->>'topics' like '%' || legacy_name  || '%'\n        RETURNING\n          id updated_id,\n          legacy_tid\n        )\n        INSERT INTO updated_legacy_ars\n        SELECT * FROM additional_round\n        ;\n\n        DROP TABLE IF EXISTS updated_activity_reports;\n        CREATE TEMP TABLE updated_activity_reports AS\n        WITH updater AS (\n          WITH renames AS (\n            SELECT DISTINCT\n              legacy_name,\n              current_name\n            FROM renamed_topics\n          )\n          UPDATE "ActivityReports"\n          SET topics = ARRAY_REPLACE(topics, legacy_name, current_name)\n          FROM renames\n          WHERE legacy_name = ANY(topics)\n          RETURNING\n            id updated_id,\n            legacy_name\n        ) SELECT * FROM updater\n        ;\n\n        /* We don't actually need to make any of these changes\n        DROP TABLE IF EXISTS updated_objective_topics;\n        CREATE TEMP TABLE updated_objective_topics AS\n        WITH updater AS (\n          UPDATE "ObjectiveTopics"\n          SET "topicId" = current_tid\n          FROM renamed_topics\n          WHERE "topicId" = legacy_tid\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        DROP TABLE IF EXISTS updated_ar_objective_topics;\n        CREATE TEMP TABLE updated_ar_objective_topics AS\n        WITH updater AS (\n          UPDATE "ActivityReportObjectiveTopics"\n          SET "topicId" = current_tid\n          FROM renamed_topics\n          WHERE "topicId" = legacy_tid\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        DROP TABLE IF EXISTS updated_objective_template_topics;\n        CREATE TEMP TABLE updated_objective_template_topics AS\n        WITH updater AS (\n          UPDATE "ObjectiveTemplateTopics"\n          SET "topicId" = current_tid\n          FROM renamed_topics\n          WHERE "topicId" = legacy_tid\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        DROP TABLE IF EXISTS updated_role_topics;\n        CREATE TEMP TABLE updated_role_topics AS\n        WITH updater AS (\n          UPDATE "RoleTopics"\n          SET "topicId" = current_tid\n          FROM renamed_topics\n          WHERE "topicId" = legacy_tid\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        SELECT 'updated_objective_topics' tablename, COUNT(*) updates\n        FROM updated_objective_topics\n        UNION\n        SELECT 'updated_ar_objective_topics', COUNT(*)\n        FROM updated_ar_objective_topics\n        UNION\n        SELECT 'updated_objective_template_topics', COUNT(*)\n        FROM updated_objective_template_topics\n        UNION\n        SELECT 'updated_role_topics', COUNT(*)\n        FROM updated_role_topics\n        UNION\n        SELECT 'updated_activity_reports', COUNT(*)\n        FROM updated_activity_reports\n        UNION\n        SELECT 'updated_legacy_ars', COUNT(*)\n        FROM updated_activity_reports\n        ;\n        */
Executing (2a9275a2-c422-4512-979d-ac519dc0e5f2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230408000001-rewrite_to_use_current_topics: migrated (0.028s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230420193406-add-grant-inactivation: migrating =======
Executing (0714520c-b7a5-42df-8c2d-038a5cdc4b27): START TRANSACTION;
Connection validated successfully
Executing (0714520c-b7a5-42df-8c2d-038a5cdc4b27): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230420193406-add-grant-inactivation.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0714520c-b7a5-42df-8c2d-038a5cdc4b27): ALTER TABLE "public"."Grants" ADD COLUMN "inactivationDate" TIMESTAMP WITH TIME ZONE;
Executing (0714520c-b7a5-42df-8c2d-038a5cdc4b27): CREATE TYPE "public"."enum_Grants_inactivationReason" AS ENUM('Replaced', 'Terminated', 'Relinquished', 'Unknown');ALTER TABLE "public"."Grants" ADD COLUMN "inactivationReason" "public"."enum_Grants_inactivationReason";
Executing (0714520c-b7a5-42df-8c2d-038a5cdc4b27): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230420193406-add-grant-inactivation: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230424000000-correct-model-db-misalignment: migrating =======
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): START TRANSACTION;
Connection validated successfully
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230424000000-correct-model-db-misalignment.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): CREATE OR REPLACE FUNCTION "ZAFCreateALTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            RAISE NOTICE 'Create Audit Log Table: %','ZAL' || t_name;\n            EXECUTE format($sql$\n                CREATE TABLE IF NOT EXISTS %I (\n                  id BIGSERIAL,\n                  data_id bigint NOT NULL,\n                  dml_type dml_type NOT NULL,\n                  old_row_data jsonb,\n                  new_row_data jsonb,\n                  dml_timestamp timestamp with time zone NOT NULL,\n                  dml_by bigint NOT NULL,\n                  dml_as bigint NOT NULL,\n                  dml_txid uuid NOT NULL,\n                  session_sig TEXT NULL,\n                  descriptor_id INT,\n                  PRIMARY KEY (id)\n                  );$sql$,\n                  'ZAL' || t_name);\n          END\n          $func$;
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): DO $$\n        DECLARE\n          obj record;\n        BEGIN\n          PERFORM "ZAFSetTriggerState"(null, null, null, 'DISABLE');\n\n          FOR obj IN\n            SELECT table_name as "tableName"\n            FROM information_schema.tables\n            WHERE table_schema='public'\n              AND table_type='BASE TABLE'\n              AND table_name != 'SequelizeMeta'\n              AND table_name != 'RequestErrors'\n              AND table_name LIKE 'ZAL%'\n              AND table_name NOT LIKE 'ZALDDL'\n          LOOP\n            RAISE INFO 'Audit Tables: Update audit table on "%"', obj."tableName";\n\n            -- Fix type of dml_by - was int, should be bigint\n            EXECUTE format($sql$\n              ALTER TABLE %I\n              ALTER COLUMN "dml_timestamp" TYPE timestamp with time zone $sql$,\n              obj."tableName"::text);\n\n          END LOOP;\n\n          PERFORM "ZAFSetTriggerState"(null, null, null, 'ENABLE');\n        END$$;
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): ALTER TABLE "ActivityReportGoals" ALTER COLUMN "endDate" DROP NOT NULL;ALTER TABLE "ActivityReportGoals" ALTER COLUMN "endDate" SET DEFAULT NULL;ALTER TABLE "ActivityReportGoals" ALTER COLUMN "endDate" TYPE DATE;
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTemplateRoles');
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): SELECT "ZAFRemoveAuditingOnTable"('DisconnectedGoals');
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): DROP TABLE IF EXISTS "ZALObjectiveTemplateRoles";
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): DROP TABLE IF EXISTS "ZALDisconnectedGoals";
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): DROP TABLE IF EXISTS "ObjectiveTemplateRoles";
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): DROP TABLE IF EXISTS "DisconnectedGoals";
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): DROP TABLE IF EXISTS "ZALTopicGoals";
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): DROP TABLE IF EXISTS "ZALGrantGoals";
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (69bf5f16-cecb-4ab1-b674-5aebbf4be9ea): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230424000000-correct-model-db-misalignment: migrated (0.731s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230425094028-resource-title: migrating =======
Executing (885aca0d-2593-4b7f-878b-ea2ff95c4cc0): START TRANSACTION;
Connection validated successfully
Executing (885aca0d-2593-4b7f-878b-ea2ff95c4cc0): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230425094028-resource-title.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (885aca0d-2593-4b7f-878b-ea2ff95c4cc0): ALTER TABLE "public"."Resources" ADD COLUMN "title" TEXT DEFAULT NULL;
Executing (885aca0d-2593-4b7f-878b-ea2ff95c4cc0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230425094028-resource-title: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230505125903-goal-source: migrating =======
Executing (72773040-2975-4be7-8355-619c750827a5): START TRANSACTION;
Connection validated successfully
Executing (72773040-2975-4be7-8355-619c750827a5): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230505125903-goal-source.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (72773040-2975-4be7-8355-619c750827a5): CREATE TYPE "public"."enum_Goals_source" AS ENUM('Federal monitoring issues, including CLASS and RANs', 'RTTAPA development', 'Recipient request', 'Regional office priority', 'Training event');ALTER TABLE "public"."Goals" ADD COLUMN "source" "public"."enum_Goals_source";
Executing (72773040-2975-4be7-8355-619c750827a5): CREATE TYPE "public"."enum_ActivityReportGoals_source" AS ENUM('Federal monitoring issues, including CLASS and RANs', 'RTTAPA development', 'Recipient request', 'Regional office priority', 'Training event');ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "source" "public"."enum_ActivityReportGoals_source";
Executing (72773040-2975-4be7-8355-619c750827a5): DO $$ BEGIN\n        ALTER TYPE "enum_Users_flags" ADD VALUE 'goal_source';\n      EXCEPTION\n        WHEN duplicate_object THEN null;\n      END $$;
Executing (72773040-2975-4be7-8355-619c750827a5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230505125903-goal-source: migrated (0.042s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230510202629-remove-manager-and-created-notes-from-approved-reports: migrating =======
Executing (008f4050-8900-4461-9a9f-d635479aa373): START TRANSACTION;
Connection validated successfully
Executing (008f4050-8900-4461-9a9f-d635479aa373): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230510202629-remove-manager-and-created-notes-from-approved-reports.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (008f4050-8900-4461-9a9f-d635479aa373): -- set the additional notes to empty string\n      UPDATE "ActivityReports" SET "additionalNotes" = '' WHERE "calculatedStatus" = 'approved';\n\n       -- set the manager notes to empty string\n      UPDATE "ActivityReportApprovers" SET "note" = '' WHERE "activityReportId" IN (\n        SELECT "id" FROM "ActivityReports" WHERE "calculatedStatus" = 'approved'\n      );
Executing (008f4050-8900-4461-9a9f-d635479aa373): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230510202629-remove-manager-and-created-notes-from-approved-reports: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230515000000-add-foreign-key-indices: migrating =======
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): START TRANSACTION;
Connection validated successfully
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "activity_report_goals_goal_id" ON "ActivityReportGoals" ("goalId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "activity_report_collaborators_activity_report_id" ON "ActivityReportCollaborators" ("activityReportId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "activity_report_objectives_activity_report_id_objective_id" ON "ActivityReportObjectives" ("activityReportId", "objectiveId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "activity_report_objectives_objective_id" ON "ActivityReportObjectives" ("objectiveId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "activity_report_objective_files_file_id" ON "ActivityReportObjectiveFiles" ("fileId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objectives_goal_id" ON "Objectives" ("goalId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objectives_objective_template_id" ON "Objectives" ("objectiveTemplateId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objective_files_objective_id_file_id" ON "ObjectiveFiles" ("objectiveId", "fileId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objective_files_file_id" ON "ObjectiveFiles" ("fileId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objective_resources_objective_id" ON "ObjectiveResources" ("objectiveId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objective_topics_objective_id" ON "ObjectiveTopics" ("objectiveId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objective_template_files_objective_template_id_file_id" ON "ObjectiveTemplateFiles" ("objectiveTemplateId", "fileId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objective_template_files_file_id" ON "ObjectiveTemplateFiles" ("fileId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objective_template_resources_objective_template_id" ON "ObjectiveTemplateResources" ("objectiveTemplateId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "objective_template_topics_objective_template_id" ON "ObjectiveTemplateTopics" ("objectiveTemplateId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "goals_grant_id" ON "Goals" ("grantId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "goals_goal_template_id" ON "Goals" ("goalTemplateId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "goal_template_objective_templates_goal_template_id_objective_template_id" ON "GoalTemplateObjectiveTemplates" ("goalTemplateId", "objectiveTemplateId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "goal_template_objective_templates_objective_template_id" ON "GoalTemplateObjectiveTemplates" ("objectiveTemplateId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "group_grants_group_id_grant_id" ON "GroupGrants" ("groupId", "grantId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "group_grants_grant_id" ON "GroupGrants" ("grantId")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "activity_reports_start_date" ON "ActivityReports" ("startDate")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "activity_reports_updated_at" ON "ActivityReports" ("updatedAt")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "activity_reports_approved_at" ON "ActivityReports" ("approvedAt")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "activity_reports_created_at" ON "ActivityReports" ("createdAt")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): CREATE INDEX "goals_created_at" ON "Goals" ("createdAt")
Executing (8f6f80d9-eac6-45b7-8a22-30db8d180a75): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230515000000-add-foreign-key-indices: migrated (0.107s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230515094028-training-reports: migrating =======
Executing (8df5a0e7-02ac-478e-94f9-9f11f672ccc6): START TRANSACTION;
Connection validated successfully
Executing (8df5a0e7-02ac-478e-94f9-9f11f672ccc6): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230515094028-training-reports.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8df5a0e7-02ac-478e-94f9-9f11f672ccc6): DO $$ BEGIN\n        ALTER TYPE "enum_Users_flags" ADD VALUE 'training_reports';\n        EXCEPTION\n        WHEN duplicate_object THEN null;\n        END $$;
Executing (default): INSERT INTO "Scopes" ("id","name","description") VALUES (7,'READ_WRITE_TRAINING_REPORTS','Can view and create/edit training reports in the region'),(8,'READ_TRAINING_REPORTS','Can view training reports in the region') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (8df5a0e7-02ac-478e-94f9-9f11f672ccc6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230515094028-training-reports: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230516155334-event-and-session-report: migrating =======
Executing (c31e0a57-352f-4a7a-8db2-255bbaa5be82): START TRANSACTION;
Connection validated successfully
Executing (c31e0a57-352f-4a7a-8db2-255bbaa5be82): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230516155334-event-and-session-report.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c31e0a57-352f-4a7a-8db2-255bbaa5be82): CREATE TABLE IF NOT EXISTS "EventReportPilots" (\n          id SERIAL PRIMARY KEY,\n          "ownerId" INTEGER NOT NULL,\n          "pocId" INTEGER NULL,\n          "collaboratorIds" INTEGER[] NOT NULL,\n          "regionId" INTEGER NOT NULL,\n          "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          data JSONB NOT NULL\n        );
Executing (c31e0a57-352f-4a7a-8db2-255bbaa5be82): CREATE TABLE IF NOT EXISTS "SessionReportPilots" (\n          id SERIAL PRIMARY KEY,\n          "eventId" INTEGER NOT NULL,\n          data JSONB NOT NULL,\n          "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY ("eventId") REFERENCES "EventReportPilots" (id)\n        );
Executing (c31e0a57-352f-4a7a-8db2-255bbaa5be82): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230516155334-event-and-session-report: migrated (0.063s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230519174017-add-unique-group-name: migrating =======
Executing (b220cc3f-9dd5-4ad8-b607-39f7cd65748c): START TRANSACTION;
Connection validated successfully
Executing (b220cc3f-9dd5-4ad8-b607-39f7cd65748c): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230519174017-add-unique-group-name.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b220cc3f-9dd5-4ad8-b607-39f7cd65748c): -- append the id to all groups that don't have distinct names\n        UPDATE "Groups" SET "name" = "name" || "id" WHERE "name" IN (\n            SELECT "name" FROM "Groups" GROUP BY ("name") HAVING COUNT(id) > 1\n        );\n        \n        -- add unique constraint\n        ALTER TABLE "Groups"\n        ADD CONSTRAINT "Groups_name_key" UNIQUE (name);
Executing (b220cc3f-9dd5-4ad8-b607-39f7cd65748c): ALTER TABLE "public"."Groups" ADD COLUMN "isPublic" BOOLEAN;
Executing (b220cc3f-9dd5-4ad8-b607-39f7cd65748c): UPDATE "Groups"\n        SET "isPublic" = false;
Executing (b220cc3f-9dd5-4ad8-b607-39f7cd65748c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230519174017-add-unique-group-name: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230601204020-add-tr-report-collab-permission: migrating =======
Executing (7d07acaf-c14f-4d37-a902-3b2279a53ea6): START TRANSACTION;
Connection validated successfully
Executing (7d07acaf-c14f-4d37-a902-3b2279a53ea6): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230601204020-add-tr-report-collab-permission.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): INSERT INTO "Scopes" ("id","name","description") VALUES (9,'COLLABORATOR_TRAINING_REPORTS','Can collaborate on training reports in the region') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (7d07acaf-c14f-4d37-a902-3b2279a53ea6): ALTER TABLE "public"."EventReportPilots" ADD COLUMN "imported" JSONB;
Executing (7d07acaf-c14f-4d37-a902-3b2279a53ea6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230601204020-add-tr-report-collab-permission: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230602174017-add-resource-metadata-column: migrating =======
Executing (0ba8b59e-0ccf-4dba-a17b-433af2c9e07b): START TRANSACTION;
Connection validated successfully
Executing (0ba8b59e-0ccf-4dba-a17b-433af2c9e07b): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230602174017-add-resource-metadata-column.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0ba8b59e-0ccf-4dba-a17b-433af2c9e07b): ALTER TABLE "public"."Resources" ADD COLUMN "metadata" JSONB;
Executing (0ba8b59e-0ccf-4dba-a17b-433af2c9e07b): ALTER TABLE "public"."Resources" ADD COLUMN "metadataUpdatedAt" TIMESTAMP WITH TIME ZONE;
Executing (0ba8b59e-0ccf-4dba-a17b-433af2c9e07b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230602174017-add-resource-metadata-column: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230614144017-program-personnel: migrating =======
Executing (fae9718b-4b7c-4cbe-94fd-273f060fb6aa): START TRANSACTION;
Connection validated successfully
Executing (fae9718b-4b7c-4cbe-94fd-273f060fb6aa): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230614144017-program-personnel.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "ProgramPersonnel" ("id"   SERIAL , "grantId" INTEGER NOT NULL, "programId" INTEGER NOT NULL, "role" VARCHAR(255) NOT NULL, "active" BOOLEAN NOT NULL, "prefix" VARCHAR(255), "firstName" VARCHAR(255), "lastName" VARCHAR(255), "suffix" VARCHAR(255), "title" VARCHAR(255), "email" VARCHAR(255), "effectiveDate" TIMESTAMP WITH TIME ZONE, "originalPersonnelId" INTEGER, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (fae9718b-4b7c-4cbe-94fd-273f060fb6aa): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230614144017-program-personnel: migrated (0.045s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230614164742-create-session-report-pilot-files: migrating =======
Executing (6b0b0922-e5cc-4507-b4f6-bf31d89c4115): START TRANSACTION;
Connection validated successfully
Executing (6b0b0922-e5cc-4507-b4f6-bf31d89c4115): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230614164742-create-session-report-pilot-files.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6b0b0922-e5cc-4507-b4f6-bf31d89c4115): CREATE TABLE IF NOT EXISTS "SessionReportPilotFiles" ("id"   SERIAL , "sessionReportPilotId" INTEGER NOT NULL REFERENCES "SessionReportPilots" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (6b0b0922-e5cc-4507-b4f6-bf31d89c4115): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230614164742-create-session-report-pilot-files: migrated (0.047s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230615000000-add-maintenance-logs: migrating =======
Executing (1933f23d-277c-4953-a8f4-9a1acb3da47b): START TRANSACTION;
Connection validated successfully
Executing (1933f23d-277c-4953-a8f4-9a1acb3da47b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230615000000-add-maintenance-logs.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1933f23d-277c-4953-a8f4-9a1acb3da47b): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_MaintenanceLogs_category' GROUP BY 1
Executing (1933f23d-277c-4953-a8f4-9a1acb3da47b): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_MaintenanceLogs_type' GROUP BY 1
Executing (1933f23d-277c-4953-a8f4-9a1acb3da47b): CREATE TYPE "public"."enum_MaintenanceLogs_category" AS ENUM('DB', 'MAINTENANCE', 'IMPORT');
Executing (1933f23d-277c-4953-a8f4-9a1acb3da47b): CREATE TYPE "public"."enum_MaintenanceLogs_type" AS ENUM('VACUUM ANALYZE', 'REINDEX', 'VACUUM TABLES', 'REINDEX TABLES', 'DAILY DB MAINTENANCE', 'CLEAR MAINTENANCE LOGS', 'IMPORT_DOWNLOAD', 'IMPORT_PROCESS');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (1933f23d-277c-4953-a8f4-9a1acb3da47b): CREATE TABLE IF NOT EXISTS "MaintenanceLogs" ("id"   BIGSERIAL , "category" "public"."enum_MaintenanceLogs_category" NOT NULL, "type" "public"."enum_MaintenanceLogs_type" NOT NULL, "data" JSON NOT NULL, "isSuccessful" BOOLEAN, "triggeredById" BIGINT REFERENCES "MaintenanceLogs" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (1933f23d-277c-4953-a8f4-9a1acb3da47b): SELECT "ZAFRemoveAuditingOnTable"('MaintenanceLogs');
Executing (1933f23d-277c-4953-a8f4-9a1acb3da47b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230615000000-add-maintenance-logs: migrated (0.087s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230629000000-fix-some-column-issues: migrating =======
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): START TRANSACTION;
Connection validated successfully
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230629000000-fix-some-column-issues.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): SELECT table_name, column_name, data_type, is_nullable\n        FROM information_schema.columns\n        WHERE table_schema = 'public'\n        AND table_name like 'ZAL%'\n        AND column_name = 'dml_as'\n        AND is_nullable = 'YES'\n        ORDER BY table_name, ordinal_position;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityRecipients"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityRecipients"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportApprovers"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportApprovers"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportCollaborators"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportCollaborators"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportGoalFieldResponses"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportGoalFieldResponses"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportGoalResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportGoalResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportGoals"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportGoals"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportObjectiveFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportObjectiveFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportObjectiveResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportObjectiveResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportObjectiveTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportObjectiveTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportObjectives"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportObjectives"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReportResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALActivityReports"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReports"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALCollaboratorRoles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALCollaboratorRoles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGoalFieldResponses"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalFieldResponses"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGoalResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGoalTemplateFieldPrompts"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalTemplateFieldPrompts"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGoalTemplateObjectiveTemplates"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalTemplateObjectiveTemplates"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGoalTemplateResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalTemplateResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGoalTemplates"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalTemplates"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGoals"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoals"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGrants"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGrants"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGroupGrants"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGroupGrants"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALGroups"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGroups"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALMailerLogs"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALMailerLogs"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALNextStepResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALNextStepResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALNextSteps"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALNextSteps"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALObjectiveFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALObjectiveResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALObjectiveTemplateFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTemplateFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALObjectiveTemplateResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTemplateResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALObjectiveTemplateTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTemplateTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALObjectiveTemplates"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTemplates"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALObjectiveTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALObjectives"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectives"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALOtherEntities"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALOtherEntities"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALPermissions"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALPermissions"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALPrograms"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALPrograms"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALRecipients"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRecipients"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALRegions"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRegions"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALRoleTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRoleTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALRoles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRoles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALRttapaPilots"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRttapaPilots"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALScopes"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALScopes"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALSiteAlerts"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALSiteAlerts"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALUserRoles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUserRoles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALUserSettingOverrides"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUserSettingOverrides"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALUserSettings"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUserSettings"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALUserValidationStatus"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUserValidationStatus"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALUsers"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUsers"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALZADescriptor"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALZADescriptor"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): UPDATE "ZALZAFilter"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALZAFilter"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): ALTER TABLE "ActivityReports"\n        ALTER COLUMN "regionId" SET NOT NULL;\n        ALTER TABLE "CollaboratorRoles"\n        ALTER COLUMN "roleId" SET NOT NULL;\n        ALTER TABLE "Groups"\n        ALTER COLUMN "name" SET NOT NULL;\n        ALTER TABLE "Recipients"\n        ALTER COLUMN "name" SET NOT NULL;\n        ALTER TABLE "UserValidationStatus"\n        ALTER COLUMN "token" SET NOT NULL;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): ALTER TYPE "enum_GoalTemplateResources_sourceFields"\n        RENAME TO "enum_GoalTemplateResources_sourceFields_OLD";\n\n        CREATE TYPE "enum_GoalTemplateResources_sourceFields" AS ENUM (\n          'name',\n          'resource'\n        );\n\n        ALTER TABLE "GoalTemplateResources"\n        RENAME COLUMN "sourceFields" TO "old_sourceFields";\n\n        ALTER TABLE "GoalTemplateResources"\n        ADD COLUMN "sourceFields" "enum_GoalTemplateResources_sourceFields"[];\n\n        UPDATE "GoalTemplateResources"\n        SET "sourceFields" = ARRAY(SELECT UNNEST("old_sourceFields")::TEXT::"enum_GoalTemplateResources_sourceFields");\n\n\n        ALTER TABLE "GoalTemplateResources"\n        DROP COLUMN "old_sourceFields";\n\n        DROP TYPE IF EXISTS "enum_GoalTemplateResources_sourceFields_OLD"
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): ALTER TABLE "ActivityReportGoals"\n        ALTER COLUMN "isActivelyEdited" SET DEFAULT false;\n        ALTER TABLE "Goals"\n        ALTER COLUMN "onApprovedAR" SET DEFAULT false;\n        ALTER TABLE "Objectives"\n        ALTER COLUMN "onApprovedAR" SET DEFAULT false;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): ALTER TABLE "ActivityReports"\n        ALTER COLUMN "version" SET DEFAULT 2;
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (00c55c22-277d-4e0c-92ba-427e1a80cdfc): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230629000000-fix-some-column-issues: migrated (0.309s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230629144637-add-national-centers: migrating =======
Executing (3d9504f3-63bf-41fa-8f9b-3d718568289e): START TRANSACTION;
Connection validated successfully
Executing (3d9504f3-63bf-41fa-8f9b-3d718568289e): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230629144637-add-national-centers.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3d9504f3-63bf-41fa-8f9b-3d718568289e): CREATE TABLE IF NOT EXISTS "NationalCenters" ("id"   BIGSERIAL , "name" TEXT NOT NULL UNIQUE, "mapsTo" INTEGER REFERENCES "NationalCenters" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (3d9504f3-63bf-41fa-8f9b-3d718568289e): INSERT INTO "NationalCenters" ("name","createdAt","updatedAt") VALUES ('DTL','2025-03-28 21:03:28.639 +00:00','2025-03-28 21:03:28.639 +00:00'),('HBHS','2025-03-28 21:03:28.639 +00:00','2025-03-28 21:03:28.639 +00:00'),('PFCE','2025-03-28 21:03:28.639 +00:00','2025-03-28 21:03:28.639 +00:00'),('PFMO','2025-03-28 21:03:28.639 +00:00','2025-03-28 21:03:28.639 +00:00');
Executing (3d9504f3-63bf-41fa-8f9b-3d718568289e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230629144637-add-national-centers: migrated (0.057s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230717144637-add-grantee-name: migrating =======
Executing (e2a913a1-8233-4700-a240-1f46fdd68d56): START TRANSACTION;
Connection validated successfully
Executing (e2a913a1-8233-4700-a240-1f46fdd68d56): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230717144637-add-grantee-name.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e2a913a1-8233-4700-a240-1f46fdd68d56): ALTER TABLE "public"."Grants" ADD COLUMN "granteeName" VARCHAR(255);
Executing (e2a913a1-8233-4700-a240-1f46fdd68d56): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230717144637-add-grantee-name: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230720183058-alter-poc-col: migrating =======
Executing (6d53cdb7-a94d-46f3-88aa-37ba21b2b255): START TRANSACTION;
Connection validated successfully
Executing (6d53cdb7-a94d-46f3-88aa-37ba21b2b255): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230720183058-alter-poc-col.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6d53cdb7-a94d-46f3-88aa-37ba21b2b255): ALTER TABLE "public"."EventReportPilots" DROP COLUMN "pocId";
Executing (6d53cdb7-a94d-46f3-88aa-37ba21b2b255): ALTER TABLE "public"."EventReportPilots" ADD COLUMN "pocIds" INTEGER[];
Executing (6d53cdb7-a94d-46f3-88aa-37ba21b2b255): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230720183058-alter-poc-col: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230724141234-update-tr-collaborator-scope-name: migrating =======
Executing (b4c257e6-6685-489d-a2fe-ee225e246c76): START TRANSACTION;
Connection validated successfully
Executing (b4c257e6-6685-489d-a2fe-ee225e246c76): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230724141234-update-tr-collaborator-scope-name.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b4c257e6-6685-489d-a2fe-ee225e246c76): UPDATE "Scopes" \n        SET "name" = 'POC_TRAINING_REPORTS', "description" = 'Can create training reports in the region' \n      WHERE "id" = 9;
Executing (b4c257e6-6685-489d-a2fe-ee225e246c76): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230724141234-update-tr-collaborator-scope-name: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230803093912-update-goal-on-approved-ar-value: migrating =======
Executing (b8562912-1c4f-4862-96cc-632496b0cb45): START TRANSACTION;
Connection validated successfully
Executing (b8562912-1c4f-4862-96cc-632496b0cb45): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230803093912-update-goal-on-approved-ar-value.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b8562912-1c4f-4862-96cc-632496b0cb45): UPDATE "Goals"\n        SET "onApprovedAR" = NOT "onApprovedAR"\n        WHERE "id" IN (\n        SELECT\n            g.id\n        FROM "Goals" g\n        JOIN "ActivityReportGoals" ar\n        ON g.id = ar."goalId"\n        JOIN "ActivityReports" a\n        ON ar."activityReportId" = a.id\n        group by 1\n        having g."onApprovedAR" != ('approved' = ANY (array_agg(DISTINCT a."calculatedStatus"::text)))\n      )
Executing (b8562912-1c4f-4862-96cc-632496b0cb45): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230803093912-update-goal-on-approved-ar-value: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230822192328-internal-goal-duplicate-cleanup: migrating =======
Executing (ce2fc380-a61b-4d58-a421-df388d7b801e): START TRANSACTION;
Connection validated successfully
Executing (ce2fc380-a61b-4d58-a421-df388d7b801e): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ce2fc380-a61b-4d58-a421-df388d7b801e): DROP TABLE IF EXISTS "PreCountStatsByRegion";\n        CREATE TEMP TABLE "PreCountStatsByRegion" AS (\n            SELECT\n                gr."regionId",\n                COUNT(DISTINCT g."id") "GoalsTotal",\n                COUNT(DISTINCT grr."id") "GoalResourcesTotal",\n                COUNT(DISTINCT gfr."id") "GoalFieldResponsesTotal",\n                COUNT(DISTINCT arg."id") "ActivityReportGoalsTotal",\n                COUNT(DISTINCT argr."id") "ActivityReportGoalResourcesTotal",\n                COUNT(DISTINCT argfr."id") "ActivityReportGoalFieldResponsesTotal",\n                COUNT(DISTINCT oj."id") "ObjectivesTotal",\n                COUNT(DISTINCT ojf."id") "ObjectiveFilesTotal",\n                COUNT(DISTINCT ojr."id") "ObjectiveResourcesTotal",\n                COUNT(DISTINCT ojt."id") "ObjectiveTopicsTotal",\n                COUNT(DISTINCT aro."id") "ActivityReportObjectivesTotal",\n                COUNT(DISTINCT arof."id") "ActivityReportObjectiveFilesTotal",\n                COUNT(DISTINCT aror."id") "ActivityReportObjectiveResourcesTotal",\n                COUNT(DISTINCT arot."id") "ActivityReportObjectiveTopicsTotal"\n            FROM "Grants" gr\n            FULL OUTER JOIN "Goals" g ON gr."id" = g."grantId"\n            FULL OUTER JOIN "GoalResources" grr ON g."id" = grr."goalId"\n            FULL OUTER JOIN "GoalFieldResponses" gfr ON g."id" = gfr."goalId"\n            FULL OUTER JOIN "ActivityReportGoals" arg ON g."id" = arg."goalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argr ON arg."id" = argr."activityReportGoalId"\n            FULL OUTER JOIN "ActivityReportGoalFieldResponses" argfr ON arg."id" = argfr."activityReportGoalId"\n            FULL OUTER JOIN "Objectives" oj ON g."id" = oj."goalId"\n            FULL OUTER JOIN "ObjectiveFiles" ojf ON oj."id" = ojf."objectiveId"\n            FULL OUTER JOIN "ObjectiveResources" ojr ON oj."id" = ojr."objectiveId"\n            FULL OUTER JOIN "ObjectiveTopics" ojt ON oj."id" = ojt."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectives" aro ON oj."id" = aro."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveFiles" arof ON aro."id" = arof."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveResources" aror ON aro."id" = aror."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveTopics" arot ON aro."id" = arot."activityReportObjectiveId"\n            GROUP BY gr."regionId"\n        );\n        INSERT INTO "PreCountStatsByRegion"\n        SELECT\n            -1 "regionId",\n            SUM("GoalsTotal"),\n            SUM("GoalResourcesTotal"),\n            SUM("GoalFieldResponsesTotal"),\n            SUM("ActivityReportGoalsTotal"),\n            SUM("ActivityReportGoalResourcesTotal"),\n            SUM("ActivityReportGoalFieldResponsesTotal"),\n            SUM("ObjectivesTotal"),\n            SUM("ObjectiveFilesTotal"),\n            SUM("ObjectiveResourcesTotal"),\n            SUM("ObjectiveTopicsTotal"),\n            SUM("ActivityReportObjectivesTotal"),\n            SUM("ActivityReportObjectiveFilesTotal"),\n            SUM("ActivityReportObjectiveResourcesTotal"),\n            SUM("ActivityReportObjectiveTopicsTotal")\n        FROM "PreCountStatsByRegion";\n        SELECT * FROM "PreCountStatsByRegion";\n\n        DROP TABLE IF EXISTS "AllSmashedGoals";\n        CREATE TEMP TABLE "AllSmashedGoals" AS (\n            SELECT\n                g.id "goalId",\n                REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(\n                REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(\n                        LOWER(g.name),\n                        'grantee(s?)', 'recipient\1', 'gi'),\n                        '\bDLLs?\b', 'dual language learners', 'gi'),\n                        '\bEHS?\b', 'early head start', 'gi'),\n                        '\bELOF?\b', 'head start early learning outcomes framework', 'gi'),\n                        '\bFEI?\b', 'full enrollment initiative', 'gi'),\n                        '\bHS\b', 'head start', 'gi'),\n                        '\bHSELOF\b', 'head start early learning outcomes framework', 'gi'),\n                        '\bOHS\b', 'office of head start', 'gi'),\n                        '\bPBC\b', 'practice based coaching', 'gi'),\n                        '\bPD\b', 'professional development', 'gi'),\n                        '\bSR\b', 'school readiness', 'gi'),\n                        '\bDLL(s?)\b', 'recipient\1', 'gi'),\n                        '[^a-z0-9]', '', 'gi'),\n                        '[ \t\r\n]', '', 'gi') "smashedName",\n                TRIM(g.name) "cleanName"\n            FROM "Goals" g\n        );\n        SELECT * FROM "AllSmashedGoals";\n\n        DROP TABLE IF EXISTS "SmashedGoals";\n        CREATE TEMP TABLE "SmashedGoals" AS (\n            SELECT\n                asg1."goalId",\n                asg1."smashedName",\n                REGEXP_REPLACE((ARRAY_AGG(asg2."cleanName" ORDER BY asg2."goalId" DESC))[1], '^\s+|\s+$', '', 'g') "cleanName"\n            FROM "AllSmashedGoals" asg1\n            LEFT JOIN "AllSmashedGoals" asg2\n            ON MD5(asg1."smashedName") = MD5(asg2."smashedName")\n            GROUP BY 1,2\n        );\n        SELECT * FROM "SmashedGoals";\n\n        DROP TABLE IF EXISTS "DupGoalsOnARs";\n        CREATE TEMP TABLE "DupGoalsOnARs" AS (\n            SELECT\n            array_remove(ARRAY_AGG(DISTINCT arg."activityReportId"), NULL) "activityReportIds",\n            g."grantId",\n            MD5(TRIM(sg."smashedName")) "goalHash",\n            ARRAY_AGG(DISTINCT g.id ORDER BY g.id) "goalIds",\n            array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)) "toRemoveGoals",\n            MIN(g.id) "toUpdateGoal",\n            COUNT(DISTINCT g.id) "goalCnt",\n            g."status" = 'Closed' "statusClosed"\n            FROM "Goals" g\n            JOIN "SmashedGoals" sg\n            ON g.id = sg."goalId"\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."goalId" = g.id\n            LEFT JOIN "GoalTemplates" gt\n            ON g."goalTemplateId" = gt.id\n            GROUP BY 2,3,8\n            HAVING ARRAY_LENGTH(array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)), 1) > 0\n            ORDER BY 5 DESC\n        );\n        SELECT * FROM "DupGoalsOnARs";\n\n        DROP TABLE IF EXISTS "AdjacentGoals";\n        CREATE TEMP TABLE "AdjacentGoals" AS (\n            SELECT\n            array_remove(ARRAY_AGG(DISTINCT arg."activityReportId"), NULL) "activityReportIds",\n            g."grantId",\n            MD5(TRIM(sg."smashedName")) "goalHash",\n            ARRAY_AGG(DISTINCT g.id ORDER BY g.id) "goalIds",\n            array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)) "toRemoveGoals",\n            MIN(g.id) "toUpdateGoal",\n            COUNT(DISTINCT g.id) "goalCnt",\n            g."status" = 'Closed' "statusClosed"\n            FROM "Goals" g\n            LEFT JOIN ("DupGoalsOnARs"\n                CROSS JOIN UNNEST("DupGoalsOnARs"."goalIds") u("goalId")\n                ) dgoa\n            ON g.id = dgoa."goalId"\n            JOIN "SmashedGoals" sg\n            ON g.id = sg."goalId"\n            AND MD5(g.name) != MD5(sg."cleanName")\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."goalId" = g.id\n            LEFT JOIN "GoalTemplates" gt\n            ON g."goalTemplateId" = gt.id\n            WHERE dgoa."goalId" IS NULL\n            GROUP BY 2,3,8\n            HAVING ARRAY_LENGTH(array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)), 1) = 0\n            ORDER BY 5 DESC\n        );\n        SELECT * FROM "AdjacentGoals";\n\n        DROP TABLE IF EXISTS "GoalsToModify";\n        CREATE TEMP TABLE "GoalsToModify" AS (\n            SELECT DISTINCT\n                g2."grantId",\n                TRIM(g."cleanName") "name",\n                dgoa."goalHash",\n                CASE\n                    WHEN 'Closed' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Closed' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Closed'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(g."status"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Not Started'\n                    WHEN 'Draft' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Draft' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Draft'\n                    ELSE COALESCE((ARRAY_AGG(g2."status"))[1], 'Not Started')\n                END "status",\n                (ARRAY_AGG(COALESCE(g2.timeframe, g.timeframe)))[1] timeframe,\n                BOOL_OR(g2."isFromSmartsheetTtaPlan" OR g."isFromSmartsheetTtaPlan") "isFromSmartsheetTtaPlan",\n                MIN(LEAST(g2."createdAt",g."createdAt")) "createdAt",\n                MAX(GREATEST(g2."updatedAt", g."updatedAt")) "updatedAt",\n                g2."closeSuspendReason",\n                g2."closeSuspendContext",\n                MAX(GREATEST(g2."endDate", g."endDate")) "endDate",\n                CASE\n                    WHEN 'Closed' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Closed' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Closed'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Not Started'\n                    WHEN 'Draft' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Draft' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Draft'\n                    ELSE COALESCE((ARRAY_AGG(g2."previousStatus"))[1], 'Not Started')\n                END "previousStatus",\n                MIN(g."goalTemplateId") "goalTemplateId",\n                BOOL_OR(COALESCE(g2."onApprovedAR", FALSE) OR g."onApprovedAR") "onApprovedAR",\n                MIN(LEAST(g2."firstNotStartedAt", g."firstNotStartedAt")) "firstNotStartedAt",\n                MAX(GREATEST(g2."lastNotStartedAt", g."lastNotStartedAt")) "lastNotStartedAt",\n                MIN(LEAST(g2."firstInProgressAt", g."firstInProgressAt")) "firstInProgressAt",\n                MAX(GREATEST(g2."lastInProgressAt", g."lastInProgressAt")) "lastInProgressAt",\n                MIN(LEAST(g2."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt")) "firstCeasedSuspendedAt",\n                MAX(GREATEST(g2."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt")) "lastCeasedSuspendedAt",\n                MIN(LEAST(g2."firstClosedAt", g."firstClosedAt")) "firstClosedAt",\n                MAX(GREATEST(g2."lastClosedAt", g."lastClosedAt")) "lastClosedAt",\n                MIN(LEAST(g2."firstCompletedAt", g."firstCompletedAt")) "firstCompletedAt",\n                MAX(GREATEST(g2."lastCompletedAt", g."lastCompletedAt")) "lastCompletedAt",\n                CASE\n                    WHEN 'imported' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'imported' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'imported'\n                    WHEN 'rtr' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'rtr' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'rtr'\n                    WHEN 'activityReport' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'activityReport' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'activityReport'\n                END "createdVia",\n                CASE\n                    WHEN 'Yes' = ANY(ARRAY_AGG(g."isRttapa"))\n                    OR 'Yes' = ANY(ARRAY_AGG(g2."isRttapa"))\n                    THEN 'Yes'\n                    WHEN 'No' = ANY(ARRAY_AGG(g."isRttapa"))\n                    OR 'No' = ANY(ARRAY_AGG(g2."isRttapa"))\n                    THEN 'No'\n                END "isRttapa",\n                BOOL_OR(COALESCE(g2."onAR", FALSE) OR g."onAR") "onAR",\n                array_remove(ARRAY_AGG(DISTINCT "g".id ORDER by "g".id), MIN("g2".id)) "toRemove",\n                MIN("g2".id) "toUpdate"\n            FROM ("Goals"\n                JOIN "SmashedGoals" sg\n                ON "Goals".id = sg."goalId"\n            ) g\n            JOIN "DupGoalsOnARs" dgoa\n            ON g.id = ANY(dgoa."toRemoveGoals")\n            AND g.id != dgoa."toUpdateGoal"\n            JOIN ("Goals"\n                JOIN "SmashedGoals" sg\n                ON "Goals".id = sg."goalId"\n            ) g2\n            ON g2.id = dgoa."toUpdateGoal"\n            AND g."grantId" = dgoa."grantId"\n            AND MD5(TRIM(g."smashedName")) = MD5(TRIM(g2."smashedName"))\n            GROUP BY 1,2,3,9,10\n        );\n        SELECT * FROM "GoalsToModify";\n\n        -- Handle GoalResources\n\n        DROP TABLE IF EXISTS "GoalResourcesToModify";\n        CREATE TEMP TABLE "GoalResourcesToModify" AS (\n            WITH gtmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "GoalsToModify"\n                )\n            SELECT\n            gtmm."toUpdate" "goalId",\n            "gr"."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "GoalResources" "grx"\n                CROSS JOIN UNNEST("grx"."sourceFields") sfx("sourceField")\n                WHERE "gr"."resourceId" = grx."resourceId"\n                AND (grx."goalId" = ANY(ARRAY_AGG("gr"."goalId"))\n                OR gtmm."toUpdate" = grx."goalId")\n            ) "sourceFields",\n            MIN(LEAST("gr"."createdAt", "gr2"."createdAt")) "createdAt",\n            MAX(GREATEST("gr"."updatedAt", "gr2"."updatedAt")) "updatedAt",\n            BOOL_OR("gr"."onAR" OR COALESCE("gr2"."onAR", FALSE)) "onAR",\n            BOOL_OR("gr"."onApprovedAR" OR COALESCE("gr2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "gr".id ORDER by "gr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "gr2".id))[1] "toUpdate"\n            FROM "GoalResources" "gr"\n            JOIN gtmm_recast gtmm\n            ON "gr"."goalId" = to_remove\n            LEFT JOIN "GoalResources" "gr2"\n            ON "gr2"."goalId" = gtmm."toUpdate"\n            AND "gr"."resourceId" = "gr2"."resourceId"\n            GROUP BY 1,2\n        );\n        SELECT * FROM "GoalResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(gfmm)))\n        -- FROM "GoalResourcesToModify" gfmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_GoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertGoalResources";\n        CREATE TEMP TABLE "InsertGoalResources" AS\n            WITH  insert_goal_resources AS (\n                INSERT INTO "GoalResources"\n                (\n                "goalId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                )\n                SELECT\n                "goalId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                FROM "GoalResourcesToModify" grtm\n                WHERE grtm."toUpdate" IS NULL and grtm."goalId" IS NOT NULL\n                RETURNING\n                id "goalResourceId",\n                "goalId"\n            )\n        SELECT * FROM insert_goal_resources;\n        SELECT * FROM "InsertGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_GoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateGoalResources";\n        CREATE TEMP TABLE "UpdateGoalResources" AS\n            WITH update_goal_resources AS (\n                UPDATE "GoalResources" "gr"\n                SET\n                "sourceFields" = grtm."sourceFields",\n                "createdAt" = grtm."createdAt",\n                "updatedAt" = grtm."updatedAt",\n                "onAR" = grtm."onAR",\n                "onApprovedAR" = grtm."onApprovedAR"\n                FROM "GoalResourcesToModify" grtm\n                WHERE "gr".id = grtm."toUpdate"\n                AND (\n                    "gr"."sourceFields" != grtm."sourceFields"\n                    OR "gr"."createdAt" != grtm."createdAt"\n                    OR "gr"."updatedAt" != grtm."updatedAt"\n                    OR "gr"."onAR" != grtm."onAR"\n                    OR "gr"."onApprovedAR" != grtm."onApprovedAR"\n                )\n                RETURNING\n                "gr".id "goalResourceId",\n                "gr"."goalId"\n            )\n        SELECT * FROM update_goal_resources;\n        SELECT * FROM "UpdateGoalResources";\n        END;\n\n        -- Handle GoalFieldResponses\n\n        DROP TABLE IF EXISTS "GoalFieldResponsesToModify";\n        CREATE TEMP TABLE "GoalFieldResponsesToModify" AS (\n            WITH gtmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "GoalsToModify"\n                )\n            SELECT\n            gtmm."toUpdate" "goalId",\n            "gfr"."goalTemplateFieldPromptId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."response")\n                FROM "GoalFieldResponses" "gfrx"\n                CROSS JOIN UNNEST("gfrx"."response") sfx("response")\n                WHERE "gfr"."goalTemplateFieldPromptId" = gfrx."goalTemplateFieldPromptId"\n                AND (gfrx."goalId" = ANY(ARRAY_AGG("gfr"."goalId"))\n                OR gtmm."toUpdate" = gfrx."goalId")\n            ) "response",\n            MIN(LEAST("gfr"."createdAt", "gfr2"."createdAt")) "createdAt",\n            MAX(GREATEST("gfr"."updatedAt", "gfr2"."updatedAt")) "updatedAt",\n            BOOL_OR("gfr"."onAR" OR COALESCE("gfr2"."onAR", FALSE)) "onAR",\n            BOOL_OR("gfr"."onApprovedAR" OR COALESCE("gfr2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "gfr".id ORDER by "gfr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "gfr2".id))[1] "toUpdate"\n            FROM "GoalFieldResponses" "gfr"\n            JOIN gtmm_recast gtmm\n            ON "gfr"."goalId" = to_remove\n            LEFT JOIN "GoalFieldResponses" "gfr2"\n            ON "gfr2"."goalId" = gtmm."toUpdate"\n            AND "gfr"."goalTemplateFieldPromptId" = "gfr2"."goalTemplateFieldPromptId"\n            GROUP BY 1,2\n        );\n        SELECT * FROM "GoalFieldResponsesToModify";\n        -- SELECT "goalTemplateFieldPromptId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "GoalFieldResponsesToModify" ofmm\n        -- GROUP BY "goalTemplateFieldPromptId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_GoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertGoalFieldResponses";\n        CREATE TEMP TABLE "InsertGoalFieldResponses" AS\n            WITH  insert_goal_field_responses AS (\n                INSERT INTO "GoalFieldResponses"\n                (\n                "goalId",\n                "goalTemplateFieldPromptId",\n                "response",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                )\n                SELECT\n                "goalId",\n                "goalTemplateFieldPromptId",\n                "response",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                FROM "GoalFieldResponsesToModify" gfrtm\n                WHERE gfrtm."toUpdate" IS NULL and gfrtm."goalId" IS NOT NULL\n                RETURNING\n                id "goalFieldResponseId",\n                "goalId"\n            )\n        SELECT * FROM insert_goal_field_responses;\n        SELECT * FROM "InsertGoalFieldResponses";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_GoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateGoalFieldResponses";\n        CREATE TEMP TABLE "UpdateGoalFieldResponses" AS\n            WITH update_goal_field_responses AS (\n                UPDATE "GoalFieldResponses" "gfr"\n                SET\n                "response" = gfrtm."response",\n                "createdAt" = gfrtm."createdAt",\n                "updatedAt" = gfrtm."updatedAt",\n                "onAR" = gfrtm."onAR",\n                "onApprovedAR" = gfrtm."onApprovedAR"\n                FROM "GoalFieldResponsesToModify" gfrtm\n                WHERE "gfr".id = gfrtm."toUpdate"\n                AND (\n                    "gfr"."response" != gfrtm."response"\n                    OR "gfr"."createdAt" != gfrtm."createdAt"\n                    OR "gfr"."updatedAt" != gfrtm."updatedAt"\n                    OR "gfr"."onAR" != gfrtm."onAR"\n                    OR "gfr"."onApprovedAR" != gfrtm."onApprovedAR"\n                )\n                RETURNING\n                "gfr".id "goalFieldResponseId",\n                "gfr"."goalId"\n            )\n        SELECT * FROM update_goal_field_responses;\n        SELECT * FROM "UpdateGoalFieldResponses";\n        END;\n\n\n        DROP TABLE IF EXISTS "AllSmashedObjectives";\n        CREATE TEMP TABLE "AllSmashedObjectives" AS (\n            SELECT\n                o.id "objectiveId",\n                REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(\n                REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(\n                        LOWER(o.title),\n                        'grantee(s?)', 'recipient\1', 'gi'),\n                        '\bDLLs?\b', 'dual language learners', 'gi'),\n                        '\bEHS?\b', 'early head start', 'gi'),\n                        '\bELOF?\b', 'head start early learning outcomes framework', 'gi'),\n                        '\bFEI?\b', 'full enrollment initiative', 'gi'),\n                        '\bHS\b', 'head start', 'gi'),\n                        '\bHSELOF\b', 'head start early learning outcomes framework', 'gi'),\n                        '\bOHS\b', 'office of head start', 'gi'),\n                        '\bPBC\b', 'practice based coaching', 'gi'),\n                        '\bPD\b', 'professional development', 'gi'),\n                        '\bSR\b', 'school readiness', 'gi'),\n                        '\bDLLs?\b', 'recipient\1', 'gi'),\n                        '[^a-z0-9]', '', 'gi'),\n                        '[ \t\r\n]', '', 'gi') "smashedTitle",\n                TRIM(o.title) "cleanTitle"\n            FROM "Objectives" o\n        );\n        SELECT * FROM "AllSmashedObjectives";\n\n        DROP TABLE IF EXISTS "SmashedObjectives";\n        CREATE TEMP TABLE "SmashedObjectives" AS (\n            SELECT\n                aso1."objectiveId",\n                aso1."smashedTitle",\n                REGEXP_REPLACE((ARRAY_AGG(aso2."cleanTitle" ORDER BY aso2."objectiveId" DESC))[1], '^\s+|\s+$', '', 'g') "cleanTitle"\n            FROM "AllSmashedObjectives" aso1\n            LEFT JOIN "AllSmashedObjectives" aso2\n            ON MD5(aso1."smashedTitle") = MD5(aso2."smashedTitle")\n            GROUP BY 1,2\n        );\n        SELECT * FROM "SmashedObjectives";\n\n        -- All objectives that are duplicates on goals that are duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnDupGoalsOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnDupGoalsOnARs" AS (\n            SELECT\n                dgoa.*,\n                MD5(TRIM(o."smashedTitle")) "objectiveHash",\n                o.status = 'Complete' "statusComplete",\n                ARRAY_AGG(o.id ORDER BY o."goalId", o.id) "objectiveIds",\n                array_remove(ARRAY_AGG(o.id ORDER BY o."goalId", o.id),(MIN(o.id) FILTER (WHERE o."goalId" = dgoa."toUpdateGoal"))) "toRemoveObjectives",\n                MIN(o.id) FILTER (WHERE o."goalId" = dgoa."toUpdateGoal") "toUpdateObjective",\n                COUNT(DISTINCT o.id) "objectiveCnt"\n            FROM ("Objectives"\n                JOIN "SmashedObjectives" sg\n                ON "Objectives".id = sg."objectiveId"\n            ) o\n            JOIN "DupGoalsOnARs" dgoa\n            ON o."goalId" = ANY(dgoa."goalIds")\n            GROUP BY 1,2,3,4,5,6,7,8,9,10\n            HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT o.id), 1) > 1\n            ORDER BY 8 DESC\n        );\n        SELECT * FROM "DupObjectivesOnDupGoalsOnARs";\n\n        -- All objectives that are duplicates on goals that are not duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnNonDupGoalsOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnNonDupGoalsOnARs" AS (\n            SELECT DISTINCT\n                array_remove(ARRAY_AGG(DISTINCT aro."activityReportId"), NULL) "activityReportIds",\n                g."grantId",\n                MD5(TRIM(g."smashedName")) "goalHash",\n                ARRAY[g.id] "goalIds",\n                ARRAY[]::int[] "toRemove",\n                g.id "toUpdate",\n                1 "goalCnt",\n                g."status" = 'Closed' "statusClosed",\n                MD5(TRIM(o."smashedTitle")) "objectiveHash",\n                o.status = 'Complete' "statusComplete",\n                ARRAY_AGG(o.id ORDER BY o.id) "objectiveIds",\n                array_remove(ARRAY_AGG(o.id ORDER BY o.id),MIN(o.id)) "toRemoveObjectives",\n                MIN(o.id) "toUpdateObjective",\n                COUNT(DISTINCT o.id) "objectiveCnt"\n            FROM ("Objectives"\n                JOIN "SmashedObjectives" sg\n                ON "Objectives".id = sg."objectiveId"\n            ) o\n            LEFT JOIN "ActivityReportObjectives" aro\n            ON aro."objectiveId" = o.id\n            LEFT JOIN "ObjectiveTemplates" ot\n            ON o."objectiveTemplateId" = ot.id\n            JOIN ("Goals"\n                JOIN "SmashedGoals" sg\n                ON "Goals".id = sg."goalId"\n            ) g\n            ON o."goalId" = g.id\n            LEFT JOIN "DupObjectivesOnDupGoalsOnARs" doodgoa\n            ON aro."activityReportId" = ANY(doodgoa."activityReportIds")\n            AND g."grantId" = doodgoa."grantId"\n            AND MD5(TRIM(g."smashedName")) = doodgoa."goalHash"\n            AND MD5(TRIM(o."smashedTitle")) = doodgoa."objectiveHash"\n            AND o.id != ANY(doodgoa."objectiveIds")\n            WHERE doodgoa."grantId" IS NULL\n            GROUP BY 2,3,4,5,6,7,8,9,10\n            HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT o.id), 1) > 1\n            ORDER BY 11 DESC\n        );\n        SELECT * FROM "DupObjectivesOnNonDupGoalsOnARs";\n\n        -- All objectives that are duplicates on goals that are (not) duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnARs" AS (\n            SELECT\n            *\n            FROM "DupObjectivesOnDupGoalsOnARs"\n            UNION\n            SELECT\n            *\n            FROM "DupObjectivesOnNonDupGoalsOnARs"\n        );\n        SELECT * FROM "DupObjectivesOnARs";\n\n        -- Handle Objectives\n        DROP TABLE IF EXISTS "ObjectivesToModify";\n        CREATE TEMP TABLE "ObjectivesToModify" AS (\n            SELECT DISTINCT\n                dooa."toUpdateGoal" "goalId",\n                TRIM(o."cleanTitle") "title",\n                dooa."objectiveHash",\n                CASE\n                    WHEN 'Complete' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Complete' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Complete'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(o."status"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Not Started'\n                    ELSE COALESCE((ARRAY_AGG(o2."status"))[1], 'Not Started')\n                END "status",\n                MIN(LEAST("o"."createdAt", "o2"."createdAt")) "createdAt",\n                MAX(GREATEST("o"."updatedAt", "o2"."updatedAt")) "updatedAt",\n                COALESCE(o2."otherEntityId", o."otherEntityId") "otherEntityId",\n                BOOL_OR(COALESCE(o."onApprovedAR", FALSE) OR COALESCE(o2."onApprovedAR", FALSE)) "onApprovedAR",\n                MIN(LEAST("o"."firstNotStartedAt", "o2"."firstNotStartedAt")) "firstNotStartedAt",\n                MAX(GREATEST("o"."lastNotStartedAt", "o2"."lastNotStartedAt")) "lastNotStartedAt",\n                MIN(LEAST("o"."firstInProgressAt", "o2"."firstInProgressAt")) "firstInProgressAt",\n                MAX(GREATEST("o"."lastInProgressAt", "o2"."lastInProgressAt")) "lastInProgressAt",\n                MIN(LEAST("o"."firstCompleteAt", "o2"."firstCompleteAt")) "firstCompleteAt",\n                MAX(GREATEST("o"."lastCompleteAt", "o2"."lastCompleteAt")) "lastCompleteAt",\n                MIN(LEAST("o"."firstSuspendedAt", "o2"."firstSuspendedAt")) "firstSuspendedAt",\n                MAX(GREATEST("o"."lastSuspendedAt", "o2"."lastSuspendedAt")) "lastSuspendedAt",\n                MIN(LEAST(o."rtrOrder", o2."rtrOrder")) "rtrOrder",\n                CASE\n                    WHEN 'rtr' = ANY(ARRAY_AGG(o."createdVia"))\n                    OR 'rtr' = ANY(ARRAY_AGG(o2."createdVia"))\n                    THEN 'rtr'\n                    WHEN 'activityReport' = ANY(ARRAY_AGG(o."createdVia"))\n                    OR 'activityReport' = ANY(ARRAY_AGG(o2."createdVia"))\n                    THEN 'activityReport'\n                    ELSE NULL\n                END "createdVia",\n                BOOL_OR(COALESCE(o."onAR", FALSE) OR COALESCE(o2."onAR", FALSE)) "onAR",\n                ARRAY_AGG(DISTINCT "o".id ORDER by "o".id) "toRemove",\n                MIN("o2".id) "toUpdate"\n            FROM ("Objectives"\n                JOIN "SmashedObjectives" so\n                ON "Objectives".id = so."objectiveId"\n            ) o\n            JOIN "DupObjectivesOnARs" dooa\n            ON o.id = ANY(dooa."toRemoveObjectives")\n            AND o.id != COALESCE(dooa."toUpdateObjective",0)\n            LEFT JOIN "Objectives" o2\n            ON o2.id = dooa."toUpdateObjective"\n            AND o2."goalId" = dooa."toUpdateGoal"\n            GROUP BY 1,2,3,7\n        );\n        SELECT * FROM "ObjectivesToModify";\n\n        --somehow there are duplicates in here, so dedupe\n        DROP TABLE IF EXISTS "DeduplicatedObjectivesToModify";\n        CREATE TEMP TABLE "DeduplicatedObjectivesToModify" AS (\n            SELECT DISTINCT ON ("goalId", "objectiveHash")\n                "goalId",\n                TRIM("title") "title",\n                "status",\n                "createdAt",\n                "updatedAt",\n                "otherEntityId",\n                "onApprovedAR",\n                "firstNotStartedAt",\n                "lastNotStartedAt",\n                "firstInProgressAt",\n                "lastInProgressAt",\n                "firstCompleteAt",\n                "lastCompleteAt",\n                "firstSuspendedAt",\n                "lastSuspendedAt",\n                "rtrOrder",\n                "createdVia",\n                "toRemove",\n                "toUpdate",\n                "objectiveHash",\n                "onAR"\n            FROM "ObjectivesToModify"\n            ORDER BY "goalId", "objectiveHash", "createdAt"\n        );\n\n        DROP TABLE IF EXISTS "UniqueObjectivesOnGoalsToBeRemoved";\n        CREATE TEMP TABLE "UniqueObjectivesOnGoalsToBeRemoved" AS (\n            WITH\n                "GoalsToModifyIds" AS (\n                    SELECT\n                        gtm."toUpdate",\n                        tr."toRemove"\n                    FROM "GoalsToModify" gtm\n                    CROSS JOIN UNNEST(gtm."toRemove") tr("toRemove")\n                ),\n                "ObjectivesToModifyIds" AS (\n                    SELECT\n                        dotm."toUpdate",\n                        tr."toRemove"\n                    FROM "DeduplicatedObjectivesToModify" dotm\n                    CROSS JOIN UNNEST(dotm."toRemove") tr("toRemove")\n                )\n            SELECT DISTINCT\n                o.id,\n                o."goalId" "oldGoalId",\n                gtmi."toUpdate" "newGoalId"\n            FROM "Objectives" o\n            JOIN "GoalsToModifyIds" gtmi\n            ON o."goalId" = gtmi."toRemove"\n            LEFT JOIN "ObjectivesToModifyIds" otmi\n            ON o.id = otmi."toRemove"\n            WHERE otmi."toUpdate" IS NULL\n        );\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Shift_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "ShiftObjectives";\n        CREATE TEMP TABLE "ShiftObjectives" AS\n            WITH shift_objectives AS (\n                UPDATE "Objectives" "o"\n                SET\n                    "goalId" = uoogtbr."newGoalId"\n                FROM "UniqueObjectivesOnGoalsToBeRemoved" uoogtbr\n                WHERE "o".id = uoogtbr.id\n                RETURNING\n                "o".id "updated_objective_id",\n                uoogtbr."oldGoalId" "old_goal_id",\n                uoogtbr."newGoalId" "new_goal_id"\n            )\n        SELECT * FROM shift_objectives;\n        SELECT * FROM "ShiftObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectives";\n        CREATE TEMP TABLE "InsertObjectives" AS\n        WITH inserted_objectives  AS (\n            INSERT INTO "Objectives"\n            (\n            "goalId",\n            "title",\n            status,\n            "createdAt",\n            "updatedAt",\n            "otherEntityId",\n            "onAR",\n            "onApprovedAR",\n            "firstNotStartedAt",\n            "lastNotStartedAt",\n            "firstInProgressAt",\n            "lastInProgressAt",\n            "firstCompleteAt",\n            "lastCompleteAt",\n            "firstSuspendedAt",\n            "lastSuspendedAt",\n            "rtrOrder",\n            "createdVia"\n            )\n            SELECT\n            "goalId",\n            TRIM("title") "title",\n            status,\n            "createdAt",\n            "updatedAt",\n            "otherEntityId",\n            "onAR",\n            "onApprovedAR",\n            "firstNotStartedAt",\n            "lastNotStartedAt",\n            "firstInProgressAt",\n            "lastInProgressAt",\n            "firstCompleteAt",\n            "lastCompleteAt",\n            "firstSuspendedAt",\n            "lastSuspendedAt",\n            "rtrOrder",\n            "createdVia"::"enum_Objectives_createdVia"\n            FROM "ObjectivesToModify" otm\n            WHERE otm."toUpdate" IS NULL\n            RETURNING\n                id "inserted_objective_id",\n                id "objectiveId",\n                "goalId",\n                MD5(TRIM("title")) "objectiveHash"\n        )\n        SELECT * FROM inserted_objectives;\n        SELECT * FROM "InsertObjectives";\n        END;\n\n        -- Update foreign key references in ActivityReportObjectives\n        -- UPDATE "ActivityReportObjectives" aro\n        -- SET "objectiveId" = "InsertObjectives"."inserted_objective_id"\n        -- FROM "InsertObjectives"\n        -- WHERE aro."objectiveId" = "InsertObjectives"."old_objective_id";\n\n        -- somehow there are duplicates in here, so dedupe\n        DROP TABLE IF EXISTS "DeduplicatedInsertObjectives";\n        CREATE TEMP TABLE "DeduplicatedInsertObjectives" AS (\n            SELECT DISTINCT ON ("goalId", "objectiveHash")\n                "objectiveId",\n                "goalId",\n                "objectiveHash"\n            FROM "InsertObjectives"\n            ORDER BY "goalId", "objectiveHash"\n        );\n\n        -- Handle Objectives Metadata tables\n        DROP TABLE IF EXISTS "ObjectivesToModifyMetadata";\n        CREATE TEMP TABLE "ObjectivesToModifyMetadata" AS\n        WITH objectives_to_modify AS (\n            SELECT\n            otm."goalId",\n            otm."title",\n            otm.status,\n            otm."createdAt",\n            otm."updatedAt",\n            otm."otherEntityId",\n            otm."onAR",\n            otm."onApprovedAR",\n            otm."firstNotStartedAt",\n            otm."lastNotStartedAt",\n            otm."firstInProgressAt",\n            otm."lastInProgressAt",\n            otm."firstCompleteAt",\n            otm."lastCompleteAt",\n            otm."firstSuspendedAt",\n            otm."lastSuspendedAt",\n            otm."rtrOrder",\n            otm."createdVia",\n            otm."toRemove",\n            COALESCE(otm."toUpdate", "io"."objectiveId") "toUpdate"\n            FROM "ObjectivesToModify" otm\n            LEFT JOIN "InsertObjectives" "io"\n            ON otm."goalId" = "io"."goalId"\n            AND otm."objectiveHash" = "io"."objectiveHash"\n        )\n        SELECT * FROM objectives_to_modify;\n        SELECT * FROM "ObjectivesToModifyMetadata";\n\n        --Check for Extra Objectives\n\n        -- SELECT "grantId", "goalHash", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(doodgoa)))\n        -- FROM "DupObjectivesOnDupGoalsOnARs" doodgoa\n        -- GROUP BY "grantId", "goalHash", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "grantId", "goalHash", "objectiveHash", COUNT(*) , array_to_json(array_agg(row_to_json(doondgoa)))\n        -- FROM "DupObjectivesOnNonDupGoalsOnARs"doondgoa\n        -- GROUP BY "grantId", "goalHash", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(otm)))\n        -- FROM "ObjectivesToModify" otm\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(io)))\n        -- FROM "InsertObjectives" io\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*)\n        -- FROM "DeduplicatedObjectivesToModify"\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*)\n        -- FROM "DeduplicatedInsertObjectives"\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(otmm)))\n        -- FROM "ObjectivesToModifyMetadata" otmm\n        -- GROUP BY "goalId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT o1."goalId", o1."title", o1."objectiveHash", o2."title", o2."objectiveHash"\n        -- FROM "ObjectivesToModify" o1\n        -- JOIN "ObjectivesToModify" o2\n        -- ON o1."goalId" = o2."goalId"\n        -- AND o1."title" ILIKE o2."title"\n        -- AND o1."objectiveHash" != o2."objectiveHash";\n\n        -- Validate ObjectiveFiles objectiveId null value\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveFiles" "of"\n        -- JOIN otmm_recast otmm\n        -- ON "of"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveFiles" "of2"\n        -- ON "of2"."objectiveId" = otmm."toUpdate"\n        -- AND "of"."fileId" = "of2"."fileId";\n\n        -- Handle ObjectiveFiles\n        DROP TABLE IF EXISTS "ObjectiveFilesToModify";\n        CREATE TEMP TABLE "ObjectiveFilesToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "of"."fileId",\n            MIN(LEAST("of"."createdAt", "of2"."createdAt")) "createdAt",\n            MAX(GREATEST("of"."updatedAt", "of2"."updatedAt")) "updatedAt",\n            BOOL_OR("of"."onAR" OR COALESCE("of2"."onAR", FALSE)) "onAR",\n            BOOL_OR("of"."onApprovedAR" OR COALESCE("of2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "of".id ORDER by "of".id) "toRemove" ,\n            (ARRAY_AGG(DISTINCT "of2".id))[1] "toUpdate"\n            FROM "ObjectiveFiles" "of"\n            JOIN otmm_recast otmm\n            ON "of"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveFiles" "of2"\n            ON "of2"."objectiveId" = otmm."toUpdate"\n            AND "of"."fileId" = "of2"."fileId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ObjectiveFilesToModify\n        SELECT * FROM "ObjectiveFilesToModify";\n        -- SELECT "objectiveId", "fileId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveFilesToModify" ofmm\n        -- GROUP BY "objectiveId", "fileId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveFiles";\n        CREATE TEMP TABLE "InsertObjectiveFiles" AS\n            WITH objective_files AS (\n            INSERT INTO "ObjectiveFiles"\n            (\n            "objectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            )\n            SELECT\n            "objectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            FROM "ObjectiveFilesToModify" oftm\n            WHERE oftm."toUpdate" IS NULL and oftm."objectiveId" IS NOT NULL\n            RETURNING\n            id "objectiveFileId",\n            "objectiveId"\n        )\n        SELECT * FROM objective_files;\n        SELECT * FROM "InsertObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveFiles";\n        CREATE TEMP TABLE "UpdateObjectiveFiles" AS\n        WITH update_objective_files AS  (\n            UPDATE "ObjectiveFiles" "of"\n            SET\n            "createdAt" = oftm."createdAt",\n            "updatedAt" = oftm."updatedAt",\n            "onAR" = oftm."onAR",\n            "onApprovedAR" = oftm."onApprovedAR"\n            FROM "ObjectiveFilesToModify" oftm\n            WHERE "of".id = oftm."toUpdate"\n            AND (\n                "of"."createdAt" != oftm."createdAt"\n                OR "of"."updatedAt" != oftm."updatedAt"\n                OR "of"."onAR" != oftm."onAR"\n                OR "of"."onApprovedAR" != oftm."onApprovedAR"\n            )\n            RETURNING\n            "of".id "objectiveFileId",\n            "of"."objectiveId"\n        )\n        SELECT * FROM update_objective_files;\n        SELECT * FROM "UpdateObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveFiles";\n        CREATE TEMP TABLE "DeleteObjectiveFiles" AS\n        WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveFilesToModify"\n                ),\n            del_objective_files AS (\n            DELETE FROM "ObjectiveFiles" "of"\n            USING otmm_recast oftm\n            WHERE "of".id = to_remove\n            RETURNING\n            "of".id "objectiveFileId",\n            "of"."objectiveId"\n        )\n        SELECT * FROM del_objective_files;\n        SELECT * FROM "UpdateObjectiveFiles";\n\n        DROP TABLE IF EXISTS "ObjectiveFileStats";\n        CREATE TEMP TABLE "ObjectiveFileStats" AS (\n            SELECT\n            'ObjectiveFiles' "table",\n            (SELECT COUNT(*) FROM "InsertObjectiveFiles") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectiveFiles") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectiveFiles") "Deletes",\n            (SELECT COUNT(*) FROM "ObjectiveFiles") "post_count"\n        );\n\n        -- Validate ObjectiveResources objectiveId null value\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveResources" "or"\n        -- JOIN otmm_recast otmm\n        -- ON "or"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveResources" "or2"\n        -- ON "or2"."objectiveId" = otmm."toUpdate"\n        -- AND "or"."resourceId" = "or2"."resourceId";\n\n        -- Handle ObjectiveResources\n\n        DROP TABLE IF EXISTS "ObjectiveResourcesToModify";\n        CREATE TEMP TABLE "ObjectiveResourcesToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "or"."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ObjectiveResources" "orx"\n                CROSS JOIN UNNEST("orx"."sourceFields") sfx("sourceField")\n                WHERE "or"."resourceId" = orx."resourceId"\n                AND (orx."objectiveId" = ANY(ARRAY_AGG("or"."objectiveId"))\n                OR otmm."toUpdate" = orx."objectiveId")\n            ) "sourceFields",\n            MIN(LEAST("or"."createdAt", "or2"."createdAt")) "createdAt",\n            MAX(GREATEST("or"."updatedAt", "or2"."updatedAt")) "updatedAt",\n            BOOL_OR("or"."onAR" OR COALESCE("or2"."onAR", FALSE)) "onAR",\n            BOOL_OR("or"."onApprovedAR" OR COALESCE("or2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "or".id ORDER by "or".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "or2".id))[1] "toUpdate"\n            FROM "ObjectiveResources" "or"\n            JOIN otmm_recast otmm\n            ON "or"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveResources" "or2"\n            ON "or2"."objectiveId" = otmm."toUpdate"\n            AND "or"."resourceId" = "or2"."resourceId"\n            GROUP BY 1,2\n        );\n        SELECT * FROM "ObjectiveResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveResources";\n        CREATE TEMP TABLE "InsertObjectiveResources" AS\n            WITH  insert_objective_resources AS (\n                INSERT INTO "ObjectiveResources"\n                (\n                "objectiveId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                )\n                SELECT\n                "objectiveId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                FROM "ObjectiveResourcesToModify" ortm\n                WHERE ortm."toUpdate" IS NULL and ortm."objectiveId" IS NOT NULL\n                RETURNING\n                id "objectiveResourceId",\n                "objectiveId"\n            )\n        SELECT * FROM insert_objective_resources;\n        SELECT * FROM "InsertObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveResources";\n        CREATE TEMP TABLE "UpdateObjectiveResources" AS\n            WITH update_objective_resources AS (\n                UPDATE "ObjectiveResources" "or"\n                SET\n                "sourceFields" = ortm."sourceFields",\n                "createdAt" = ortm."createdAt",\n                "updatedAt" = ortm."updatedAt",\n                "onAR" = ortm."onAR",\n                "onApprovedAR" = ortm."onApprovedAR"\n                FROM "ObjectiveResourcesToModify" ortm\n                WHERE "or".id = ortm."toUpdate"\n                AND (\n                    "or"."sourceFields" != ortm."sourceFields"\n                    OR "or"."createdAt" != ortm."createdAt"\n                    OR "or"."updatedAt" != ortm."updatedAt"\n                    OR "or"."onAR" != ortm."onAR"\n                    OR "or"."onApprovedAR" != ortm."onApprovedAR"\n                )\n                RETURNING\n                "or".id "objectiveResourceId",\n                "or"."objectiveId"\n            )\n        SELECT * FROM update_objective_resources;\n        SELECT * FROM "UpdateObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveResources";\n        CREATE TEMP TABLE "DeleteObjectiveResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveResourcesToModify"\n                ),\n            delete_objective_resources AS\n            (\n                DELETE FROM "ObjectiveResources" "or"\n                USING otmm_recast ortm\n                WHERE "or".id = to_remove\n                RETURNING\n                "or".id "objectiveResourceId",\n                "or"."objectiveId"\n            )\n        SELECT * FROM delete_objective_resources;\n        SELECT * FROM "DeleteObjectiveResources";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveResourceStats";\n        CREATE TEMP TABLE "ObjectiveResourceStats" AS\n            (\n                SELECT\n                'ObjectiveResources' "table",\n                (SELECT COUNT(*) FROM "InsertObjectiveResources") "Inserts",\n                (SELECT COUNT(*) FROM "UpdateObjectiveResources") "Updates",\n                (SELECT COUNT(*) FROM "DeleteObjectiveResources") "Deletes",\n                (SELECT COUNT(*) FROM "ObjectiveResources" "or") "post_count"\n            );\n\n        -- Validate ObjectiveTopics objectiveId null values\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveTopics" "ot"\n        -- JOIN  otmm_recast otmm\n        -- ON "ot"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveTopics" "ot2"\n        -- ON "ot2"."objectiveId" = otmm."toUpdate"\n        -- AND "ot"."topicId" = "ot2"."topicId";\n\n        -- Handle ObjectiveTopics\n\n            DROP TABLE IF EXISTS "ObjectiveTopicsToModify";\n            CREATE TEMP TABLE "ObjectiveTopicsToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "ot"."topicId",\n            MIN(LEAST("ot"."createdAt", "ot2"."createdAt")) "createdAt",\n            MAX(GREATEST("ot"."updatedAt", "ot2"."updatedAt")) "updatedAt",\n            BOOL_OR("ot"."onAR" OR COALESCE("ot2"."onAR", FALSE)) "onAR",\n            BOOL_OR("ot"."onApprovedAR" OR COALESCE("ot2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "ot".id ORDER by "ot".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "ot2".id))[1] "toUpdate"\n            FROM "ObjectiveTopics" "ot"\n            JOIN  otmm_recast otmm\n            ON "ot"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveTopics" "ot2"\n            ON "ot2"."objectiveId" = otmm."toUpdate"\n            AND "ot"."topicId" = "ot2"."topicId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ObjectiveTopicsToModify\n        SELECT * FROM "ObjectiveTopicsToModify";\n        -- SELECT "topicId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveTopicsToModify" ofmm\n        -- GROUP BY "topicId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveTopics";\n        CREATE TEMP TABLE "InsertObjectiveTopics" AS\n        WITH insert_objective_topics AS (\n            INSERT INTO "ObjectiveTopics"\n            (\n            "objectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            )\n            SELECT\n            "objectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            FROM "ObjectiveTopicsToModify" ottm\n            WHERE ottm."toUpdate" IS NULL AND ottm."objectiveId" IS NOT NULL\n            RETURNING\n            id "objectiveTopicId",\n            "objectiveId"\n        )\n        SELECT * FROM insert_objective_topics;\n        SELECT * FROM "InsertObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveTopics";\n        CREATE TEMP TABLE "UpdateObjectiveTopics" AS\n        WITH update_objective_topics AS (\n            UPDATE "ObjectiveTopics" "ot"\n            SET\n            "createdAt" = ottm."createdAt",\n            "updatedAt" = ottm."updatedAt",\n            "onAR" = ottm."onAR",\n            "onApprovedAR" = ottm."onApprovedAR"\n            FROM "ObjectiveTopicsToModify" ottm\n            WHERE "ot".id = ottm."toUpdate"\n            AND (\n                "ot"."createdAt" != ottm."createdAt"\n                OR "ot"."updatedAt" != ottm."updatedAt"\n                OR "ot"."onAR" != ottm."onAR"\n                OR "ot"."onApprovedAR" != ottm."onApprovedAR"\n            )\n            RETURNING\n            "ot".id "objectiveTopicId",\n            "ot"."objectiveId"\n        )\n        SELECT * FROM update_objective_topics;\n        SELECT * FROM "UpdateObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveTopics";\n        CREATE TEMP TABLE "DeleteObjectiveTopics" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveTopicsToModify"\n                ),\n            delete_objective_topics AS (\n            DELETE FROM "ObjectiveTopics" "ot"\n            USING otmm_recast ottm\n            WHERE "ot".id = to_remove\n            RETURNING\n            "ot".id "objectiveTopicId",\n            "ot"."objectiveId"\n        )\n        SELECT * FROM delete_objective_topics;\n        SELECT * FROM "DeleteObjectiveTopics";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveTopicStats";\n        CREATE TEMP TABLE "ObjectiveTopicStats" AS (\n            SELECT\n            'ObjectiveTopics' "table",\n            (SELECT COUNT(*) FROM "InsertObjectiveTopics") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectiveTopics") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectiveTopics") "Deletes",\n            (SELECT COUNT(*) FROM "ObjectiveTopics" ot) "post_count"\n        );\n        -- Continue Handle Objectives\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectives";\n        CREATE TEMP TABLE "UpdateObjectives" AS\n        WITH update_objectives AS (\n            UPDATE "Objectives" "o"\n            SET\n            "createdAt" = otmm."createdAt",\n            "updatedAt" = otmm."updatedAt",\n            "onAR" = otmm."onAR",\n            "onApprovedAR" = otmm."onApprovedAR",\n            "firstNotStartedAt" = otmm."firstNotStartedAt",\n            "lastNotStartedAt" = otmm."lastNotStartedAt",\n            "firstInProgressAt" = otmm."firstInProgressAt",\n            "lastInProgressAt" = otmm."lastInProgressAt",\n            "firstCompleteAt" = otmm."firstCompleteAt",\n            "lastCompleteAt" = otmm."lastCompleteAt",\n            "firstSuspendedAt" = otmm."firstSuspendedAt",\n            "lastSuspendedAt" = otmm."lastSuspendedAt",\n            "rtrOrder" = otmm."rtrOrder",\n            "createdVia" = otmm."createdVia"::"enum_Objectives_createdVia"\n            FROM "ObjectivesToModifyMetadata" otmm\n            WHERE "o".id = otmm."toUpdate"\n            AND (\n                "o"."createdAt" != otmm."createdAt"\n                OR "o"."updatedAt" != otmm."updatedAt"\n                OR "o"."onAR" != otmm."onAR"\n                OR "o"."onApprovedAR" != otmm."onApprovedAR"\n                OR "o"."firstNotStartedAt" != otmm."firstNotStartedAt"\n                OR "o"."lastNotStartedAt" != otmm."lastNotStartedAt"\n                OR "o"."firstInProgressAt" != otmm."firstInProgressAt"\n                OR "o"."lastInProgressAt" != otmm."lastInProgressAt"\n                OR "o"."firstCompleteAt" != otmm."firstCompleteAt"\n                OR "o"."lastCompleteAt" != otmm."lastCompleteAt"\n                OR "o"."firstSuspendedAt" != otmm."firstSuspendedAt"\n                OR "o"."lastSuspendedAt" != otmm."lastSuspendedAt"\n                OR "o"."rtrOrder" != otmm."rtrOrder"\n                OR "o"."createdVia" != otmm."createdVia"::"enum_Objectives_createdVia"\n            )\n            RETURNING\n            "o".id "updated_objective_id",\n            otmm."toUpdate" "old_objective_id"\n        )\n        SELECT * FROM update_objectives;\n        SELECT * FROM "UpdateObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        -- Update foreign key references in ActivityReportObjectives\n        UPDATE "ActivityReportObjectives" aro\n        SET "objectiveId" = "UpdateObjectives"."updated_objective_id"\n        FROM "UpdateObjectives"\n        WHERE aro."objectiveId" = "UpdateObjectives"."old_objective_id";\n        END;\n\n        -- Handle ActivityReportObjectives\n        DROP TABLE IF EXISTS "ActivityReportObjectivesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectivesToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n                SELECT\n                    otmm."toUpdate" "objectiveId",\n                    aro."activityReportId",\n                    aro.title,\n                    aro.status,\n                    MIN(LEAST(aro."arOrder", aro2."arOrder")) "arOrder",\n                    STRING_AGG(DISTINCT "arox"."ttaProvided", E'\n') "ttaProvided",\n                    MIN(LEAST("aro"."createdAt", "aro2"."createdAt")) "createdAt",\n                    MAX(GREATEST("aro"."updatedAt", "aro2"."updatedAt")) "updatedAt",\n                    ARRAY_AGG(DISTINCT "aro".id ORDER by "aro".id) "toRemove",\n                    (ARRAY_AGG(DISTINCT "aro2".id))[1] "toUpdate"\n                    FROM "ActivityReportObjectives" aro\n                    JOIN  otmm_recast otmm\n                    ON "aro"."objectiveId" = to_remove\n                    LEFT JOIN "ActivityReportObjectives" aro2\n                    ON "aro2"."objectiveId" = otmm."toUpdate"\n                    AND "aro"."activityReportId" = "aro2"."activityReportId"\n                    LEFT JOIN "ActivityReportObjectives" arox\n                        ON "aro"."activityReportId" = arox."activityReportId"\n                        AND (\n                            arox."objectiveId" = "aro"."objectiveId"\n                            OR otmm."toUpdate" = arox."objectiveId"\n                        )\n                    GROUP BY 1,2,3,4\n                    );\n\n        -- Validate Handle ActivityReportObjectivesToModify\n        SELECT * FROM "ActivityReportObjectivesToModify";\n        -- SELECT "activityReportId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectivesToModify" ofmm\n        -- GROUP BY "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectives";\n        CREATE TEMP TABLE "InsertActivityReportObjectives" AS\n        WITH insert_activity_report_objectives AS (\n            INSERT INTO "ActivityReportObjectives"\n            (\n            "objectiveId",\n            "activityReportId",\n            title,\n            status,\n            "ttaProvided",\n            "arOrder",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "objectiveId",\n            "activityReportId",\n            TRIM(title) title,\n            status,\n            "ttaProvided",\n            "arOrder",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectivesToModify" oftm\n            WHERE oftm."toUpdate" IS NULL AND oftm."objectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveId",\n            "objectiveId",\n            "activityReportId"\n        )\n        SELECT * FROM insert_activity_report_objectives;\n        SELECT * FROM "InsertActivityReportObjectives";\n        END;\n\n        -- Handle ActivityReportObjectives Metadata tables\n\n        DROP TABLE IF EXISTS "ActivityReportObjectivesToModifyMetadata";\n        CREATE TEMP TABLE "ActivityReportObjectivesToModifyMetadata" AS (\n            SELECT\n            arotm."objectiveId",\n            arotm."activityReportId",\n            arotm.title,\n            arotm.status,\n            arotm."arOrder",\n            arotm."ttaProvided",\n            arotm."createdAt",\n            arotm."updatedAt",\n            arotm."toRemove",\n            COALESCE(arotm."toUpdate", iaro."activityReportObjectiveId") "toUpdate"\n            FROM "ActivityReportObjectivesToModify" arotm\n            LEFT JOIN "InsertActivityReportObjectives" iaro\n            ON arotm."objectiveId" = iaro."objectiveId"\n            AND arotm."activityReportId" = iaro."activityReportId"\n        );\n\n        -- -- Validate Handle ActivityReportObjectivesToModifyMetadata\n        SELECT * FROM "ActivityReportObjectivesToModifyMetadata";\n        -- SELECT "objectiveId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectivesToModifyMetadata" ofmm\n        -- GROUP BY "objectiveId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- -- Validate  ActivityReportObjectiveFiles objectiveId null values\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ActivityReportObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ActivityReportObjectiveFiles" arof\n        -- JOIN otmm_recast arotmm\n        -- ON arof."activityReportObjectiveId" = to_remove\n        -- LEFT JOIN "ActivityReportObjectiveFiles" arof2\n        -- ON arof2."activityReportObjectiveId" = arotmm."toUpdate"\n        -- AND arof."fileId" = arof2."fileId";\n\n        -- Handle ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS "ActivityReportObjectiveFilesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveFilesToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModifyMetadata"\n        )\n            SELECT\n            arotmm."toUpdate" "activityReportObjectiveId",\n            arof."fileId",\n            MIN(LEAST("arof"."createdAt", "arof2"."createdAt")) "createdAt",\n            MAX(GREATEST("arof"."updatedAt", "arof2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "arof".id ORDER by "arof".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "arof2".id))[1] "toUpdate"\n            FROM "ActivityReportObjectiveFiles" arof\n            JOIN otmm_recast arotmm\n            ON arof."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveFiles" arof2\n            ON arof2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND arof."fileId" = arof2."fileId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveFilesToModify\n        SELECT * FROM "ActivityReportObjectiveFilesToModify";\n        -- SELECT "fileId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveFilesToModify" ofmm\n        -- GROUP BY "fileId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveFiles" AS\n        WITH insert_activity_report_objective_files AS (\n            INSERT INTO "ActivityReportObjectiveFiles"\n            (\n            "activityReportObjectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveFilesToModify" aroftm\n            WHERE aroftm."toUpdate" IS NULL and aroftm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveFileId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_files;\n        SELECT * FROM "InsertActivityReportObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveFiles" AS\n        WITH update_activity_report_objective_files AS (\n            UPDATE "ActivityReportObjectiveFiles" "arof"\n            SET\n            "createdAt" = aroftm."createdAt",\n            "updatedAt" = aroftm."updatedAt"\n            FROM "ActivityReportObjectiveFilesToModify" aroftm\n            WHERE "arof".id = aroftm."toUpdate"\n            AND (\n                "arof"."createdAt" != aroftm."createdAt"\n                OR "arof"."updatedAt" != aroftm."updatedAt"\n            )\n            RETURNING\n            "arof".id "activityReportObjectiveFileId",\n            "arof"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_files;\n        SELECT * FROM "UpdateActivityReportObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveFiles" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectiveFilesToModify"\n                ),\n        delete_activity_report_objective_files AS (\n            DELETE FROM "ActivityReportObjectiveFiles" "arof"\n            USING otmm_recast aroftm\n            WHERE "arof".id = to_remove\n            RETURNING\n            "arof".id "activityReportObjectiveFileId",\n            "arof"."activityReportObjectiveId"\n        )\n        SELECT * FROM delete_activity_report_objective_files;\n        SELECT * FROM "DeleteActivityReportObjectiveFiles";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveFileStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveFileStats" AS (\n            SELECT\n            'ActivityReportObjectiveFiles' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveFiles") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveFiles") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveFiles") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveFiles" arof) "post_count"\n        );\n\n        -- Handle ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS "ActivityReportObjectiveResourcesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveResourcesToModify" AS (\n            WITH arotmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectivesToModifyMetadata"\n                )\n            SELECT\n            arotmm."toUpdate" "activityReportObjectiveId",\n            aror."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ActivityReportObjectiveResources" "arorx"\n                CROSS JOIN UNNEST("arorx"."sourceFields") sfx("sourceField")\n                WHERE "aror"."resourceId" = arorx."resourceId"\n                AND (arorx."activityReportObjectiveId" = ANY(ARRAY_AGG("aror"."activityReportObjectiveId"))\n                OR arotmm."toUpdate" = arorx."activityReportObjectiveId")\n            ) "sourceFields",\n            MIN(LEAST("aror"."createdAt", "aror2"."createdAt")) "createdAt",\n            MAX(GREATEST("aror"."updatedAt", "aror2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "aror".id ORDER by "aror".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "aror2".id))[1] "toUpdate"\n            FROM "ActivityReportObjectiveResources" aror\n            JOIN  arotmm_recast arotmm\n            ON aror."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveResources" aror2\n            ON aror2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND aror."resourceId" = aror2."resourceId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveResourcesToModify\n        SELECT * FROM "ActivityReportObjectiveResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveResources";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveResources" AS\n        WITH insert_activity_report_objective_resources AS (\n            INSERT INTO "ActivityReportObjectiveResources"\n            (\n            "activityReportObjectiveId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveResourcesToModify" arortm\n            WHERE arortm."toUpdate" IS NULL and arortm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveResourceId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_resources;\n        SELECT * FROM "InsertActivityReportObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveResources";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveResources" AS\n        WITH update_activity_report_objective_resources AS (\n            UPDATE "ActivityReportObjectiveResources" "aror"\n            SET\n            "sourceFields" = arortm."sourceFields",\n            "createdAt" = arortm."createdAt",\n            "updatedAt" = arortm."updatedAt"\n            FROM "ActivityReportObjectiveResourcesToModify" arortm\n            WHERE "aror".id = arortm."toUpdate"\n            AND (\n                "aror"."sourceFields" != arortm."sourceFields"\n                OR "aror"."createdAt" != arortm."createdAt"\n                OR "aror"."updatedAt" != arortm."updatedAt"\n            )\n            RETURNING\n            "aror".id "activityReportObjectiveResourceId",\n            "aror"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_resources;\n        SELECT * FROM "UpdateActivityReportObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveResources";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectiveResourcesToModify"\n                ),\n            delete_activity_report_objective_resources AS (\n            DELETE FROM "ActivityReportObjectiveResources" "aror"\n            USING otmm_recast arortm\n            WHERE "aror".id = to_remove\n            RETURNING\n            "aror".id "activityReportObjectiveResourceId",\n            "aror"."activityReportObjectiveId"\n        )\n        SELECT * FROM delete_activity_report_objective_resources;\n        SELECT * FROM "DeleteActivityReportObjectiveResources";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveResourceStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveResourceStats" AS (\n            SELECT\n            'ActivityReportObjectiveResources' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveResources") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveResources") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveResources") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveResources" aror) "post_count"\n        );\n\n        -- Handle ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS "ActivityReportObjectiveTopicsToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveTopicsToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModifyMetadata"\n        )\n            SELECT\n                arotmm."toUpdate" "activityReportObjectiveId",\n                arot."topicId",\n                MIN(LEAST("arot"."createdAt", "arot2"."createdAt")) "createdAt",\n                MAX(GREATEST("arot"."updatedAt", "arot2"."updatedAt")) "updatedAt",\n                ARRAY_AGG(DISTINCT "arot".id ORDER by "arot".id) "toRemove",\n                MIN("arot2".id) "toUpdate"\n            FROM "ActivityReportObjectiveTopics" arot\n            JOIN otmm_recast arotmm\n            ON arot."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveTopics" arot2\n            ON arot2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND arot."topicId" = arot2."topicId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveTopicsToModify\n        SELECT * FROM "ActivityReportObjectiveTopicsToModify";\n        -- SELECT "topicId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveTopicsToModify" ofmm\n        -- GROUP BY "topicId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveTopics" AS\n        WITH insert_activity_report_objective_topics AS  (\n            INSERT INTO "ActivityReportObjectiveTopics"\n            (\n            "activityReportObjectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveTopicsToModify" arottm\n            WHERE arottm."toUpdate" IS NULL AND arottm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveTopicId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_topics;\n        SELECT * FROM "InsertActivityReportObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveTopics" AS\n        WITH update_activity_report_objective_topics AS (\n            UPDATE "ActivityReportObjectiveTopics" "arot"\n            SET\n            "createdAt" = arottm."createdAt",\n            "updatedAt" = arottm."updatedAt"\n            FROM "ActivityReportObjectiveTopicsToModify" arottm\n            WHERE "arot".id = arottm."toUpdate"\n            AND (\n                "arot"."createdAt" != arottm."createdAt"\n                OR "arot"."updatedAt" != arottm."updatedAt"\n            )\n            RETURNING\n            "arot".id "activityReportObjectiveTopicId",\n            "arot"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_topics;\n        SELECT * FROM "UpdateActivityReportObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveTopics" AS\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectiveTopicsToModify"\n            ),\n            delete_activity_report_objective_topics AS (\n                DELETE FROM "ActivityReportObjectiveTopics" "arot"\n                USING otmm_recast arottm\n                WHERE "arot".id = to_remove\n                RETURNING\n                "arot".id "activityReportObjectiveTopicId",\n                "arot"."activityReportObjectiveId"\n            )\n            SELECT * FROM delete_activity_report_objective_topics;\n        SELECT * FROM "DeleteActivityReportObjectiveTopics";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveTopicStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveTopicStats" AS (\n            SELECT\n            'ActivityReportObjectiveTopics' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveTopics") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveTopics") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveTopics") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveTopics" arot) "post_count"\n\n        );\n\n        -- Continue Handle ActivityReportObjectives\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectives";\n        CREATE TEMP TABLE "UpdateActivityReportObjectives" AS\n        WITH update_activity_report_objectives AS(\n            UPDATE "ActivityReportObjectives" "aro"\n            SET\n            "arOrder" = arotm."arOrder",\n            "ttaProvided" = arotm."ttaProvided",\n            "createdAt" = arotm."createdAt",\n            "updatedAt" = arotm."updatedAt"\n            FROM "ActivityReportObjectivesToModify" arotm\n            WHERE "aro".id = arotm."toUpdate"\n            AND (\n                "aro"."arOrder" != arotm."arOrder"\n                OR "aro"."ttaProvided" != arotm."ttaProvided"\n                OR "aro"."createdAt" != arotm."createdAt"\n                OR "aro"."updatedAt" != arotm."updatedAt"\n            )\n            RETURNING\n            "aro".id "activityReportObjectiveId",\n            "aro"."objectiveId"\n        )\n        SELECT * FROM update_activity_report_objectives;\n        SELECT * FROM "UpdateActivityReportObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectives";\n        CREATE TEMP TABLE "DeleteActivityReportObjectives" AS\n        WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModify"\n        ),\n        -- Delete related rows from ActivityReportObjectiveFiles table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING otmm_recast arotm\n            WHERE arof."activityReportObjectiveId" = to_remove\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" "aro"\n            USING otmm_recast arotm\n            WHERE "aro".id = to_remove\n            RETURNING\n                "aro".id "activityReportObjectiveId",\n                "aro"."objectiveId"\n        )\n        SELECT * FROM deleted_aro;\n        SELECT * FROM "DeleteActivityReportObjectives";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveStats" AS (\n            SELECT\n            'ActivityReportObjectives' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectives") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectives") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectives") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectives" aro) "post_count"\n        );\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectives";\n        CREATE TEMP TABLE "DeleteObjectives" AS\n        WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ObjectivesToModify"\n            ),\n        -- Delete related rows from ActivityReportObjectiveFiles table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING "ActivityReportObjectives" aro, otm_recast\n            WHERE aro."objectiveId" = to_remove AND arof."activityReportObjectiveId" = aro.id\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING otm_recast\n            WHERE aro."objectiveId" = to_remove\n            RETURNING aro."objectiveId"\n        ),\n\n        deleted_of AS (\n            DELETE FROM "ObjectiveFiles" of\n            USING otm_recast\n            WHERE of."objectiveId" = to_remove\n            RETURNING of."objectiveId"\n        ),\n        -- Delete rows from Objectives table\n        deleted_o AS (\n            DELETE FROM "Objectives" "o"\n            USING otm_recast\n            WHERE "o".id = to_remove\n            RETURNING\n                "o".id "objectiveId"\n        )\n        SELECT * FROM deleted_o;\n        SELECT * FROM "DeleteObjectives";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveStats";\n        CREATE TEMP TABLE "ObjectiveStats" AS (\n            SELECT\n            'Objectives' "table",\n            (SELECT COUNT(*) FROM "InsertObjectives") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectives") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectives") "Deletes",\n            (SELECT COUNT(*) FROM "Objectives" o) "post_count"\n        );\n\n        -- Handle ActivityReportGoals\n        DROP TABLE IF EXISTS "ActivityReportGoalsToModify";\n        CREATE TEMP TABLE "ActivityReportGoalsToModify" AS (\n            SELECT\n            dgoa."toUpdateGoal" "goalId",\n            arg."activityReportId",\n            TRIM(arg.name) "name",\n            arg.status,\n            COALESCE(arg2.timeframe, arg.timeframe) timeframe,\n            arg2."closeSuspendReason",\n            arg2."closeSuspendContext",\n            MAX(GREATEST(arg2."endDate", arg."endDate")) "endDate",\n            CASE\n                WHEN 'Yes' = ANY(ARRAY_AGG(arg."isRttapa"))\n                OR 'Yes' = ANY(ARRAY_AGG(arg2."isRttapa"))\n                THEN 'Yes'\n                WHEN 'No' = ANY(ARRAY_AGG(arg."isRttapa"))\n                OR 'No' = ANY(ARRAY_AGG(arg2."isRttapa"))\n                THEN 'No'\n                ELSE NULL\n            END "isRttapa",\n            BOOL_OR(COALESCE(arg."isActivelyEdited", FALSE) OR COALESCE(arg2."isActivelyEdited", FALSE)) "isActivelyEdited",\n            MIN(LEAST("arg"."createdAt", "arg2"."createdAt")) "createdAt",\n            MAX(GREATEST("arg"."updatedAt", "arg2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "arg".id ORDER by "arg".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "arg2".id))[1] "toUpdate"\n            FROM "ActivityReportGoals" arg\n            JOIN "DupGoalsOnARs" dgoa\n            ON "arg"."goalId" = ANY(dgoa."toRemoveGoals")\n            AND "arg"."goalId" != dgoa."toUpdateGoal"\n            LEFT JOIN "ActivityReportGoals" "arg2"\n            ON "arg2"."goalId" = dgoa."toUpdateGoal"\n            AND "arg"."activityReportId" = "arg2"."activityReportId"\n            GROUP BY 1,2,3,4,5,6,7\n        );\n\n        -- Validate Handle ActivityReportGoalsToModify\n        SELECT * FROM "ActivityReportGoalsToModify";\n        -- SELECT "goalId","activityReportId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalsToModify" ofmm\n        -- GROUP BY "goalId", "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoals";\n        CREATE TEMP TABLE "InsertActivityReportGoals" AS\n        WITH insert_activity_report_goals AS (\n            INSERT INTO "ActivityReportGoals"\n            (\n            "goalId",\n            "activityReportId",\n            "name",\n            status,\n            "timeframe",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "endDate",\n            "isRttapa",\n            "isActivelyEdited",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "goalId",\n            "activityReportId",\n            TRIM("name") "name",\n            status,\n            "timeframe",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "endDate",\n            "isRttapa"::"enum_ActivityReportGoals_isRttapa",\n            "isActivelyEdited",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalsToModify" argtm\n            WHERE argtm."toUpdate" IS NULL AND argtm."activityReportId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalId",\n            "goalId",\n            "activityReportId"\n        )\n        SELECT * FROM insert_activity_report_goals;\n        SELECT * FROM "InsertActivityReportGoals";\n        END;\n\n        -- Handle ActivityReportGoals Metadata tables\n        DROP TABLE IF EXISTS "ActivityReportGoalsToModifyMetadata";\n        CREATE TEMP TABLE "ActivityReportGoalsToModifyMetadata" AS (\n            SELECT\n            argtm."goalId",\n            argtm."activityReportId",\n            TRIM(argtm.name) "name",\n            argtm.status,\n            argtm."timeframe",\n            argtm."closeSuspendReason",\n            argtm."closeSuspendContext",\n            argtm."endDate",\n            argtm."isRttapa",\n            argtm."isActivelyEdited",\n            argtm."createdAt",\n            argtm."updatedAt",\n        argtm."toRemove",\n            COALESCE(argtm."toUpdate", iarg."activityReportGoalId") "toUpdate"\n            FROM "ActivityReportGoalsToModify" argtm\n            LEFT JOIN "InsertActivityReportGoals" iarg\n            ON argtm."goalId" = iarg."goalId"\n            AND argtm."activityReportId" = iarg."activityReportId"\n        );\n\n        -- Validate Handle ActivityReportGoalsToModifyMetadata\n        SELECT * FROM "ActivityReportGoalsToModifyMetadata";\n        -- SELECT "goalId", "activityReportId","toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalsToModifyMetadata" ofmm\n        -- GROUP BY "goalId", "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- Handle ActivityReportGoalFieldResponses\n        DROP TABLE IF EXISTS "ActivityReportGoalFieldResponsesToModify";\n        CREATE TEMP TABLE "ActivityReportGoalFieldResponsesToModify" AS (\n          WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ActivityReportGoalsToModifyMetadata"\n            )\n            SELECT\n            argtmm."toUpdate" "activityReportGoalId",\n            argfr."goalTemplateFieldPromptId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."response")\n                FROM "ActivityReportGoalFieldResponses" "argfrx"\n                CROSS JOIN UNNEST("argfrx"."response") sfx("response")\n                WHERE "argfr"."goalTemplateFieldPromptId" = argfrx."goalTemplateFieldPromptId"\n                AND (argfrx."activityReportGoalId" = ANY(ARRAY_AGG("argfr"."activityReportGoalId"))\n                OR argtmm."toUpdate" = argfrx."activityReportGoalId")\n            ) "response",\n            MIN(LEAST("argfr"."createdAt", "argfr2"."createdAt")) "createdAt",\n            MAX(GREATEST("argfr"."updatedAt", "argfr2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "argfr".id ORDER by "argfr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "argfr2".id))[1] "toUpdate"\n            FROM "ActivityReportGoalFieldResponses" argfr\n            JOIN otm_recast argtmm\n            ON argfr."activityReportGoalId" = to_remove\n            LEFT JOIN "ActivityReportGoalFieldResponses" argfr2\n            ON argfr2."activityReportGoalId" = argtmm."toUpdate"\n            AND argfr."goalTemplateFieldPromptId" = argfr2."goalTemplateFieldPromptId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportGoalFieldResponsesToModify\n        SELECT * FROM "ActivityReportGoalFieldResponsesToModify";\n        -- SELECT "goalTemplateFieldPromptId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalFieldResponsesToModify" ofmm\n        -- GROUP BY "goalTemplateFieldPromptId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoalFieldResponses";\n        CREATE TEMP TABLE "InsertActivityReportGoalFieldResponses" AS\n        WITH insert_activity_report_goals_field_responses AS (\n            INSERT INTO "ActivityReportGoalFieldResponses"\n            (\n            "activityReportGoalId",\n            "goalTemplateFieldPromptId",\n            "response",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportGoalId",\n            "goalTemplateFieldPromptId",\n            "response",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalFieldResponsesToModify" argrtm\n            WHERE argrtm."toUpdate" IS NULL AND argrtm."activityReportGoalId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalResourceId",\n            "activityReportGoalId"\n        )\n        SELECT * FROM insert_activity_report_goals_field_responses;\n        SELECT * FROM "InsertActivityReportGoalFieldResponses";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoalFieldResponses";\n        CREATE TEMP TABLE "UpdateActivityReportGoalFieldResponses" AS\n        WITH update_activity_report_goals_field_responses AS  (\n            UPDATE "ActivityReportGoalFieldResponses" "argfr"\n            SET\n            "response" = argfrtm."response",\n            "createdAt" = argfrtm."createdAt",\n            "updatedAt" = argfrtm."updatedAt"\n            FROM "ActivityReportGoalFieldResponsesToModify" argfrtm\n            WHERE "argfr".id = argfrtm."toUpdate"\n            AND (\n                "argfr"."response" != argfrtm."response"\n                OR "argfr"."createdAt" != argfrtm."createdAt"\n                OR "argfr"."updatedAt" != argfrtm."updatedAt"\n            )\n            RETURNING\n            "argfr".id "activityReportGoalFieldResponseId",\n            "argfr"."activityReportGoalId"\n        )\n        SELECT * FROM update_activity_report_goals_field_responses;\n        SELECT * FROM "UpdateActivityReportGoalFieldResponses";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoalFieldResponses";\n        CREATE TEMP TABLE "DeleteActivityReportGoalFieldResponses" AS\n        WITH delete_activity_report_goals_field_responses AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalFieldResponsesToModify"\n                )\n            DELETE FROM "ActivityReportGoalFieldResponses" "argfr"\n            USING otmm_recast argrtm\n            WHERE "argfr".id = to_remove\n            RETURNING\n            "argfr".id "activityReportGoalFieldResponseId",\n            "argfr"."activityReportGoalId"\n        )\n        SELECT * FROM delete_activity_report_goals_field_responses;\n        SELECT * FROM "DeleteActivityReportGoalFieldResponses";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalFieldResponsesStats";\n        CREATE TEMP TABLE "ActivityReportGoalFieldResponsesStats" AS (\n            SELECT\n            'ActivityReportGoalFieldResponses' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoalFieldResponses") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoalFieldResponses") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoalFieldResponses") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoalFieldResponses" argfr) "post_count"\n        );\n\n        -- Handle ActivityReportGoalResources\n        DROP TABLE IF EXISTS "ActivityReportGoalResourcesToModify";\n        CREATE TEMP TABLE "ActivityReportGoalResourcesToModify" AS (\n          WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ActivityReportGoalsToModifyMetadata"\n            )\n            SELECT\n            argtmm."toUpdate" "activityReportGoalId",\n            argr."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ActivityReportGoalResources" "argrx"\n                CROSS JOIN UNNEST("argrx"."sourceFields") sfx("sourceField")\n                WHERE "argr"."resourceId" = argrx."resourceId"\n                AND (argrx."activityReportGoalId" = ANY(ARRAY_AGG("argr"."activityReportGoalId"))\n                OR argtmm."toUpdate" = argrx."activityReportGoalId")\n            ) "sourceFields",\n            MIN(LEAST("argr"."createdAt", "argr2"."createdAt")) "createdAt",\n            MAX(GREATEST("argr"."updatedAt", "argr2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "argr".id ORDER by "argr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "argr2".id))[1] "toUpdate"\n            FROM "ActivityReportGoalResources" argr\n            JOIN otm_recast argtmm\n            ON argr."activityReportGoalId" = to_remove\n            LEFT JOIN "ActivityReportGoalResources" argr2\n            ON argr2."activityReportGoalId" = argtmm."toUpdate"\n            AND argr."resourceId" = argr2."resourceId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportGoalResourcesToModify\n        SELECT * FROM "ActivityReportGoalResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoalResources";\n        CREATE TEMP TABLE "InsertActivityReportGoalResources" AS\n        WITH insert_activity_report_goals_resources AS (\n            INSERT INTO "ActivityReportGoalResources"\n            (\n            "activityReportGoalId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportGoalId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalResourcesToModify" argrtm\n            WHERE argrtm."toUpdate" IS NULL AND argrtm."activityReportGoalId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalResourceId",\n            "activityReportGoalId"\n        )\n        SELECT * FROM insert_activity_report_goals_resources;\n        SELECT * FROM "InsertActivityReportGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoalResources";\n        CREATE TEMP TABLE "UpdateActivityReportGoalResources" AS\n        WITH update_activity_report_goals_resources AS  (\n            UPDATE "ActivityReportGoalResources" "argr"\n            SET\n            "sourceFields" = argrtm."sourceFields",\n            "createdAt" = argrtm."createdAt",\n            "updatedAt" = argrtm."updatedAt"\n            FROM "ActivityReportGoalResourcesToModify" argrtm\n            WHERE "argr".id = argrtm."toUpdate"\n            AND (\n                "argr"."sourceFields" != argrtm."sourceFields"\n                OR "argr"."createdAt" != argrtm."createdAt"\n                OR "argr"."updatedAt" != argrtm."updatedAt"\n            )\n            RETURNING\n            "argr".id "activityReportGoalResourceId",\n            "argr"."activityReportGoalId"\n        )\n        SELECT * FROM update_activity_report_goals_resources;\n        SELECT * FROM "UpdateActivityReportGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoalResources";\n        CREATE TEMP TABLE "DeleteActivityReportGoalResources" AS\n        WITH delete_activity_report_goals_resources AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalResourcesToModify"\n                )\n            DELETE FROM "ActivityReportGoalResources" "argr"\n            USING otmm_recast argrtm\n            WHERE "argr".id = to_remove\n            RETURNING\n            "argr".id "activityReportGoalResourceId",\n            "argr"."activityReportGoalId"\n        )\n        SELECT * FROM delete_activity_report_goals_resources;\n        SELECT * FROM "DeleteActivityReportGoalResources";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalResourceStats";\n        CREATE TEMP TABLE "ActivityReportGoalResourceStats" AS (\n            SELECT\n            'ActivityReportGoalResources' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoalResources") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoalResources") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoalResources") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoalResources" argr) "post_count"\n        );\n\n        -- Continue Handle ActivityReportGoals\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoals";\n        CREATE TEMP TABLE "UpdateActivityReportGoals" AS\n        WITH update_activity_report_goals AS (\n            UPDATE "ActivityReportGoals" "arg"\n            SET\n            "timeframe" = argtm."timeframe",\n            "endDate" = argtm."endDate",\n            "isRttapa" = argtm."isRttapa"::"enum_ActivityReportGoals_isRttapa",\n            "isActivelyEdited" = argtm."isActivelyEdited",\n            "createdAt" = argtm."createdAt",\n            "updatedAt" = argtm."updatedAt"\n            FROM "ActivityReportGoalsToModify" argtm\n            WHERE "arg".id = argtm."toUpdate"\n            AND (\n              "arg"."timeframe" != argtm."timeframe"\n              OR "arg"."endDate" != argtm."endDate"\n              OR "arg"."isRttapa" != argtm."isRttapa"::"enum_ActivityReportGoals_isRttapa"\n              OR "arg"."isActivelyEdited" != argtm."isActivelyEdited"\n              OR "arg"."createdAt" != argtm."createdAt"\n              OR "arg"."updatedAt" != argtm."updatedAt"\n            )\n            RETURNING\n            "arg".id "activityReportGoalId",\n            "arg"."goalId"\n        )SELECT * FROM update_activity_report_goals;\n        SELECT * FROM "UpdateActivityReportGoals";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoals";\n        CREATE TEMP TABLE "DeleteActivityReportGoals" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalsToModify"\n                ),\n            delete_activity_report_goals AS  (\n            DELETE FROM "ActivityReportGoals" "arg"\n            USING otmm_recast argtm\n            WHERE "arg".id = to_remove\n            RETURNING\n            "arg".id "activityReportGoalId",\n            "arg"."goalId"\n        )\n        SELECT * FROM delete_activity_report_goals;\n        SELECT * FROM "DeleteActivityReportGoals";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalStats";\n        CREATE TEMP TABLE "ActivityReportGoalStats" AS (\n            SELECT\n            'ActivityReportGoals' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoals") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoals") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoals") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoals" ar) "post_count"\n\n        );\n\n\n\n        -- Continue Handle GoalResources\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_GoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteGoalResources";\n        CREATE TEMP TABLE "DeleteGoalResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "GoalResourcesToModify"\n                ),\n            delete_goal_resources AS\n            (\n                DELETE FROM "GoalResources" "gr"\n                USING otmm_recast ortm\n                WHERE "gr".id = to_remove\n                RETURNING\n                "gr".id "goalResourceId",\n                "gr"."goalId"\n            )\n        SELECT * FROM delete_goal_resources;\n        SELECT * FROM "DeleteGoalResources";\n        END;\n\n        DROP TABLE IF EXISTS "GoalResourceStats";\n        CREATE TEMP TABLE "GoalResourceStats" AS\n            (\n                SELECT\n                'GoalResources' "table",\n                (SELECT COUNT(*) FROM "InsertGoalResources") "Inserts",\n                (SELECT COUNT(*) FROM "UpdateGoalResources") "Updates",\n                (SELECT COUNT(*) FROM "DeleteGoalResources") "Deletes",\n                (SELECT COUNT(*) FROM "GoalResources" "gr") "post_count"\n            );\n\n\n        -- Continue Handle GoalFieldResponses\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_GoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteGoalFieldResponses";\n        CREATE TEMP TABLE "DeleteGoalFieldResponses" AS\n            WITH gtmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "GoalFieldResponsesToModify"\n                ),\n            delete_goal_field_responses AS\n            (\n                DELETE FROM "GoalFieldResponses" "gfr"\n                USING gtmm_recast grtm\n                WHERE "gfr".id = to_remove\n                RETURNING\n                "gfr".id "goalResourceId",\n                "gfr"."goalId"\n            )\n        SELECT * FROM delete_goal_field_responses;\n        SELECT * FROM "DeleteGoalFieldResponses";\n        END;\n\n        DROP TABLE IF EXISTS "GoalFieldResponseStats";\n        CREATE TEMP TABLE "GoalFieldResponseStats" AS\n            (\n                SELECT\n                'GoalFieldResponses' "table",\n                (SELECT COUNT(*) FROM "InsertGoalFieldResponses") "Inserts",\n                (SELECT COUNT(*) FROM "UpdateGoalFieldResponses") "Updates",\n                (SELECT COUNT(*) FROM "DeleteGoalFieldResponses") "Deletes",\n                (SELECT COUNT(*) FROM "GoalFieldResponses" "gfr") "post_count"\n            );\n\n        -- Continue Handle Goals\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_Goals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateGoals";\n        CREATE TEMP TABLE "UpdateGoals" AS\n        WITH update_goals AS (\n            UPDATE "Goals" "g"\n            SET\n            "name" = gtm."name",\n            "status" = gtm."status",\n            "timeframe" = gtm."timeframe",\n            "isFromSmartsheetTtaPlan" = gtm."isFromSmartsheetTtaPlan",\n            "createdAt" = gtm."createdAt",\n            "updatedAt" = gtm."updatedAt",\n            "endDate" = gtm."endDate",\n            "previousStatus" = gtm."previousStatus",\n            "goalTemplateId" = gtm."goalTemplateId",\n            "onAR" = gtm."onAR",\n            "onApprovedAR" = gtm."onApprovedAR",\n            "firstNotStartedAt" = gtm."firstNotStartedAt",\n            "lastNotStartedAt" = gtm."lastNotStartedAt",\n            "firstInProgressAt" = gtm."firstInProgressAt",\n            "lastInProgressAt" = gtm."lastInProgressAt",\n            "firstCeasedSuspendedAt" = gtm."firstCeasedSuspendedAt",\n            "lastCeasedSuspendedAt" = gtm."lastCeasedSuspendedAt",\n            "firstClosedAt" = gtm."firstClosedAt",\n            "lastClosedAt" = gtm."lastClosedAt",\n            "firstCompletedAt" = gtm."firstCompletedAt",\n            "lastCompletedAt" = gtm."lastCompletedAt",\n            "isRttapa" = gtm."isRttapa"::"enum_Goals_isRttapa",\n            "createdVia" = gtm."createdVia"::"enum_Goals_createdVia"\n            FROM "GoalsToModify" gtm\n            WHERE "g".id = gtm."toUpdate"\n            AND (\n              "g"."status" != gtm."status"\n              OR "g"."timeframe" != gtm."timeframe"\n              OR "g"."isFromSmartsheetTtaPlan" != gtm."isFromSmartsheetTtaPlan"\n              OR "g"."createdAt" != gtm."createdAt"\n              OR "g"."updatedAt" != gtm."updatedAt"\n              OR "g"."endDate" != gtm."endDate"\n              OR "g"."previousStatus" != gtm."previousStatus"\n              OR "g"."goalTemplateId" != gtm."goalTemplateId"\n              OR "g"."onAR" != gtm."onAR"\n              OR "g"."onApprovedAR" != gtm."onApprovedAR"\n              OR "g"."firstNotStartedAt" != gtm."firstNotStartedAt"\n              OR "g"."lastNotStartedAt" != gtm."lastNotStartedAt"\n              OR "g"."firstInProgressAt" != gtm."firstInProgressAt"\n              OR "g"."lastInProgressAt" != gtm."lastInProgressAt"\n              OR "g"."firstCeasedSuspendedAt" != gtm."firstCeasedSuspendedAt"\n              OR "g"."lastCeasedSuspendedAt" != gtm."lastCeasedSuspendedAt"\n              OR "g"."firstClosedAt" != gtm."firstClosedAt"\n              OR "g"."lastClosedAt" != gtm."lastClosedAt"\n              OR "g"."firstCompletedAt" != gtm."firstCompletedAt"\n              OR "g"."lastCompletedAt" != gtm."lastCompletedAt"\n              OR "g"."isRttapa" != gtm."isRttapa"::"enum_Goals_isRttapa"\n              OR "g"."createdVia" != gtm."createdVia"::"enum_Goals_createdVia"\n            )\n            RETURNING\n            "g".id "goalId"\n        )\n        SELECT * FROM update_goals;\n        SELECT * FROM "UpdateGoals";\n        END;\n\n        -- Validate Handle GoalsToModify\n        -- SELECT * FROM "Goals";\n        -- SELECT *, COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "Goals" ofmm\n        -- GROUP BY "id"\n        -- HAVING COUNT(*) > 1;\n\n        -- DROP TABLE IF EXISTS "ViolatingDeleteGoals";\n        -- CREATE TEMP TABLE "ViolatingDeleteGoals" AS\n        -- WITH gtm_recast AS (\n        -- SELECT *,\n        --     UNNEST("toRemove") to_remove\n        -- FROM "GoalsToModify"\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ActivityReportObjectiveFiles table\n        -- violated_arof AS (\n        --     SELECT 'ActivityReportObjectiveFiles' as table_name,\n        --         arof.id as primary_key,\n        --         arof."activityReportObjectiveId" as foreign_key,\n        --         o.id as objective_id,\n        --         array_to_json(array_agg(row_to_json(om))) as raw_objective,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal\n        --     FROM "ActivityReportObjectiveFiles" arof\n        --     LEFT JOIN "ActivityReportObjectives" aro ON arof."activityReportObjectiveId" = aro.id\n        --     LEFT JOIN "Objectives" o ON aro."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     LEFT JOIN "Objectives" om ON om.id = o.id\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY arof.id, arof."activityReportObjectiveId", o.id\n        -- ),\n\n        -- -- Identify rows violating foreign key constraints in ActivityReportObjectives table\n        -- violated_aro AS (\n        --     SELECT 'ActivityReportObjectives' as table_name,\n        --         aro.id as primary_key,\n        --         aro."objectiveId" as foreign_key,\n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ActivityReportObjectives" aro\n        --     LEFT JOIN "Objectives" o ON aro."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY aro.id, aro."objectiveId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ObjectiveFiles table\n        -- violated_of AS (\n        --     SELECT 'ObjectiveFiles' as table_name,\n        --         of.id as primary_key,\n        --         of."objectiveId" as foreign_key,\n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ObjectiveFiles" of\n        --     LEFT JOIN "Objectives" o ON of."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY of.id, of."objectiveId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in Objectives table\n        -- violated_o AS (\n        --     SELECT 'Objectives' as table_name,\n        --         o.id as primary_key,\n        --         o."goalId" as foreign_key,\n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "Objectives" o\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY o.id, o."goalId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ActivityReportGoals table\n        -- violated_arg AS (\n        --     SELECT 'ActivityReportGoals' as table_name,\n        --         arg.id as primary_key,\n        --         arg."goalId" as foreign_key,\n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ActivityReportGoals" arg\n        --     LEFT JOIN "Objectives" o ON o."goalId" = arg."goalId"\n        --     LEFT JOIN gtm_recast ON arg."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY arg.id, arg."goalId", to_remove\n        -- )\n\n        -- -- Display rows violating foreign key constraints\n        -- SELECT * FROM violated_arof\n        -- UNION ALL\n        -- SELECT * FROM violated_aro\n        -- UNION ALL\n        -- SELECT * FROM violated_of\n        -- UNION ALL\n        -- SELECT * FROM violated_o\n        -- UNION ALL\n        -- SELECT * FROM violated_arg;\n        -- SELECT * FROM "ViolatingDeleteGoals";\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_Goals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteGoals";\n        CREATE TEMP TABLE "DeleteGoals" AS\n        WITH gtm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n          FROM "GoalsToModify"\n          ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING "Objectives" o, gtm_recast, "ActivityReportObjectives" aro\n            WHERE o."goalId" = to_remove AND aro."objectiveId" = o.id AND arof."activityReportObjectiveId" = aro.id\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "Objectives" o, gtm_recast\n            WHERE o."goalId" = to_remove AND aro."objectiveId" = o.id\n            RETURNING aro."objectiveId"\n        ),\n        -- Delete related rows from ObjectiveFiles table\n        deleted_of AS (\n            DELETE FROM "ObjectiveFiles" of\n            USING "Objectives" o, gtm_recast\n            WHERE o."goalId" = to_remove AND of."objectiveId" = o.id\n            RETURNING of."objectiveId"\n        ),\n        -- Delete related rows from Objectives table\n        deleted_o AS (\n            DELETE FROM "Objectives" o\n            USING gtm_recast\n            WHERE o."goalId" = to_remove\n            RETURNING o."goalId"\n        ),\n        -- Delete related rows from ActivityReportGoals table\n        deleted_arg AS (\n            DELETE FROM "ActivityReportGoals" arg\n            USING gtm_recast\n            WHERE arg."goalId" = to_remove\n            RETURNING arg."goalId"\n        ),\n        -- Delete rows from Goals table\n        deleted_g AS (\n            DELETE FROM "Goals" "g"\n            USING gtm_recast\n            WHERE "g".id = to_remove\n            RETURNING\n                "g".id "goalId"\n        )\n\n        -- Display deleted rows from Goals table\n        SELECT * FROM deleted_g;\n        SELECT * FROM "DeleteGoals";\n        END;\n\n        -- Stats\n\n        DROP TABLE IF EXISTS "GoalStats";\n        CREATE TEMP TABLE "GoalStats" AS (\n            SELECT\n            'Goals' "table",\n            0 "Inserts",\n            (SELECT COUNT(*) FROM "UpdateGoals") "Updates",\n            (SELECT COUNT(*) FROM "DeleteGoals") "Deletes",\n            (SELECT COUNT(*) FROM "Goals" g) "post_count"\n        );\n\n        DROP TABLE IF EXISTS "PostCountStatsByRegion";\n        CREATE TEMP TABLE "PostCountStatsByRegion" AS (\n            SELECT\n                gr."regionId",\n                COUNT(DISTINCT g."id") "GoalsTotal",\n                COUNT(DISTINCT grr."id") "GoalResourcesTotal",\n                COUNT(DISTINCT gfr."id") "GoalFieldResponsesTotal",\n                COUNT(DISTINCT arg."id") "ActivityReportGoalsTotal",\n                COUNT(DISTINCT argr."id") "ActivityReportGoalResourcesTotal",\n                COUNT(DISTINCT argfr."id") "ActivityReportGoalFieldResponsesTotal",\n                COUNT(DISTINCT oj."id") "ObjectivesTotal",\n                COUNT(DISTINCT ojf."id") "ObjectiveFilesTotal",\n                COUNT(DISTINCT ojr."id") "ObjectiveResourcesTotal",\n                COUNT(DISTINCT ojt."id") "ObjectiveTopicsTotal",\n                COUNT(DISTINCT aro."id") "ActivityReportObjectivesTotal",\n                COUNT(DISTINCT arof."id") "ActivityReportObjectiveFilesTotal",\n                COUNT(DISTINCT aror."id") "ActivityReportObjectiveResourcesTotal",\n                COUNT(DISTINCT arot."id") "ActivityReportObjectiveTopicsTotal"\n            FROM "Grants" gr\n            FULL OUTER JOIN "Goals" g ON gr."id" = g."grantId"\n            FULL OUTER JOIN "GoalResources" grr ON g."id" = grr."goalId"\n            FULL OUTER JOIN "GoalFieldResponses" gfr ON g."id" = gfr."goalId"\n            FULL OUTER JOIN "ActivityReportGoals" arg ON g."id" = arg."goalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argr ON arg."id" = argr."activityReportGoalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argfr ON arg."id" = argfr."activityReportGoalId"\n            FULL OUTER JOIN "Objectives" oj ON g."id" = oj."goalId"\n            FULL OUTER JOIN "ObjectiveFiles" ojf ON oj."id" = ojf."objectiveId"\n            FULL OUTER JOIN "ObjectiveResources" ojr ON oj."id" = ojr."objectiveId"\n            FULL OUTER JOIN "ObjectiveTopics" ojt ON oj."id" = ojt."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectives" aro ON oj."id" = aro."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveFiles" arof ON aro."id" = arof."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveResources" aror ON aro."id" = aror."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveTopics" arot ON aro."id" = arot."activityReportObjectiveId"\n            GROUP BY gr."regionId"\n        );\n        INSERT INTO "PostCountStatsByRegion"\n        SELECT\n            -1 "regionId",\n            SUM("GoalsTotal"),\n            SUM("GoalResourcesTotal"),\n            SUM("GoalFieldResponsesTotal"),\n            SUM("ActivityReportGoalsTotal"),\n            SUM("ActivityReportGoalResourcesTotal"),\n            SUM("ActivityReportGoalFieldResponsesTotal"),\n            SUM("ObjectivesTotal"),\n            SUM("ObjectiveFilesTotal"),\n            SUM("ObjectiveResourcesTotal"),\n            SUM("ObjectiveTopicsTotal"),\n            SUM("ActivityReportObjectivesTotal"),\n            SUM("ActivityReportObjectiveFilesTotal"),\n            SUM("ActivityReportObjectiveResourcesTotal"),\n            SUM("ActivityReportObjectiveTopicsTotal")\n        FROM "PostCountStatsByRegion";\n        SELECT * FROM "PostCountStatsByRegion";\n\n        WITH "RegionDiffs" AS (\n            SELECT\n                pre."regionId",\n                pre."GoalsTotal" - post."GoalsTotal" AS "GoalsTotalDiff",\n                pre."GoalResourcesTotal" - post."GoalResourcesTotal" AS "GoalResourcesTotalDiff",\n                pre."GoalFieldResponsesTotal" - post."GoalFieldResponsesTotal" AS "GoalFieldResponsesTotalDiff",\n                pre."ActivityReportGoalsTotal" - post."ActivityReportGoalsTotal" AS "ActivityReportGoalsTotalDiff",\n                pre."ActivityReportGoalResourcesTotal" - post."ActivityReportGoalResourcesTotal" AS "ActivityReportGoalResourcesTotalDiff",\n                pre."ActivityReportGoalFieldResponsesTotal" - post."ActivityReportGoalFieldResponsesTotal" AS "ActivityReportGoalFieldResponsesTotalDiff",\n                pre."ObjectivesTotal" - post."ObjectivesTotal" AS "ObjectivesTotalDiff",\n                pre."ObjectiveFilesTotal" - post."ObjectiveFilesTotal" AS "ObjectiveFilesTotalDiff",\n                pre."ObjectiveResourcesTotal" - post."ObjectiveResourcesTotal" AS "ObjectiveResourcesTotalDiff",\n                pre."ObjectiveTopicsTotal" - post."ObjectiveTopicsTotal" AS "ObjectiveTopicsTotalDiff",\n                pre."ActivityReportObjectivesTotal" - post."ActivityReportObjectivesTotal" AS "ActivityReportObjectivesTotalDiff",\n                pre."ActivityReportObjectiveFilesTotal" - post."ActivityReportObjectiveFilesTotal" AS "ActivityReportObjectiveFilesTotalDiff",\n                pre."ActivityReportObjectiveResourcesTotal" - post."ActivityReportObjectiveResourcesTotal" AS "ActivityReportObjectiveResourcesTotalDiff",\n                pre."ActivityReportObjectiveTopicsTotal" - post."ActivityReportObjectiveTopicsTotal" AS "ActivityReportObjectiveTopicsTotalDiff"\n\n            FROM "PreCountStatsByRegion" pre\n            JOIN "PostCountStatsByRegion" post ON pre."regionId" = post."regionId"\n        )\n        SELECT * FROM "RegionDiffs";\n\n        WITH "CollectStats" AS (\n            SELECT 1 id, *,\n                (SELECT SUM("GoalsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "GoalStats"\n            UNION\n            SELECT 2 id, *,\n                (SELECT SUM("GoalResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "GoalResourceStats"\n            UNION\n            SELECT 3 id, *,\n                (SELECT SUM("GoalFieldResponsesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "GoalFieldResponseStats"\n            UNION\n            SELECT 4 id, *,\n                (SELECT SUM("ActivityReportGoalsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalStats"\n            UNION\n            SELECT 5 id, *,\n                (SELECT SUM("ActivityReportGoalResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalResourceStats"\n            UNION\n            SELECT 6 id, *,\n                (SELECT SUM("ActivityReportGoalFieldResponsesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalFieldResponsesStats"\n            UNION\n            SELECT 7 id, *,\n                (SELECT SUM("ObjectivesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveStats"\n            UNION\n            SELECT 8 id, *,\n                (SELECT SUM("ObjectiveFilesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveFileStats"\n            UNION\n            SELECT 9 id, *,\n                (SELECT SUM("ObjectiveResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveResourceStats"\n            UNION\n            SELECT 10 id, *,\n                (SELECT SUM("ObjectiveTopicsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveTopicStats"\n            UNION\n            SELECT 11 id, *,\n                (SELECT SUM("ActivityReportObjectivesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveStats"\n            UNION\n            SELECT 12 id, *,\n                (SELECT SUM("ActivityReportObjectiveFilesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveFileStats"\n            UNION\n            SELECT 13 id, *,\n                (SELECT SUM("ActivityReportObjectiveResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveResourceStats"\n            UNION\n            SELECT 14 id, *,\n                (SELECT SUM("ActivityReportObjectiveTopicsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveTopicStats"\n        )\n        SELECT *,\n            pre_count - post_count AS diff,\n            post_count - (pre_count - "Deletes" + "Inserts") AS adjusted_diff\n\n        FROM "CollectStats"\n        ORDER BY id;\n        DROP TABLE IF EXISTS  "PreCountStatsByRegion" ;
Executing (ce2fc380-a61b-4d58-a421-df388d7b801e): WITH\n          "xZALGoals" AS ( SELECT 'Goals' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALGoals" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js' AND dml_by = -1),\n          "xZALGoalResources" AS ( SELECT 'GoalResources' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALGoalResources" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js' AND dml_by = -1),\n          "xZALGoalFieldResponses" AS ( SELECT 'GoalFieldResponses' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALGoalFieldResponses" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js' AND dml_by = -1),\n          "xZALActivityReportGoals" AS ( SELECT 'ActivityReportGoals' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportGoals" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportGoalResources" AS ( SELECT 'ActivityReportGoalResources' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportGoalResources" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportGoalFieldResponses" AS ( SELECT 'ActivityReportGoalFieldResponses' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportGoalFieldResponses" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALObjectives" AS ( SELECT 'Objectives' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALObjectives" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALObjectiveFiles" AS ( SELECT 'ObjectiveFiles' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALObjectiveFiles" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALObjectiveResources" AS ( SELECT 'ObjectiveResources' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALObjectiveResources" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALObjectiveTopics" AS ( SELECT 'ObjectiveTopics' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALObjectiveTopics" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportObjectives" AS ( SELECT 'ActivityReportObjectives' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportObjectives" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportObjectiveFiles" AS ( SELECT 'ActivityReportObjectiveFiles' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportObjectiveFiles" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportObjectiveResources" AS ( SELECT 'ActivityReportObjectiveResources' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportObjectiveResources" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportObjectiveTopics" AS ( SELECT 'ActivityReportObjectiveTopics' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportObjectiveTopics" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          logs AS (\n            SELECT * FROM "xZALGoals" UNION\n            SELECT * FROM "xZALGoalResources" UNION\n            SELECT * FROM "xZALGoalFieldResponses" UNION\n            SELECT * FROM "xZALActivityReportGoals" UNION\n            SELECT * FROM "xZALActivityReportGoalResources" UNION\n            SELECT * FROM "xZALActivityReportGoalFieldResponses" UNION\n            SELECT * FROM "xZALObjectives" UNION\n            SELECT * FROM "xZALObjectiveFiles" UNION\n            SELECT * FROM "xZALObjectiveResources" UNION\n            SELECT * FROM "xZALObjectiveTopics" UNION\n            SELECT * FROM "xZALActivityReportObjectives" UNION\n            SELECT * FROM "xZALActivityReportObjectiveFiles" UNION\n            SELECT * FROM "xZALActivityReportObjectiveResources" UNION\n            SELECT * FROM "xZALActivityReportObjectiveTopics"\n          )\n          SELECT "descriptor", ARRAY_AGG(DISTINCT "table") "tables"\n          FROM "logs" z\n          JOIN "ZADescriptor" zd\n          ON z.descriptor_id = zd.id\n          GROUP BY 1\n          HAVING COUNT(DISTINCT "table") > 1\n          ORDER BY 1,2;
Executing (ce2fc380-a61b-4d58-a421-df388d7b801e): DELETE\n          FROM "GoalFieldResponses"\n          WHERE "goalId" = 54671;\n\n          DELETE\n          FROM "ActivityReportGoalFieldResponses" argfr\n          USING "ActivityReportGoals" arg\n          WHERE argfr."activityReportGoalId" = arg.id\n          AND arg."goalId" = 54671;
Executing (ce2fc380-a61b-4d58-a421-df388d7b801e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230822192328-internal-goal-duplicate-cleanup: migrated (0.440s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230830161929-rename-child-incidents-reason: migrating =======
Executing (a92062c4-914b-4c20-964b-a4a47ef670df): START TRANSACTION;
Connection validated successfully
Executing (a92062c4-914b-4c20-964b-a4a47ef670df): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230830161929-rename-child-incidents-reason.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a92062c4-914b-4c20-964b-a4a47ef670df): UPDATE "ActivityReports"\n        SET "reason" = ARRAY_REPLACE("reason", 'Child Incidents', 'Child Incident')\n        WHERE "reason" @> '{"Child Incidents"}';
Executing (a92062c4-914b-4c20-964b-a4a47ef670df): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230830161929-rename-child-incidents-reason: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230831191430-program-personnel-cleanup: migrating =======
Executing (28ed422a-9ef9-484e-b918-9c6eabe36363): START TRANSACTION;
Connection validated successfully
Executing (28ed422a-9ef9-484e-b918-9c6eabe36363): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230831191430-program-personnel-cleanup.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (28ed422a-9ef9-484e-b918-9c6eabe36363): /* 1. Create a temp table of dedupe. */\n         DROP TABLE IF EXISTS "ProgramPersonnelToKeep";\n         CREATE TEMP TABLE "ProgramPersonnelToKeep" AS (\n            SELECT\n                min(id) id,\n                "programId",\n                "grantId",\n                "firstName",\n                "lastName",\n                "role",\n                "email",\n                (ARRAY_AGG(prefix order by id desc))[1] prefix,\n                (ARRAY_AGG("suffix" order by id desc))[1] "suffix",\n                (ARRAY_AGG("title" order by id desc))[1] "title",\n                MIN("createdAt") "createdAt",\n                MAX("updatedAt") "updatedAt"\n                 FROM "ProgramPersonnel"\n                 GROUP BY\n                 "firstName",\n                 "lastName",\n                 "role",\n                 "grantId",\n                 "programId",\n                 "email" -- We want entries on email change.\n         );
Executing (28ed422a-9ef9-484e-b918-9c6eabe36363): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (28ed422a-9ef9-484e-b918-9c6eabe36363): /* 3. Truncate botht the ZALProgramPersonnel and ProgramPersonnel tables. */\n         TRUNCATE TABLE "ZALProgramPersonnel";\n         TRUNCATE TABLE "ProgramPersonnel";
Executing (28ed422a-9ef9-484e-b918-9c6eabe36363): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (28ed422a-9ef9-484e-b918-9c6eabe36363): ALTER TABLE "public"."ProgramPersonnel" ADD COLUMN "mapsTo" INTEGER REFERENCES "ProgramPersonnel" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (28ed422a-9ef9-484e-b918-9c6eabe36363): /* 5a. Drop old column */\n      ALTER TABLE "ProgramPersonnel"\n      DROP COLUMN "originalPersonnelId";\n\n      /* 6. Insert the deduped records in order of id. */\n      INSERT INTO "ProgramPersonnel" (\n         "firstName",\n         "lastName",\n         "email",\n         "role",\n         "grantId",\n         "programId",\n         "prefix",\n         "suffix",\n         "title",\n         "createdAt",\n         "updatedAt",\n         "active"\n      )\n      SELECT\n        "firstName",\n        "lastName",\n        "email",\n        "role",\n        "grantId",\n        "programId",\n        "prefix",\n        "suffix",\n        "title",\n        "createdAt",\n        "updatedAt",\n        false\n        FROM "ProgramPersonnelToKeep"\n        ORDER BY id ASC;\n\n      /* 7. Set active and mapsTo values. */\n      WITH\n        distinct_pp AS (\n            SELECT\n                min("id") AS "id",\n                "firstName",\n                "lastName",\n                "email",\n                "role",\n                "grantId",\n                "programId"\n            FROM "ProgramPersonnel"\n            GROUP BY 2,3,4,5,6,7\n        ),\n        active_pp AS (\n            SELECT\n                "role",\n                "grantId",\n                "programId",\n                max(id) "activeId"\n            FROM distinct_pp\n            GROUP BY 1,2,3\n        ),\n        set_active_pp AS (\n        UPDATE "ProgramPersonnel" pp\n        SET "active" = true,\n            "mapsTo" = null\n        FROM active_pp app\n        WHERE app."activeId" = pp.id\n        RETURNING\n            pp.id,\n            'latest' "type"\n        ),\n        set_inactive_pp AS (\n        UPDATE "ProgramPersonnel" pp\n        SET "active" = false,\n            "mapsTo" = app."activeId"\n        FROM active_pp app\n        WHERE app."activeId" != pp.id\n        AND app."role" = pp."role"\n        AND app."grantId" = pp."grantId"\n        AND app."programId" = pp."programId"\n        RETURNING\n            pp.id,\n            'not latest' "type"\n        ),\n        results AS (\n            SELECT *\n            FROM set_active_pp\n            UNION\n            SELECT *\n            FROM set_inactive_pp\n        )\n        SELECT *\n        FROM results;
Executing (28ed422a-9ef9-484e-b918-9c6eabe36363): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230831191430-program-personnel-cleanup: migrated (0.224s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230905194816-add-deleted-at-to-goals-and-objectives: migrating =======
Executing (7ff777e2-a251-4216-ba47-a45ea19567d7): START TRANSACTION;
Connection validated successfully
Executing (7ff777e2-a251-4216-ba47-a45ea19567d7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230905194816-add-deleted-at-to-goals-and-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7ff777e2-a251-4216-ba47-a45ea19567d7): ALTER TABLE "public"."Objectives" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (7ff777e2-a251-4216-ba47-a45ea19567d7): ALTER TABLE "public"."Goals" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (7ff777e2-a251-4216-ba47-a45ea19567d7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230905194816-add-deleted-at-to-goals-and-objectives: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230908140816-fix-fei-goals: migrating =======
Executing (aae888d2-6908-4fb5-b1e1-2c2898400268): START TRANSACTION;
Connection validated successfully
Executing (aae888d2-6908-4fb5-b1e1-2c2898400268): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230908140816-fix-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (aae888d2-6908-4fb5-b1e1-2c2898400268): -- Update goal templates for fei.\n        UPDATE "Goals"\n            SET\n            "goalTemplateId" = 19017\n        WHERE "id" IN (52248, 52251, 52249, 52250, 55244, 55172, 55908, 55420, 55421, 56033, 50565, 50613, 50612, 50343, 50614);
Executing (aae888d2-6908-4fb5-b1e1-2c2898400268): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230908140816-fix-fei-goals: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230908155325-fix-fei-root-causes: migrating =======
Executing (76e02edd-48e1-422c-8a5c-5f8fb0f12ad3): START TRANSACTION;
Connection validated successfully
Executing (76e02edd-48e1-422c-8a5c-5f8fb0f12ad3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230908155325-fix-fei-root-causes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (76e02edd-48e1-422c-8a5c-5f8fb0f12ad3): -- Update workforce root causes for fei.\n        with ids as (\n            SELECT\n            argfr.id\n            FROM "Grants" gr\n            JOIN "Goals" goal\n                ON gr.id = goal."grantId"\n            JOIN "ActivityReportGoals" arg\n                ON goal."id" = arg."goalId"\n            JOIN "ActivityReportGoalFieldResponses" argfr\n                ON arg.id = argfr."activityReportGoalId"\n            WHERE "number" IN ('06CH011554', '06CH011558', '06CH010965', '06CH010720', '06HP000120', '06HP000296', '06CH011143'))\n            UPDATE "ActivityReportGoalFieldResponses"\n                SET "response" = '{Workforce}'\n            WHERE "id" IN (SELECT "id" FROM "ids");\n\n            with ids as (\n                SELECT\n                gfr.id\n                FROM "Grants" gr\n                JOIN "Goals" goal\n                    ON gr.id = goal."grantId"\n                JOIN "GoalFieldResponses" gfr\n                    ON goal.id = gfr."goalId"\n                WHERE "number" IN ('06CH011554', '06CH011558', '06CH010965', '06CH010720', '06HP000120', '06HP000296', '06CH011143'))\n                UPDATE "GoalFieldResponses"\n                    SET "response" = '{Workforce}'\n                WHERE "id" IN (SELECT "id" FROM "ids");\n\n            -- Update workforce, transportation root causes for fei.\n            with ids as (\n                SELECT\n                argfr.id\n                FROM "Grants" gr\n                JOIN "Goals" goal\n                    ON gr.id = goal."grantId"\n                JOIN "ActivityReportGoals" arg\n                    ON goal."id" = arg."goalId"\n                JOIN "ActivityReportGoalFieldResponses" argfr\n                    ON arg.id = argfr."activityReportGoalId"\n                WHERE "number" IN ('06CH011469', '06CH011503', '06CH011919'))\n                UPDATE "ActivityReportGoalFieldResponses"\n                    SET "response" = '{Workforce, Transportation}'\n                WHERE "id" IN (SELECT "id" FROM "ids");\n\n                with ids as (\n                    SELECT\n                    gfr.id\n                    FROM "Grants" gr\n                    JOIN "Goals" goal\n                        ON gr.id = goal."grantId"\n                    JOIN "GoalFieldResponses" gfr\n                        ON goal.id = gfr."goalId"\n                         WHERE "number" IN ('06CH011469', '06CH011503', '06CH011919'))\n                    UPDATE "GoalFieldResponses"\n                        SET "response" = '{Workforce, Transportation}'\n                    WHERE "id" IN (SELECT "id" FROM "ids");\n\n                -- Update workforce, facilities root causes for fei.\n                with ids as (\n                    SELECT\n                    argfr.id\n                    FROM "Grants" gr\n                    JOIN "Goals" goal\n                        ON gr.id = goal."grantId"\n                    JOIN "ActivityReportGoals" arg\n                        ON goal."id" = arg."goalId"\n                    JOIN "ActivityReportGoalFieldResponses" argfr\n                        ON arg.id = argfr."activityReportGoalId"\n                    WHERE "number" IN ('06CH010885', '06CH010663', '06HP000249', '06CH011990', '06HP000184', '06CH011272'))\n                    UPDATE "ActivityReportGoalFieldResponses"\n                        SET "response" = '{Workforce, Facilities}'\n                    WHERE "id" IN (SELECT "id" FROM "ids");\n\n                    with ids as (\n                        SELECT\n                        gfr.id\n                        FROM "Grants" gr\n                        JOIN "Goals" goal\n                            ON gr.id = goal."grantId"\n                        JOIN "GoalFieldResponses" gfr\n                            ON goal.id = gfr."goalId"\n                            WHERE "number" IN ('06CH010885', '06CH010663', '06HP000249', '06CH011990', '06HP000184', '06CH011272'))\n                        UPDATE "GoalFieldResponses"\n                                SET "response" = '{Workforce, Facilities}'\n                        WHERE "id" IN (SELECT "id" FROM "ids");\n\n                    -- Update Other ECE Options root causes for fei.\n                    with ids as (\n                        SELECT\n                        argfr.id\n                        FROM "Grants" gr\n                        JOIN "Goals" goal\n                            ON gr.id = goal."grantId"\n                        JOIN "ActivityReportGoals" arg\n                            ON goal."id" = arg."goalId"\n                        JOIN "ActivityReportGoalFieldResponses" argfr\n                            ON arg.id = argfr."activityReportGoalId"\n                        WHERE "number" IN ('06CH010745', '06HP000265', '06HP000473'))\n                        UPDATE "ActivityReportGoalFieldResponses"\n                            SET "response" = '{Other ECE Options}'\n                        WHERE "id" IN (SELECT "id" FROM "ids");\n\n                        with ids as (\n                            SELECT\n                            gfr.id\n                            FROM "Grants" gr\n                            JOIN "Goals" goal\n                                ON gr.id = goal."grantId"\n                            JOIN "GoalFieldResponses" gfr\n                                ON goal.id = gfr."goalId"\n                                WHERE "number" IN ('06CH010745', '06HP000265', '06HP000473'))\n                            UPDATE "GoalFieldResponses"\n                                    SET "response" = '{Other ECE Options}'\n                            WHERE "id" IN (SELECT "id" FROM "ids");\n\n                        -- Update Workforce, Other ECE Options root causes for fei.\n                        with ids as (\n                            SELECT\n                            argfr.id\n                            FROM "Grants" gr\n                            JOIN "Goals" goal\n                                ON gr.id = goal."grantId"\n                            JOIN "ActivityReportGoals" arg\n                                ON goal."id" = arg."goalId"\n                            JOIN "ActivityReportGoalFieldResponses" argfr\n                                ON arg.id = argfr."activityReportGoalId"\n                            WHERE "number" IN ('06CH011414'))\n                            UPDATE "ActivityReportGoalFieldResponses"\n                                SET "response" = '{Workforce, Other ECE Options}'\n                            WHERE "id" IN (SELECT "id" FROM "ids");\n\n                            with ids as (\n                                SELECT\n                                gfr.id\n                                FROM "Grants" gr\n                                JOIN "Goals" goal\n                                    ON gr.id = goal."grantId"\n                                JOIN "GoalFieldResponses" gfr\n                                    ON goal.id = gfr."goalId"\n                                    WHERE "number" IN ('06CH011414'))\n                                UPDATE "GoalFieldResponses"\n                                        SET "response" = '{Workforce, Other ECE Options}'\n                                WHERE "id" IN (SELECT "id" FROM "ids");
Executing (76e02edd-48e1-422c-8a5c-5f8fb0f12ad3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230908155325-fix-fei-root-causes: migrated (0.028s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230920131223-fix-other-ece-fei-root-cause: migrating =======
Executing (13e05ed5-5f50-4219-bafd-8fd8a3bd474c): START TRANSACTION;
Connection validated successfully
Executing (13e05ed5-5f50-4219-bafd-8fd8a3bd474c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230920131223-fix-other-ece-fei-root-cause.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (13e05ed5-5f50-4219-bafd-8fd8a3bd474c): -- Update Other ECE Care Options root causes for fei.\n        with ids as (\n            SELECT\n            argfr.id\n            FROM "Grants" gr\n            JOIN "Goals" goal\n                ON gr.id = goal."grantId"\n            JOIN "ActivityReportGoals" arg\n                ON goal."id" = arg."goalId"\n            JOIN "ActivityReportGoalFieldResponses" argfr\n                ON arg.id = argfr."activityReportGoalId"\n            WHERE "number" IN ('06CH010745', '06HP000265', '06HP000473'))\n            UPDATE "ActivityReportGoalFieldResponses"\n                SET "response" = '{Other ECE Care Options}'\n            WHERE "id" IN (SELECT "id" FROM "ids");\n\n            with ids as (\n                SELECT\n                gfr.id\n                FROM "Grants" gr\n                JOIN "Goals" goal\n                    ON gr.id = goal."grantId"\n                JOIN "GoalFieldResponses" gfr\n                    ON goal.id = gfr."goalId"\n                    WHERE "number" IN ('06CH010745', '06HP000265', '06HP000473'))\n                UPDATE "GoalFieldResponses"\n                        SET "response" = '{Other ECE Care Options}'\n                WHERE "id" IN (SELECT "id" FROM "ids");\n\n            -- Update Workforce, Other ECE Care Options root causes for fei.\n            with ids as (\n                SELECT\n                argfr.id\n                FROM "Grants" gr\n                JOIN "Goals" goal\n                    ON gr.id = goal."grantId"\n                JOIN "ActivityReportGoals" arg\n                    ON goal."id" = arg."goalId"\n                JOIN "ActivityReportGoalFieldResponses" argfr\n                    ON arg.id = argfr."activityReportGoalId"\n                WHERE "number" IN ('06CH011414'))\n                UPDATE "ActivityReportGoalFieldResponses"\n                    SET "response" = '{Workforce, Other ECE Care Options}'\n                WHERE "id" IN (SELECT "id" FROM "ids");\n\n                with ids as (\n                    SELECT\n                    gfr.id\n                    FROM "Grants" gr\n                    JOIN "Goals" goal\n                        ON gr.id = goal."grantId"\n                    JOIN "GoalFieldResponses" gfr\n                        ON goal.id = gfr."goalId"\n                        WHERE "number" IN ('06CH011414'))\n                    UPDATE "GoalFieldResponses"\n                            SET "response" = '{Workforce, Other ECE Care Options}'\n                    WHERE "id" IN (SELECT "id" FROM "ids");
Executing (13e05ed5-5f50-4219-bafd-8fd8a3bd474c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230920131223-fix-other-ece-fei-root-cause: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230921154701-add-suspend-objective-reasons: migrating =======
Executing (cf08d85f-caf8-4854-81ab-1f5d14d9c0d7): START TRANSACTION;
Connection validated successfully
Executing (cf08d85f-caf8-4854-81ab-1f5d14d9c0d7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230921154701-add-suspend-objective-reasons.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (cf08d85f-caf8-4854-81ab-1f5d14d9c0d7): CREATE TYPE "public"."enum_Objectives_suspendReason" AS ENUM('Key staff turnover / vacancies', 'Recipient request', 'Recipient is not responding', 'Regional Office request');ALTER TABLE "public"."Objectives" ADD COLUMN "suspendReason" "public"."enum_Objectives_suspendReason";
Executing (cf08d85f-caf8-4854-81ab-1f5d14d9c0d7): ALTER TABLE "public"."Objectives" ADD COLUMN "suspendContext" TEXT;
Executing (cf08d85f-caf8-4854-81ab-1f5d14d9c0d7): CREATE TYPE "public"."enum_ActivityReportObjectives_suspendReason" AS ENUM('Key staff turnover / vacancies', 'Recipient request', 'Recipient is not responding', 'Regional Office request');ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "suspendReason" "public"."enum_ActivityReportObjectives_suspendReason";
Executing (cf08d85f-caf8-4854-81ab-1f5d14d9c0d7): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "suspendContext" TEXT;
Executing (cf08d85f-caf8-4854-81ab-1f5d14d9c0d7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230921154701-add-suspend-objective-reasons: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230921192740-remove_national_center_ars: migrating =======
Executing (84b26e1a-18a8-47a9-9787-d36793182f1a): START TRANSACTION;
Connection validated successfully
Executing (84b26e1a-18a8-47a9-9787-d36793182f1a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230921192740-remove_national_center_ars.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (84b26e1a-18a8-47a9-9787-d36793182f1a): ---------------------------------------------------\n        -- NOTE:\n        -- Files and Resources are most properly managed by\n        -- maintenance jobs, so this and similar migrations\n        -- won't delete them directly. Deleting the link\n        -- records will give the maintenance job the info\n        -- it needs to perform its housekeeping.\n        ---------------------------------------------------\n        -------- Deleting unwanted ARs --------\n        -- Create the AR deletion list\n        -- Remove AR link records: -------------\n        -- ActivityRecipients\n        -- ActivityReportApprovers\n        -- ActivityReportCollaborators\n        -- ActivityReportFiles (no need to remove Files)\n        -- ActivityReportResources (no need to remove Resources)\n\n        -- Create the NextSteps deletion list\n        -- Remove NextSteps link records: -------------\n        -- NextStepResources\n        -- remove NextSteps -------------\n\n        -- Create the ARO deletion list\n        -- Remove ARO link records: -------------\n        -- ActivityReportObjectiveFiles\n        -- ActivityReportObjectiveResources\n        -- ActivityReportObjectiveTopics\n        -- remove AROs -------------------\n\n        -- Create the orphaned Objective deletion list\n        -- Remove Objective link records: -------------\n        -- ObjectiveFiles\n        -- ObjectiveResources\n        -- ObjectiveTopics\n        -- remove Objectives -------------\n\n        -- Create the ARG deletion list\n        -- Remove ARG link records: -------------\n        -- ActivityReportGoalFieldResponses\n        -- ActivityReportGoalResources\n        -- remove ARGs -------------------\n\n        -- Create the orphaned Goal deletions list\n        -- ( check if isFromSmartsheetTtaPlan, isRttapa)\n        -- Remove Goal link records: -------------\n        -- GoalFieldResponses\n        -- GoalResources\n        -- remove Goals ------------------\n\n        -- Create the orphaned ObjectiveTemplate deletion list\n        -- Remove ObjectiveTemplate link records: -------------\n        -- ObjectiveTemplateFiles\n        -- ObjectiveTemplateResources\n        -- ObjectiveTemplateTopics\n\n        -- Create the orphaned GoalTemplate deletion list\n        -- Remove GoalTemplate link records: -------------\n        -- GoalTemplateObjectiveTemplates\n        -- Remove ObjectiveTemplates --------\n        -- Remove GoalTemplates -------------\n\n        -- Remove ARs -----------------------\n\n        -------------------------------------------------------------------------------------------------------------------\n        -------- Deleting unwanted ARs --------\n        -- Create the AR deletion list\n        DROP TABLE IF EXISTS ars_to_delete;\n        CREATE TEMP TABLE ars_to_delete\n        AS\n        SELECT id arid\n        FROM "ActivityReports"\n        WHERE id IN (9030, 9119, 9131, 9175, 9204, 9271, 9282, 9290, 9295, 9297, 9326, 9341, 9489, 21462, 21463, 21464, 21507, 21535, 21555, 21563, 21564, 21592, 21631, 21682, 24578, 24633, 24637, 24701, 24732, 24761, 24764, 24765, 24767, 24785, 24790, 24797, 24799, 24800, 24803, 24816, 24840, 24861, 24879, 24889, 24903, 24953, 26246, 26248, 26249, 26252, 26367, 26368, 26390, 26393, 26406, 26421, 26432, 26443, 26911, 29455, 29837, 29957, 30081, 30088, 30089, 30090, 30338, 30391, 30429, 30481, 30504, 30562, 30890)\n        AND "regionId" = 2\n        ;\n\n        -- Remove AR link records: -------------\n        DROP TABLE IF EXISTS deleted_activityrecipients;\n        CREATE TEMP TABLE deleted_activityrecipients AS\n        WITH deletes AS (\n          DELETE FROM "ActivityRecipients"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportapprovers AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportApprovers"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportcollaborators AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportCollaborators"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportfiles AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportFiles"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportResources"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n\n\n\n        -- Create the NextSteps deletion list\n        DROP TABLE IF EXISTS nextsteps_to_delete;\n        CREATE TEMP TABLE nextsteps_to_delete\n        AS\n        SELECT\n          id nsid\n        FROM "NextSteps"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove NextSteps link records: -------------\n        CREATE TEMP TABLE deleted_nextstepresources AS\n        WITH deletes AS (\n          DELETE FROM "NextStepResources"\n          USING nextsteps_to_delete\n          WHERE "nextStepId" = nsid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove NextSteps -------------\n        CREATE TEMP TABLE deleted_nextsteps AS\n        WITH deletes AS (\n          DELETE FROM "NextSteps"\n          USING nextsteps_to_delete\n          WHERE id = nsid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n\n        -- Create the ARO deletion list\n        DROP TABLE IF EXISTS aros_to_delete;\n        CREATE TEMP TABLE aros_to_delete\n        AS\n        SELECT\n          id aroid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove ARO link records: -------------\n        CREATE TEMP TABLE deleted_activityreportobjectivefiles AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveFiles"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportobjectiveresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveResources"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportobjectivetopics AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveTopics"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- remove AROs -------------------\n        CREATE TEMP TABLE deleted_aros AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectives"\n          USING aros_to_delete\n          WHERE id = aroid\n          RETURNING\n          id,\n          "objectiveId" oid\n        )\n        SELECT id, oid FROM deletes\n        ;\n\n        -- Create the orphaned Objective deletion list\n        CREATE TEMP TABLE objectives_to_delete\n        AS\n        SELECT DISTINCT oid\n        FROM deleted_aros\n        EXCEPT\n        SELECT DISTINCT "objectiveId"\n        FROM "ActivityReportObjectives"\n        ;\n        -- Remove Objective link records: -------------\n        CREATE TEMP TABLE deleted_objectivefiles AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveFiles"\n          USING objectives_to_delete\n          WHERE "objectiveId" = oid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_objectiveresources AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveResources"\n          USING objectives_to_delete\n          WHERE "objectiveId" = oid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_objectivetopics AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTopics"\n          USING objectives_to_delete\n          WHERE "objectiveId" = oid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- remove Objectives -------------------\n        CREATE TEMP TABLE deleted_objectives AS\n        WITH deletes AS (\n          DELETE FROM "Objectives"\n          USING objectives_to_delete\n          WHERE id = oid\n          RETURNING\n          id,\n          "goalId" gid,\n          "objectiveTemplateId" otid\n        )\n        SELECT id, gid, otid FROM deletes\n        ;\n\n        -- Create the ARG deletion list\n        DROP TABLE IF EXISTS args_to_delete;\n        CREATE TEMP TABLE args_to_delete\n        AS\n        SELECT DISTINCT\n          id argid,\n          "goalId" gid\n        FROM "ActivityReportGoals"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove ARG link records: -------------\n        CREATE TEMP TABLE deleted_activityreportgoalfieldresponses AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoalFieldResponses"\n          USING args_to_delete\n          WHERE "activityReportGoalId" = argid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportgoalresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoalResources"\n          USING args_to_delete\n          WHERE "activityReportGoalId" = argid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove ARGs -------------------\n        CREATE TEMP TABLE deleted_args AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoals"\n          USING args_to_delete\n          WHERE id = argid\n          RETURNING\n          id,\n          "goalId" gid\n        )\n        SELECT id, gid FROM deletes\n        ;\n\n        -- Create the orphaned Goal deletions list\n        CREATE TEMP TABLE goals_to_delete\n        AS\n        SELECT DISTINCT gid\n        FROM deleted_args dargs\n        JOIN "Goals" g\n          ON gid = g.id\n        WHERE g."isRttapa" != 'Yes'\n          AND g."isFromSmartsheetTtaPlan" != TRUE\n        EXCEPT \n        SELECT gid\n        FROM (\n          SELECT DISTINCT "goalId" gid\n          FROM "ActivityReportGoals"\n          UNION\n          SELECT DISTINCT "goalId" gid\n          FROM "Objectives"\n        ) keepers\n        ;\n        -- Remove Goal link records: -------------\n        CREATE TEMP TABLE deleted_goalfieldresponses AS\n        WITH deletes AS (\n          DELETE FROM "GoalFieldResponses"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_goalresources AS\n        WITH deletes AS (\n          DELETE FROM "GoalResources"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove Goals -------------------\n        CREATE TEMP TABLE deleted_goals AS\n        WITH deletes AS (\n          DELETE FROM "Goals"\n          USING goals_to_delete\n          WHERE id = gid\n          RETURNING\n          id,\n          "goalTemplateId" gtid\n        )\n        SELECT id, gtid FROM deletes\n        ;\n\n        -- Create the orphaned ObjectiveTemplate deletion list\n        CREATE TEMP TABLE ots_to_delete\n        AS\n        SELECT DISTINCT otid\n        FROM deleted_objectives\n        EXCEPT\n        SELECT DISTINCT "objectiveTemplateId"\n        FROM "Objectives"\n        ;\n        -- Remove ObjectiveTemplate link records: -------------\n        CREATE TEMP TABLE deleted_objectivetemplatefiles AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplateFiles"\n          USING ots_to_delete\n          WHERE "objectiveTemplateId" = otid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_objectivetemplateresources AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplateResources"\n          USING ots_to_delete\n          WHERE "objectiveTemplateId" = otid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_objectivetemplatetopics AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplateTopics"\n          USING ots_to_delete\n          WHERE "objectiveTemplateId" = otid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n        -- Create the orphaned GoalTemplate deletion list\n        CREATE TEMP TABLE gts_to_delete\n        AS\n        SELECT DISTINCT gtid\n        FROM deleted_goals\n        EXCEPT\n        SELECT DISTINCT "goalTemplateId"\n        FROM "Goals"\n        ;\n        -- Remove GoalTemplate link records: -------------\n        CREATE TEMP TABLE deleted_goaltemplateobjectivetemplates AS\n        WITH unified_deletes AS (\n          SELECT DISTINCT id gtotid\n          FROM "GoalTemplateObjectiveTemplates"\n          JOIN ots_to_delete\n            ON otid = "objectiveTemplateId"\n          UNION\n          SELECT DISTINCT id gtotid\n          FROM "GoalTemplateObjectiveTemplates"\n          JOIN gts_to_delete\n            ON gtid = "goalTemplateId"\n        ),\n        deletes AS (\n          DELETE FROM "GoalTemplateObjectiveTemplates"\n          USING unified_deletes\n          WHERE id = gtotid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- Remove ObjectiveTemplates --------\n        CREATE TEMP TABLE deleted_objectivetemplates AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplates"\n          USING ots_to_delete\n          WHERE id = otid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- Remove GoalTemplates -------------\n        CREATE TEMP TABLE deleted_goaltemplates AS\n        WITH deletes AS (\n          DELETE FROM "GoalTemplates"\n          USING gts_to_delete\n          WHERE id = gtid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n        -- Remove ARs -------------\n        CREATE TEMP TABLE deleted_ars AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReports"\n          USING ars_to_delete\n          WHERE id = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n\n        -- Stats ----------------------------\n        SELECT 1,'ars_to_delete', count(*) FROM ars_to_delete\n        UNION\n        SELECT 2,'deleted_activityreportapprovers', count(*) FROM deleted_activityreportapprovers\n        UNION\n        SELECT 3,'deleted_activityreportcollaborators', count(*) FROM deleted_activityreportcollaborators\n        UNION\n        SELECT 4,'deleted_activityreportfiles', count(*) FROM deleted_activityreportfiles\n        UNION\n        SELECT 5,'deleted_activityreportresources', count(*) FROM deleted_activityreportresources\n        UNION\n        SELECT 6,'nextsteps_to_delete', count(*) FROM nextsteps_to_delete\n        UNION\n        SELECT 7,'deleted_nextstepresources', count(*) FROM deleted_nextstepresources\n        UNION\n        SELECT 8,'deleted_nextsteps', count(*) FROM deleted_nextsteps\n        UNION\n        SELECT 9,'aros_to_delete', count(*) FROM aros_to_delete\n        UNION\n        SELECT 10,'deleted_activityreportobjectivefiles', count(*) FROM deleted_activityreportobjectivefiles\n        UNION\n        SELECT 11,'deleted_activityreportobjectiveresources', count(*) FROM deleted_activityreportobjectiveresources\n        UNION\n        SELECT 12,'deleted_activityreportobjectivetopics', count(*) FROM deleted_activityreportobjectivetopics\n        UNION\n        SELECT 13,'deleted_aros', count(*) FROM deleted_aros\n        UNION\n        SELECT 14,'objectives_to_delete', count(*) FROM objectives_to_delete\n        UNION\n        SELECT 15,'deleted_objectivefiles', count(*) FROM deleted_objectivefiles\n        UNION\n        SELECT 16,'deleted_objectiveresources', count(*) FROM deleted_objectiveresources\n        UNION\n        SELECT 17,'deleted_objectivetopics', count(*) FROM deleted_objectivetopics\n        UNION\n        SELECT 18,'deleted_objectives', count(*) FROM deleted_objectives\n        UNION\n        SELECT 19,'args_to_delete', count(*) FROM args_to_delete\n        UNION\n        SELECT 20,'deleted_activityreportgoalfieldresponses', count(*) FROM deleted_activityreportgoalfieldresponses\n        UNION\n        SELECT 21,'deleted_activityreportgoalresources', count(*) FROM deleted_activityreportgoalresources\n        UNION\n        SELECT 22,'deleted_args', count(*) FROM deleted_args\n        UNION\n        SELECT 23,'goals_to_delete', count(*) FROM goals_to_delete\n        UNION\n        SELECT 24,'deleted_goalfieldresponses', count(*) FROM deleted_goalfieldresponses\n        UNION\n        SELECT 25,'deleted_goalresources', count(*) FROM deleted_goalresources\n        UNION\n        SELECT 26,'deleted_goals', count(*) FROM deleted_goals\n        UNION\n        SELECT 27,'ots_to_delete', count(*) FROM ots_to_delete\n        UNION\n        SELECT 28,'deleted_objectivetemplatefiles', count(*) FROM deleted_objectivetemplatefiles\n        UNION\n        SELECT 29,'deleted_objectivetemplateresources', count(*) FROM deleted_objectivetemplateresources\n        UNION\n        SELECT 30,'deleted_objectivetemplatetopics', count(*) FROM deleted_objectivetemplatetopics\n        UNION\n        SELECT 31,'gts_to_delete', count(*) FROM gts_to_delete\n        UNION\n        SELECT 32,'deleted_goaltemplateobjectivetemplates', count(*) FROM deleted_goaltemplateobjectivetemplates\n        UNION\n        SELECT 33,'deleted_objectivetemplates', count(*) FROM deleted_objectivetemplates\n        UNION\n        SELECT 34,'deleted_goaltemplates', count(*) FROM deleted_goaltemplates\n        UNION\n        SELECT 35,'deleted_ars', count(*) FROM deleted_ars\n        ORDER BY 1\n        ;
Executing (84b26e1a-18a8-47a9-9787-d36793182f1a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230921192740-remove_national_center_ars: migrated (0.088s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230927154903-update-class-goal: migrating =======
Executing (9ac88c2a-7f9b-44fb-86bb-031c457f6576): START TRANSACTION;
Connection validated successfully
Executing (9ac88c2a-7f9b-44fb-86bb-031c457f6576): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230927154903-update-class-goal.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9ac88c2a-7f9b-44fb-86bb-031c457f6576): -- update goal text for class goal\n        UPDATE "Goals"\n          SET\n            "name" = '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)',\n            "goalTemplateId" = 18172\n          WHERE "name" = '(PILOT) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)';\n\n      -- update activity report goals\n        UPDATE "ActivityReportGoals"\n          SET\n            "name" = '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)'\n          WHERE "name" = '(PILOT) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)';\n      \n      -- set existing template to curated\n      -- this will ensure the template always appears selectable (and read-only) in the UI\n        UPDATE "GoalTemplates"\n          SET\n            "creationMethod" = 'Curated'::"enum_GoalTemplates_creationMethod",\n            "templateName" = '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)',\n            "hash" = MD5(TRIM('(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)'))\n          WHERE "id" = 18172;
Executing (9ac88c2a-7f9b-44fb-86bb-031c457f6576): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230927154903-update-class-goal: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230929205404-update-fei-root-cause-validations: migrating =======
Executing (34028062-22e4-4807-b898-ba15864b20ca): START TRANSACTION;
Connection validated successfully
Executing (34028062-22e4-4807-b898-ba15864b20ca): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230929205404-update-fei-root-cause-validations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (34028062-22e4-4807-b898-ba15864b20ca): UPDATE "GoalTemplateFieldPrompts"\n        SET "validations" = '{"required":"Select a root cause","rules":[{"name":"maxSelections","value":2,"message":"You can only select 2 options"},{"name":"minSelections","value":1,"message":"You must select at least one options"}]}'\n      WHERE "title" = 'FEI root cause'
Executing (34028062-22e4-4807-b898-ba15864b20ca): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230929205404-update-fei-root-cause-validations: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231017230000-merge-pseudo-fei-goals: migrating =======
Executing (c54e73a6-63d7-43a1-a75a-50df6ae99aea): START TRANSACTION;
Connection validated successfully
Executing (c54e73a6-63d7-43a1-a75a-50df6ae99aea): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231017230000-merge-pseudo-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c54e73a6-63d7-43a1-a75a-50df6ae99aea): -- Merging goals to a new template\n      -- There are some goals that are being merged into goals\n      -- that are already on the correct template, and some\n      -- goals that need to become the FEI goal\n\n      -- PROCESS:\n      -- Create goal_merges listing target goals and templates\n      -- Create template_merges listing which templates from donor templates need to merge to target templates\n      -- NOTE: currently skipping goal template merge steps because there are no goal templates to merge\n      -- Correct any goals that are their own merge target by updating to match their new templates\n      -- Create objective_merges for objectives that match on donor and target goals\n      -- Update the target objectives record history fields from the donor objectives\n      -- Merge objective topics\n      -- Merge objective resources\n      -- Merge objective files\n      -- Delete duplicate objective topics\n      -- Delete duplicate objective resources\n      -- Delete duplicate objective files\n      -- Relink non-goalmerge Objectives\n      -- Update the target goals record history fields from the donor goals\n      -- Relink non-duplicate ARGs\n      -- Delete duplicate ARGs\n      -- Delete donor goals\n\n      -- Update goal templates for fei.\n      DROP TABLE IF EXISTS goal_merges;\n      CREATE TEMP TABLE goal_merges\n      AS\n      WITH goalmap AS (\n        SELECT -- starting with the 2023 set\n          '01CH011564' grnum,\n          54340 donor_gid,\n          50741 target_gid\n        UNION SELECT '01CH011820', 52284, 50952\n        UNION SELECT '01CH011820', 52416, 50952\n        UNION SELECT '01CH011482', 54341, 52420\n        UNION SELECT '01CH011496', 54342, 51164\n        UNION SELECT '01CH010695', 54343, 51171\n        UNION SELECT '01CH011183', 52285, 50953\n        UNION SELECT '01CH010718', 54344, 51165\n        UNION SELECT '01CH011941', 52286, 50954\n        UNION SELECT '01CH011875', 54345, 51166\n        UNION SELECT '01CH011404', 52287, 50955\n        UNION SELECT '01CH011404', 54360, 50955\n        UNION SELECT '01CH012151', 54351, 54325\n        UNION SELECT '01CH010716', 52288, 50956\n        UNION SELECT '01CH011664', 52289, 50957\n        UNION SELECT '01CH010781', 52290, 50958\n        UNION SELECT '01CH010741', 52291, 50959\n        UNION SELECT '01CH011513', 54346, 51168\n        UNION SELECT '01CH012160', 52292, 50960\n        UNION SELECT '01CH011913', 52293, 52223\n        UNION SELECT '01CH010930', 52295, 50705\n        UNION SELECT '01CH010602', 52296, 50961\n        UNION SELECT '01CH011668', 54347, 51169\n        UNION SELECT '01CH012124', 54348, 51170\n        UNION SELECT '05CH011505', 55653, 55649\n        UNION SELECT '05CH010709', 55651, 55648\n        UNION SELECT '05CH010775', 52460, 52453\n        UNION SELECT '05CH011904', 52461, 52454\n        UNION SELECT '05CH012183', 52462, 52455\n        UNION SELECT '05CH011796', 55655, 54275\n        UNION SELECT '05CH011188', 54308, 54774\n        UNION SELECT '05CH010694', 55650, 55647\n        UNION SELECT '05CH010926', 52319, 50605\n        UNION SELECT '05CH011114', 52318, 50606\n        UNION SELECT '05CH011731', 52317, 50607\n        UNION SELECT '05CH011253', 52463, 52456\n        UNION SELECT '05CH011463', 51508, 52451\n        UNION SELECT '05CH011463', 51654, 52451\n        UNION SELECT '05CH011463', 54307, 52451\n        UNION SELECT '05CH011851', 54316, 55215\n        UNION SELECT '05CH011779', 55654, 53116\n        UNION SELECT '05CH010568', 54002, 51599\n        UNION SELECT '05CH012264', 54767, 56632\n        UNION SELECT '05CH011144', 51892, 51811\n        UNION SELECT '10CH012116', 53611, 53390\n        UNION SELECT '01CH011357', 54349, 54349 -- continuing with the 2093 set\n        UNION SELECT '01CH011073', 54350, 54350\n        UNION SELECT '01CH011423', 54215, 54215\n        UNION SELECT '01CH011874', 52294, 52294\n        UNION SELECT '04CH011857', 55635, 55635\n        UNION SELECT '04CH011025', 56022, 56022\n        UNION SELECT '05CH012028', 55115, 55115\n        UNION SELECT '05CH012316', 56047, 56047\n        UNION SELECT '05CH011333', 54317, 54317\n      ),\n      target_template AS (SELECT 19017 fei_gtid),\n      existing_fei_goals AS (\n        SELECT\n          COALESCE(g.id,target_gid) gid,\n          target_gid,\n          grnum\n        FROM goalmap gm\n        CROSS JOIN target_template tt\n        JOIN "Grants" gr\n          ON grnum = gr.number\n        LEFT JOIN "Goals" g\n          ON g."grantId" = gr.id\n          AND g."goalTemplateId" = tt.fei_gtid\n      )\n      SELECT\n        grnum,\n        donor_gid,\n        target_gid,\n        fei_gtid target_gtid\n      FROM goalmap\n      CROSS JOIN target_template\n      ;\n\n      -- This returns empty on the current dataset because none of the\n      -- pseudo-FEI goals have templates. This seems wrong, but it is\n      -- the state of the data right now.\n      DROP TABLE IF EXISTS template_merges;\n      CREATE TEMP TABLE template_merges\n      AS\n      SELECT DISTINCT\n        g."goalTemplateId" donor_gtid,\n        target_gtid\n      FROM goal_merges gm\n      JOIN "Goals" g\n        ON gm.donor_gid = g.id\n      WHERE g."goalTemplateId" IS NOT NULL\n      ;\n\n      -- When template_merges is empty, then goal template merging logic\n      -- will never be engaged. So, instead of implementing that all now\n      -- we can save a lot of time by just confirming that it can be skipped\n      -- for now. This will error out the transaction if there are any\n      -- goal templates on the donor goals\n      WITH template_merges_count AS (SELECT COUNT(*) cnt FROM template_merges)\n      SELECT\n        1/\n        (LEAST(cnt, 1) - 1)\n      FROM template_merges_count\n      ;\n\n\n      -- Update pseudo FEI goals to be valid FEI goals\n      DROP TABLE IF EXISTS corrected_goals;\n      CREATE TEMP TABLE corrected_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          name = gt."templateName",\n          "goalTemplateId" = gm.target_gtid\n        FROM goal_merges gm\n        JOIN "GoalTemplates" gt\n          ON gm.target_gtid = gt.id\n        WHERE donor_gid = target_gid\n          AND target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Create objective_merges for objectives that match on donor and target goals\n      DROP TABLE IF EXISTS objective_merges;\n      CREATE TEMP TABLE objective_merges\n      AS\n      SELECT\n        donor_obj.id donor_oid,\n        target_obj.id target_oid\n      FROM goal_merges gm\n      JOIN "Objectives" donor_obj\n        ON gm.donor_gid = donor_obj."goalId"\n      JOIN "Objectives" target_obj\n        ON gm.target_gid = target_obj."goalId"\n        AND donor_obj.title = target_obj.title\n      WHERE donor_obj.id != target_obj.id\n      ;\n\n      -- Update the merge target objectives\n      DROP TABLE IF EXISTS updated_target_objectives;\n      CREATE TEMP TABLE updated_target_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" AS o\n        SET\n          "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n          "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n          "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n          "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n          "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n          "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n        FROM objective_merges om\n        JOIN "Objectives" d_o\n          ON om.donor_oid = d_o.id\n        WHERE om.target_oid = o.id\n        RETURNING\n          o.id oid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      \n      -- Merge objective topics\n      DROP TABLE IF EXISTS relinked_objective_topics;\n      CREATE TEMP TABLE relinked_objective_topics\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "topicId" tid\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.donor_oid = ot."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "topicId"\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.target_oid = ot."objectiveId"\n        )\n        UPDATE "ObjectiveTopics" AS ot\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE ot."topicId" = u.tid\n          AND ot."objectiveId" = u.donor_oid\n        RETURNING\n          id otid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Merge objective resources\n      DROP TABLE IF EXISTS relinked_objective_resources;\n      CREATE TEMP TABLE relinked_objective_resources\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "resourceId" rid\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.donor_oid = o_r."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "resourceId"\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.target_oid = o_r."objectiveId"\n        )\n        UPDATE "ObjectiveResources" AS o_r\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE o_r."resourceId" = u.rid\n          AND o_r."objectiveId" = u.donor_oid\n        RETURNING\n          id orid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Merge objective files\n      DROP TABLE IF EXISTS relinked_objective_files;\n      CREATE TEMP TABLE relinked_objective_files\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "fileId" fid\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.donor_oid = of."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "fileId"\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.target_oid = of."objectiveId"\n        )\n        UPDATE "ObjectiveFiles" AS of\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE of."fileId" = u.fid\n          AND of."objectiveId" = u.donor_oid\n        RETURNING\n          id ofid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective topics\n      DROP TABLE IF EXISTS deleted_objective_topics;\n      CREATE TEMP TABLE deleted_objective_topics\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveTopics"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id otid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective resources\n      DROP TABLE IF EXISTS deleted_objective_resources;\n      CREATE TEMP TABLE deleted_objective_resources\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveResources"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id orid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective files\n      CREATE TEMP TABLE deleted_objective_files\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveFiles"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ofid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Link objectives on merged goals to the FEI goals\n      DROP TABLE IF EXISTS relinked_objectives;\n      CREATE TEMP TABLE relinked_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives"\n        SET "goalId" = target_gid\n        FROM goal_merges\n        WHERE "goalId" = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          id oid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target goals\n      DROP TABLE IF EXISTS updated_target_goals;\n      CREATE TEMP TABLE updated_target_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          "updatedAt" = GREATEST(dg."updatedAt", g."updatedAt"),\n          "firstNotStartedAt" = LEAST(dg."firstNotStartedAt", g."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(dg."lastNotStartedAt", g."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(dg."firstInProgressAt", g."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(dg."lastInProgressAt", g."lastInProgressAt"),\n          "firstCeasedSuspendedAt" = LEAST(dg."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt"),\n          "lastCeasedSuspendedAt" = GREATEST(dg."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt"),\n          "firstClosedAt" = LEAST(dg."firstClosedAt", g."firstClosedAt"),\n          "lastClosedAt" = GREATEST(dg."lastClosedAt", g."lastClosedAt")\n        FROM goal_merges gm\n        JOIN "Goals" dg\n          ON gm.donor_gid = dg.id\n        WHERE gm.target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- relink non-duplicate ARGs\n      DROP TABLE IF EXISTS relinked_args;\n      CREATE TEMP TABLE relinked_args\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            "activityReportId" arid,\n            "goalId" gid\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.donor_gid = arg."goalId"\n          EXCEPT\n          SELECT\n            "activityReportId",\n            "goalId"\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.target_gid = arg."goalId"\n        )\n        UPDATE "ActivityReportGoals" AS arg\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.gid = gm.donor_gid\n        WHERE arg."goalId" = u.gid\n          AND arg."activityReportId" = u.arid\n        RETURNING\n          id argid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id argid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Delete donor goals\n      DROP TABLE IF EXISTS deleted_goals;\n      CREATE TEMP TABLE deleted_goals\n      AS\n      WITH updater AS (\n        DELETE FROM "Goals"\n        USING goal_merges\n        WHERE id = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          target_gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      SELECT\n        1 op_order,\n        'corrected_goals' operation,\n        COUNT(*) cnt\n      FROM corrected_goals\n      UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n      UNION SELECT 3,'relinked_objective_topics', COUNT(*) FROM relinked_objective_topics\n      UNION SELECT 4,'relinked_objective_resources', COUNT(*) FROM relinked_objective_resources\n      UNION SELECT 5,'relinked_objective_files', COUNT(*) FROM relinked_objective_files\n      UNION SELECT 6,'deleted_objective_topics', COUNT(*) FROM deleted_objective_topics\n      UNION SELECT 7,'deleted_objective_resources', COUNT(*) FROM deleted_objective_resources\n      UNION SELECT 8,'deleted_objective_files', COUNT(*) FROM deleted_objective_files\n      UNION SELECT 9,'relinked_objectives', COUNT(*) FROM relinked_objectives\n      UNION SELECT 10,'updated_target_goals', COUNT(*) FROM updated_target_goals\n      UNION SELECT 11,'relinked_args', COUNT(*) FROM relinked_args\n      UNION SELECT 12,'deleted_args', COUNT(*) FROM deleted_args\n      UNION SELECT 13,'deleted_goals', COUNT(*) FROM deleted_goals\n      ORDER BY 1\n      ;
Executing (c54e73a6-63d7-43a1-a75a-50df6ae99aea): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231017230000-merge-pseudo-fei-goals: migrated (0.079s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231017230001-fei-goal-status-changes: migrating =======
Executing (50bc792b-67e4-4ff4-8100-dd5cb4b8fe1b): START TRANSACTION;
Connection validated successfully
Executing (50bc792b-67e4-4ff4-8100-dd5cb4b8fe1b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231017230001-fei-goal-status-changes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (50bc792b-67e4-4ff4-8100-dd5cb4b8fe1b): -- fixing the desired goal status\n      DROP TABLE IF EXISTS status_update_goals;\n      CREATE TEMP TABLE status_update_goals\n      AS\n      WITH goalset AS (\n        SELECT * FROM (\n          VALUES -- sorted and deduped\n          (50605), (50606), (50607), (50705), (50741), (50952), (50953), (50954), (50955), (50956),\n          (50957), (50958), (50959), (50960), (50961), (51164), (51165), (51166), (51168), (51169),\n          (51170), (51171), (51599), (51811), (52223), (52294), (52420), (52451), (52453), (52454),\n          (52455), (52456), (53116), (53390), (54215), (54275), (54317), (54325), (54349), (54350),\n          (54774), (55115), (55215), (55635), (55647), (55648), (55649), (56022), (56047), (56632)\n        ) AS data(gid)\n      )\n      SELECT\n        gid,\n        BOOL_OR(ar.id IS NOT NULL) on_approved_ar\n      FROM goalset g\n      LEFT JOIN "Objectives" o\n        ON o."goalId" = g.gid\n      LEFT JOIN "ActivityReportObjectives" aro\n        ON aro."objectiveId" = o.id\n      LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        AND "calculatedStatus" = 'approved'\n      GROUP BY 1\n      ;\n\n      DROP TABLE IF EXISTS updated_to_not_started;\n      CREATE TEMP TABLE updated_to_not_started\n      AS\n      WITH updater AS (\n        UPDATE "Goals"\n        SET\n          status = 'Not Started',\n          "updatedAt" = NOW()\n        FROM status_update_goals\n        WHERE id = gid\n          AND on_approved_ar = FALSE\n          AND status != 'Not Started'\n        RETURNING\n          id\n      ) SELECT * FROM updater\n      ;\n      DROP TABLE IF EXISTS updated_to_in_progress;\n      CREATE TEMP TABLE updated_to_in_progress\n      AS\n      WITH updater AS (\n        UPDATE "Goals"\n        SET\n          status = 'In Progress',\n          "updatedAt" = NOW()\n        FROM status_update_goals\n        WHERE id = gid\n          AND on_approved_ar\n          AND status != 'In Progress'\n        RETURNING\n          id\n      ) SELECT * FROM updater\n      ;\n      \n      SELECT 'updated_to_in_progress' operation, COUNT(*) cnt FROM updated_to_in_progress\n      UNION\n      SELECT 'updated_to_not_started' operation, COUNT(*) cnt FROM updated_to_not_started\n      ;
Executing (50bc792b-67e4-4ff4-8100-dd5cb4b8fe1b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231017230001-fei-goal-status-changes: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231019233102-cleanup-ongoing-monitoring-topic: migrating =======
Executing (09ad95b1-4956-44e6-90b3-9bed064cb049): START TRANSACTION;
Connection validated successfully
Executing (09ad95b1-4956-44e6-90b3-9bed064cb049): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231019233102-cleanup-ongoing-monitoring-topic.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (09ad95b1-4956-44e6-90b3-9bed064cb049): -- Update activity report topics.\n      UPDATE "ActivityReports"\n      SET\n          topics = array_replace(topics, 'Ongoing Monitoring Management System', 'Ongoing Monitoring and Continuous Improvement')\n        WHERE topics @> ARRAY['Ongoing Monitoring Management System']::varchar[];\n\n        -- Update "ActivityReportObjectiveTopics" table.\n        UPDATE "ActivityReportObjectiveTopics"\n        SET "topicId" = 130\n        WHERE "topicId" = 127;\n\n        -- Update "ObjectiveTemplateTopics" table.\n        UPDATE "ObjectiveTemplateTopics"\n        SET "topicId" = 130\n        WHERE "topicId" = 127;\n\n        -- Update "ObjectiveTopics" table.\n        UPDATE "ObjectiveTopics"\n        SET "topicId" = 130\n        WHERE "topicId" = 127;\n\n        -- Update "RoleTopics" table.\n        UPDATE "RoleTopics"\n        SET "topicId" = 130\n        WHERE "topicId" = 127;
Executing (09ad95b1-4956-44e6-90b3-9bed064cb049): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231019233102-cleanup-ongoing-monitoring-topic: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231020133942-account-for-merge-goals: migrating =======
Executing (780d5a24-0c4d-4a05-aa85-b83f71fdfa4d): START TRANSACTION;
Connection validated successfully
Executing (780d5a24-0c4d-4a05-aa85-b83f71fdfa4d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231020133942-account-for-merge-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (780d5a24-0c4d-4a05-aa85-b83f71fdfa4d): ALTER TABLE "public"."Goals" ADD COLUMN "mapsToParentGoalId" INTEGER REFERENCES "Goals" ("id");
Executing (780d5a24-0c4d-4a05-aa85-b83f71fdfa4d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231020133942-account-for-merge-goals: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231023153206-merge_goals_feature_flag: migrating =======
Executing (4464211a-ce58-4b24-b37c-50d1c0af85b9): START TRANSACTION;
Connection validated successfully
Executing (4464211a-ce58-4b24-b37c-50d1c0af85b9): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231023153206-merge_goals_feature_flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (4464211a-ce58-4b24-b37c-50d1c0af85b9): DO $$ BEGIN\n          ALTER TYPE "enum_Users_flags" ADD VALUE 'merge_goals';\n        EXCEPTION\n          WHEN duplicate_object THEN null;\n        END $$;
Executing (4464211a-ce58-4b24-b37c-50d1c0af85b9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231023153206-merge_goals_feature_flag: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231023204415-enhance-email-enum: migrating =======
Executing (a8d7a0ce-a04e-4e41-b9e6-e53cedc98708): START TRANSACTION;
Connection validated successfully
Executing (a8d7a0ce-a04e-4e41-b9e6-e53cedc98708): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231023204415-enhance-email-enum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'collaboratorAssigned';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'changesRequested';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'approverAssigned';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'reportApproved';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'collaboratorDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'changesRequestedDigest';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'approverAssignedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'reportApprovedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'recipientReportApproved';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'recipientReportApprovedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportCollaboratorAdded';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportSessionCreated';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportEventCompleted';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportTaskDueNotifications';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportEventImported';
Connection validated successfully
Executing (a8d7a0ce-a04e-4e41-b9e6-e53cedc98708): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231023204415-enhance-email-enum: migrated (0.366s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231025135316-add-to-created-via-enum: migrating =======
Executing (e527f03d-64f8-42e1-9e66-d1b4e988e6ad): START TRANSACTION;
Connection validated successfully
Executing (e527f03d-64f8-42e1-9e66-d1b4e988e6ad): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231025135316-add-to-created-via-enum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e527f03d-64f8-42e1-9e66-d1b4e988e6ad): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'imported';
Executing (e527f03d-64f8-42e1-9e66-d1b4e988e6ad): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'activityReport';
Executing (e527f03d-64f8-42e1-9e66-d1b4e988e6ad): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'rtr';
Executing (e527f03d-64f8-42e1-9e66-d1b4e988e6ad): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'merge';
Executing (e527f03d-64f8-42e1-9e66-d1b4e988e6ad): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'admin';
Executing (e527f03d-64f8-42e1-9e66-d1b4e988e6ad): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Executing (e527f03d-64f8-42e1-9e66-d1b4e988e6ad): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231025135316-add-to-created-via-enum: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231027150000-remove-test-fei-goals: migrating =======
Executing (e4e1a991-f6c7-4310-b140-5068fe0990dc): START TRANSACTION;
Connection validated successfully
Executing (e4e1a991-f6c7-4310-b140-5068fe0990dc): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231027150000-remove-test-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e4e1a991-f6c7-4310-b140-5068fe0990dc): -- Some test FEI goals were created for region 6 grants that weren't supposed to have them\n\n      -- PROCESS:\n      -- Mark objectives deletedAt\n      -- Mark goals deletedAt\n\n      CREATE TEMP TABLE goals_for_deletion\n      AS\n      SELECT * FROM (\n        VALUES -- sorted and deduped\n        (51072),\n        (51322),\n        (51326),\n        (51327),\n        (51330),\n        (51331)\n      ) AS data(gid)\n      ;\n\n      UPDATE "Objectives"\n      SET "deletedAt" = NOW()\n      FROM goals_for_deletion\n      WHERE "goalId" = gid\n      ;\n\n      UPDATE "Goals"\n      SET "deletedAt" = NOW()\n      FROM goals_for_deletion\n      WHERE id = gid\n      ;
Executing (e4e1a991-f6c7-4310-b140-5068fe0990dc): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231027150000-remove-test-fei-goals: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231027153820-cleanup-target-populations: migrating =======
Executing (566ecb0e-fd53-44ec-99fc-06be87c5346a): START TRANSACTION;
Connection validated successfully
Executing (566ecb0e-fd53-44ec-99fc-06be87c5346a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231027153820-cleanup-target-populations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (566ecb0e-fd53-44ec-99fc-06be87c5346a): -- Update AR 'Preschool (ages 3-5)'.\n        UPDATE "ActivityReports"\n        SET\n            "targetPopulations" = array_replace("targetPopulations", 'Preschool (ages 3-5)', 'Preschool Children (ages 3-5)')\n          WHERE "targetPopulations" @> ARRAY['Preschool (ages 3-5)']::varchar[];\n\n        -- Update AR 'Pregnant Women'.\n        UPDATE "ActivityReports"\n          SET\n          "targetPopulations" = array_replace("targetPopulations", 'Pregnant Women', 'Pregnant Women / Pregnant Persons')\n            WHERE "targetPopulations" @> ARRAY['Pregnant Women']::varchar[];\n\n       -- Cleanup JSON 'Target Populations' for TR (create proper array).\n       WITH "goodTgt" as (\n        SELECT\n          erp.id,\n          ARRAY_AGG(DISTINCT erptp.tp) "targetPopulations"\n        FROM "EventReportPilots" erp\n        CROSS JOIN LATERAL (\n          SELECT\n          UNNEST(\n            CASE\n              WHEN value::text like '%' || chr(92) || chr(92) || 'n' || '%'\n              THEN STRING_TO_ARRAY(trim(value::text,'"'), chr(92) || 'n') -- Char(10) is a new line.\n              ELSE ARRAY[trim(value::TEXT,'"')]::TEXT[]\n            END\n            ) tp\n          FROM jsonb_array_elements(erp.data -> 'targetPopulations') WITH ORDINALITY\n        ) erptp\n        GROUP BY 1\n        ORDER BY 1\n      )\n      UPDATE "EventReportPilots" e\n      SET data = JSONB_SET(\n                  data,\n                  ARRAY['targetPopulations'],\n                  TO_JSONB(gt."targetPopulations")\n                  )\n      FROM "goodTgt" gt\n      WHERE e."id" = gt."id";\n\n      -- Cleanup JSON 'Reasons' for TR (create proper array).\n      WITH "goodTgt" as (\n      SELECT erp.id, ARRAY_AGG(erpr.r) AS good\n      FROM "EventReportPilots" erp\n      CROSS JOIN UNNEST(STRING_TO_ARRAY(TRIM(REPLACE(data ->> 'reasons', '", "', ' '),'["] '), chr(92) || 'n')) erpr(r)\n      GROUP BY 1\n      ORDER BY 1\n      )\n      UPDATE "EventReportPilots" e\n      SET data = JSONB_SET(\n                  data,\n                  ARRAY['reasons'],\n                  TO_JSONB(gt.good)\n                  )\n      FROM "goodTgt" gt\n      WHERE e."id" = gt."id";\n\n       -- Update JSON array property 'targetPopulations' for TR 'Preschool (ages 3-5)'.\n        UPDATE "EventReportPilots"\n            SET data = (\n          SELECT JSONB_SET(\n                  data,\n                  '{targetPopulations}',\n                  (\n            SELECT jsonb_agg(\n              CASE\n              WHEN value::text = '"Preschool (ages 3-5)"' THEN '"Preschool Children (ages 3-5)"'::jsonb\n              ELSE value\n              END\n            )\n            FROM jsonb_array_elements(data->'targetPopulations') AS value\n            )::jsonb\n                  ))\n        WHERE data->'targetPopulations' @> '["Preschool (ages 3-5)"]'::jsonb;\n\n        -- Update JSON array property 'targetPopulations' for TR 'Pregnant Women/Pregnant People'.\n        UPDATE "EventReportPilots"\n            SET data = (\n          SELECT JSONB_SET(\n                  data,\n                  '{targetPopulations}',\n                  (\n            SELECT jsonb_agg(\n              CASE\n              WHEN value::text = '"Pregnant Women/Pregnant People"' OR value::text = '"Pregnant Women"' THEN '"Pregnant Women / Pregnant Persons"'::jsonb\n              ELSE value\n              END\n            )\n            FROM jsonb_array_elements(data->'targetPopulations') AS value\n            )::jsonb\n                  ))\n        WHERE data->'targetPopulations' @> '["Pregnant Women/Pregnant People"]'::jsonb;\n\n        -- Remove all duplicates from JSON array property 'targetPopulations' for TR.\n        UPDATE "EventReportPilots"\n            SET data = (\n          SELECT JSONB_SET(\n                  data,\n                  '{targetPopulations}',\n                  (\n            SELECT jsonb_agg(DISTINCT value)\n            FROM jsonb_array_elements(data->'targetPopulations') AS value\n            )::jsonb\n                  ))\n        WHERE data->'targetPopulations' IS NOT NULL;
Executing (566ecb0e-fd53-44ec-99fc-06be87c5346a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231027153820-cleanup-target-populations: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231030150724-sim_score_cache: migrating =======
Executing (b35a070d-eb3f-4be5-9ebc-30df6491943d): START TRANSACTION;
Connection validated successfully
Executing (b35a070d-eb3f-4be5-9ebc-30df6491943d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231030150724-sim_score_cache.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "SimScoreGoalCaches" ("id"   SERIAL , "recipient_id" INTEGER NOT NULL REFERENCES "Recipients" ("id"), "goal1" INTEGER NOT NULL REFERENCES "Goals" ("id"), "goal2" INTEGER NOT NULL REFERENCES "Goals" ("id"), "score" DECIMAL(3,1) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (b35a070d-eb3f-4be5-9ebc-30df6491943d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231030150724-sim_score_cache: migrated (0.050s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231106162320-add-communication-log-feature-flag: migrating =======
Executing (8f0dbc16-bff8-4ef0-8c21-438da6e65b34): START TRANSACTION;
Connection validated successfully
Executing (8f0dbc16-bff8-4ef0-8c21-438da6e65b34): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231106162320-add-communication-log-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (8f0dbc16-bff8-4ef0-8c21-438da6e65b34): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231106162320-add-communication-log-feature-flag: migrated (0.077s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231106205014-create-communication-log: migrating =======
Executing (7660e1a8-a705-4c9f-8ce9-552ec80d0b57): START TRANSACTION;
Connection validated successfully
Executing (7660e1a8-a705-4c9f-8ce9-552ec80d0b57): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231106205014-create-communication-log.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "CommunicationLogs" ("id"   SERIAL , "recipientId" INTEGER NOT NULL REFERENCES "Recipients" ("id"), "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "data" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (7660e1a8-a705-4c9f-8ce9-552ec80d0b57): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231106205014-create-communication-log: migrated (0.063s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231109190406-additional-changes-for-merge-goals: migrating =======
Executing (48169400-6126-434a-80cd-bf58fa579656): START TRANSACTION;
Connection validated successfully
Executing (48169400-6126-434a-80cd-bf58fa579656): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231109190406-additional-changes-for-merge-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (48169400-6126-434a-80cd-bf58fa579656): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'imported';
Executing (48169400-6126-434a-80cd-bf58fa579656): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'activityReport';
Executing (48169400-6126-434a-80cd-bf58fa579656): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'rtr';
Executing (48169400-6126-434a-80cd-bf58fa579656): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'merge';
Executing (48169400-6126-434a-80cd-bf58fa579656): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'admin';
Executing (48169400-6126-434a-80cd-bf58fa579656): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Executing (48169400-6126-434a-80cd-bf58fa579656): ALTER TABLE "public"."Objectives" ADD COLUMN "mapsToParentObjectiveId" INTEGER REFERENCES "Objectives" ("id");
Executing (48169400-6126-434a-80cd-bf58fa579656): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "originalObjectiveId" INTEGER REFERENCES "Objectives" ("id");
Executing (48169400-6126-434a-80cd-bf58fa579656): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "originalGoalId" INTEGER REFERENCES "Goals" ("id");
Executing (48169400-6126-434a-80cd-bf58fa579656): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231109190406-additional-changes-for-merge-goals: migrated (0.036s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231115000000-revise-reason: migrating =======
Executing (8fc2dd9e-826b-4bc7-b1bc-37ec111f41d4): START TRANSACTION;
Connection validated successfully
Executing (8fc2dd9e-826b-4bc7-b1bc-37ec111f41d4): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231115000000-revise-reason.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8fc2dd9e-826b-4bc7-b1bc-37ec111f41d4): UPDATE "ActivityReports"\n  SET "reason" = array_replace("reason", 'Planning/Coordination (also TTA Plan Agreement)', 'Planning/Coordination')\n  WHERE "reason" @> ARRAY['Planning/Coordination (also TTA Plan Agreement)']::VARCHAR[];
Executing (8fc2dd9e-826b-4bc7-b1bc-37ec111f41d4): UPDATE "EventReportPilots"\n  SET\n    "data" = (\n      SELECT\n        JSONB_SET(\n          "data",\n          '{reasons}',\n          (\n            SELECT\n              jsonb_agg(\n                CASE\n                  WHEN value::text = '"Planning/Coordination (also TTA Plan Agreement)"'\n                    THEN '"Planning/Coordination"'::jsonb\n                  ELSE value\n                END\n              )\n            FROM jsonb_array_elements("data" -> 'reasons') AS value\n          )::jsonb\n        )\n    )\n  WHERE "data" -> 'reasons' @> '["Planning/Coordination (also TTA Plan Agreement)"]'::jsonb;
Executing (8fc2dd9e-826b-4bc7-b1bc-37ec111f41d4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231115000000-revise-reason: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231115200114-ActivityReportGoalFieldResponse-incedint: migrating =======
Executing (a1c405f6-c692-4a1c-bcc5-4a43fcd10afa): START TRANSACTION;
Connection validated successfully
Executing (a1c405f6-c692-4a1c-bcc5-4a43fcd10afa): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231115200114-ActivityReportGoalFieldResponse-incedint.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a1c405f6-c692-4a1c-bcc5-4a43fcd10afa): WITH\n          incidents AS (\n            SELECT\n              dml_txid,\n              dml_by,\n              dml_type,\n              COUNT(*),\n              MIN(dml_timestamp),\n              MAX(dml_timestamp)\n            FROM "ZALActivityReportGoalFieldResponses" zargfr\n            GROUP BY 1,2,3\n            HAVING COUNT(*) > 400\n            ORDER BY 5 DESC\n          ),\n          responses AS (\n            SELECT\n              arg."activityReportId",\n              g.id "goalId",\n              argfr.id "activityReportGoalFieldResponseId",\n              argfr.response current_response,\n              gfr.response goal_response,\n              (\n                SELECT ARRAY_AGG(field_responses.response)\n                FROM jsonb_array_elements_text(((ARRAY_AGG(zargfr.new_row_data ->> 'response' order by zargfr.id DESC))[1])::JSONB) field_responses(response)\n              ) last_valid_response\n            FROM "ActivityReportGoalFieldResponses" argfr\n            JOIN "ActivityReportGoals" arg\n            ON argfr."activityReportGoalId" = arg.id\n            JOIN "ActivityReports" a\n            ON arg."activityReportId" = a.id\n            JOIN "Goals" g\n            ON arg."goalId" = g.id\n            JOIN "GoalFieldResponses" gfr\n            ON g.id = gfr."goalId"\n            JOIN "ZALActivityReportGoalFieldResponses" zargfr\n            ON argfr.id = zargfr.data_id\n            LEFT JOIN incidents i\n            ON zargfr.dml_txid = i.dml_txid\n            AND zargfr.dml_type = i.dml_type\n            where argfr.response != gfr.response\n            AND i.count IS NULL\n            GROUP BY 1,2,3,4,5\n          )\n          UPDATE "ActivityReportGoalFieldResponses" argfr\n          SET\n            response = COALESCE(r.last_valid_response, r.goal_response, ARRAY[]::text[])\n          FROM responses r\n          WHERE argfr."id" = r."activityReportGoalFieldResponseId"\n          AND r.current_response != COALESCE(r.last_valid_response, ARRAY[]::text[]);
Executing (a1c405f6-c692-4a1c-bcc5-4a43fcd10afa): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231115200114-ActivityReportGoalFieldResponse-incedint: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231117144817-add-communication-log-file: migrating =======
Executing (6cd7e304-f3e4-4e27-8074-63d240fa80c9): START TRANSACTION;
Connection validated successfully
Executing (6cd7e304-f3e4-4e27-8074-63d240fa80c9): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231117144817-add-communication-log-file.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6cd7e304-f3e4-4e27-8074-63d240fa80c9): CREATE TABLE IF NOT EXISTS "CommunicationLogFiles" ("id"   SERIAL , "communicationLogId" INTEGER NOT NULL REFERENCES "CommunicationLogs" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (6cd7e304-f3e4-4e27-8074-63d240fa80c9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231117144817-add-communication-log-file: migrated (0.045s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231117192507-restructure-national-centers: migrating =======
Executing (284611d1-94db-4861-b639-15e39509ab4a): START TRANSACTION;
Connection validated successfully
Executing (284611d1-94db-4861-b639-15e39509ab4a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231117192507-restructure-national-centers.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (284611d1-94db-4861-b639-15e39509ab4a): -- Change national centers id to type INT.\n      ALTER TABLE "NationalCenters"\n      ALTER COLUMN "id" TYPE INT;\n\n      -- Delete all data from table "NationalCenters".\n        DELETE FROM "NationalCenters";\n\n      -- Insert default national centers 'DTL','HBHS', 'PFCE', 'PFMO' into table "NationalCenters".\n      INSERT INTO "NationalCenters" ("id", "name", "createdAt", "updatedAt")\n      VALUES\n        (1, 'DTL', NOW(), NOW()),\n        (2, 'HBHS', NOW(), NOW()),\n        (3, 'PFCE', NOW(), NOW()),\n        (4, 'PFMO', NOW(), NOW());
Executing (284611d1-94db-4861-b639-15e39509ab4a): CREATE TABLE IF NOT EXISTS "NationalCenterUsers" ("id"   SERIAL , "nationalCenterId" INTEGER NOT NULL REFERENCES "NationalCenters" ("id"), "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (284611d1-94db-4861-b639-15e39509ab4a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231117192507-restructure-national-centers: migrated (0.081s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231121151442-add-feature-flag-monitoring: migrating =======
Executing (bd510530-b1a6-40c7-a659-0472ac8edb60): START TRANSACTION;
Connection validated successfully
Executing (bd510530-b1a6-40c7-a659-0472ac8edb60): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231121151442-add-feature-flag-monitoring.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (bd510530-b1a6-40c7-a659-0472ac8edb60): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231121151442-add-feature-flag-monitoring: migrated (0.035s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231123111823-create-session-supporting-attachments: migrating =======
Executing (91942a3b-cc93-4c22-830d-03bb8c1cf468): START TRANSACTION;
Connection validated successfully
Executing (91942a3b-cc93-4c22-830d-03bb8c1cf468): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231123111823-create-session-supporting-attachments.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (91942a3b-cc93-4c22-830d-03bb8c1cf468): CREATE TABLE IF NOT EXISTS "SessionReportPilotSupportingAttachments" ("id"   SERIAL , "sessionReportPilotId" INTEGER NOT NULL REFERENCES "SessionReportPilots" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (91942a3b-cc93-4c22-830d-03bb8c1cf468): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231123111823-create-session-supporting-attachments: migrated (0.043s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231206210453-update-flags-for-user: migrating =======
Executing (39f5b089-4894-4fe7-a44b-740e61226226): START TRANSACTION;
Connection validated successfully
Executing (39f5b089-4894-4fe7-a44b-740e61226226): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231206210453-update-flags-for-user.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (39f5b089-4894-4fe7-a44b-740e61226226): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'training_reports'\n          );
Executing (39f5b089-4894-4fe7-a44b-740e61226226): UPDATE "Users" SET "flags" = array_remove(flags, 'training_reports')\n        WHERE 'training_reports' = ANY(flags);
Executing (39f5b089-4894-4fe7-a44b-740e61226226): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'resources_dashboard',\n'rttapa_form',\n'anv_statistics',\n'regional_goal_dashboard',\n'goal_source',\n'merge_goals',\n'communication_log',\n'monitoring'\n  );
Executing (39f5b089-4894-4fe7-a44b-740e61226226): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (39f5b089-4894-4fe7-a44b-740e61226226): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231206210453-update-flags-for-user: migrated (0.045s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231207000000-revise-reason-again: migrating =======
Executing (0270c8e6-7f61-493b-8de2-90e4e9bd777d): START TRANSACTION;
Connection validated successfully
Executing (0270c8e6-7f61-493b-8de2-90e4e9bd777d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231207000000-revise-reason-again.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0270c8e6-7f61-493b-8de2-90e4e9bd777d): UPDATE "ActivityReports"\n  SET "reason" = array_replace("reason", 'Planning/Coordination (also TTA Plan Agreement)', 'Planning/Coordination')\n  WHERE "reason" @> ARRAY['Planning/Coordination (also TTA Plan Agreement)']::VARCHAR[];
Executing (0270c8e6-7f61-493b-8de2-90e4e9bd777d): UPDATE "EventReportPilots"\n  SET\n    "data" = (\n      SELECT\n        JSONB_SET(\n          "data",\n          '{reasons}',\n          (\n            SELECT\n              jsonb_agg(\n                CASE\n                  WHEN value::text = '"Planning/Coordination (also TTA Plan Agreement)"'\n                    THEN '"Planning/Coordination"'::jsonb\n                  ELSE value\n                END\n              )\n            FROM jsonb_array_elements("data" -> 'reasons') AS value\n          )::jsonb\n        )\n    )\n  WHERE "data" -> 'reasons' @> '["Planning/Coordination (also TTA Plan Agreement)"]'::jsonb;
Executing (0270c8e6-7f61-493b-8de2-90e4e9bd777d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231207000000-revise-reason-again: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231212160911-collect-close-reasons-objective: migrating =======
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): START TRANSACTION;
Connection validated successfully
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231212160911-collect-close-reasons-objective.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Objectives' AND c.table_schema = 'public'
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TABLE "Objectives" RENAME COLUMN "suspendReason" TO "closeSuspendReason";
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Duplicate goal';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Key staff turnover / vacancies';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Recipient is not responding';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Recipient request';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Regional Office request';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'TTA complete';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Objectives' AND c.table_schema = 'public'
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TABLE "Objectives" RENAME COLUMN "suspendContext" TO "closeSuspendContext";
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReportObjectives' AND c.table_schema = 'public'
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TABLE "ActivityReportObjectives" RENAME COLUMN "suspendReason" TO "closeSuspendReason";
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Duplicate goal';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Key staff turnover / vacancies';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Recipient is not responding';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Recipient request';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Regional Office request';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'TTA complete';
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReportObjectives' AND c.table_schema = 'public'
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): ALTER TABLE "ActivityReportObjectives" RENAME COLUMN "suspendContext" TO "closeSuspendContext";
Executing (d95325b4-9ecc-4390-9c49-873fcf3c98a8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231212160911-collect-close-reasons-objective: migrated (0.098s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231213210654-goalusers: migrating =======
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): START TRANSACTION;
Connection validated successfully
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231213210654-goalusers.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): CREATE TABLE IF NOT EXISTS "ValidFor" ("id"   SERIAL , "name" TEXT NOT NULL, "isReport" BOOLEAN NOT NULL DEFAULT false, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, "mapsTo" INTEGER DEFAULT NULL REFERENCES "ValidFor" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id"));
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): ALTER TABLE "ValidFor"\n          ADD CONSTRAINT "ValidFor_option_unique" UNIQUE ("name");
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): INSERT INTO "ValidFor"\n        ("name", "isReport", "createdAt", "updatedAt")\n        VALUES\n        (\n          'Goals',\n          false,\n          current_timestamp,\n          current_timestamp\n        );
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): CREATE TABLE IF NOT EXISTS "CollaboratorTypes" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "validForId" INTEGER NOT NULL REFERENCES "ValidFor" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "propagateOnMerge" BOOLEAN NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, "mapsTo" INTEGER DEFAULT NULL REFERENCES "CollaboratorTypes" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id"));
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): ALTER TABLE "CollaboratorTypes"\n          ADD CONSTRAINT "CollaboratorTypes_name_validForId_unique" UNIQUE ("name", "validForId");
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): INSERT INTO "CollaboratorTypes"\n        ("name", "validForId", "propagateOnMerge", "createdAt", "updatedAt")\n        SELECT\n          t.name,\n          vf.id,\n          t.name NOT LIKE 'Merge%',\n          current_timestamp,\n          current_timestamp\n        FROM "ValidFor" vf\n        CROSS JOIN UNNEST(ARRAY[\n          'Creator',\n'Editor',\n'Linker',\n'Utilizer',\n'Merge-Creator',\n'Merge-Deprecator'\n        ]) t(name)\n        WHERE vf.name = 'Goals'\n       ;
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): CREATE TABLE IF NOT EXISTS "GoalCollaborators" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "collaboratorTypeId" INTEGER NOT NULL REFERENCES "CollaboratorTypes" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "linkBack" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, PRIMARY KEY ("id"));
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): CREATE UNIQUE INDEX "GoalCollaborators_goalId_userId_collaboratorTypeId_idx"\n          ON "GoalCollaborators"\n          ("goalId", "userId", "collaboratorTypeId");
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): ALTER TABLE "GoalCollaborators"\n          ADD CONSTRAINT "GoalCollaborators_goalId_userId_collaboratorTypeId_unique"\n          UNIQUE USING INDEX "GoalCollaborators_goalId_userId_collaboratorTypeId_idx";
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          data_id "goalId",\n          dml_as "userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALGoals" zg\n        JOIN "Goals" g\n        ON zg.data_id = g.id\n        LEFT JOIN "Goals" g2\n        ON g.id = g2."mapsToParentGoalId"\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'INSERT'\n        AND new_row_data -> 'name' IS NOT NULL\n        AND g2.id IS NULL\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Creator'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          g.id "goalId",\n          (ARRAY_AGG(ar."userId" ORDER BY ar.id ASC))[1] "userId",\n          MIN(ar."createdAt") "createdAt",\n          MIN(ar."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "Goals" g\n        LEFT JOIN "ZALGoals" zg\n        ON g.id = zg.data_id\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        WHERE (zg.id IS NULL\n        OR (zg.dml_as IN (-1, 0)\n          AND zg.dml_type = 'INSERT'))\n        AND g."createdVia" IN ('activityReport')\n        GROUP BY 1\n        HAVING (ARRAY_AGG(ar."userId" ORDER BY ar.id ASC))[1] IS NOT NULL\n        AND MIN(ar."createdAt") IS NOT NULL\n        ORDER BY 1\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Creator'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          data_id "goalId",\n          dml_as "userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALGoals" zg\n        JOIN "Goals" g\n        ON zg.data_id = g.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'UPDATE'\n        AND new_row_data -> 'name' IS NOT NULL\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Editor'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n       SELECT\n        "goalId",\n        "userId",\n        MIN("createdAt") "createdAt",\n        MAX("updatedAt") "updatedAt",\n        jsonb_build_object('activityReportIds', ARRAY_AGG(DISTINCT ar."activityReportId")) "linkBack"\n      FROM (\n        SELECT\n        arg."goalId" "goalId",\n        zarg.dml_as "userId",\n        MIN(arg."createdAt") "createdAt",\n        MAX(arg."createdAt") "updatedAt",\n          ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n        FROM "ZALActivityReportGoals" zarg\n        LEFT JOIN "ZALActivityReportGoals" zargd\n        ON zarg.data_id = zargd.data_id\n        AND zarg.id < zargd.id\n        AND zarg.dml_type = 'INSERT'\n        AND zargd.dml_type = 'DELETE'\n        JOIN "ActivityReportGoals" arg\n        ON zarg.data_id = arg.id\n        WHERE zargd.id IS NULL\n        AND zarg.dml_type = 'INSERT'\n        AND zarg.dml_as NOT IN (-1, 0)\n        GROUP BY 1,2\n        UNION\n        SELECT\n        arg."goalId",\n        ar."userId",\n        MIN(arg."createdAt") "createdAt",\n        MAX(arg."createdAt") "updatedAt",\n          ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n        FROM "ActivityReportGoals" arg\n        JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        LEFT JOIN "ZALActivityReportGoals" zarg\n        ON arg.id = zarg.data_id\n        AND zarg.dml_type = 'INSERT'\n        AND zarg.dml_as NOT IN (-1, 0)\n        WHERE zarg.id IS NULL\n        GROUP BY 1,2\n      ) x\n      CROSS JOIN UNNEST("activityReportIds") ar("activityReportId")\n      GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Linker'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          "goalId",\n          "userId",\n          MIN("createdAt") "createdAt",\n          MAX("updatedAt") "updatedAt",\n            jsonb_build_object('activityReportIds', ARRAY_AGG(DISTINCT ar."activityReportId")) "linkBack"\n        FROM (\n          SELECT\n          arg."goalId",\n          arc."userId",\n          MIN(ar."approvedAt") "createdAt",\n          MAX(ar."approvedAt") "updatedAt",\n              ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n          FROM "ActivityReports" ar\n          JOIN "ActivityReportGoals" arg\n          ON arg."activityReportId" = ar.id\n          JOIN "ActivityReportCollaborators" arc\n          ON arc."activityReportId" = ar.id\n          WHERE ar."approvedAt" IS NOT NULL\n          GROUP BY 1,2\n          UNION\n          SELECT\n          arg."goalId",\n          ar."userId",\n          MIN(ar."approvedAt") "createdAt",\n          MAX(ar."approvedAt") "updatedAt",\n              ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n          FROM "ActivityReports" ar\n          JOIN "ActivityReportGoals" arg\n          ON arg."activityReportId" = ar.id\n          LEFT JOIN "ActivityReportCollaborators" arc\n          ON arc."activityReportId" = ar.id\n          AND ar."userId" = arc."userId"\n          WHERE ar."approvedAt" IS NOT NULL\n          AND arc.id IS NULL\n          GROUP BY 1,2\n        ) x\n        CROSS JOIN UNNEST("activityReportIds") ar("activityReportId")\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Utilizer'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          data_id "goalId",\n          dml_as "userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALGoals" zg\n        JOIN "Goals" g\n        ON zg.data_id = g.id\n        JOIN "Goals" g2\n        ON g.id = g2."mapsToParentGoalId"\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'INSERT'\n        AND new_row_data -> 'name' IS NOT NULL\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Merge-Creator'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        select\n          data_id "goalId",\n          dml_as "userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALGoals" zg\n        JOIN "Goals" g\n        ON zg.data_id = g.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'UPDATE'\n        AND new_row_data -> 'name' IS NOT NULL\n        and new_row_data ->> 'mapsToParentGoalId' IS NOT null\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Merge-Deprecator'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): WITH\n          clusters as (\n            select\n              g."mapsToParentGoalId" "goalId",\n              gc."userId",\n              gc."collaboratorTypeId",\n              gc."linkBack",\n              gc."createdAt",\n              gc."updatedAt",\n              gc."goalId" "originalGoalId",\n              (g.name = pg.name) "isChosen"\n            FROM "GoalCollaborators" gc\n            JOIN "CollaboratorTypes" ct\n            ON gc."collaboratorTypeId" = ct.id\n            JOIN "Goals" g\n            ON gc."goalId" = g.id\n            JOIN "Goals" pg\n            ON g."mapsToParentGoalId" = pg.id\n            WHERE g."mapsToParentGoalId" IS NOT NULL\n            AND ct.name NOT IN ('Merge-Creator', 'Merge-Deprecator')\n          ),\n          unrolled as (\n            SELECT\n              c."goalId",\n              c."userId",\n              c."collaboratorTypeId",\n              je.key,\n              JSONB_AGG(DISTINCT v.value ORDER BY v.value) "values",\n              MIN(c."createdAt") "createdAt",\n              MAX(c."updatedAt") "updatedAt"\n            FROM clusters c\n            CROSS JOIN jsonb_each(c."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) v(value)\n            where c."linkBack" is not null\n            group by 1,2,3,4\n          ),\n          rerolled as (\n            SELECT\n              u."goalId",\n              u."userId",\n              u."collaboratorTypeId",\n              JSONB_OBJECT_AGG(u.key,u.values) "linkBack",\n              MIN(u."createdAt") "createdAt",\n              MAX(u."updatedAt") "updatedAt"\n            FROM unrolled u\n            group by 1,2,3\n          ),\n          rolled as (\n            SELECT\n              c."goalId",\n              c."userId",\n              ct2.id "collaboratorTypeId",\n              null::JSONB "linkBack",\n              MIN(c."createdAt") "createdAt",\n              MAX(c."updatedAt") "updatedAt"\n            FROM clusters c\n            JOIN "CollaboratorTypes" ct\n            ON c."collaboratorTypeId" = ct.id\n            JOIN "CollaboratorTypes" ct2\n            ON ct."validForId" = ct2."validForId"\n            AND ((c."isChosen" IS NOT TRUE\n              AND ct."name" = 'Creator'\n              AND ct2."name" = 'Editor')\n              OR ct.id = ct2.id)\n            WHERE c."linkBack" IS null\n            GROUP BY 1,2,3\n          ),\n          mapped_collaborators AS (\n            SELECT\n              *\n            FROM rerolled\n            UNION\n            SELECT\n              *\n            FROM rolled\n          )\n          INSERT INTO "GoalCollaborators"\n          (\n            "goalId",\n            "userId",\n            "collaboratorTypeId",\n            "linkBack",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            "goalId",\n            "userId",\n            "collaboratorTypeId",\n            "linkBack",\n            "createdAt",\n            "updatedAt"\n          FROM mapped_collaborators;
Executing (9e2ac71a-600d-43de-9e89-bfb109f6791e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231213210654-goalusers: migrated (0.217s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231213210654-objectiveusers: migrating =======
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): START TRANSACTION;
Connection validated successfully
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231213210654-objectiveusers.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): INSERT INTO "ValidFor"\n        ("name", "isReport", "createdAt", "updatedAt")\n        VALUES\n        (\n          'Objectives',\n          false,\n          current_timestamp,\n          current_timestamp\n        );
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): INSERT INTO "CollaboratorTypes"\n        ("name", "validForId", "propagateOnMerge", "createdAt", "updatedAt")\n        SELECT\n          t.name,\n          vf.id,\n          t.name NOT LIKE 'Merge%',\n          current_timestamp,\n          current_timestamp\n        FROM "ValidFor" vf\n        CROSS JOIN UNNEST(ARRAY[\n          'Creator',\n'Editor',\n'Linker',\n'Utilizer',\n'Merge-Creator',\n'Merge-Deprecator'\n        ]) t(name)\n        WHERE vf.name = 'Objectives'\n       ;
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): CREATE TABLE IF NOT EXISTS "ObjectiveCollaborators" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "collaboratorTypeId" INTEGER NOT NULL REFERENCES "CollaboratorTypes" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "linkBack" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, PRIMARY KEY ("id"));
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): ALTER TABLE "ObjectiveCollaborators"\n          ADD CONSTRAINT "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_unique" UNIQUE ("objectiveId", "userId", "collaboratorTypeId");
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): WITH\n        source_data AS (\n          \n        SELECT\n          data_id "objectiveId",\n          dml_as "userId",\n          MIN(o."createdAt") "createdAt",\n          MIN(o."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALObjectives" zo\n        LEFT JOIN "Users" u\n        ON zo.dml_as = u.id\n        JOIN "Objectives" o\n        ON zo.data_id = o.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'INSERT'\n        AND new_row_data -> 'title' IS NOT NULL\n        GROUP BY 1,2\n        ORDER BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Creator'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): WITH\n        source_data AS (\n          \n        SELECT\n          o.id "objectiveId",\n          (ARRAY_AGG(ar."userId" ORDER BY ar.id ASC))[1] "userId",\n          MIN(ar."createdAt") "createdAt",\n          MIN(ar."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "Objectives" o\n        LEFT JOIN "ZALObjectives" zo\n        ON o.id = zo.data_id\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        WHERE (zo.id IS NULL\n        OR (zo.dml_as IN (-1, 0)\n          AND zo.dml_type = 'INSERT'))\n        AND o."createdVia" IN ('activityReport')\n        GROUP BY 1\n        HAVING (ARRAY_AGG(ar."userId" ORDER BY ar.id ASC))[1] IS NOT NULL\n        AND MIN(ar."createdAt") IS NOT NULL\n        ORDER BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Creator'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): WITH\n        source_data AS (\n          \n        SELECT\n          data_id "objectiveId",\n          dml_as "userId",\n          MIN(o."createdAt") "createdAt",\n          MIN(o."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALObjectives" zo\n        LEFT JOIN "Users" u\n        ON zo.dml_as = u.id\n        JOIN "Objectives" o\n        ON zo.data_id = o.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'UPDATE'\n        AND new_row_data -> 'title' IS NOT NULL\n        GROUP BY 1,2\n        ORDER BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Editor'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): WITH\n        source_data AS (\n          \n       SELECT\n        "objectiveId",\n        "userId",\n        MIN("createdAt") "createdAt",\n        MAX("updatedAt") "updatedAt",\n        jsonb_build_object('activityReportIds', ARRAY_AGG(DISTINCT ar."activityReportId")) "linkBack"\n      FROM (\n        SELECT\n        arg."objectiveId" "objectiveId",\n        zarg.dml_as "userId",\n        MIN(arg."createdAt") "createdAt",\n        MAX(arg."createdAt") "updatedAt",\n          ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n        FROM "ZALActivityReportObjectives" zarg\n        LEFT JOIN "ZALActivityReportObjectives" zargd\n        ON zarg.data_id = zargd.data_id\n        AND zarg.id < zargd.id\n        AND zarg.dml_type = 'INSERT'\n        AND zargd.dml_type = 'DELETE'\n        JOIN "ActivityReportObjectives" arg\n        ON zarg.data_id = arg.id\n        WHERE zargd.id IS NULL\n        AND zarg.dml_type = 'INSERT'\n        AND zarg.dml_as NOT IN (-1, 0)\n        GROUP BY 1,2\n        UNION\n        SELECT\n        arg."objectiveId",\n        ar."userId",\n        MIN(arg."createdAt") "createdAt",\n        MAX(arg."createdAt") "updatedAt",\n          ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n        FROM "ActivityReportObjectives" arg\n        JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        LEFT JOIN "ZALActivityReportObjectives" zarg\n        ON arg.id = zarg.data_id\n        AND zarg.dml_type = 'INSERT'\n        WHERE zarg.id IS NULL\n        GROUP BY 1,2\n      ) x\n      CROSS JOIN UNNEST("activityReportIds") ar("activityReportId")\n      GROUP BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Linker'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): WITH\n        source_data AS (\n          \n        SELECT\n          "objectiveId",\n          "userId",\n          MIN("createdAt") "createdAt",\n          MAX("updatedAt") "updatedAt",\n            jsonb_build_object('activityReportIds', ARRAY_AGG(DISTINCT ar."activityReportId")) "linkBack"\n        FROM (\n          SELECT\n          arg."objectiveId",\n          arc."userId",\n          MIN(ar."approvedAt") "createdAt",\n          MAX(ar."approvedAt") "updatedAt",\n              ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n          FROM "ActivityReports" ar\n          JOIN "ActivityReportObjectives" arg\n          ON arg."activityReportId" = ar.id\n          JOIN "ActivityReportCollaborators" arc\n          ON arc."activityReportId" = ar.id\n          WHERE ar."approvedAt" IS NOT NULL\n          GROUP BY 1,2\n          UNION\n          SELECT\n          arg."objectiveId",\n          ar."userId",\n          MIN(ar."approvedAt") "createdAt",\n          MAX(ar."approvedAt") "updatedAt",\n              ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n          FROM "ActivityReports" ar\n          JOIN "ActivityReportObjectives" arg\n          ON arg."activityReportId" = ar.id\n          LEFT JOIN "ActivityReportCollaborators" arc\n          ON arc."activityReportId" = ar.id\n          AND ar."userId" = arc."userId"\n          WHERE ar."approvedAt" IS NOT NULL\n          AND arc.id IS NULL\n          GROUP BY 1,2\n        ) x\n        CROSS JOIN UNNEST("activityReportIds") ar("activityReportId")\n        GROUP BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Utilizer'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): WITH\n        source_data AS (\n          \n        select\n          data_id "objectiveId",\n          dml_as "userId",\n          MIN(o."createdAt") "createdAt",\n          MIN(o."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALObjectives" zo\n        JOIN "Objectives" o\n        ON zo.data_id = o.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'UPDATE'\n        AND new_row_data -> 'title' IS NOT NULL\n        and new_row_data ->> 'mapsToParentObjectiveId' IS NOT null\n        GROUP BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Merge-Deprecator'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): WITH\n        source_data AS (\n          \n        SELECT\n          data_id "objectiveId",\n          dml_as "userId",\n          MIN(o."createdAt") "createdAt",\n          MIN(o."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALObjectives" zo\n        JOIN "Objectives" o\n        ON zo.data_id = o.id\n        JOIN "Objectives" o2\n        ON o.id = o2."mapsToParentObjectiveId"\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'INSERT'\n        AND new_row_data -> 'title' IS NOT NULL\n        GROUP BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Merge-Creator'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): WITH\n          clusters as (\n            select\n              o."mapsToParentObjectiveId" "objectiveId",\n              oc."userId",\n              oc."collaboratorTypeId",\n              oc."linkBack",\n              oc."createdAt",\n              oc."updatedAt",\n              oc."objectiveId" "originalObjectiveId",\n              (o.title = po.title) "isChosen"\n            FROM "ObjectiveCollaborators" oc\n            JOIN "CollaboratorTypes" ct\n            ON oc."collaboratorTypeId" = ct.id\n            JOIN "Objectives" o\n            ON oc."objectiveId" = o.id\n            JOIN "Objectives" po\n            ON o."mapsToParentObjectiveId" = po.id\n            WHERE o."mapsToParentObjectiveId" IS NOT NULL\n            AND ct.name NOT IN ('Merge-Creator', 'Merge-Deprecator')\n          ),\n          unrolled as (\n            SELECT\n              c."objectiveId",\n              c."userId",\n              c."collaboratorTypeId",\n              je.key,\n              JSONB_AGG(DISTINCT v.value ORDER BY v.value) "values",\n              MIN(c."createdAt") "createdAt",\n              MAX(c."updatedAt") "updatedAt"\n            FROM clusters c\n            CROSS JOIN jsonb_each(c."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) v(value)\n            where c."linkBack" is not null\n            group by 1,2,3,4\n          ),\n          rerolled as (\n            SELECT\n              u."objectiveId",\n              u."userId",\n              u."collaboratorTypeId",\n              JSONB_OBJECT_AGG(u.key,u.values) "linkBack",\n              MIN(u."createdAt") "createdAt",\n              MAX(u."updatedAt") "updatedAt"\n            FROM unrolled u\n            group by 1,2,3\n          ),\n          rolled as (\n            SELECT\n              c."objectiveId",\n              c."userId",\n              ct2.id "collaboratorTypeId",\n              null::JSONB "linkBack",\n              MIN(c."createdAt") "createdAt",\n              MAX(c."updatedAt") "updatedAt"\n            FROM clusters c\n            JOIN "CollaboratorTypes" ct\n            ON c."collaboratorTypeId" = ct.id\n            JOIN "CollaboratorTypes" ct2\n            ON ct."validForId" = ct2."validForId"\n            AND ((c."isChosen" IS NOT TRUE\n              AND ct."name" = 'Creator'\n              AND ct2."name" = 'Editor')\n              OR ct.id = ct2.id)\n            WHERE c."linkBack" IS null\n            GROUP BY 1,2,3\n          ),\n          mapped_collaborators AS (\n            SELECT\n              *\n            FROM rerolled\n            UNION\n            SELECT\n              *\n            FROM rolled\n          )\n          INSERT INTO "ObjectiveCollaborators"\n          (\n            "objectiveId",\n            "userId",\n            "collaboratorTypeId",\n            "linkBack",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            "objectiveId",\n            "userId",\n            "collaboratorTypeId",\n            "linkBack",\n            "createdAt",\n            "updatedAt"\n          FROM mapped_collaborators\n          ON CONFLICT\n          (\n          "objectiveId",\n          "userId",\n          "collaboratorTypeId"\n          )\n          DO UPDATE SET\n          "updatedAt" = EXCLUDED."updatedAt",\n          "linkBack" = (\n            SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n            FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n            ) key_values\n          )\n          RETURNING\n          "id" "objectiveCollaboratorId",\n          "objectiveId",\n          "userId",\n          "collaboratorTypeId",\n          "linkBack",\n          "createdAt",\n          "updatedAt";
Executing (c4e2bc0b-baaf-4822-b25b-8df482a2e708): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231213210654-objectiveusers: migrated (0.097s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231214133506-resource-additional-columns: migrating =======
Executing (a83e9a02-8c93-4981-8664-8163fdeb7d72): START TRANSACTION;
Connection validated successfully
Executing (a83e9a02-8c93-4981-8664-8163fdeb7d72): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231214133506-resource-additional-columns.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a83e9a02-8c93-4981-8664-8163fdeb7d72): ALTER TABLE "public"."Resources" ADD COLUMN "mimeType" VARCHAR(255);
Executing (a83e9a02-8c93-4981-8664-8163fdeb7d72): ALTER TABLE "public"."Resources" ADD COLUMN "lastStatusCode" INTEGER;
Executing (a83e9a02-8c93-4981-8664-8163fdeb7d72): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231214133506-resource-additional-columns: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231214140110-add-unavailable-root-cause: migrating =======
Executing (db7e0bd5-60f3-4efa-ab8e-65896f86cf8a): START TRANSACTION;
Connection validated successfully
Executing (db7e0bd5-60f3-4efa-ab8e-65896f86cf8a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231214140110-add-unavailable-root-cause.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (db7e0bd5-60f3-4efa-ab8e-65896f86cf8a): UPDATE "GoalTemplateFieldPrompts"\n        SET "options" = '{"Community Partnerships",Facilities,"Family Circumstances","Other ECE Care Options", Unavailable, Workforce}'\n        WHERE "title" = 'FEI root cause';
Executing (db7e0bd5-60f3-4efa-ab8e-65896f86cf8a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231214140110-add-unavailable-root-cause: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231218150056-remove-communication-log-feature-flag: migrating =======
Executing (f9a8f063-89f2-4494-93f9-37a802fc9b97): START TRANSACTION;
Connection validated successfully
Executing (f9a8f063-89f2-4494-93f9-37a802fc9b97): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231218150056-remove-communication-log-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f9a8f063-89f2-4494-93f9-37a802fc9b97): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'communication_log'\n          );
Executing (f9a8f063-89f2-4494-93f9-37a802fc9b97): UPDATE "Users" SET "flags" = array_remove(flags, 'communication_log')\n        WHERE 'communication_log' = ANY(flags);
Executing (f9a8f063-89f2-4494-93f9-37a802fc9b97): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'resources_dashboard',\n'rttapa_form',\n'anv_statistics',\n'regional_goal_dashboard',\n'goal_source',\n'merge_goals',\n'monitoring'\n  );
Executing (f9a8f063-89f2-4494-93f9-37a802fc9b97): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (f9a8f063-89f2-4494-93f9-37a802fc9b97): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231218150056-remove-communication-log-feature-flag: migrated (0.044s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231222192454-add-closed-goal-merge-override-flag: migrating =======
Executing (7549deeb-0630-4618-a464-9b842637e145): START TRANSACTION;
Connection validated successfully
Executing (7549deeb-0630-4618-a464-9b842637e145): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231222192454-add-closed-goal-merge-override-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (7549deeb-0630-4618-a464-9b842637e145): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231222192454-add-closed-goal-merge-override-flag: migrated (0.043s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240104110924-remove-unwanted-aro-topics: migrating =======
Executing (9bfa1568-65e5-4d55-bc53-5ada8ea5f286): START TRANSACTION;
Connection validated successfully
Executing (9bfa1568-65e5-4d55-bc53-5ada8ea5f286): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240104110924-remove-unwanted-aro-topics.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9bfa1568-65e5-4d55-bc53-5ada8ea5f286): DELETE FROM  "ActivityReportObjectiveTopics" arot\n        USING "ActivityReportObjectives" aro\n        JOIN "ZALActivityReportObjectiveTopics" zaro\n          ON dml_txid = '00000000-0000-0000-0000-000002266502'\n          AND aro.id = (zaro.new_row_data->>'activityReportObjectiveId')::int\n        JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n          AND ar.version = 1\n        WHERE arot."activityReportObjectiveId" = aro.id;
Executing (9bfa1568-65e5-4d55-bc53-5ada8ea5f286): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240104110924-remove-unwanted-aro-topics: migrated (0.017s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240109174716-add-course-tables: migrating =======
Executing (9c398a2f-0fcb-4321-b1e0-9a660d85dc1b): START TRANSACTION;
Connection validated successfully
Executing (9c398a2f-0fcb-4321-b1e0-9a660d85dc1b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240109174716-add-course-tables.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9c398a2f-0fcb-4321-b1e0-9a660d85dc1b): CREATE TABLE IF NOT EXISTS "Courses" ("id"   SERIAL , "name" TEXT NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, "mapsTo" INTEGER DEFAULT NULL REFERENCES "Courses" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id"));
Executing (9c398a2f-0fcb-4321-b1e0-9a660d85dc1b): ALTER TABLE "Courses"\n      ADD CONSTRAINT "Courses_name_unique" UNIQUE ("name");
Executing (9c398a2f-0fcb-4321-b1e0-9a660d85dc1b): CREATE TABLE IF NOT EXISTS "ObjectiveCourses" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "courseId" INTEGER NOT NULL REFERENCES "Courses" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (9c398a2f-0fcb-4321-b1e0-9a660d85dc1b): ALTER TABLE "ObjectiveCourses"\n      ADD CONSTRAINT "ObjectiveCourses_objectiveId_courseId_unique" UNIQUE ("objectiveId", "courseId");
Executing (9c398a2f-0fcb-4321-b1e0-9a660d85dc1b): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveCourses" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "courseId" INTEGER NOT NULL REFERENCES "Courses" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (9c398a2f-0fcb-4321-b1e0-9a660d85dc1b): ALTER TABLE "ActivityReportObjectiveCourses"\n          ADD CONSTRAINT "ActivityReportObjectiveCourses_activityReportObjectiveId_courseId_unique" UNIQUE ("activityReportObjectiveId", "courseId");
Executing (9c398a2f-0fcb-4321-b1e0-9a660d85dc1b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240109174716-add-course-tables: migrated (0.133s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240110165940-add-goal-similarity-groups-table: migrating =======
Executing (43445aa7-3fab-4dad-a4bf-b08aa30e0167): START TRANSACTION;
Connection validated successfully
Executing (43445aa7-3fab-4dad-a4bf-b08aa30e0167): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240110165940-add-goal-similarity-groups-table.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (43445aa7-3fab-4dad-a4bf-b08aa30e0167): CREATE TABLE IF NOT EXISTS "GoalSimilarityGroups" ("id"   SERIAL , "userHasInvalidated" BOOLEAN NOT NULL DEFAULT false, "finalGoalId" INTEGER REFERENCES "Goals" ("id"), "recipientId" INTEGER NOT NULL REFERENCES "Recipients" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (43445aa7-3fab-4dad-a4bf-b08aa30e0167): CREATE TABLE IF NOT EXISTS "GoalSimilarityGroupGoals" ("id"   SERIAL , "goalSimilarityGroupId" INTEGER NOT NULL REFERENCES "GoalSimilarityGroups" ("id"), "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (43445aa7-3fab-4dad-a4bf-b08aa30e0167): ALTER TABLE "GoalSimilarityGroupGoals" ADD CONSTRAINT "GoalSimilarityGroupGoals_goalSimilarityGroupId_goalId_unique" UNIQUE ("goalSimilarityGroupId", "goalId");
Executing (43445aa7-3fab-4dad-a4bf-b08aa30e0167): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240110165940-add-goal-similarity-groups-table: migrated (0.077s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240118184228-add-language: migrating =======
Executing (d6a88d1b-d2b9-47a4-8d38-5d765d45c73c): START TRANSACTION;
Connection validated successfully
Executing (d6a88d1b-d2b9-47a4-8d38-5d765d45c73c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240118184228-add-language.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d6a88d1b-d2b9-47a4-8d38-5d765d45c73c): ALTER TABLE "public"."ActivityReports" ADD COLUMN "language" VARCHAR(255)[];
Executing (d6a88d1b-d2b9-47a4-8d38-5d765d45c73c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240118184228-add-language: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240122210304-fix-erroneous-fei-goals: migrating =======
Executing (2a8a1144-f4a3-4a64-9214-cec88f08a540): START TRANSACTION;
Connection validated successfully
Executing (2a8a1144-f4a3-4a64-9214-cec88f08a540): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240122210304-fix-erroneous-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2a8a1144-f4a3-4a64-9214-cec88f08a540): -- Some goals created from a curated template have been requested to be changed or merged to regular goals\n\n      -- PROCESS:\n      -- Rename false FEI goals\n      -- Remove their root causes in GoalFieldResponses\n      ------ merge 51671 to 40495: (most of this will probably be empty)\n      -- Delete root causes\n      -- Merge objective topics\n      -- Merge objective resources\n      -- Merge objective files\n      -- Delete duplicate objective topics\n      -- Delete duplicate objective resources\n      -- Delete duplicate objective files\n      -- Relink non-goalmerge Objectives\n      -- Update the target goals record history fields from the donor goals\n      -- Relink non-duplicate ARGs\n      -- Delete duplicate ARGs\n      -- Delete donor goals\n\n      DROP TABLE IF EXISTS goals_for_renaming;\n      CREATE TEMP TABLE goals_for_renaming\n      AS\n      SELECT * FROM (\n        VALUES -- sorted and deduped\n        (50862, 'The recipient will analyze work force shortages to understand impact on full enrollment.'),\n        (54049, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes and share concerns with governing body.'),\n        (54097, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes.'),\n        (55400, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes.'),\n        (55765, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes.'),\n        (56179, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes.')\n      ) AS data(gid, newtext)\n      ;\n\n      UPDATE "Goals"\n      SET\n        name = newtext,\n        "goalTemplateId" = NULL,\n        "updatedAt" = NOW()\n      FROM goals_for_renaming\n      WHERE id = gid\n      ;\n\n      DELETE FROM "GoalFieldResponses"\n      USING goals_for_renaming\n      WHERE "goalId" = gid\n      ;\n\n      DROP TABLE IF EXISTS goal_merges;\n      CREATE TEMP TABLE goal_merges\n      AS\n      SELECT\n        51671 donor_gid,\n        40495 target_gid\n      ;\n\n      DROP TABLE IF EXISTS deleted_gfrs;\n      CREATE TEMP TABLE deleted_gfrs\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalFieldResponses"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gfrid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      \n      -- Merge goal collaborators\n      DROP TABLE IF EXISTS relinked_goal_collaborators;\n      CREATE TEMP TABLE relinked_goal_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_gid,\n            "userId" uid\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.donor_gid = gc."goalId"\n          EXCEPT\n          SELECT\n            donor_gid,\n            "userId"\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.target_gid = gc."goalId"\n        )\n        UPDATE "GoalCollaborators" AS gc\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.donor_gid = gm.donor_gid\n        WHERE gc."userId" = u.uid\n          AND gc."goalId" = u.donor_gid\n        RETURNING\n          id gcid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      DROP TABLE IF EXISTS objective_merges;\n      CREATE TEMP TABLE objective_merges\n      AS\n      SELECT\n        donor_obj.id donor_oid,\n        target_obj.id target_oid\n      FROM goal_merges gm\n      JOIN "Objectives" donor_obj\n        ON gm.donor_gid = donor_obj."goalId"\n      JOIN "Objectives" target_obj\n        ON gm.target_gid = target_obj."goalId"\n        AND donor_obj.title = target_obj.title\n      WHERE donor_obj.id != target_obj.id\n      ;\n\n      -- Update the merge target objectives\n      DROP TABLE IF EXISTS updated_target_objectives;\n      CREATE TEMP TABLE updated_target_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" AS o\n        SET\n          "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n          "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n          "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n          "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n          "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n          "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n        FROM objective_merges om\n        JOIN "Objectives" d_o\n          ON om.donor_oid = d_o.id\n        WHERE om.target_oid = o.id\n        RETURNING\n          o.id oid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      \n      -- Merge objective topics\n      DROP TABLE IF EXISTS relinked_objective_topics;\n      CREATE TEMP TABLE relinked_objective_topics\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "topicId" tid\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.donor_oid = ot."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "topicId"\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.target_oid = ot."objectiveId"\n        )\n        UPDATE "ObjectiveTopics" AS ot\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE ot."topicId" = u.tid\n          AND ot."objectiveId" = u.donor_oid\n        RETURNING\n          id otid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Merge objective resources\n      DROP TABLE IF EXISTS relinked_objective_resources;\n      CREATE TEMP TABLE relinked_objective_resources\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "resourceId" rid\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.donor_oid = o_r."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "resourceId"\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.target_oid = o_r."objectiveId"\n        )\n        UPDATE "ObjectiveResources" AS o_r\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE o_r."resourceId" = u.rid\n          AND o_r."objectiveId" = u.donor_oid\n        RETURNING\n          id orid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Merge objective files\n      DROP TABLE IF EXISTS relinked_objective_files;\n      CREATE TEMP TABLE relinked_objective_files\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "fileId" fid\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.donor_oid = of."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "fileId"\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.target_oid = of."objectiveId"\n        )\n        UPDATE "ObjectiveFiles" AS of\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE of."fileId" = u.fid\n          AND of."objectiveId" = u.donor_oid\n        RETURNING\n          id ofid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective topics\n      DROP TABLE IF EXISTS deleted_objective_topics;\n      CREATE TEMP TABLE deleted_objective_topics\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveTopics"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id otid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective resources\n      DROP TABLE IF EXISTS deleted_objective_resources;\n      CREATE TEMP TABLE deleted_objective_resources\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveResources"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id orid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective files\n      DROP TABLE IF EXISTS deleted_objective_files;\n      CREATE TEMP TABLE deleted_objective_files\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveFiles"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ofid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Link objectives on merged goals to the FEI goals\n      DROP TABLE IF EXISTS relinked_objectives;\n      CREATE TEMP TABLE relinked_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives"\n        SET "goalId" = target_gid\n        FROM goal_merges\n        WHERE "goalId" = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          id oid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target goals\n      DROP TABLE IF EXISTS updated_target_goals;\n      CREATE TEMP TABLE updated_target_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          "updatedAt" = GREATEST(dg."updatedAt", g."updatedAt"),\n          "firstNotStartedAt" = LEAST(dg."firstNotStartedAt", g."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(dg."lastNotStartedAt", g."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(dg."firstInProgressAt", g."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(dg."lastInProgressAt", g."lastInProgressAt"),\n          "firstCeasedSuspendedAt" = LEAST(dg."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt"),\n          "lastCeasedSuspendedAt" = GREATEST(dg."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt"),\n          "firstClosedAt" = LEAST(dg."firstClosedAt", g."firstClosedAt"),\n          "lastClosedAt" = GREATEST(dg."lastClosedAt", g."lastClosedAt")\n        FROM goal_merges gm\n        JOIN "Goals" dg\n          ON gm.donor_gid = dg.id\n        WHERE gm.target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- relink non-duplicate ARGs\n      DROP TABLE IF EXISTS relinked_args;\n      CREATE TEMP TABLE relinked_args\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            "activityReportId" arid,\n            "goalId" gid\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.donor_gid = arg."goalId"\n          EXCEPT\n          SELECT\n            "activityReportId",\n            "goalId"\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.target_gid = arg."goalId"\n        )\n        UPDATE "ActivityReportGoals" AS arg\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.gid = gm.donor_gid\n        WHERE arg."goalId" = u.gid\n          AND arg."activityReportId" = u.arid\n        RETURNING\n          id argid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id argid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Delete donor goals\n      DROP TABLE IF EXISTS deleted_goals;\n      CREATE TEMP TABLE deleted_goals\n      AS\n      WITH updater AS (\n        DELETE FROM "Goals"\n        USING goal_merges\n        WHERE id = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          target_gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate goal collaborators\n      DROP TABLE IF EXISTS deleted_goal_collaborators;\n      CREATE TEMP TABLE deleted_goal_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalCollaborators"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gcid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      SELECT\n        1 op_order,\n        'deleted_gfrs' operation,\n        COUNT(*) cnt\n      FROM deleted_gfrs\n      UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n      UNION SELECT 3,'relinked_objective_topics', COUNT(*) FROM relinked_objective_topics\n      UNION SELECT 4,'relinked_objective_resources', COUNT(*) FROM relinked_objective_resources\n      UNION SELECT 5,'relinked_objective_files', COUNT(*) FROM relinked_objective_files\n      UNION SELECT 6,'deleted_objective_topics', COUNT(*) FROM deleted_objective_topics\n      UNION SELECT 7,'deleted_objective_resources', COUNT(*) FROM deleted_objective_resources\n      UNION SELECT 8,'deleted_objective_files', COUNT(*) FROM deleted_objective_files\n      UNION SELECT 9,'relinked_objectives', COUNT(*) FROM relinked_objectives\n      UNION SELECT 10,'updated_target_goals', COUNT(*) FROM updated_target_goals\n      UNION SELECT 11,'relinked_args', COUNT(*) FROM relinked_args\n      UNION SELECT 12,'deleted_args', COUNT(*) FROM deleted_args\n      UNION SELECT 13,'deleted_goals', COUNT(*) FROM deleted_goals\n      UNION SELECT 14,'relinked_goal_collaborators', COUNT(*) FROM relinked_goal_collaborators\n      UNION SELECT 15,'deleted_goal_collaborators', COUNT(*) FROM deleted_goal_collaborators\n      ORDER BY 1\n      ;
Executing (2a8a1144-f4a3-4a64-9214-cec88f08a540): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240122210304-fix-erroneous-fei-goals: migrated (0.087s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240123000000-add_deletedAt_to_indexes: migrating =======
Executing (4c8b721b-e0e6-426d-9929-62750f1c2261): START TRANSACTION;
Connection validated successfully
Executing (4c8b721b-e0e6-426d-9929-62750f1c2261): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240123000000-add_deletedAt_to_indexes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (4c8b721b-e0e6-426d-9929-62750f1c2261): -- Original plan: In tables that use Sequelize's built-in "deletedAt" column, exclude deleted records\n        -- from unique indexes that don't include the pkey. However, this does not support using ON CONFLICT\n        -- in upserts. So, we need to include "deletedAt" in the index instead.\n\n        ALTER TABLE "ActivityReportApprovers" DROP CONSTRAINT "unique_activityReportId_userId";\n        DROP INDEX IF EXISTS "unique_activityReportId_userId";\n        CREATE UNIQUE INDEX "unique_activityReportId_userId"\n        ON "ActivityReportApprovers" ("activityReportId", "userId", "deletedAt");\n        ALTER TABLE "ActivityReportApprovers" ADD CONSTRAINT "unique_activityReportId_userId" UNIQUE\n        USING INDEX "unique_activityReportId_userId";\n\n        ALTER TABLE "CollaboratorTypes" DROP CONSTRAINT "CollaboratorTypes_name_validForId_unique";\n        DROP INDEX IF EXISTS "CollaboratorTypes_name_validForId_unique";\n        CREATE UNIQUE INDEX "CollaboratorTypes_name_validForId_unique"\n        ON "CollaboratorTypes" (name, "validForId", "deletedAt");\n        ALTER TABLE "CollaboratorTypes" ADD CONSTRAINT "CollaboratorTypes_name_validForId_unique" UNIQUE\n        USING INDEX "CollaboratorTypes_name_validForId_unique";\n\n        ALTER TABLE "Courses" DROP CONSTRAINT "Courses_name_unique";\n        DROP INDEX IF EXISTS "Courses_name_unique";\n        CREATE UNIQUE INDEX "Courses_name_unique"\n        ON "Courses" (name, "deletedAt");\n        ALTER TABLE "Courses" ADD CONSTRAINT "Courses_name_unique" UNIQUE\n        USING INDEX "Courses_name_unique";\n\n        ALTER TABLE "GoalCollaborators" DROP CONSTRAINT "GoalCollaborators_goalId_userId_collaboratorTypeId_unique";\n        DROP INDEX IF EXISTS "GoalCollaborators_goalId_userId_collaboratorTypeId_unique";\n        CREATE UNIQUE INDEX "GoalCollaborators_goalId_userId_collaboratorTypeId_unique"\n        ON "GoalCollaborators" ("goalId", "userId", "collaboratorTypeId", "deletedAt");\n        ALTER TABLE "GoalCollaborators" ADD CONSTRAINT "GoalCollaborators_goalId_userId_collaboratorTypeId_unique" UNIQUE\n        USING INDEX "GoalCollaborators_goalId_userId_collaboratorTypeId_unique";\n\n        ALTER TABLE "ObjectiveCollaborators" DROP CONSTRAINT "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un";\n        DROP INDEX IF EXISTS "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un";\n        CREATE UNIQUE INDEX "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un"\n        ON "ObjectiveCollaborators" ("objectiveId", "userId", "collaboratorTypeId", "deletedAt");\n        ALTER TABLE "ObjectiveCollaborators" ADD CONSTRAINT "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un" UNIQUE\n        USING INDEX "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un";\n\n        ALTER TABLE "ValidFor" DROP CONSTRAINT "ValidFor_option_unique";\n        DROP INDEX IF EXISTS "ValidFor_option_unique";\n        CREATE UNIQUE INDEX "ValidFor_option_unique"\n        ON "ValidFor" (name, "deletedAt");\n        ALTER TABLE "ValidFor" ADD CONSTRAINT "ValidFor_option_unique" UNIQUE\n        USING INDEX "ValidFor_option_unique";
Executing (4c8b721b-e0e6-426d-9929-62750f1c2261): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240123000000-add_deletedAt_to_indexes: migrated (0.062s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240123150604-objective-support-type: migrating =======
Executing (dd0b3728-b141-41be-8a1b-1883c1c93d40): START TRANSACTION;
Connection validated successfully
Executing (dd0b3728-b141-41be-8a1b-1883c1c93d40): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240123150604-objective-support-type.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (dd0b3728-b141-41be-8a1b-1883c1c93d40): CREATE TYPE "public"."enum_Objectives_supportType" AS ENUM('Introducing', 'Planning', 'Implementing', 'Maintaining');ALTER TABLE "public"."Objectives" ADD COLUMN "supportType" "public"."enum_Objectives_supportType";
Executing (dd0b3728-b141-41be-8a1b-1883c1c93d40): CREATE TYPE "public"."enum_ActivityReportObjectives_supportType" AS ENUM('Introducing', 'Planning', 'Implementing', 'Maintaining');ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "supportType" "public"."enum_ActivityReportObjectives_supportType";
Executing (dd0b3728-b141-41be-8a1b-1883c1c93d40): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240123150604-objective-support-type: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240123211933-hardcode-goal-source-for-curated-goals: migrating =======
Executing (e3bdbe7b-2f5a-473c-b9bd-18c393a799ce): START TRANSACTION;
Connection validated successfully
Executing (e3bdbe7b-2f5a-473c-b9bd-18c393a799ce): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240123211933-hardcode-goal-source-for-curated-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e3bdbe7b-2f5a-473c-b9bd-18c393a799ce): ALTER TABLE "public"."GoalTemplates" ADD COLUMN "source" VARCHAR(255);
Executing (e3bdbe7b-2f5a-473c-b9bd-18c393a799ce): UPDATE "GoalTemplates" SET "source" = 'Regional office priority'\n            WHERE "templateName" ILIKE '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)' AND "creationMethod" = 'Curated';\n          \n          UPDATE "GoalTemplates" SET "source" = 'Federal monitoring issues, including CLASS and RANs'\n            WHERE "templateName" ILIKE '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)' AND "creationMethod" = 'Curated';\n\n          UPDATE "Goals" SET "source" = 'Regional office priority' \n            WHERE "goalTemplateId" IN (\n              SELECT "id" FROM "GoalTemplates" WHERE "templateName" ILIKE '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)' AND "creationMethod" = 'Curated'\n            );\n          \n          UPDATE "Goals" SET "source" = 'Federal monitoring issues, including CLASS and RANs' \n            WHERE "goalTemplateId" IN (\n              SELECT "id" FROM "GoalTemplates" WHERE "templateName" ILIKE '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)' AND "creationMethod" = 'Curated'\n            );
Executing (e3bdbe7b-2f5a-473c-b9bd-18c393a799ce): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240123211933-hardcode-goal-source-for-curated-goals: migrated (0.034s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240125155606-add-goal-created-via-tr: migrating =======
Executing (47e191e0-ed65-48ac-ba41-14a26d0400e7): START TRANSACTION;
Connection validated successfully
Executing (47e191e0-ed65-48ac-ba41-14a26d0400e7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240125155606-add-goal-created-via-tr.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'imported';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'activityReport';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'rtr';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'merge';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'admin';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (47e191e0-ed65-48ac-ba41-14a26d0400e7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240125155606-add-goal-created-via-tr: migrated (0.044s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240125161416-goal-tr-join-table: migrating =======
Executing (6186d3d9-7f8f-4c0d-a985-c42ffdcfc51c): START TRANSACTION;
Connection validated successfully
Executing (6186d3d9-7f8f-4c0d-a985-c42ffdcfc51c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240125161416-goal-tr-join-table.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6186d3d9-7f8f-4c0d-a985-c42ffdcfc51c): CREATE TABLE IF NOT EXISTS "EventReportPilotGoals" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "eventId" INTEGER NOT NULL REFERENCES "EventReportPilots" ("id"), "sessionId" INTEGER NOT NULL REFERENCES "SessionReportPilots" ("id"), "grantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (6186d3d9-7f8f-4c0d-a985-c42ffdcfc51c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240125161416-goal-tr-join-table: migrated (0.080s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240129221712-change-training-event-goal-source: migrating =======
Executing (21f066c0-0406-4833-90b0-0263340a26c9): START TRANSACTION;
Connection validated successfully
Executing (21f066c0-0406-4833-90b0-0263340a26c9): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240129221712-change-training-event-goal-source.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (21f066c0-0406-4833-90b0-0263340a26c9): -- rename the existing type\n  ALTER TYPE "enum_Goals_source" RENAME TO "enum_Goals_source_old";\n  -- create the new type\n  CREATE TYPE "enum_Goals_source" AS ENUM(\n    'Federal monitoring issues, including CLASS and RANs',\n'RTTAPA development',\n'Recipient request',\n'Regional office priority',\n'Training event',\n'Training event follow-up'\n  );
Executing (21f066c0-0406-4833-90b0-0263340a26c9): -- update the columns to use the new type\n  ALTER TABLE "Goals" ALTER COLUMN "source" set default null;\n  ALTER TABLE "Goals" ALTER COLUMN "source" TYPE "enum_Goals_source" USING "source"::text::"enum_Goals_source";\n  \n  -- remove the old type\n  DROP TYPE "enum_Goals_source_old";
Executing (21f066c0-0406-4833-90b0-0263340a26c9): UPDATE "Goals"\n          SET source = 'Training event'::"enum_Goals_source"\n        WHERE source = 'Training event follow-up'::"enum_Goals_source";
Executing (21f066c0-0406-4833-90b0-0263340a26c9): -- rename the existing type\n  ALTER TYPE "enum_Goals_source" RENAME TO "enum_Goals_source_old";\n  -- create the new type\n  CREATE TYPE "enum_Goals_source" AS ENUM(\n    'Federal monitoring issues, including CLASS and RANs',\n'RTTAPA development',\n'Recipient request',\n'Regional office priority',\n'Training event'\n  );
Executing (21f066c0-0406-4833-90b0-0263340a26c9): -- update the columns to use the new type\n  ALTER TABLE "Goals" ALTER COLUMN "source" set default null;\n  ALTER TABLE "Goals" ALTER COLUMN "source" TYPE "enum_Goals_source" USING "source"::text::"enum_Goals_source";\n  \n  -- remove the old type\n  DROP TYPE "enum_Goals_source_old";
Executing (21f066c0-0406-4833-90b0-0263340a26c9): -- rename the existing type\n  ALTER TYPE "enum_ActivityReportGoals_source" RENAME TO "enum_ActivityReportGoals_source_old";\n  -- create the new type\n  CREATE TYPE "enum_ActivityReportGoals_source" AS ENUM(\n    'Federal monitoring issues, including CLASS and RANs',\n'RTTAPA development',\n'Recipient request',\n'Regional office priority',\n'Training event',\n'Training event follow-up'\n  );
Executing (21f066c0-0406-4833-90b0-0263340a26c9): -- update the columns to use the new type\n  ALTER TABLE "ActivityReportGoals" ALTER COLUMN "source" set default null;\n  ALTER TABLE "ActivityReportGoals" ALTER COLUMN "source" TYPE "enum_ActivityReportGoals_source" USING "source"::text::"enum_ActivityReportGoals_source";\n  \n  -- remove the old type\n  DROP TYPE "enum_ActivityReportGoals_source_old";
Executing (21f066c0-0406-4833-90b0-0263340a26c9): UPDATE "ActivityReportGoals"\n          SET source = 'Training event'::"enum_ActivityReportGoals_source"\n        WHERE source = 'Training event follow-up'::"enum_ActivityReportGoals_source";
Executing (21f066c0-0406-4833-90b0-0263340a26c9): -- rename the existing type\n  ALTER TYPE "enum_ActivityReportGoals_source" RENAME TO "enum_ActivityReportGoals_source_old";\n  -- create the new type\n  CREATE TYPE "enum_ActivityReportGoals_source" AS ENUM(\n    'Federal monitoring issues, including CLASS and RANs',\n'RTTAPA development',\n'Recipient request',\n'Regional office priority',\n'Training event'\n  );
Executing (21f066c0-0406-4833-90b0-0263340a26c9): -- update the columns to use the new type\n  ALTER TABLE "ActivityReportGoals" ALTER COLUMN "source" set default null;\n  ALTER TABLE "ActivityReportGoals" ALTER COLUMN "source" TYPE "enum_ActivityReportGoals_source" USING "source"::text::"enum_ActivityReportGoals_source";\n  \n  -- remove the old type\n  DROP TYPE "enum_ActivityReportGoals_source_old";
Executing (21f066c0-0406-4833-90b0-0263340a26c9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240129221712-change-training-event-goal-source: migrated (0.195s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240205192219-remove-goal-source-flag: migrating =======
Executing (848173d8-ed9a-4278-a0a3-af8b9acad19e): START TRANSACTION;
Connection validated successfully
Executing (848173d8-ed9a-4278-a0a3-af8b9acad19e): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240205192219-remove-goal-source-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (848173d8-ed9a-4278-a0a3-af8b9acad19e): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'goal_source'\n          );
Executing (848173d8-ed9a-4278-a0a3-af8b9acad19e): UPDATE "Users" SET "flags" = array_remove(flags, 'goal_source')\n        WHERE 'goal_source' = ANY(flags);
Executing (848173d8-ed9a-4278-a0a3-af8b9acad19e): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'resources_dashboard',\n'rttapa_form',\n'anv_statistics',\n'regional_goal_dashboard',\n'merge_goals',\n'monitoring',\n'closed_goal_merge_override'\n  );
Executing (848173d8-ed9a-4278-a0a3-af8b9acad19e): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (848173d8-ed9a-4278-a0a3-af8b9acad19e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240205192219-remove-goal-source-flag: migrated (0.091s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240206000000-delete_comlog_entry: migrating =======
Executing (4edb590a-1ae5-4a9d-b193-e80b63679647): START TRANSACTION;
Connection validated successfully
Executing (4edb590a-1ae5-4a9d-b193-e80b63679647): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240206000000-delete_comlog_entry.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (4edb590a-1ae5-4a9d-b193-e80b63679647): -- Delete a communications log record as desired by a customer.\n        -- Because there's no soft delete column (deletedAt), we're:\n        \n        -- Doing a hard DELETE FROM in the communications log and link tables (currently just CommunicationLogFiles)\n        -- Removing any Files that only exist due to the Communication Log.\n\n        -- The File removal step is intensive because currently there are many different ways\n        -- for a File to be linked and all have to be checked before the File can be removed.\n\n        -- Create the sets of things to be deleted and before counts\n        DROP TABLE IF EXISTS before_set;\n        CREATE TEMP TABLE before_set\n        AS\n        SELECT DISTINCT\n          cl.id clid,\n          clf.id clfid,\n          clf."fileId" fid\n        FROM "CommunicationLogs" cl\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON clf."communicationLogId" = cl.id\n        WHERE cl.id = 174;\n        \n\n        DROP TABLE IF EXISTS before_count;\n        CREATE TEMP TABLE before_count\n        AS\n        SELECT\n          COUNT(DISTINCT clid) comlog_count,\n          COUNT(DISTINCT clfid) comlogfile_count,\n          COUNT(DISTINCT fid) file_count\n        FROM before_set;\n\n        -- Check to see if any files are only present because of this communication log\n        -- unfortunately there's currently many ways to link a file\n        DROP TABLE IF EXISTS files_to_delete;\n        CREATE TEMP TABLE files_to_delete\n        AS\n        WITH candidate_files AS (SELECT DISTINCT fid FROM before_set),\n        file_links AS (\n        SELECT\n          fid,\n          clf.id clfid,\n          arf.id arfid,\n          arof.id arofid,\n          of.id ofid,\n          otf.id otfid,\n          srpf.id srpfid\n        FROM candidate_files cf\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON fid = clf."fileId"\n          AND clf."communicationLogId" NOT IN (SELECT DISTINCT clid FROM before_set)\n        LEFT JOIN "ActivityReportFiles" arf\n          ON fid = arf."fileId"\n        LEFT JOIN "ActivityReportObjectiveFiles" arof\n          ON fid = arof."fileId"\n        LEFT JOIN "ObjectiveFiles" of\n          ON fid = of."fileId"\n        LEFT JOIN "ObjectiveTemplateFiles" otf\n          ON fid = otf."fileId"\n        LEFT JOIN "SessionReportPilotFiles" srpf\n          ON fid = srpf."fileId"\n        )\n        SELECT DISTINCT fid\n        FROM file_links\n        WHERE clfid IS NULL\n          AND arfid IS NULL\n          AND arofid IS NULL\n          AND ofid IS NULL\n          AND otfid IS NULL\n          AND srpfid IS NULL\n          AND fid IS NOT NULL;\n\n        -- Actually start deleting records, starting with the link records\n        DELETE FROM "CommunicationLogFiles" clf\n        USING (SELECT DISTINCT clfid FROM before_set) b\n        WHERE clf.id = b.clfid;\n\n        DELETE FROM "Files" f\n        USING files_to_delete\n        WHERE f.id = fid;\n\n        DELETE FROM "CommunicationLogs" cl\n        USING (SELECT DISTINCT clid FROM before_set) b\n        WHERE cl.id = b.clid;\n\n        -- Show after counts\n        DROP TABLE IF EXISTS after_count;\n        CREATE TEMP TABLE after_count\n        AS\n        WITH target_logs AS (SELECT DISTINCT clid FROM before_set),\n        deleted_files AS (\n        SELECT fid\n        FROM files_to_delete\n        EXCEPT\n        SELECT id\n        FROM "Files"\n        ),\n        df_count AS (SELECT COUNT(*) cnt FROM deleted_files)\n        SELECT\n          COUNT(DISTINCT cl.id) comlog_count,\n          COUNT(DISTINCT clf.id) comlogfile_count,\n          COUNT(DISTINCT clf."fileId") file_count,\n          dfc.cnt deleted_file_count\n        FROM target_logs tl\n        CROSS JOIN df_count dfc\n        LEFT JOIN "CommunicationLogs" cl\n          ON tl.clid = cl.id\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON clf."communicationLogId" = cl.id\n        GROUP BY 4;
Executing (4edb590a-1ae5-4a9d-b193-e80b63679647): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240206000000-delete_comlog_entry: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240215183516-remove-rttapapilot: migrating =======
Executing (747ca53d-469e-4a39-8846-371237c25cbc): START TRANSACTION;
Connection validated successfully
Executing (747ca53d-469e-4a39-8846-371237c25cbc): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240215183516-remove-rttapapilot.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (747ca53d-469e-4a39-8846-371237c25cbc): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (747ca53d-469e-4a39-8846-371237c25cbc): SELECT "ZAFRemoveAuditingOnTable"('RttapaPilots');
Executing (747ca53d-469e-4a39-8846-371237c25cbc): DROP TABLE IF EXISTS "ZALRttapaPilots";
Executing (747ca53d-469e-4a39-8846-371237c25cbc): DROP TABLE IF EXISTS "RttapaPilots";
Executing (747ca53d-469e-4a39-8846-371237c25cbc): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (747ca53d-469e-4a39-8846-371237c25cbc): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240215183516-remove-rttapapilot: migrated (0.364s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240215194008-remove-rttapa-form-flag: migrating =======
Executing (32d5a2db-7c0e-453f-9dd2-77cbdd129c42): START TRANSACTION;
Connection validated successfully
Executing (32d5a2db-7c0e-453f-9dd2-77cbdd129c42): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'rttapa_form'\n          );
Executing (32d5a2db-7c0e-453f-9dd2-77cbdd129c42): UPDATE "Users" SET "flags" = array_remove(flags, 'rttapa_form')\n        WHERE 'rttapa_form' = ANY(flags);
Executing (32d5a2db-7c0e-453f-9dd2-77cbdd129c42): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'resources_dashboard',\n'anv_statistics',\n'regional_goal_dashboard',\n'merge_goals',\n'monitoring',\n'closed_goal_merge_override'\n  );
Executing (32d5a2db-7c0e-453f-9dd2-77cbdd129c42): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (32d5a2db-7c0e-453f-9dd2-77cbdd129c42): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240215194008-remove-rttapa-form-flag: migrated (0.047s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240228223541-import-system: migrating =======
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): START TRANSACTION;
Connection validated successfully
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240228223541-import-system.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_category" ADD VALUE IF NOT EXISTS 'DB';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_category" ADD VALUE IF NOT EXISTS 'MAINTENANCE';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_category" ADD VALUE IF NOT EXISTS 'IMPORT';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'VACUUM ANALYZE';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'REINDEX';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'VACUUM TABLES';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'REINDEX TABLES';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'DAILY DB MAINTENANCE';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'CLEAR MAINTENANCE LOGS';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'IMPORT_DOWNLOAD';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'IMPORT_PROCESS';
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): CREATE TABLE IF NOT EXISTS "Imports" ("id"   SERIAL , "name" TEXT NOT NULL, "ftpSettings" JSONB NOT NULL, "path" TEXT, "fileMask" TEXT, "schedule" TEXT NOT NULL, "enabled" BOOLEAN NOT NULL DEFAULT false, "definitions" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ImportFiles_status' GROUP BY 1
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): CREATE TYPE "public"."enum_ImportFiles_status" AS ENUM('IDENTIFIED', 'COLLECTING', 'COLLECTED', 'COLLECTION_FAILED', 'PROCESSING', 'PROCESSED', 'PROCESSING_FAILED');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): CREATE TABLE IF NOT EXISTS "ImportFiles" ("id"   SERIAL , "importId" INTEGER NOT NULL REFERENCES "Imports" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "fileId" INTEGER REFERENCES "Files" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "ftpFileInfo" JSONB, "status" "public"."enum_ImportFiles_status" NOT NULL DEFAULT 'IDENTIFIED', "downloadAttempts" INTEGER NOT NULL DEFAULT 0, "processAttempts" INTEGER NOT NULL DEFAULT 0, "hash" TEXT, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): CREATE UNIQUE INDEX "ImportFiles_importId_fileId"\n          ON "ImportFiles"\n          ("importId", "fileId");
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): ALTER TABLE "ImportFiles"\n          ADD CONSTRAINT "ImportFiles_importId_fileId_unique"\n          UNIQUE USING INDEX "ImportFiles_importId_fileId";
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ImportDataFiles_status' GROUP BY 1
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): CREATE TYPE "public"."enum_ImportDataFiles_status" AS ENUM('IDENTIFIED', 'PROCESSING', 'PROCESSED', 'PROCESSING_FAILED', 'WILL_NOT_PROCESS');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): CREATE TABLE IF NOT EXISTS "ImportDataFiles" ("id"   SERIAL , "importFileId" INTEGER NOT NULL REFERENCES "ImportFiles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "fileInfo" JSONB, "status" "public"."enum_ImportDataFiles_status" NOT NULL DEFAULT 'IDENTIFIED', "hash" TEXT, "schema" JSONB, "recordCounts" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (9036639c-bf38-4014-8dbf-a0934fe97284): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240228223541-import-system: migrated (0.184s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240228223541-monitoring-data: migrating =======
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): START TRANSACTION;
Connection validated successfully
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240228223541-monitoring-data.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE TABLE IF NOT EXISTS "GrantNumberLinks" ("id"   SERIAL, "grantNumber" TEXT NOT NULL , "grantId" INTEGER REFERENCES "Grants" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("grantNumber"));
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): INSERT INTO "GrantNumberLinks"\n          (\n            "grantNumber",\n            "grantId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            "number",\n            "id",\n            "createdAt",\n            "updatedAt"\n          FROM "Grants";
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE TABLE IF NOT EXISTS "MonitoringReviewLinks" ("id"   SERIAL, "reviewId" TEXT NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("reviewId"));
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE TABLE IF NOT EXISTS "MonitoringReviewStatusLinks" ("id"   SERIAL, "statusId" INTEGER NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("statusId"));
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE TABLE IF NOT EXISTS "MonitoringReviewStatuses" ("id"   SERIAL , "statusId" INTEGER NOT NULL REFERENCES "MonitoringReviewStatusLinks" ("statusId"), "name" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE UNIQUE INDEX "MonitoringReviewStatuses_statusId_deletedAt"\n          ON "MonitoringReviewStatuses"\n          ("statusId", "deletedAt");
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): ALTER TABLE "MonitoringReviewStatuses"\n          ADD CONSTRAINT "MonitoringReviewStatuses_statusId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringReviewStatuses_statusId_deletedAt";
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE TABLE IF NOT EXISTS "MonitoringReviews" ("id"   SERIAL , "reviewId" TEXT NOT NULL REFERENCES "MonitoringReviewLinks" ("reviewId"), "contentId" TEXT NOT NULL, "statusId" INTEGER NOT NULL REFERENCES "MonitoringReviewStatusLinks" ("statusId"), "startDate" DATE, "endDate" DATE, "reviewType" TEXT, "reportDeliveryDate" TIMESTAMP WITH TIME ZONE, "outcome" TEXT, "hash" TEXT, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE UNIQUE INDEX "MonitoringReviews_reviewId_deletedAt"\n          ON "MonitoringReviews"\n          ("reviewId", "deletedAt");
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): ALTER TABLE "MonitoringReviews"\n          ADD CONSTRAINT "MonitoringReviews_reviewId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringReviews_reviewId_deletedAt";
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE INDEX "MonitoringReviews_statusId"\n          ON "MonitoringReviews"\n          ("statusId")\n          WHERE "deletedAt" IS NULL;
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE INDEX "MonitoringReviews_reviewId_statusId"\n          ON "MonitoringReviews"\n          ("reviewId", "statusId")\n          WHERE "deletedAt" IS NULL;
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE TABLE IF NOT EXISTS "MonitoringReviewGrantees" ("id"   SERIAL , "reviewId" TEXT NOT NULL REFERENCES "MonitoringReviewLinks" ("reviewId"), "granteeId" TEXT NOT NULL, "createTime" TIMESTAMP WITH TIME ZONE NOT NULL, "updateTime" TIMESTAMP WITH TIME ZONE NOT NULL, "updateBy" TEXT NOT NULL, "grantNumber" TEXT NOT NULL REFERENCES "GrantNumberLinks" ("grantNumber"), "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE INDEX "MonitoringReviewGrantees_reviewId"\n          ON "MonitoringReviewGrantees"\n          ("reviewId")\n          WHERE "deletedAt" IS NULL;
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE INDEX "MonitoringReviewGrantees_granteeId"\n          ON "MonitoringReviewGrantees"\n          ("granteeId")\n          WHERE "deletedAt" IS NULL;
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE INDEX "MonitoringReviewGrantees_grantNumber"\n          ON "MonitoringReviewGrantees"\n          ("grantNumber")\n          WHERE "deletedAt" IS NULL;
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE UNIQUE INDEX "MonitoringReviewGrantees_reviewId_grantNumber_deletedAt"\n          ON "MonitoringReviewGrantees"\n          ("reviewId", "grantNumber", "deletedAt");
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): ALTER TABLE "MonitoringReviewGrantees"\n          ADD CONSTRAINT "MonitoringReviewGrantees_reviewId_grantNumber_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringReviewGrantees_reviewId_grantNumber_deletedAt";
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE TABLE IF NOT EXISTS "MonitoringFindingHistories" ("id"   SERIAL , "reviewId" TEXT NOT NULL REFERENCES "MonitoringReviewLinks" ("reviewId"), "findingHistoryId" TEXT NOT NULL, "hash" TEXT, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE INDEX "MonitoringFindingHistories_reviewId"\n          ON "MonitoringFindingHistories"\n          ("reviewId")\n          WHERE "deletedAt" IS NULL;
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE INDEX "MonitoringFindingHistories_findingHistoryId"\n          ON "MonitoringFindingHistories"\n          ("findingHistoryId")\n          WHERE "deletedAt" IS NULL;
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE UNIQUE INDEX "MonitoringFindingHistories_reviewId_findingHistoryId_deletedAt"\n          ON "MonitoringFindingHistories"\n          ("reviewId", "findingHistoryId", "deletedAt");
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): ALTER TABLE "MonitoringFindingHistories"\n          ADD CONSTRAINT "MonitoringFindingHistories_reviewId_findingHistoryId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringFindingHistories_reviewId_findingHistoryId_deletedAt";
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE TABLE IF NOT EXISTS "MonitoringClassSummaries" ("id"   SERIAL , "reviewId" TEXT NOT NULL REFERENCES "MonitoringReviewLinks" ("reviewId"), "grantNumber" TEXT NOT NULL REFERENCES "GrantNumberLinks" ("grantNumber"), "emotionalSupport" DECIMAL(5,4), "classroomOrganization" DECIMAL(5,4), "instructionalSupport" DECIMAL(5,4), "reportDeliveryDate" TIMESTAMP WITH TIME ZONE, "hash" TEXT, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE INDEX "MonitoringClassSummaries_reviewId"\n          ON "MonitoringClassSummaries"\n          ("reviewId")\n          WHERE "deletedAt" IS NULL;
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE INDEX "MonitoringClassSummaries_grantNumber"\n          ON "MonitoringClassSummaries"\n          ("grantNumber")\n          WHERE "deletedAt" IS NULL;
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): CREATE UNIQUE INDEX "MonitoringClassSummaries_reviewId_grantNumber_deletedAt"\n          ON "MonitoringClassSummaries"\n          ("reviewId", "grantNumber", "deletedAt");
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): ALTER TABLE "MonitoringClassSummaries"\n          ADD CONSTRAINT "MonitoringClassSummaries_reviewId_grantNumber_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringClassSummaries_reviewId_grantNumber_deletedAt";
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): INSERT INTO "Imports" (\n        "name",\n        "ftpSettings",\n        "path",\n        "fileMask",\n        "schedule",\n        "enabled",\n        "definitions",\n        "createdAt",\n        "updatedAt"\n      ) values (\n        'ITAMS Monitoring Data',\n        '{"host":"ITAMS_MD_HOST","port":"ITAMS_MD_PORT","username":"ITAMS_MD_USERNAME","password":"ITAMS_MD_PASSWORD"}',\n        '/ProdTTAHome',\n        '[0-9]{4}_[0-9]{2}_[0-9]{2}_XML[.]zip',\n        '0 7 * * *',\n        true,\n        '[{"fileName":"AMS_ReviewStatus.xml","path":".","encoding":"utf16le","tableName":"MonitoringReviewStatuses","keys":["statusId"],"remapDef":{"StatusId":"statusId","Name":"name"}},{"fileName":"AMS_Review.xml","path":".","encoding":"utf16le","tableName":"MonitoringReviews","keys":["reviewId"],"remapDef":{"ReviewId":"reviewId","ContentId":"contentId","StatusId":"statusId","StartDate":"startDate","EndDate":"endDate","ReviewType":"reviewType","ReportDeliveryDate":"reportDeliveryDate","Outcome":"outcome",".":"toHash.*"}},{"fileName":"AMS_ReviewGrantee.xml","path":".","encoding":"utf16le","tableName":"MonitoringReviewGrantees","keys":["reviewId","granteeId"],"remapDef":{"ReviewId":"reviewId","GranteeId":"granteeId","CreateTime":"createTime","UpdateTime":"updateTime","UpdateBy":"updateBy","GrantNumber":"grantNumber"}},{"fileName":"AMS_FindingHistory.xml","path":".","encoding":"utf16le","tableName":"MonitoringFindingHistories","keys":["findingHistoryId"],"remapDef":{"FindingHistoryId":"findingHistoryId","ReviewId":"reviewId",".":"toHash.*"}},{"fileName":"AMS_CLASS_SUMMARYGrants.xml","path":".","encoding":"utf16le","tableName":"MonitoringClassSummaries","keys":["reviewId"],"remapDef":{"ReviewId":"reviewId","GrantNumber":"grantNumber","Domain_ES":"emotionalSupport","Domain_CO":"classroomOrganization","Domain_IS":"instructionalSupport","ReportDeliveryDate":"reportDeliveryDate",".":"toHash.*"}}]',\n        CURRENT_TIMESTAMP,\n        CURRENT_TIMESTAMP\n      );
Executing (dce592f4-ed7d-4b53-a5f4-b3f693ab3257): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240228223541-monitoring-data: migrated (0.373s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240305121018-share-groups: migrating =======
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): START TRANSACTION;
Connection validated successfully
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240305121018-share-groups.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): CREATE TYPE "public"."enum_Groups_sharedWith" AS ENUM('Everyone', 'Individuals');ALTER TABLE "public"."Groups" ADD COLUMN "sharedWith" "public"."enum_Groups_sharedWith";
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): INSERT INTO "ValidFor"\n        ("name", "isReport", "createdAt", "updatedAt")\n        VALUES\n        (\n          'Groups',\n          false,\n          current_timestamp,\n          current_timestamp\n        );
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): INSERT INTO "CollaboratorTypes"\n        ("name", "validForId", "propagateOnMerge", "createdAt", "updatedAt")\n        SELECT\n          t.name,\n          vf.id,\n          t.name NOT LIKE 'Merge%',\n          current_timestamp,\n          current_timestamp\n        FROM "ValidFor" vf\n        CROSS JOIN UNNEST(ARRAY[\n          'Creator',\n'Co-Owner',\n'SharedWith',\n'Editor'\n        ]) t(name)\n        WHERE vf.name = 'Groups'\n       ;
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): CREATE TABLE IF NOT EXISTS "GroupCollaborators" ("id"   SERIAL , "groupId" INTEGER NOT NULL REFERENCES "Groups" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "collaboratorTypeId" INTEGER NOT NULL REFERENCES "CollaboratorTypes" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "linkBack" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, PRIMARY KEY ("id"));
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): CREATE UNIQUE INDEX "GroupCollaborators_groupId_userId_collaboratorTypeId_deletedAt_idx"\n          ON "GroupCollaborators"\n          ("groupId", "userId", "collaboratorTypeId", "deletedAt");
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): ALTER TABLE "GroupCollaborators"\n          ADD CONSTRAINT "GroupCollaborators_groupId_userId_collaboratorTypeId_deletedAt_idx"\n          UNIQUE USING INDEX "GroupCollaborators_groupId_userId_collaboratorTypeId_deletedAt_idx";
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): WITH\n        source_data AS (\n          \n        SELECT\n          g.id "groupId",\n          g."userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          NULL::JSONB "linkBack"\n        FROM "Groups" g\n        GROUP BY 1,2\n        ORDER BY 1\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Creator'\n          AND vf.name = 'Groups'\n        )\n      INSERT INTO "GroupCollaborators"\n      (\n        "groupId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."groupId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "groupId",\n        "userId",\n        "collaboratorTypeId",\n        "deletedAt"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "GroupCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "groupCollaboratorId",\n        "groupId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): ALTER TABLE "public"."Groups" DROP COLUMN "userId";
Executing (7e2ff7a5-6fff-4dc7-a1f1-9ba2f09cffc5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240305121018-share-groups: migrated (0.067s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240305173842-variable-goal-similarity-groups: migrating =======
Executing (130d8088-d098-467a-935d-65e33f8b1f69): START TRANSACTION;
Connection validated successfully
Executing (130d8088-d098-467a-935d-65e33f8b1f69): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240305173842-variable-goal-similarity-groups.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (130d8088-d098-467a-935d-65e33f8b1f69): ALTER TABLE "public"."GoalSimilarityGroups" ADD COLUMN "version" INTEGER;
Executing (130d8088-d098-467a-935d-65e33f8b1f69): ALTER TABLE "public"."GoalSimilarityGroupGoals" ADD COLUMN "excludedIfNotAdmin" BOOLEAN DEFAULT false;
Executing (130d8088-d098-467a-935d-65e33f8b1f69): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240305173842-variable-goal-similarity-groups: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240306000000-monitoring-nonbulkcreate: migrating =======
Executing (f20f1ddb-157e-4541-bbd6-e36cbe73fe0a): START TRANSACTION;
Connection validated successfully
Executing (f20f1ddb-157e-4541-bbd6-e36cbe73fe0a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240306000000-monitoring-nonbulkcreate.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f20f1ddb-157e-4541-bbd6-e36cbe73fe0a): SELECT setval('"ImportFiles_id_seq"', COALESCE((SELECT MAX(id)+1 FROM "ImportFiles"), 1), false);
Executing (f20f1ddb-157e-4541-bbd6-e36cbe73fe0a): SELECT setval('"ImportDataFiles_id_seq"', COALESCE((SELECT MAX(id)+1 FROM "ImportDataFiles"), 1), false);
Executing (f20f1ddb-157e-4541-bbd6-e36cbe73fe0a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240306000000-monitoring-nonbulkcreate: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240306000001-fix-r9-fei-goals: migrating =======
Executing (0dbe4385-3533-4975-a66a-0ab965289ef8): START TRANSACTION;
Connection validated successfully
Executing (0dbe4385-3533-4975-a66a-0ab965289ef8): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240306000001-fix-r9-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0dbe4385-3533-4975-a66a-0ab965289ef8): -- Unlike most goal merging, this is for changing both the ongoing and historical text of goals\n        -- I.e. both the goal text and the text cached to link records are all changed\n\n        -- We also do a before_count and after count that can be compared and should go from 5 to 1 for eac\n\n        DROP TABLE IF EXISTS goals_to_update;\n        CREATE TEMP TABLE goals_to_update\n        AS\n        SELECT * FROM (\n          VALUES -- sorted and deduped\n          (61498, 19017),\n          (61519, 19017),\n          (61520, 19017),\n          (61523, 19017),\n          (64323, 19017),\n          (64331, 19017)\n        ) AS data(gid, correct_template)\n        ;\n        \n        -- GoalTemplates should be empty or the transaction will fail and rollback. They're empty now but this\n        -- guards against attempting to reuse the logic as-is in a future scenario that's more complicated.\n        SELECT 1/(LEAST(COUNT(*),1) - 1)\n        FROM "Goals" g\n        JOIN goals_to_update\n          ON g.id = gid\n        JOIN "GoalTemplates" gt\n          ON g."goalTemplateId" = gt.id;\n\n        -- Guards against there already being goals for the same grant with the correct template already on these ARs.\n        WITH affected_ars AS (\n        SELECT DISTINCT\n          "activityReportId" arid,\n          gid source_gid\n        FROM "ActivityReportGoals" arg\n        JOIN goals_to_update\n          ON arg."goalId" = gid\n        ),\n        relevant_goals AS (\n        SELECT DISTINCT\n          arid,\n          source_gid,\n          "goalId" all_gid,\n          "goalTemplateId" all_gtid,\n          "grantId" all_grid\n        FROM affected_ars\n        JOIN "ActivityReportGoals" arg\n          ON arid = arg."activityReportId"\n        JOIN "Goals" g\n          ON arg."goalId" = g.id\n        )\n        SELECT 1/(LEAST(COUNT(*),1) - 1)\n        FROM goals_to_update gtu\n        JOIN "Goals" g\n          ON gid = g.id\n        JOIN relevant_goals rg\n          ON gid = source_gid\n          AND all_gtid = correct_template\n          AND all_grid = g."grantId";\n\n        -- before counts\n        DROP TABLE IF EXISTS before_count;\n        CREATE TEMP TABLE before_count\n        AS\n        SELECT\n          'Goals' source_table,\n          COUNT(DISTINCT name) unique_goal_texts\n        FROM "Goals" g\n        JOIN goals_to_update\n          ON gid = g.id\n        GROUP BY 1\n        UNION\n        SELECT\n          'ActivityReportGoals' source_table,\n          COUNT(DISTINCT name) unique_goal_texts\n        FROM "ActivityReportGoals" arg\n        JOIN goals_to_update\n          ON gid = arg."goalId"\n        GROUP BY 1;\n\n        UPDATE "Goals" g\n        SET\n          "goalTemplateId" = correct_template,\n          name = gt."templateName"\n        FROM goals_to_update\n        JOIN "GoalTemplates" gt\n          ON  gt.id = correct_template\n        WHERE g.id = gid;\n\n        UPDATE "ActivityReportGoals" arg\n        SET name = gt."templateName"\n        FROM goals_to_update\n        JOIN "GoalTemplates" gt\n          ON gt.id = correct_template\n        WHERE arg."goalId" = gid;\n\n        -- after counts\n        DROP TABLE IF EXISTS after_count;\n        CREATE TEMP TABLE after_count\n        AS\n        SELECT\n          'Goals' source_table,\n          COUNT(DISTINCT name) unique_goal_texts\n        FROM "Goals" g\n        JOIN goals_to_update\n          ON gid = g.id\n        GROUP BY 1\n        UNION\n        SELECT\n          'ActivityReportGoals' source_table,\n          COUNT(DISTINCT name) unique_goal_texts\n        FROM "ActivityReportGoals" arg\n        JOIN goals_to_update\n          ON gid = arg."goalId"\n        GROUP BY 1;
Executing (0dbe4385-3533-4975-a66a-0ab965289ef8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240306000001-fix-r9-fei-goals: migrated (0.044s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240307224936-add-user-roles-and-cleanup-settings: migrating =======
Executing (1c6bd9b2-2d00-4880-a229-bb9a8e145dd5): START TRANSACTION;
Connection validated successfully
Executing (1c6bd9b2-2d00-4880-a229-bb9a8e145dd5): INSERT INTO "Roles" ("name","fullName","isSpecialist","createdAt","updatedAt") VALUES ('ITM','Interim Management Team',false,'2025-03-28 21:03:34.374 +00:00','2025-03-28 21:03:34.374 +00:00'),('IST','Integrated Service Team',false,'2025-03-28 21:03:34.374 +00:00','2025-03-28 21:03:34.374 +00:00'),('GMS','Grants Management Specialist',false,'2025-03-28 21:03:34.374 +00:00','2025-03-28 21:03:34.374 +00:00');
Executing (1c6bd9b2-2d00-4880-a229-bb9a8e145dd5): -- 1.) Cleanup for 'emailWhenReportSubmittedForReview' setting.\n      WITH "overrides" AS (\n        -- Get settings we potentially need to delete.\n        SELECT\n          uso.id as "overrideId",\n          uso."userId",\n          us.key,\n          uso.value\n        FROM "UserSettingOverrides" uso\n        JOIN "UserSettings" us\n          ON uso."userSettingId" = us.id\n        WHERE us.key = 'emailWhenReportSubmittedForReview'\n      ), "usersWithRoles" AS (\n        -- Get array of roles for each user.\n        SELECT\n        ur."userId",\n        ARRAY_AGG(r."name") AS roles\n        FROM "UserRoles" ur\n        JOIN "Roles" r\n          ON ur."roleId" = r.id\n        WHERE ur."userId" IN (\n          SELECT DISTINCT "userId" FROM "overrides"\n        )\n        GROUP BY ur."userId"\n      ), "toCleanUp" AS (\n        -- Compare roles for each setting and delete if necessary.\n        SELECT\n        o."overrideId",\n        o."userId",\n        o.key,\n        o."value",\n        uwr."roles"\n        FROM "overrides" o\n        JOIN "usersWithRoles" uwr\n          ON uwr."userId" = o."userId"\n        WHERE NOT (uwr."roles"::text[] &&  ARRAY['ECM', 'GSM', 'TTAC'])\n      )\n      DELETE FROM "UserSettingOverrides"\n      WHERE id IN (SELECT "overrideId" FROM "toCleanUp");\n\n      -- 2.) Cleanup for 'emailWhenChangeRequested', 'emailWhenReportApproval', 'emailWhenAppointedCollaborator' settings.\n      WITH "overrides" AS (\n        -- Get settings we potentially need to delete.\n        SELECT\n          uso.id as "overrideId",\n          uso."userId",\n          us.key,\n          uso.value\n        FROM "UserSettingOverrides" uso\n        JOIN "UserSettings" us\n          ON uso."userSettingId" = us.id\n        WHERE us.key IN ('emailWhenChangeRequested', 'emailWhenReportApproval', 'emailWhenAppointedCollaborator')\n      ), "usersWithRoles" AS (\n        -- Get array of roles for each user.\n        SELECT\n        ur."userId",\n        ARRAY_AGG(r."name") AS roles\n        FROM "UserRoles" ur\n        JOIN "Roles" r\n          ON ur."roleId" = r.id\n        WHERE ur."userId" IN (\n          SELECT DISTINCT "userId" FROM "overrides"\n        )\n        GROUP BY ur."userId"\n      ), "toCleanUp" AS (\n        -- Compare roles for each setting and delete if necessary.\n        SELECT\n        o."overrideId",\n        o."userId",\n        o.key,\n        o."value",\n        uwr."roles"\n        FROM "overrides" o\n        JOIN "usersWithRoles" uwr\n          ON uwr."userId" = o."userId"\n        WHERE NOT (uwr."roles"::text[] &&  ARRAY['ECM', 'ECS', 'FES', 'GS', 'GSM', 'HS', 'SS', 'TTAC'])\n      )\n      DELETE FROM "UserSettingOverrides"\n      WHERE id IN (SELECT "overrideId" FROM "toCleanUp");\n\n      -- 3.) Cleanup for 'emailWhenRecipientReportApprovedProgramSpecialist' setting.\n      WITH "overrides" AS (\n        -- Get settings we potentially need to delete.\n        SELECT\n          uso.id as "overrideId",\n          uso."userId",\n          us.key,\n          uso.value\n        FROM "UserSettingOverrides" uso\n        JOIN "UserSettings" us\n          ON uso."userSettingId" = us.id\n        WHERE us.key  = 'emailWhenRecipientReportApprovedProgramSpecialist'\n      ), "usersWithRoles" AS (\n        -- Get array of roles for each user.\n        SELECT\n        ur."userId",\n        ARRAY_AGG(r."name") AS roles\n        FROM "UserRoles" ur\n        JOIN "Roles" r\n          ON ur."roleId" = r.id\n        WHERE ur."userId" IN (\n          SELECT DISTINCT "userId" FROM "overrides"\n        )\n        GROUP BY ur."userId"\n      ), "toCleanUp" AS (\n        -- Compare roles for each setting and delete if necessary.\n        SELECT\n        o."overrideId",\n        o."userId",\n        o.key,\n        o."value",\n        uwr."roles"\n        FROM "overrides" o\n        JOIN "usersWithRoles" uwr\n          ON uwr."userId" = o."userId"\n        WHERE NOT (uwr."roles"::text[] &&  ARRAY['PS', 'SPS', 'GMS'])\n      )\n      DELETE FROM "UserSettingOverrides"\n      WHERE id IN (SELECT "overrideId" FROM "toCleanUp");
Executing (1c6bd9b2-2d00-4880-a229-bb9a8e145dd5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240307224936-add-user-roles-and-cleanup-settings: migrated (0.036s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240311000000-add-effectivedate_for_migrated_personnel: migrating =======
Executing (28625dcb-f9db-4691-ad53-40afd6a905bb): START TRANSACTION;
Connection validated successfully
Executing (28625dcb-f9db-4691-ad53-40afd6a905bb): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240311000000-add-effectivedate_for_migrated_personnel.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (28625dcb-f9db-4691-ad53-40afd6a905bb): -------------\n        -- PROCESS --\n        -------------\n        -- 1: Make sure the migration is valid\n        -- 2: Get unique role assignments, so:\n        --   roles * programs * grants * emails\n        -- 3: Get the instances where people were set active\n        --   This is separate because they may be set active\n        --   in a different transaction than when the rest\n        --   of their data was set\n        -- 4: Get the latest activation timestamp for the currently assigned personnel\n        --   No one appears to have been assigned to the same role * program * grant\n        --   more than once, so this is more of a "due diligence" item\n        -- 5: Update any blank effectiveDates with the latest activation timestamp\n\n        -- 1: Make sure the migration is valid\n        -- (The logic is not guaranteed to work if the values that associate personnel\n        -- with a role in a ProgramPersonnel record have been updated more than once.)\n        CREATE TEMP TABLE invalid_test\n        AS\n        WITH program_personnel_association_updates AS (\n        SELECT\n          data_id,\n          COUNT(DISTINCT new_row_data->>'email') email_cnt,\n          COUNT(DISTINCT new_row_data->>'programId') program_cnt,\n          COUNT(DISTINCT new_row_data->>'grantId') grant_cnt,\n          COUNT(DISTINCT new_row_data->>'role') role_cnt\n        FROM "ZALProgramPersonnel"\n        GROUP BY 1\n        )\n        SELECT *\n        FROM program_personnel_association_updates\n        WHERE email_cnt > 1\n          OR program_cnt > 1\n          OR grant_cnt > 1\n          OR role_cnt > 1\n        ;\n        -- This will cause a divide by zero error that fails the transaction if invalid_test is not empty\n        SELECT\n          1/(LEAST(COUNT(*),1) - 1)\n        FROM invalid_test\n        ;\n        \n        -- 2: Get unique role assignments\n        WITH all_personnel_roles AS (\n        SELECT DISTINCT\n          (new_row_data->>'programId')::int pid,\n          (new_row_data->>'grantId')::int grid,\n          new_row_data->>'role' prole,\n          new_row_data->>'email' email,\n          data_id\n        FROM "ZALProgramPersonnel"\n        ),\n        ordered_effective_dates AS (\n        SELECT\n          pp.id ppid,\n          zpp.dml_timestamp effective_date,\n          -- 4: Count how many times each email * role * program * grant was assigned\n          ROW_NUMBER() OVER (\n            PARTITION BY apr.data_id\n            ORDER BY zpp.dml_timestamp DESC\n          ) date_order\n        FROM "ProgramPersonnel" pp\n        JOIN all_personnel_roles apr\n          ON pp.id = apr.data_id\n          AND pp.email = apr.email\n        -- 3: Get the instances where people were set active\n        JOIN "ZALProgramPersonnel" zpp\n          ON pp.id = zpp.data_id\n          AND (zpp.new_row_data->>'active')::bool = TRUE\n        WHERE pp.active = TRUE\n        )\n        UPDATE "ProgramPersonnel" pp\n        -- 5: Update any blank effectiveDates\n        SET "effectiveDate" = effective_date\n        FROM ordered_effective_dates\n        -- 4: Get the latest activation timestamp\n        WHERE date_order = 1\n          AND ppid = id\n          AND pp."effectiveDate" IS NULL;
Executing (28625dcb-f9db-4691-ad53-40afd6a905bb): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240311000000-add-effectivedate_for_migrated_personnel: migrated (0.028s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240313000002-delete_comlog_entry: migrating =======
Executing (a730ae69-f531-4e09-8cbe-90a7f81d003c): START TRANSACTION;
Connection validated successfully
Executing (a730ae69-f531-4e09-8cbe-90a7f81d003c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240313000002-delete_comlog_entry.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a730ae69-f531-4e09-8cbe-90a7f81d003c): -- Delete communications log records as desired by a customer.\n        -- Because there's no soft delete column (deletedAt), we're:\n        \n        -- Doing a hard DELETE FROM in the communications log and link tables (currently just CommunicationLogFiles)\n        -- Removing any Files that only exist due to the Communication Log.\n\n        -- The File removal step is intensive because currently there are many different ways\n        -- for a File to be linked and all have to be checked before the File can be removed.\n\n        -- Create the sets of things to be deleted and before counts\n        DROP TABLE IF EXISTS before_set;\n        CREATE TEMP TABLE before_set\n        AS\n        SELECT DISTINCT\n          cl.id clid,\n          clf.id clfid,\n          clf."fileId" fid\n        FROM "CommunicationLogs" cl\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON clf."communicationLogId" = cl.id\n        WHERE cl.id IN (788, 888);\n        \n\n        DROP TABLE IF EXISTS before_count;\n        CREATE TEMP TABLE before_count\n        AS\n        SELECT\n          COUNT(DISTINCT clid) comlog_count,\n          COUNT(DISTINCT clfid) comlogfile_count,\n          COUNT(DISTINCT fid) file_count\n        FROM before_set;\n\n        -- Check to see if any files are only present because of this communication log\n        -- unfortunately there's currently many ways to link a file\n        DROP TABLE IF EXISTS files_to_delete;\n        CREATE TEMP TABLE files_to_delete\n        AS\n        WITH candidate_files AS (SELECT DISTINCT fid FROM before_set),\n        file_links AS (\n        SELECT\n          fid,\n          clf.id clfid,\n          arf.id arfid,\n          arof.id arofid,\n          of.id ofid,\n          otf.id otfid,\n          srpf.id srpfid\n        FROM candidate_files cf\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON fid = clf."fileId"\n          AND clf."communicationLogId" NOT IN (SELECT DISTINCT clid FROM before_set)\n        LEFT JOIN "ActivityReportFiles" arf\n          ON fid = arf."fileId"\n        LEFT JOIN "ActivityReportObjectiveFiles" arof\n          ON fid = arof."fileId"\n        LEFT JOIN "ObjectiveFiles" of\n          ON fid = of."fileId"\n        LEFT JOIN "ObjectiveTemplateFiles" otf\n          ON fid = otf."fileId"\n        LEFT JOIN "SessionReportPilotFiles" srpf\n          ON fid = srpf."fileId"\n        )\n        SELECT DISTINCT fid\n        FROM file_links\n        WHERE clfid IS NULL\n          AND arfid IS NULL\n          AND arofid IS NULL\n          AND ofid IS NULL\n          AND otfid IS NULL\n          AND srpfid IS NULL\n          AND fid IS NOT NULL;\n\n        -- Actually start deleting records, starting with the link records\n        DELETE FROM "CommunicationLogFiles" clf\n        USING (SELECT DISTINCT clfid FROM before_set) b\n        WHERE clf.id = b.clfid;\n\n        DELETE FROM "Files" f\n        USING files_to_delete\n        WHERE f.id = fid;\n\n        DELETE FROM "CommunicationLogs" cl\n        USING (SELECT DISTINCT clid FROM before_set) b\n        WHERE cl.id = b.clid;\n\n        -- Show after counts\n        DROP TABLE IF EXISTS after_count;\n        CREATE TEMP TABLE after_count\n        AS\n        WITH target_logs AS (SELECT DISTINCT clid FROM before_set),\n        deleted_files AS (\n        SELECT fid\n        FROM files_to_delete\n        EXCEPT\n        SELECT id\n        FROM "Files"\n        ),\n        df_count AS (SELECT COUNT(*) cnt FROM deleted_files)\n        SELECT\n          COUNT(DISTINCT cl.id) comlog_count,\n          COUNT(DISTINCT clf.id) comlogfile_count,\n          COUNT(DISTINCT clf."fileId") file_count,\n          dfc.cnt deleted_file_count\n        FROM target_logs tl\n        CROSS JOIN df_count dfc\n        LEFT JOIN "CommunicationLogs" cl\n          ON tl.clid = cl.id\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON clf."communicationLogId" = cl.id\n        GROUP BY 4;
Executing (a730ae69-f531-4e09-8cbe-90a7f81d003c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240313000002-delete_comlog_entry: migrated (0.053s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240313173842-allow-null-eventreportgoal-session-fk: migrating =======
Executing (939c22e2-214f-4301-bd0d-2311f8a47193): START TRANSACTION;
Connection validated successfully
Executing (939c22e2-214f-4301-bd0d-2311f8a47193): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240313173842-allow-null-eventreportgoal-session-fk.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (939c22e2-214f-4301-bd0d-2311f8a47193): ALTER TABLE "EventReportPilotGoals" ALTER COLUMN "sessionId" DROP NOT NULL;ALTER TABLE "EventReportPilotGoals" ALTER COLUMN "sessionId" DROP DEFAULT;ALTER TABLE "EventReportPilotGoals" ALTER COLUMN "sessionId" TYPE INTEGER;
Executing (939c22e2-214f-4301-bd0d-2311f8a47193): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240313173842-allow-null-eventreportgoal-session-fk: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240320000000-merge_dissimilar_fei_goals: migrating =======
Executing (408fb051-0e7d-4ecc-9262-fb33f2c7ed2c): START TRANSACTION;
Connection validated successfully
Executing (408fb051-0e7d-4ecc-9262-fb33f2c7ed2c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240320000000-merge_dissimilar_fei_goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (408fb051-0e7d-4ecc-9262-fb33f2c7ed2c): -- A user wants non-FEI goals merged into their FEI goal\n\n      -- PROCESS:\n      -- Delete existing root causes (there should be none for this PR)\n      -- Test to make sure no root causes were actually deleted (this PR only)\n      -- Merge objective topics\n      -- Merge objective resources\n      -- Merge objective files\n      -- Delete duplicate objective topics\n      -- Delete duplicate objective resources\n      -- Delete duplicate objective files\n      -- Relink non-goalmerge Objectives\n      -- Update the target goals record history fields from the donor goals\n      -- Relink non-duplicate ARGs\n      -- Delete duplicate ARGs\n      -- Delete donor goals\n\n\n      DROP TABLE IF EXISTS goal_merges;\n      CREATE TEMP TABLE goal_merges\n      AS\n      SELECT * FROM (\n        VALUES -- sorted and deduped\n        (47264, 69397),\n        (50779, 69397),\n        (52085, 69397),\n        (69396, 69397),\n        (69401, 69397)\n      ) AS data(donor_gid, target_gid)\n      ;\n\n      -- This should be empty for TTAHUB-2664\n      DROP TABLE IF EXISTS deleted_gfrs;\n      CREATE TEMP TABLE deleted_gfrs\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalFieldResponses"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gfrid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Exit if any GFR deletions(TTAHUB-2664 only)\n      SELECT\n        1/(LEAST(COUNT(*),1) - 1)\n      FROM deleted_gfrs\n      ;\n      \n      -- Merge goal collaborators\n      DROP TABLE IF EXISTS relinked_goal_collaborators;\n      CREATE TEMP TABLE relinked_goal_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_gid,\n            "userId" uid\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.donor_gid = gc."goalId"\n          EXCEPT\n          SELECT\n            donor_gid,\n            "userId"\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.target_gid = gc."goalId"\n        )\n        UPDATE "GoalCollaborators" AS gc\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.donor_gid = gm.donor_gid\n        WHERE gc."userId" = u.uid\n          AND gc."goalId" = u.donor_gid\n        RETURNING\n          id gcid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      DROP TABLE IF EXISTS objective_merges;\n      CREATE TEMP TABLE objective_merges\n      AS\n      SELECT\n        donor_obj.id donor_oid,\n        target_obj.id target_oid\n      FROM goal_merges gm\n      JOIN "Objectives" donor_obj\n        ON gm.donor_gid = donor_obj."goalId"\n      JOIN "Objectives" target_obj\n        ON gm.target_gid = target_obj."goalId"\n        AND donor_obj.title = target_obj.title\n      WHERE donor_obj.id != target_obj.id\n      ;\n      \n      -- Merge goal collaborators\n      DROP TABLE IF EXISTS relinked_objective_collaborators;\n      CREATE TEMP TABLE relinked_objective_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "userId" uid\n          FROM objective_merges om\n          JOIN "ObjectiveCollaborators" oc\n            ON om.donor_oid = oc."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "userId"\n          FROM objective_merges om\n          JOIN "ObjectiveCollaborators" oc\n            ON om.target_oid = oc."objectiveId"\n        )\n        UPDATE "ObjectiveCollaborators" AS oc\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE oc."userId" = u.uid\n          AND oc."objectiveId" = u.donor_oid\n        RETURNING\n          id ocid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target objectives\n      DROP TABLE IF EXISTS updated_target_objectives;\n      CREATE TEMP TABLE updated_target_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" AS o\n        SET\n          "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n          "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n          "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n          "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n          "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n          "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n        FROM objective_merges om\n        JOIN "Objectives" d_o\n          ON om.donor_oid = d_o.id\n        WHERE om.target_oid = o.id\n        RETURNING\n          o.id oid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      \n      -- Merge objective topics\n      DROP TABLE IF EXISTS relinked_objective_topics;\n      CREATE TEMP TABLE relinked_objective_topics\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "topicId" tid\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.donor_oid = ot."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "topicId"\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.target_oid = ot."objectiveId"\n        )\n        UPDATE "ObjectiveTopics" AS ot\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE ot."topicId" = u.tid\n          AND ot."objectiveId" = u.donor_oid\n        RETURNING\n          id otid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Merge objective resources\n      DROP TABLE IF EXISTS relinked_objective_resources;\n      CREATE TEMP TABLE relinked_objective_resources\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "resourceId" rid\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.donor_oid = o_r."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "resourceId"\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.target_oid = o_r."objectiveId"\n        )\n        UPDATE "ObjectiveResources" AS o_r\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE o_r."resourceId" = u.rid\n          AND o_r."objectiveId" = u.donor_oid\n        RETURNING\n          id orid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Merge objective files\n      DROP TABLE IF EXISTS relinked_objective_files;\n      CREATE TEMP TABLE relinked_objective_files\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "fileId" fid\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.donor_oid = of."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "fileId"\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.target_oid = of."objectiveId"\n        )\n        UPDATE "ObjectiveFiles" AS of\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE of."fileId" = u.fid\n          AND of."objectiveId" = u.donor_oid\n        RETURNING\n          id ofid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective topics\n      DROP TABLE IF EXISTS deleted_objective_topics;\n      CREATE TEMP TABLE deleted_objective_topics\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveTopics"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id otid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective resources\n      DROP TABLE IF EXISTS deleted_objective_resources;\n      CREATE TEMP TABLE deleted_objective_resources\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveResources"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id orid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective files\n      DROP TABLE IF EXISTS deleted_objective_files;\n      CREATE TEMP TABLE deleted_objective_files\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveFiles"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ofid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Link objectives on merged goals to the FEI goals\n      DROP TABLE IF EXISTS relinked_objectives;\n      CREATE TEMP TABLE relinked_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives"\n        SET "goalId" = target_gid\n        FROM goal_merges\n        WHERE "goalId" = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          id oid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target goals\n      DROP TABLE IF EXISTS updated_target_goals;\n      CREATE TEMP TABLE updated_target_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          "updatedAt" = GREATEST(dg."updatedAt", g."updatedAt"),\n          "firstNotStartedAt" = LEAST(dg."firstNotStartedAt", g."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(dg."lastNotStartedAt", g."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(dg."firstInProgressAt", g."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(dg."lastInProgressAt", g."lastInProgressAt"),\n          "firstCeasedSuspendedAt" = LEAST(dg."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt"),\n          "lastCeasedSuspendedAt" = GREATEST(dg."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt"),\n          "firstClosedAt" = LEAST(dg."firstClosedAt", g."firstClosedAt"),\n          "lastClosedAt" = GREATEST(dg."lastClosedAt", g."lastClosedAt")\n        FROM goal_merges gm\n        JOIN "Goals" dg\n          ON gm.donor_gid = dg.id\n        WHERE gm.target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- relink non-duplicate ARGs\n      DROP TABLE IF EXISTS relinked_args;\n      CREATE TEMP TABLE relinked_args\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            "activityReportId" arid,\n            "goalId" gid\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.donor_gid = arg."goalId"\n          EXCEPT\n          SELECT\n            "activityReportId",\n            "goalId"\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.target_gid = arg."goalId"\n        )\n        UPDATE "ActivityReportGoals" AS arg\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.gid = gm.donor_gid\n        WHERE arg."goalId" = u.gid\n          AND arg."activityReportId" = u.arid\n        RETURNING\n          id argid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id argid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Soft delete donor goals\n      DROP TABLE IF EXISTS deleted_goals;\n      CREATE TEMP TABLE deleted_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals"\n        SET "deletedAt" = NOW()\n        FROM goal_merges\n        WHERE id = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          target_gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate goal collaborators\n      DROP TABLE IF EXISTS deleted_goal_collaborators;\n      CREATE TEMP TABLE deleted_goal_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalCollaborators"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gcid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective collaborators\n      DROP TABLE IF EXISTS deleted_objective_collaborators;\n      CREATE TEMP TABLE deleted_objective_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveCollaborators"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ocid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      SELECT\n        1 op_order,\n        'deleted_gfrs' operation,\n        COUNT(*) cnt\n      FROM deleted_gfrs\n      UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n      UNION SELECT 3,'relinked_objective_topics', COUNT(*) FROM relinked_objective_topics\n      UNION SELECT 4,'relinked_objective_resources', COUNT(*) FROM relinked_objective_resources\n      UNION SELECT 5,'relinked_objective_files', COUNT(*) FROM relinked_objective_files\n      UNION SELECT 6,'deleted_objective_topics', COUNT(*) FROM deleted_objective_topics\n      UNION SELECT 7,'deleted_objective_resources', COUNT(*) FROM deleted_objective_resources\n      UNION SELECT 8,'deleted_objective_files', COUNT(*) FROM deleted_objective_files\n      UNION SELECT 9,'relinked_objectives', COUNT(*) FROM relinked_objectives\n      UNION SELECT 10,'updated_target_goals', COUNT(*) FROM updated_target_goals\n      UNION SELECT 11,'relinked_args', COUNT(*) FROM relinked_args\n      UNION SELECT 12,'deleted_args', COUNT(*) FROM deleted_args\n      UNION SELECT 13,'deleted_goals', COUNT(*) FROM deleted_goals\n      UNION SELECT 14,'relinked_goal_collaborators', COUNT(*) FROM relinked_goal_collaborators\n      UNION SELECT 15,'deleted_goal_collaborators', COUNT(*) FROM deleted_goal_collaborators\n      UNION SELECT 16,'relinked_objective_collaborators', COUNT(*) FROM relinked_objective_collaborators\n      UNION SELECT 17,'deleted_objective_collaborators', COUNT(*) FROM deleted_objective_collaborators\n      ORDER BY 1\n      ;
Executing (408fb051-0e7d-4ecc-9262-fb33f2c7ed2c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240320000000-merge_dissimilar_fei_goals: migrated (0.126s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240321002253-create-goals-for-completed-sessions: migrating =======
Executing (e499265f-0186-4d49-bc86-e0a9cbabd275): START TRANSACTION;
Connection validated successfully
Executing (e499265f-0186-4d49-bc86-e0a9cbabd275): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240321002253-create-goals-for-completed-sessions.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e499265f-0186-4d49-bc86-e0a9cbabd275): SELECT id, "eventId", data\n      FROM "SessionReportPilots"\n      WHERE data->>'status' = 'Complete';
Executing (e499265f-0186-4d49-bc86-e0a9cbabd275): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240321002253-create-goals-for-completed-sessions: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240326004505-cache-table-for-training-reports: migrating =======
Executing (e8a2a650-ea45-481e-91a4-2b0a860675b0): START TRANSACTION;
Connection validated successfully
Executing (e8a2a650-ea45-481e-91a4-2b0a860675b0): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240326004505-cache-table-for-training-reports.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "EventReportPilotNationalCenterUsers" ("id"  SERIAL , "eventReportPilotId" INTEGER NOT NULL REFERENCES "EventReportPilots" ("id") ON DELETE CASCADE, "nationalCenterName" VARCHAR(255) NOT NULL, "nationalCenterId" INTEGER NOT NULL REFERENCES "NationalCenters" ("id"), "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "userName" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (e8a2a650-ea45-481e-91a4-2b0a860675b0): ALTER TABLE "EventReportPilotNationalCenterUsers"\n      ADD CONSTRAINT "EventReportPilotNationalCenterUsers_nationalCenterId_userId_eventReportPilotId_unique" UNIQUE ("nationalCenterId", "eventReportPilotId", "userId");
Executing (e8a2a650-ea45-481e-91a4-2b0a860675b0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240326004505-cache-table-for-training-reports: migrated (0.062s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240327150240-training_reports_dashboard_feature-flag: migrating =======
Executing (fe8c8853-ba8c-4391-92fb-764e5cba4da1): START TRANSACTION;
Connection validated successfully
Executing (fe8c8853-ba8c-4391-92fb-764e5cba4da1): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240327150240-training_reports_dashboard_feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (fe8c8853-ba8c-4391-92fb-764e5cba4da1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240327150240-training_reports_dashboard_feature-flag: migrated (0.045s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240403000000-reopen-closed-FEI-goals: migrating =======
Executing (5aae113b-c266-45b3-aeca-2024728636ca): START TRANSACTION;
Connection validated successfully
Executing (5aae113b-c266-45b3-aeca-2024728636ca): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240403000000-reopen-closed-FEI-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51128;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51130;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51131;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51095;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51096;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 66611;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51115;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51105;
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (default): UPDATE "ActivityReportGoals" arg\n      SET source = 'Regional office priority'\n      WHERE arg.id = 99676;
Connection validated successfully
Executing (default): DELETE FROM "ActivityReportGoals" arg\n      WHERE arg.id = 99685;
Connection validated successfully
Executing (5aae113b-c266-45b3-aeca-2024728636ca): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240403000000-reopen-closed-FEI-goals: migrated (0.035s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240409162356-remove-duplicate-goals-for-same-grant: migrating =======
Executing (19992d3a-187e-49b9-b448-88e644a2094c): START TRANSACTION;
Connection validated successfully
Executing (19992d3a-187e-49b9-b448-88e644a2094c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240409162356-remove-duplicate-goals-for-same-grant.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (19992d3a-187e-49b9-b448-88e644a2094c): --  1. Identify the affected reports/grants/goals\n      DROP TABLE IF EXISTS tmp_affected_reports_grants_goals;\n      CREATE TEMP TABLE tmp_affected_reports_grants_goals\n      AS\n      SELECT\n        arg."activityReportId",\n        r.name "Recipeint",\n        gr.id "grantId",\n        gr."number",\n        array_agg(DISTINCT g.id ORDER BY g.id) "goalIds",\n        min(arg."createdAt") "earliest createdAt",\n        g.name\n      FROM "ActivityReportGoals" arg\n      JOIN "Goals" g\n      ON arg."goalId" = g.id\n      JOIN "Grants" gr\n      on g."grantId" = gr.id\n      JOIN "Recipients" r\n      ON gr."recipientId" = r.id\n      GROUP BY 1,2,3,4,7\n      HAVING COUNT(DISTINCT g.id) > 1\n      AND COUNT(DISTINCT g.id) != COUNT(DISTINCT g.name)\n      ORDER BY 1 desc,2,3;\n      --  2. Identify the affected objectives\n      DROP TABLE IF EXISTS tmp_affected_objectives;\n      CREATE TEMP TABLE tmp_affected_objectives\n      AS\n      SELECT\n        targg."activityReportId",\n        targg."grantId",\n        targg."goalIds"[1] "originalGoalId",\n        targg."goalIds"[2] "extraGoalId",\n        array_remove(array_agg(DISTINCT aro."objectiveId" ORDER BY aro."objectiveId") filter (where o."goalId" = targg."goalIds"[1]),null) "originalGoalObjectiveIds",\n        array_remove(array_agg(DISTINCT aro."objectiveId" ORDER BY aro."objectiveId") filter (where o."goalId" = targg."goalIds"[2]),null) "extraGoalObjectiveIds",\n        aro.title\n      FROM tmp_affected_reports_grants_goals targg\n      LEFT JOIN "Objectives" o\n      ON o."goalId" = any(targg."goalIds")\n      left join "ActivityReportObjectives" aro\n      ON o.id = aro."objectiveId"\n      AND targg."activityReportId" = aro."activityReportId"\n      group by 1,2,3,4,7\n      having aro.title is not null;\n      --  3. create missing objectives on original goals\n      DROP TABLE IF EXISTS tmp_created_missing_objectives;\n      CREATE TEMP TABLE tmp_created_missing_objectives AS\n      WITH created_missing_objectives AS (\n          INSERT INTO "Objectives" (\n              "goalId",\n              title,\n              status,\n              "createdAt",\n              "updatedAt",\n              "objectiveTemplateId",\n              "onApprovedAR",\n              "rtrOrder",\n              "createdVia",\n              "onAR",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "supportType"\n          )\n          SELECT\n              tao."originalGoalId" AS "goalId",\n              o.title,\n              (ARRAY_AGG(DISTINCT o.status))[1] AS "status",\n              MIN(o."createdAt") AS "createdAt",\n              MAX(o."updatedAt") AS "updatedAt",\n              o."objectiveTemplateId",\n              bool_or(o."onApprovedAR"),\n              MIN(o."rtrOrder") AS "rtrOrder",\n              (ARRAY_AGG(DISTINCT o."createdVia"))[1] AS "createdVia",\n              bool_or(o."onAR"),\n              (ARRAY_AGG(DISTINCT o."closeSuspendReason"))[1] AS "closeSuspendReason",\n              (ARRAY_AGG(DISTINCT o."closeSuspendContext"))[1] AS "closeSuspendContext",\n              (ARRAY_AGG(DISTINCT o."supportType"))[1] AS "supportType"\n          FROM "Objectives" o\n          JOIN tmp_affected_objectives tao ON o.id = ANY(tao."extraGoalObjectiveIds")\n          WHERE "originalGoalObjectiveIds" IS NULL\n          GROUP BY 1, 2, 6\n          RETURNING\n            id,\n            "goalId",\n            title,\n            status,\n            "createdAt",\n            "updatedAt",\n            "objectiveTemplateId",\n            "onApprovedAR",\n            "rtrOrder",\n            "createdVia",\n            "onAR",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "supportType"\n      )\n      SELECT\n          tao."activityReportId",\n          tao."grantId",\n          cmo."goalId",\n          cmo.id AS "objectiveId",\n          cmo.title,\n          cmo.status,\n          cmo."createdAt",\n          cmo."updatedAt",\n          cmo."objectiveTemplateId",\n          cmo."onApprovedAR",\n          cmo."rtrOrder",\n          cmo."createdVia",\n          cmo."onAR",\n          cmo."closeSuspendReason",\n          cmo."closeSuspendContext",\n          cmo."supportType"\n      FROM created_missing_objectives cmo\n      JOIN tmp_affected_objectives tao ON cmo."goalId" = tao."originalGoalId"\n      AND cmo.title = tao.title;\n      --  4. add new objectives to reports\n      DROP TABLE IF EXISTS tmp_missing_objectives_added_to_reports;\n      CREATE TEMP TABLE tmp_missing_objectives_added_to_reports\n      AS\n      WITH missing_objectives_added_to_reports AS (\n        INSERT INTO "ActivityReportObjectives"\n        (\n          "activityReportId",\n          "objectiveId",\n          "createdAt",\n          "updatedAt",\n          "ttaProvided",\n          "title",\n          "status",\n          "arOrder",\n          "closeSuspendReason",\n          "closeSuspendContext",\n          "supportType"\n        )\n        SELECT\n          tcmo."activityReportId",\n          tcmo."objectiveId",\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          (ARRAY_AGG(DISTINCT aro."ttaProvided"))[1] "ttaProvided",\n          o.title,\n          (ARRAY_AGG(DISTINCT aro.status))[1] "status",\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(DISTINCT aro."closeSuspendReason"))[1] "closeSuspendReason",\n          (ARRAY_AGG(DISTINCT aro."closeSuspendContext"))[1] "closeSuspendContext",\n          (ARRAY_AGG(DISTINCT aro."supportType"))[1] "supportType"\n        FROM tmp_created_missing_objectives tcmo\n        JOIN "Objectives" o\n        ON tcmo."objectiveId" = o.id\n        JOIN tmp_affected_objectives tao\n        ON tcmo."activityReportId" = tao."activityReportId"\n        AND tcmo."grantId" = tao."grantId"\n        AND tcmo."goalId" = tao."originalGoalId"\n        JOIN "ActivityReportObjectives" aro\n        ON tcmo."activityReportId" = aro."activityReportId"\n        AND aro."objectiveId" = ANY(tao."extraGoalObjectiveIds")\n        GROUP BY 1,2,6\n        RETURNING\n          id,\n          "activityReportId",\n          "objectiveId",\n          title\n      )\n      SELECT\n        moatr."activityReportId",\n        moatr."objectiveId",\n        moatr.title\n      FROM missing_objectives_added_to_reports moatr;\n      --  5. Identify the affected objectives\n      DROP TABLE IF EXISTS tmp_affected_objectives;\n      CREATE TEMP TABLE tmp_affected_objectives\n      AS\n      SELECT\n        targg."activityReportId",\n        targg."grantId",\n        targg."goalIds"[1] "originalGoalId",\n        targg."goalIds"[2] "extraGoalId",\n        array_remove(array_agg(DISTINCT aro."objectiveId" ORDER BY aro."objectiveId") filter (where o."goalId" = targg."goalIds"[1]),null) "originalGoalObjectiveIds",\n        array_remove(array_agg(DISTINCT aro."objectiveId" ORDER BY aro."objectiveId") filter (where o."goalId" = targg."goalIds"[2]),null) "extraGoalObjectiveIds",\n        aro.title\n      FROM tmp_affected_reports_grants_goals targg\n      LEFT JOIN "Objectives" o\n      ON o."goalId" = any(targg."goalIds")\n      left join "ActivityReportObjectives" aro\n      ON o.id = aro."objectiveId"\n      AND targg."activityReportId" = aro."activityReportId"\n      group by 1,2,3,4,7\n      having aro.title is not null;\n      --  6. Sync courses from extra activity report objectives to main objective\n      DROP TABLE IF EXISTS tmp_sync_courses_across_affected_objectives;\n      CREATE TEMP TABLE tmp_sync_courses_across_affected_objectives\n      AS\n      WITH sync_courses_across_affected_objectives AS (\n        INSERT INTO "ActivityReportObjectiveCourses"\n        (\n          "activityReportObjectiveId",\n          "courseId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro.id "activityReportObjectiveId",\n          aroc_e."courseId" "courseId",\n          MIN(aroc_e."createdAt") "createdAt",\n          MAX(aroc_e."updatedAt") "updatedAt"\n        FROM tmp_affected_objectives tao\n        JOIN "ActivityReportObjectives" aro\n        ON tao."activityReportId" = aro."activityReportId"\n        AND tao."originalGoalObjectiveIds"[1] = aro."objectiveId"\n        JOIN (\n          SELECT\n            aroc.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveCourses" aroc\n          JOIN "ActivityReportObjectives" aro\n          ON aroc."activityReportObjectiveId" = aro.id\n        ) aroc_e\n        ON aroc_e."objectiveId" = any(tao."extraGoalObjectiveIds")\n        OR (aroc_e."objectiveId" = any(tao."originalGoalObjectiveIds")\n          AND aroc_e."objectiveId" != tao."originalGoalObjectiveIds"[1])\n        LEFT JOIN (\n          SELECT\n            aroc.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveCourses" aroc\n          JOIN "ActivityReportObjectives" aro\n          ON aroc."activityReportObjectiveId" = aro.id\n        ) aroc_o\n        ON aroc_o."objectiveId" = tao."originalGoalObjectiveIds"[1]\n        AND aroc_e."courseId" = aroc_o."courseId"\n        WHERE aroc_o.id is null\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "activityReportObjectiveId",\n          "courseId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        scafo."activityReportObjectiveId",\n        scafo."courseId",\n        scafo."createdAt",\n        scafo."updatedAt"\n      FROM sync_courses_across_affected_objectives scafo;\n      --  7. Sync corses into the objective\n      DROP TABLE IF EXISTS tmp_sync_course_to_objectives;\n      CREATE TEMP TABLE tmp_sync_course_to_objectives\n      AS\n      WITH sync_course_to_objectives AS (\n        INSERT INTO "ObjectiveCourses"\n        (\n          "objectiveId",\n          "courseId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro."objectiveId" "objectiveId",\n        tscao."courseId",\n        MIN(tscao."createdAt") "createdAt",\n        MAX(tscao."updatedAt") "updatedAt"\n        FROM tmp_sync_courses_across_affected_objectives tscao\n        JOIN "ActivityReportObjectives" aro\n        ON tscao."activityReportObjectiveId" = aro.id\n        LEFT JOIN "ObjectiveCourses" oc\n        ON tscao."courseId" = oc."courseId"\n        AND aro."objectiveId" = oc."objectiveId"\n        WHERE oc.id IS NULL\n        GROUP BY 1,2\n        RETURNING\n          id,\n        "objectiveId",\n        "courseId",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        scto."objectiveId",\n        scto."courseId",\n        scto."createdAt",\n        scto."updatedAt"\n      FROM sync_course_to_objectives scto;\n      --  8. Sync files from extra activity report objectives to main objective\n      DROP TABLE IF EXISTS tmp_sync_files_across_affected_objectives;\n      CREATE TEMP TABLE tmp_sync_files_across_affected_objectives\n      AS\n      WITH sync_files_across_affected_objectives AS (\n        INSERT INTO "ActivityReportObjectiveFiles"\n        (\n          "activityReportObjectiveId",\n          "fileId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro.id "activityReportObjectiveId",\n          arof_e."fileId" "fileId",\n          MIN(arof_e."createdAt") "createdAt",\n          MAX(arof_e."updatedAt") "updatedAt"\n        FROM tmp_affected_objectives tao\n        JOIN "ActivityReportObjectives" aro\n        ON tao."activityReportId" = aro."activityReportId"\n        AND tao."originalGoalObjectiveIds"[1] = aro."objectiveId"\n        JOIN (\n          SELECT\n            arof.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveFiles" arof\n          JOIN "ActivityReportObjectives" aro\n          ON arof."activityReportObjectiveId" = aro.id\n        ) arof_e\n        ON arof_e."objectiveId" = any(tao."extraGoalObjectiveIds")\n        OR (arof_e."objectiveId" = any(tao."originalGoalObjectiveIds")\n          AND arof_e."objectiveId" != tao."originalGoalObjectiveIds"[1])\n        LEFT JOIN (\n          SELECT\n            arof.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveFiles" arof\n          JOIN "ActivityReportObjectives" aro\n          ON arof."activityReportObjectiveId" = aro.id\n        ) arof_o\n        ON arof_o."objectiveId" = tao."originalGoalObjectiveIds"[1]\n        AND arof_e."fileId" = arof_o."fileId"\n        WHERE arof_o.id is null\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "activityReportObjectiveId",\n          "fileId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        sfafo."activityReportObjectiveId",\n        sfafo."fileId",\n        sfafo."createdAt",\n        sfafo."updatedAt"\n      FROM sync_files_across_affected_objectives sfafo;\n      --  9. Sync files into the objective\n      DROP TABLE IF EXISTS tmp_sync_file_to_objectives;\n      CREATE TEMP TABLE tmp_sync_file_to_objectives\n      AS\n      WITH sync_file_to_objectives AS (\n        INSERT INTO "ObjectiveFiles"\n        (\n          "objectiveId",\n          "fileId",\n        "createdAt",\n        "updatedAt"\n        )\n        SELECT\n          aro."objectiveId" "objectiveId",\n          tsfao."fileId",\n          MIN(tsfao."createdAt") "createdAt",\n          MAX(tsfao."updatedAt") "updatedAt"\n        FROM tmp_sync_files_across_affected_objectives tsfao\n        JOIN "ActivityReportObjectives" aro\n        ON tsfao."activityReportObjectiveId" = aro.id\n        LEFT JOIN "ObjectiveFiles" fo\n        ON tsfao."fileId" = fo."fileId"\n        AND aro."objectiveId" = fo."objectiveId"\n        WHERE fo.id IS NULL\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "objectiveId",\n          "fileId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        sfto."objectiveId",\n        sfto."fileId",\n        sfto."createdAt",\n        sfto."updatedAt"\n      FROM sync_file_to_objectives sfto;\n      -- 10. Sync resources from extra activity report objectives to main objective\n      DROP TABLE IF EXISTS tmp_sync_resources_across_affected_objectives;\n      CREATE TEMP TABLE tmp_sync_resources_across_affected_objectives\n      AS\n      WITH sync_resources_across_affected_objectives AS (\n        INSERT INTO "ActivityReportObjectiveResources"\n        (\n          "activityReportObjectiveId",\n          "resourceId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro.id "activityReportObjectiveId",\n          aror_e."resourceId" "resourceId",\n          MIN(aror_e."createdAt") "createdAt",\n          MAX(aror_e."updatedAt") "updatedAt"\n        FROM tmp_affected_objectives tao\n        JOIN "ActivityReportObjectives" aro\n        ON tao."activityReportId" = aro."activityReportId"\n        AND tao."originalGoalObjectiveIds"[1] = aro."objectiveId"\n        JOIN (\n          SELECT\n            aror.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveResources" aror\n          JOIN "ActivityReportObjectives" aro\n          ON aror."activityReportObjectiveId" = aro.id\n        ) aror_e\n        ON aror_e."objectiveId" = any(tao."extraGoalObjectiveIds")\n        OR (aror_e."objectiveId" = any(tao."originalGoalObjectiveIds")\n          AND aror_e."objectiveId" != tao."originalGoalObjectiveIds"[1])\n        LEFT JOIN (\n          SELECT\n            aror.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveResources" aror\n          JOIN "ActivityReportObjectives" aro\n          ON aror."activityReportObjectiveId" = aro.id\n        ) aror_o\n        ON aror_o."objectiveId" = tao."originalGoalObjectiveIds"[1]\n        AND aror_e."resourceId" = aror_o."resourceId"\n        WHERE aror_o.id is null\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "activityReportObjectiveId",\n          "resourceId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        srafo."activityReportObjectiveId",\n        srafo."resourceId",\n      srafo."createdAt",\n      srafo."updatedAt"\n      FROM sync_resources_across_affected_objectives srafo;\n      -- 11. Sync resources into the objective\n      DROP TABLE IF EXISTS tmp_sync_resource_to_objectives;\n      CREATE TEMP TABLE tmp_sync_resource_to_objectives\n      AS\n      WITH sync_resource_to_objectives AS (\n        INSERT INTO "ObjectiveResources"\n        (\n          "objectiveId",\n          "resourceId",\n        "createdAt",\n        "updatedAt"\n        )\n        SELECT\n          aro."objectiveId" "objectiveId",\n          tsrao."resourceId",\n          MIN(tsrao."createdAt") "createdAt",\n          MAX(tsrao."updatedAt") "updatedAt"\n        FROM tmp_sync_resources_across_affected_objectives tsrao\n        JOIN "ActivityReportObjectives" aro\n        ON tsrao."activityReportObjectiveId" = aro.id\n        LEFT JOIN "ObjectiveResources" ro\n        ON tsrao."resourceId" = ro."resourceId"\n        AND aro."objectiveId" = ro."objectiveId"\n        WHERE ro.id IS NULL\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "objectiveId",\n          "resourceId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        srto."objectiveId",\n        srto."resourceId",\n        srto."createdAt",\n        srto."updatedAt"\n      FROM sync_resource_to_objectives srto;\n      -- 12. Sync topics from extra activity report objectives to main objective\n      DROP TABLE IF EXISTS tmp_sync_topics_across_affected_objectives;\n      CREATE TEMP TABLE tmp_sync_topics_across_affected_objectives\n      AS\n      WITH sync_topics_across_affected_objectives AS (\n        INSERT INTO "ActivityReportObjectiveTopics"\n        (\n          "activityReportObjectiveId",\n          "topicId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro.id "activityReportObjectiveId",\n          arot_e."topicId" "topicId",\n          MIN(arot_e."createdAt") "createdAt",\n          MAX(arot_e."updatedAt") "updatedAt"\n        FROM tmp_affected_objectives tao\n        JOIN "ActivityReportObjectives" aro\n        ON tao."activityReportId" = aro."activityReportId"\n        AND tao."originalGoalObjectiveIds"[1] = aro."objectiveId"\n        JOIN (\n          SELECT\n            arot.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveTopics" arot\n          JOIN "ActivityReportObjectives" aro\n          ON arot."activityReportObjectiveId" = aro.id\n        ) arot_e\n        ON arot_e."objectiveId" = any(tao."extraGoalObjectiveIds")\n        OR (arot_e."objectiveId" = any(tao."originalGoalObjectiveIds")\n          AND arot_e."objectiveId" != tao."originalGoalObjectiveIds"[1])\n        LEFT JOIN (\n          SELECT\n            arot.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveTopics" arot\n          JOIN "ActivityReportObjectives" aro\n          ON arot."activityReportObjectiveId" = aro.id\n        ) arot_o\n        ON arot_o."objectiveId" = tao."originalGoalObjectiveIds"[1]\n        AND arot_e."topicId" = arot_o."topicId"\n        WHERE arot_o.id is null\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "activityReportObjectiveId",\n          "topicId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        stafo."activityReportObjectiveId",\n        stafo."topicId",\n        stafo."createdAt",\n        stafo."updatedAt"\n      FROM sync_topics_across_affected_objectives stafo;\n      -- 13. Sync topics into the objective\n      DROP TABLE IF EXISTS tmp_sync_topic_to_objectives;\n      CREATE TEMP TABLE tmp_sync_topic_to_objectives\n      AS\n      WITH sync_topic_to_objectives AS (\n        INSERT INTO "ObjectiveTopics"\n        (\n          "objectiveId",\n          "topicId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro."objectiveId" "objectiveId",\n          tstao."topicId",\n          MIN(tstao."createdAt") "createdAt",\n          MAX(tstao."updatedAt") "updatedAt"\n        FROM tmp_sync_topics_across_affected_objectives tstao\n        JOIN "ActivityReportObjectives" aro\n        ON tstao."activityReportObjectiveId" = aro.id\n        LEFT JOIN "ObjectiveTopics" ot\n        ON tstao."topicId" = ot."topicId"\n        AND aro."objectiveId" = ot."objectiveId"\n        WHERE ot.id IS NULL\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "objectiveId",\n          "topicId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        srto."objectiveId",\n        srto."topicId",\n        srto."createdAt",\n        srto."updatedAt"\n      FROM sync_topic_to_objectives srto;\n      -- 14. Identify objectives to unlink from reports\n      DROP TABLE IF EXISTS tmp_objectives_to_unlink_from_reports;\n      CREATE TEMP TABLE tmp_objectives_to_unlink_from_reports\n      AS\n      WITH objectives_to_unlink AS (\n        SELECT\n          tao."activityReportId",\n          ego."objectiveId"\n        FROM tmp_affected_objectives tao\n        CROSS JOIN UNNEST(tao."extraGoalObjectiveIds") ego("objectiveId")\n        UNION\n        SELECT\n          tao."activityReportId",\n          ego."objectiveId"\n        FROM tmp_affected_objectives tao\n        CROSS JOIN UNNEST(tao."originalGoalObjectiveIds") ego("objectiveId")\n        WHERE ego."objectiveId" != tao."originalGoalObjectiveIds"[1]\n      )\n      SELECT\n        aro.*\n      FROM "ActivityReportObjectives" aro\n      JOIN objectives_to_unlink otu\n      ON aro."activityReportId" = otu."activityReportId"\n      AND aro."objectiveId" = otu."objectiveId";\n      -- 15. Remove courses for objectives to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_courses;\n      CREATE TEMP TABLE tmp_removed_activity_report_objective_courses\n      AS\n      WITH remove_activity_report_objective_courses AS (\n        SELECT\n          aroc.id\n        FROM tmp_objectives_to_unlink_from_reports totufr\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON totufr.id = aroc."activityReportObjectiveId"\n      ),\n      removed_activity_report_objective_courses AS (\n        DELETE FROM "ActivityReportObjectiveCourses" aroc\n        USING remove_activity_report_objective_courses raroc\n        WHERE aroc.id = raroc.id\n        RETURNING\n          aroc.id,\n          aroc."activityReportObjectiveId",\n          aroc."courseId"\n      )\n      SELECT\n        raroc.id,\n        raroc."activityReportObjectiveId",\n        raroc."courseId"\n      FROM removed_activity_report_objective_courses raroc;\n      -- 16. Remove files for objectives to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_files;\n      CREATE TEMP TABLE tmp_removed_activity_report_objective_files\n      AS\n      WITH remove_activity_report_objective_files AS (\n        SELECT\n          arof.id\n        FROM tmp_objectives_to_unlink_from_reports totufr\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON totufr.id = arof."activityReportObjectiveId"\n      ),\n      removed_activity_report_objective_files AS (\n        DELETE FROM "ActivityReportObjectiveFiles" arof\n        USING remove_activity_report_objective_files rarof\n        WHERE arof.id = rarof.id\n        RETURNING\n          arof.id,\n          arof."activityReportObjectiveId",\n          arof."fileId"\n      )\n      SELECT\n        rarof.id,\n        rarof."activityReportObjectiveId",\n        rarof."fileId"\n      FROM removed_activity_report_objective_files rarof;\n      -- 17. Remove resources for objectives to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_resources;\n      CREATE TEMP TABLE tmp_removed_activity_report_objective_resources\n      AS\n      WITH remove_activity_report_objective_resources AS (\n        SELECT\n          aror.id\n        FROM tmp_objectives_to_unlink_from_reports totufr\n        JOIN "ActivityReportObjectiveResources" aror\n        ON totufr.id = aror."activityReportObjectiveId"\n      ),\n      removed_activity_report_objective_resources AS (\n        DELETE FROM "ActivityReportObjectiveResources" aror\n        USING remove_activity_report_objective_resources raror\n        WHERE aror.id = raror.id\n        RETURNING\n          aror.id,\n          aror."activityReportObjectiveId",\n          aror."resourceId"\n      )\n      SELECT\n        raror.id,\n        raror."activityReportObjectiveId",\n        raror."resourceId"\n      FROM removed_activity_report_objective_resources raror;\n      -- 18. Remove topics for objectives to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_topics;\n      CREATE TEMP TABLE tmp_removed_activity_report_objective_topics\n      AS\n      WITH remove_activity_report_objective_topics AS (\n        SELECT\n          arot.id\n        FROM tmp_objectives_to_unlink_from_reports totufr\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON totufr.id = arot."activityReportObjectiveId"\n      ),\n      removed_activity_report_objective_topics AS (\n        DELETE FROM "ActivityReportObjectiveTopics" arot\n        USING remove_activity_report_objective_topics rarot\n        WHERE arot.id = rarot.id\n        RETURNING\n          arot.id,\n          arot."activityReportObjectiveId",\n          arot."topicId"\n      )\n      SELECT\n        rarot.id,\n        rarot."activityReportObjectiveId",\n        rarot."topicId"\n      FROM removed_activity_report_objective_topics rarot;\n      --  19. Remove activity report objective records that are to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objectives;\n      CREATE TEMP TABLE tmp_removed_activity_report_objectives\n      AS\n      WITH removed_activity_report_objectives AS (\n        DELETE FROM "ActivityReportObjectives" aro\n        USING tmp_objectives_to_unlink_from_reports totufr\n        WHERE aro."activityReportId" = totufr."activityReportId"\n        AND aro."objectiveId" = totufr."objectiveId"\n        RETURNING\n          aro.id,\n          aro."activityReportId",\n          aro."objectiveId"\n      )\n      SELECT\n        raro.id "activityReportObjectiveId",\n        raro."activityReportId",\n        raro."objectiveId"\n      FROM removed_activity_report_objectives raro;\n      -- 20. Collect a list of objectives to remove as they are no longer referenced on any report\n      DROP TABLE IF EXISTS tmp_objectives_to_remove;\n      CREATE TEMP TABLE tmp_objectives_to_remove\n      AS\n      SELECT\n        traro."objectiveId"\n      FROM tmp_removed_activity_report_objectives traro\n      LEFT JOIN "ActivityReportObjectives" aro\n      ON traro."objectiveId" = aro."objectiveId"\n      WHERE aro.id IS NULL;\n      -- 21. Remove objective courses for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_courses;\n      CREATE TEMP TABLE tmp_removed_objective_courses\n      AS\n      WITH removed_objective_courses AS (\n        DELETE FROM "ObjectiveCourses" oc\n        USING tmp_objectives_to_remove totr\n        WHERE oc."objectiveId" = totr."objectiveId"\n        RETURNING\n          oc.id,\n          oc."objectiveId",\n          oc."courseId"\n      )\n      SELECT\n        roc.id,\n        roc."objectiveId",\n        roc."courseId"\n      FROM removed_objective_courses roc;\n      -- 22. Remove objective files for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_files;\n      CREATE TEMP TABLE tmp_removed_objective_files\n      AS\n      WITH removed_objective_files AS (\n        DELETE FROM "ObjectiveFiles" fo\n        USING tmp_objectives_to_remove totr\n        WHERE fo."objectiveId" = totr."objectiveId"\n        RETURNING\n          fo.id,\n          fo."objectiveId",\n          fo."fileId"\n      )\n      SELECT\n        rof.id,\n        rof."objectiveId",\n        rof."fileId"\n      FROM removed_objective_files rof;\n      -- 23. Remove objective resources for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_resources;\n      CREATE TEMP TABLE tmp_removed_objective_resources\n      AS\n      WITH removed_objective_resources AS (\n        DELETE FROM "ObjectiveResources" ro\n        USING tmp_objectives_to_remove totr\n        WHERE ro."objectiveId" = totr."objectiveId"\n        RETURNING\n          ro.id,\n          ro."objectiveId",\n          ro."resourceId"\n      )\n      SELECT\n        ror.id,\n        ror."objectiveId",\n        ror."resourceId"\n      FROM removed_objective_resources ror;\n      -- 24. Remove objective topics for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_topics;\n      CREATE TEMP TABLE tmp_removed_objective_topics\n      AS\n      WITH removed_objective_topics AS (\n        DELETE FROM "ObjectiveTopics" ot\n        USING tmp_objectives_to_remove totr\n        WHERE ot."objectiveId" = totr."objectiveId"\n        RETURNING\n          ot.id,\n          ot."objectiveId",\n          ot."topicId"\n      )\n      SELECT\n        rot.id,\n        rot."objectiveId",\n        rot."topicId"\n      FROM removed_objective_topics rot;\n      -- 25. Remove objective collaborators for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_collaborators;\n      CREATE TEMP TABLE tmp_removed_objective_collaborators\n      AS\n      WITH removed_objective_collaborators AS (\n        DELETE FROM "ObjectiveCollaborators" oc\n        USING tmp_objectives_to_remove totr\n        WHERE oc."objectiveId" = totr."objectiveId"\n        RETURNING\n          oc.id "collaboratorId",\n          oc."objectiveId",\n          oc."userId"\n      )\n      SELECT\n        roc."collaboratorId",\n        roc."objectiveId",\n        roc."userId"\n      FROM removed_objective_collaborators roc;\n      -- 26. Remove objectives that are no longer referenced on any report\n      DROP TABLE IF EXISTS tmp_removed_objectives;\n      CREATE TEMP TABLE tmp_removed_objectives\n      AS\n      WITH removed_objectives AS (\n        DELETE FROM "Objectives" o\n        USING tmp_objectives_to_remove totr\n        WHERE o.id = totr."objectiveId"\n        RETURNING\n          o.id,\n          o.title\n      )\n      SELECT\n          ro.id,\n          ro.title\n      FROM removed_objectives ro;\n      -- 27. Collect a list of ActivityReportGoals to remove\n      DROP TABLE IF EXISTS tmp_activity_report_goals_to_remove;\n      CREATE TEMP TABLE tmp_activity_report_goals_to_remove\n      AS\n      SELECT\n        targg."activityReportId",\n        targg."Recipeint",\n        targg."grantId",\n        targg."number",\n        g."goalId",\n        arg.id "activityReportGoalId"\n      FROM tmp_affected_reports_grants_goals targg\n      CROSS JOIN UNNEST(targg."goalIds") g("goalId")\n      JOIN "ActivityReportGoals" arg\n      ON targg."activityReportId" = arg."activityReportId"\n      AND g."goalId" = arg."goalId"\n      WHERE targg."goalIds"[1] != g."goalId";\n      -- 28. Remove ActivityReportGoalFieldResponses that are nolonger going to be referenced\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal_field_responses;\n      CREATE TEMP TABLE tmp_removed_activity_report_goal_field_responses\n      AS\n      WITH removed_activity_report_goal_field_responses AS (\n        DELETE FROM "ActivityReportGoalFieldResponses" argfr\n        USING tmp_activity_report_goals_to_remove targtr\n        WHERE argfr."activityReportGoalId" = targtr."activityReportGoalId"\n        RETURNING\n          argfr.id,\n          argfr."activityReportGoalId",\n          argfr.response\n      )\n      SELECT\n        rargfr.id,\n        rargfr."activityReportGoalId",\n        rargfr.response\n      FROM removed_activity_report_goal_field_responses rargfr;\n      -- 29. Remove ActivityReportGoalResources that are nolonger going to be referenced\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal_resources;\n      CREATE TEMP TABLE tmp_removed_activity_report_goal_resources\n      AS\n      WITH removed_activity_report_goal_resources AS (\n        DELETE FROM "ActivityReportGoalResources" argr\n        USING tmp_activity_report_goals_to_remove targtr\n        WHERE argr."activityReportGoalId" = targtr."activityReportGoalId"\n        RETURNING\n          argr.id,\n          argr."activityReportGoalId",\n          argr."resourceId"\n      )\n      SELECT\n        rargr.id,\n        rargr."activityReportGoalId",\n        rargr."resourceId"\n      FROM removed_activity_report_goal_resources rargr;\n      -- 30. Remove ActivityReportGoal that are nolonger going to be referenced\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal;\n      CREATE TEMP TABLE tmp_removed_activity_report_goal\n      AS\n      WITH removed_activity_report_goal AS (\n        DELETE FROM "ActivityReportGoals" arg\n        USING tmp_activity_report_goals_to_remove targtr\n        WHERE arg."id" = targtr."activityReportGoalId"\n        RETURNING\n        arg.id,\n        arg."activityReportId",\n        arg."goalId"\n      )\n      SELECT\n        rarg.id,\n        rarg."activityReportId",\n        rarg."goalId"\n      FROM removed_activity_report_goal rarg;\n      -- 31. Update onAR and onApprovedAR for unlinked objective\n      DROP TABLE IF EXISTS tmp_flags_update_for_unlinked_objectives;\n      CREATE TEMP TABLE tmp_flags_update_for_unlinked_objectives\n      AS\n      WITH objective_flags AS (\n        SELECT\n          traro."objectiveId",\n          count(aro."id") FILTER (WHERE aro.id IS NOT NULL) > 0 "onAR",\n          COUNT(ar.id) FILTER (WHERE ar.id IS NOT NULL) > 0 "onApprovedAR"\n        FROM tmp_removed_activity_report_objectives traro\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON traro."objectiveId" = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        AND ar."calculatedStatus"::text = 'approved'\n        GROUP BY 1\n      ),\n      flags_update_for_unlinked_objectives AS (\n        UPDATE "Objectives" o\n        SET\n          "onAR" = f."onAR",\n          "onApprovedAR" = f."onApprovedAR"\n        FROM objective_flags f\n        WHERE o.id = f."objectiveId"\n        AND (\n          o."onAR" != f."onAR"\n          OR o."onApprovedAR" != f."onApprovedAR"\n        )\n        RETURNING\n          o.id "objectiveId",\n          o."onAR",\n          o."onApprovedAR"\n      )\n      SELECT\n        "objectiveId",\n        "onAR",\n        "onApprovedAR"\n      FROM flags_update_for_unlinked_objectives;\n      -- 32. If unlinked objective onAR is false, delete objective\n      DROP TABLE IF EXISTS tmp_deleted_objectives;\n      CREATE TEMP TABLE tmp_deleted_objectives\n      AS\n      WITH deleted_objectives AS (\n        UPDATE "Objectives" o\n        SET "deletedAt" = now()\n        FROM tmp_flags_update_for_unlinked_objectives tfufuo\n        WHERE o.id = tfufuo."objectiveId"\n        AND o."onAR" = false\n        RETURNING\n          o.id "objectiveId"\n      )\n      SELECT\n        "objectiveId"\n      FROM deleted_objectives;\n      -- 33. Update onAR and onApprovedAR for unlinked goal\n      DROP TABLE IF EXISTS tmp_flags_update_for_unlinked_goals;\n      CREATE TEMP TABLE tmp_flags_update_for_unlinked_goals\n      AS\n      WITH goal_flags AS (\n        SELECT\n          trarg."goalId",\n          count(arg.id) FILTER (WHERE arg.id IS NOT NULL) > 0 "onAR",\n          COUNT(ar.id) FILTER (WHERE ar.id IS NOT NULL) > 0 "onApprovedAR"\n        FROM tmp_removed_activity_report_goal trarg\n        LEFT JOIN "ActivityReportGoals" arg\n        ON trarg."goalId" = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        AND ar."calculatedStatus"::text = 'approved'\n        GROUP BY 1\n      ),\n      flags_update_for_unlinked_goals AS (\n        UPDATE "Goals" g\n        SET\n          "onAR" = gf."onAR",\n          "onApprovedAR" = gf."onApprovedAR"\n        FROM goal_flags gf\n        WHERE g.id = gf."goalId"\n        AND (\n          g."onAR" != gf."onAR"\n          OR g."onApprovedAR" != gf."onApprovedAR"\n        )\n        RETURNING\n          g.id "goalId",\n          g."onAR",\n          g."onApprovedAR"\n      )\n      SELECT\n        "goalId",\n        "onAR",\n        "onApprovedAR"\n      FROM flags_update_for_unlinked_goals;\n      -- 34. Remove all temp tables\n      DROP TABLE IF EXISTS tmp_affected_reports_grants_goals;\n      DROP TABLE IF EXISTS tmp_affected_objectives;\n      DROP TABLE IF EXISTS tmp_created_missing_objectives;\n      DROP TABLE IF EXISTS tmp_missing_objectives_added_to_reports;\n      DROP TABLE IF EXISTS tmp_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_courses_across_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_course_to_objectives;\n      DROP TABLE IF EXISTS tmp_sync_files_across_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_file_to_objectives;\n      DROP TABLE IF EXISTS tmp_sync_resources_across_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_resource_to_objectives;\n      DROP TABLE IF EXISTS tmp_sync_topics_across_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_topic_to_objectives;\n      DROP TABLE IF EXISTS tmp_objectives_to_unlink_from_reports;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_courses;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_files;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_resources;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_topics;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objectives;\n      DROP TABLE IF EXISTS tmp_objectives_to_remove;\n      DROP TABLE IF EXISTS tmp_removed_objective_courses;\n      DROP TABLE IF EXISTS tmp_removed_objective_files;\n      DROP TABLE IF EXISTS tmp_removed_objective_resources;\n      DROP TABLE IF EXISTS tmp_removed_objective_topics;\n      DROP TABLE IF EXISTS tmp_removed_objective_collaborators;\n      DROP TABLE IF EXISTS tmp_removed_objectives;\n      DROP TABLE IF EXISTS tmp_activity_report_goals_to_remove;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal_field_responses;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal_resources;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal;\n      DROP TABLE IF EXISTS tmp_flags_update_for_unlinked_objectives;\n      DROP TABLE IF EXISTS tmp_deleted_objectives;\n      DROP TABLE IF EXISTS tmp_flags_update_for_unlinked_goals;
Executing (19992d3a-187e-49b9-b448-88e644a2094c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240409162356-remove-duplicate-goals-for-same-grant: migrated (0.244s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240412183116-add-goalstatuschanges-table: migrating =======
Executing (3b86d8b8-7b59-4262-9852-746b74c0d9a0): START TRANSACTION;
Connection validated successfully
Executing (3b86d8b8-7b59-4262-9852-746b74c0d9a0): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240412183116-add-goalstatuschanges-table.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "GoalStatusChanges" ("id"  SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id") ON DELETE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE, "userName" VARCHAR(255) NOT NULL, "userRoles" VARCHAR(255)[] NOT NULL, "oldStatus" VARCHAR(255), "newStatus" VARCHAR(255) NOT NULL, "reason" TEXT NOT NULL, "context" TEXT, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (3b86d8b8-7b59-4262-9852-746b74c0d9a0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240412183116-add-goalstatuschanges-table: migrated (0.056s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240420000000-correct-onApprovedAR-values: migrating =======
Executing (03c9eaae-093b-4947-9243-013edc71c338): START TRANSACTION;
Connection validated successfully
Executing (03c9eaae-093b-4947-9243-013edc71c338): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240420000000-correct-onApprovedAR-values.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (03c9eaae-093b-4947-9243-013edc71c338): --  1. Calculate correct onApprovedAR values for objectives\n      DROP TABLE IF EXISTS objectives_on_ars;\n      CREATE TEMP TABLE objectives_on_ars\n      AS\n      SELECT\n        o.id oid,\n        BOOL_OR(ar.id IS NOT NULL AND ar."calculatedStatus" = 'approved') on_approved_ar,\n        BOOL_OR(ar.id IS NOT NULL) on_ar\n      FROM "Objectives" o\n      LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n      LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        AND ar."calculatedStatus" != 'deleted'\n      GROUP BY 1\n      ;\n      --  2. Calculate correct onApprovedAR values for goals\n      DROP TABLE IF EXISTS goals_on_ars;\n      CREATE TEMP TABLE goals_on_ars\n      AS\n      SELECT\n        g.id gid,\n        BOOL_OR(\n          (ar.id IS NOT NULL AND ar."calculatedStatus" = 'approved')\n          OR\n          COALESCE(ooaa.on_approved_ar,FALSE)\n        ) on_approved_ar,\n        BOOL_OR(ar.id IS NOT NULL OR COALESCE(ooaa.on_ar,FALSE)) on_ar\n      FROM "Goals" g\n      LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n      LEFT JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        AND ar."calculatedStatus" != 'deleted'\n      LEFT JOIN "Objectives" o\n        ON o."goalId" = g.id\n      LEFT JOIN objectives_on_ars ooaa\n        ON ooaa.oid = o.id\n      GROUP BY 1\n      ;\n      --  3. Calculate onApprovedAR stats for objectives\n      DROP TABLE IF EXISTS initial_obj_approved_ar_stats;\n      CREATE TEMP TABLE initial_obj_approved_ar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_objectives\n      FROM "Objectives" o\n      JOIN objectives_on_ars\n        ON o.id = oid\n      ;\n      --  4. Calculate onAR stats for objectives\n      DROP TABLE IF EXISTS initial_obj_onar_stats;\n      CREATE TEMP TABLE initial_obj_onar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_ar = "onAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_objectives\n      FROM "Objectives" o\n      JOIN objectives_on_ars\n        ON o.id = oid\n      ;\n      --  5. Calculate onApprovedAR stats for goals\n      DROP TABLE IF EXISTS initial_goal_approved_ar_stats;\n      CREATE TEMP TABLE initial_goal_approved_ar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_goals\n      FROM "Goals" g\n      JOIN goals_on_ars\n        ON g.id = gid\n      ;\n      --  6. Calculate onAR stats for goals\n      DROP TABLE IF EXISTS initial_goal_onar_stats;\n      CREATE TEMP TABLE initial_goal_onar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_ar = "onAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_goals\n      FROM "Goals" g\n      JOIN goals_on_ars\n        ON g.id = gid\n      ;\n      --  7. Update onApprovedAR values for objectives and save the results\n      DROP TABLE IF EXISTS corrected_approved_objectives;\n      CREATE TEMP TABLE corrected_approved_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" o\n        SET "onApprovedAR" = on_approved_ar\n        FROM objectives_on_ars\n        WHERE o.id = oid\n          AND ("onApprovedAR" != on_approved_ar OR "onApprovedAR" IS NULL)\n        RETURNING\n          oid,\n          on_approved_ar\n      ) SELECT * FROM updater\n      ;\n      --  8. Update onAR values for objectives and save the results\n      DROP TABLE IF EXISTS corrected_onar_objectives;\n      CREATE TEMP TABLE corrected_onar_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" o\n        SET "onAR" = on_ar\n        FROM objectives_on_ars\n        WHERE o.id = oid\n          AND ("onAR" != on_ar OR "onAR" IS NULL)\n        RETURNING\n          oid,\n          on_ar\n      ) SELECT * FROM updater\n      ;\n      --  9. Update onApprovedAR values for goals and save the results\n      DROP TABLE IF EXISTS corrected_approved_goals;\n      CREATE TEMP TABLE corrected_approved_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" g\n        SET "onApprovedAR" = on_approved_ar\n        FROM goals_on_ars\n        WHERE g.id = gid\n          AND ("onApprovedAR" != on_approved_ar OR "onApprovedAR" IS NULL)\n        RETURNING\n          gid,\n          on_approved_ar\n      ) SELECT * FROM updater\n      ;\n      --  10. Update onAR values for goals and save the results\n      DROP TABLE IF EXISTS corrected_onar_goals;\n      CREATE TEMP TABLE corrected_onar_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" g\n        SET "onAR" = on_ar\n        FROM goals_on_ars\n        WHERE g.id = gid\n          AND ("onAR" != on_ar OR "onAR" IS NULL)\n        RETURNING\n          gid,\n          on_ar\n      ) SELECT * FROM updater\n      ;\n      -- produce stats on what happened\n      --  11. Final onApprovedAR stats for objectives\n      DROP TABLE IF EXISTS final_obj_approved_ar_stats;\n      CREATE TEMP TABLE final_obj_approved_ar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_objectives\n      FROM "Objectives" o\n      JOIN objectives_on_ars\n        ON o.id = oid\n      ;\n      --  12. Final onAR stats for objectives\n      DROP TABLE IF EXISTS final_obj_onar_stats;\n      CREATE TEMP TABLE final_obj_onar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_ar = "onAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_objectives\n      FROM "Objectives" o\n      JOIN objectives_on_ars\n        ON o.id = oid\n      ;\n      --  13. Final onApprovedAR stats for goals\n      DROP TABLE IF EXISTS final_goal_approved_ar_stats;\n      CREATE TEMP TABLE final_goal_approved_ar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_goals\n      FROM "Goals" g\n      JOIN goals_on_ars\n        ON g.id = gid\n      ;\n      --  14. Final onAR stats for goals\n      DROP TABLE IF EXISTS final_goal_onar_stats;\n      CREATE TEMP TABLE final_goal_onar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_ar = "onAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_goals\n      FROM "Goals" g\n      JOIN goals_on_ars\n        ON g.id = gid\n      ;\n      -- make a nice little table to see the math\n      SELECT\n        1 AS order,\n        'objective onApprovedAR starting stats' description,\n        matching_values,\n        incorrect_values,\n        should_be_marked_true_but_isnt,\n        marked_true_but_shouldnt_be,\n        total_objectives total\n      FROM initial_obj_approved_ar_stats\n      UNION\n      SELECT\n        2,\n        'objective onApprovedAR values changed',\n        NULL,\n        NULL,\n        SUM(CASE WHEN on_approved_ar THEN 1 ELSE 0 END),\n        SUM(CASE WHEN NOT on_approved_ar THEN 1 ELSE 0 END),\n        COUNT(*)\n      FROM corrected_approved_objectives\n      UNION\n      SELECT 3,'objective onApprovedAR ending stats', * FROM final_obj_approved_ar_stats\n      UNION\n      SELECT 4,'objective onAR starting stats', * FROM initial_obj_onar_stats\n      UNION\n      SELECT\n        5,\n        'objective onAR values changed',\n        NULL,\n        NULL,\n        SUM(CASE WHEN on_ar THEN 1 ELSE 0 END),\n        SUM(CASE WHEN NOT on_ar THEN 1 ELSE 0 END),\n        COUNT(*)\n      FROM corrected_onar_objectives\n      UNION\n      SELECT 6,'objective onAR ending stats', * FROM final_obj_onar_stats\n      UNION\n      SELECT 7,'goal onApprovedAR starting stats', * FROM initial_goal_approved_ar_stats\n      UNION\n      SELECT\n        8,\n        'goal onApprovedAR values changed',\n        NULL,\n        NULL,\n        SUM(CASE WHEN on_approved_ar THEN 1 ELSE 0 END),\n        SUM(CASE WHEN NOT on_approved_ar THEN 1 ELSE 0 END),\n        COUNT(*)\n      FROM corrected_approved_goals\n      UNION\n      SELECT 9,'goal onApprovedAR ending stats', * FROM final_goal_approved_ar_stats\n      UNION\n      SELECT 10,'goal onAR starting stats', * FROM initial_goal_onar_stats\n      UNION\n      SELECT\n        11,\n        'goal onAR values changed',\n        NULL,\n        NULL,\n        SUM(CASE WHEN on_ar THEN 1 ELSE 0 END),\n        SUM(CASE WHEN NOT on_ar THEN 1 ELSE 0 END),\n        COUNT(*)\n      FROM corrected_onar_goals\n      UNION\n      SELECT 12,'goal onAR ending stats', * FROM final_goal_onar_stats\n      ORDER BY 1\n      ;
Executing (03c9eaae-093b-4947-9243-013edc71c338): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240420000000-correct-onApprovedAR-values: migrated (0.045s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240426130641-remove-three-flags: migrating =======
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): START TRANSACTION;
Connection validated successfully
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240426130641-remove-three-flags.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'merge_goals'\n          );
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'monitoring'\n          );
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'resources_dashboard'\n          );
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): UPDATE "Users" SET "flags" = array_remove(flags, 'merge_goals')\n        WHERE 'merge_goals' = ANY(flags);
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): UPDATE "Users" SET "flags" = array_remove(flags, 'monitoring')\n        WHERE 'monitoring' = ANY(flags);
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): UPDATE "Users" SET "flags" = array_remove(flags, 'resources_dashboard')\n        WHERE 'resources_dashboard' = ANY(flags);
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'anv_statistics',\n'regional_goal_dashboard',\n'closed_goal_merge_override',\n'training_reports_dashboard'\n  );
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (a8a5ab86-c74a-445d-b806-590b8e40a63a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240426130641-remove-three-flags: migrated (0.055s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240429131938-update-objective-trainer-fields: migrating =======
Executing (5a9f0009-938c-4f0c-8d77-e7cbe42c166c): START TRANSACTION;
Connection validated successfully
Executing (5a9f0009-938c-4f0c-8d77-e7cbe42c166c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240429131938-update-objective-trainer-fields.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5a9f0009-938c-4f0c-8d77-e7cbe42c166c): UPDATE "SessionReportPilots" \n        SET data = jsonb_set(data, '{objectiveTrainers}', '["PFCE"]'::jsonb, false)\n        WHERE id = 7;\n\n        UPDATE "SessionReportPilots" \n        SET data = jsonb_set(data, '{objectiveTrainers}', '["PFMO"]'::jsonb, false)\n        WHERE id IN (3, 5);\n\n        UPDATE "SessionReportPilots" \n        SET data = jsonb_set(data, '{objectiveTrainers}', '["HBHS"]'::jsonb, false)\n        WHERE id = 6;\n\n        UPDATE "SessionReportPilots" \n        SET data = jsonb_set(data, '{objectiveTrainers}', '["DTL"]'::jsonb, false)\n        WHERE id = 8;
Executing (5a9f0009-938c-4f0c-8d77-e7cbe42c166c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240429131938-update-objective-trainer-fields: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240503000000-merge_to_fei_goal: migrating =======
Executing (2f0824d8-4da6-451c-be09-baf3cc5e42c9): START TRANSACTION;
Connection validated successfully
Executing (2f0824d8-4da6-451c-be09-baf3cc5e42c9): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240503000000-merge_to_fei_goal.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2f0824d8-4da6-451c-be09-baf3cc5e42c9): -- A user wants non-FEI goals merged into their FEI goal\n\n      -- PROCESS:\n      -- Delete existing root cause (there should be none for this PR)\n      -- Test to make sure no root causes were actually deleted (this PR only)\n      -- Merge goal collaborators\n      -- Merge objective collaborators\n      -- Update the merge target objectives\n      -- Merge objective topics\n      -- Merge objective resources\n      -- Merge objective files\n      -- Delete duplicate objective topics\n      -- Delete duplicate objective resources\n      -- Delete duplicate objective files\n      -- Relink non-goalmerge Objectives\n      -- Update the target goals record history fields from the donor goals\n      -- Relink non-duplicate ARGs\n      -- Delete duplicate ARGs\n      -- Delete donor goals\n      -- Delete duplicate goal collaborators\n      -- Delete duplicate objective collaborators\n\n\n      DROP TABLE IF EXISTS goal_merges;\n      CREATE TEMP TABLE goal_merges\n      AS\n      SELECT * FROM (\n        VALUES\n        (52282, 54882)\n      ) AS data(donor_gid, target_gid)\n      ;\n\n      -- This should be empty for TTAHUB-2880\n      DROP TABLE IF EXISTS deleted_gfrs;\n      CREATE TEMP TABLE deleted_gfrs\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalFieldResponses"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gfrid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Exit if any GFR deletions(TTAHUB-2880 only)\n      SELECT\n        1/(LEAST(COUNT(*),1) - 1)\n      FROM deleted_gfrs\n      ;\n      \n      -- Merge goal collaborators\n      DROP TABLE IF EXISTS relinked_goal_collaborators;\n      CREATE TEMP TABLE relinked_goal_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_gid,\n            "userId" uid\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.donor_gid = gc."goalId"\n          EXCEPT\n          SELECT\n            donor_gid,\n            "userId"\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.target_gid = gc."goalId"\n        )\n        UPDATE "GoalCollaborators" AS gc\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.donor_gid = gm.donor_gid\n        WHERE gc."userId" = u.uid\n          AND gc."goalId" = u.donor_gid\n        RETURNING\n          id gcid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      DROP TABLE IF EXISTS objective_merges;\n      CREATE TEMP TABLE objective_merges\n      AS\n      SELECT\n        donor_obj.id donor_oid,\n        target_obj.id target_oid\n      FROM goal_merges gm\n      JOIN "Objectives" donor_obj\n        ON gm.donor_gid = donor_obj."goalId"\n      JOIN "Objectives" target_obj\n        ON gm.target_gid = target_obj."goalId"\n        AND donor_obj.title = target_obj.title\n      WHERE donor_obj.id != target_obj.id\n      ;\n      \n      -- Merge objective collaborators\n      DROP TABLE IF EXISTS relinked_objective_collaborators;\n      CREATE TEMP TABLE relinked_objective_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "userId" uid\n          FROM objective_merges om\n          JOIN "ObjectiveCollaborators" oc\n            ON om.donor_oid = oc."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "userId"\n          FROM objective_merges om\n          JOIN "ObjectiveCollaborators" oc\n            ON om.target_oid = oc."objectiveId"\n        )\n        UPDATE "ObjectiveCollaborators" AS oc\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE oc."userId" = u.uid\n          AND oc."objectiveId" = u.donor_oid\n        RETURNING\n          id ocid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target objectives\n      DROP TABLE IF EXISTS updated_target_objectives;\n      CREATE TEMP TABLE updated_target_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" AS o\n        SET\n          "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n          "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n          "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n          "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n          "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n          "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n        FROM objective_merges om\n        JOIN "Objectives" d_o\n          ON om.donor_oid = d_o.id\n        WHERE om.target_oid = o.id\n        RETURNING\n          o.id oid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      \n      -- Merge objective topics\n      DROP TABLE IF EXISTS relinked_objective_topics;\n      CREATE TEMP TABLE relinked_objective_topics\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "topicId" tid\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.donor_oid = ot."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "topicId"\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.target_oid = ot."objectiveId"\n        )\n        UPDATE "ObjectiveTopics" AS ot\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE ot."topicId" = u.tid\n          AND ot."objectiveId" = u.donor_oid\n        RETURNING\n          id otid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Merge objective resources\n      DROP TABLE IF EXISTS relinked_objective_resources;\n      CREATE TEMP TABLE relinked_objective_resources\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "resourceId" rid\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.donor_oid = o_r."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "resourceId"\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.target_oid = o_r."objectiveId"\n        )\n        UPDATE "ObjectiveResources" AS o_r\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE o_r."resourceId" = u.rid\n          AND o_r."objectiveId" = u.donor_oid\n        RETURNING\n          id orid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Merge objective files\n      DROP TABLE IF EXISTS relinked_objective_files;\n      CREATE TEMP TABLE relinked_objective_files\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "fileId" fid\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.donor_oid = of."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "fileId"\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.target_oid = of."objectiveId"\n        )\n        UPDATE "ObjectiveFiles" AS of\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE of."fileId" = u.fid\n          AND of."objectiveId" = u.donor_oid\n        RETURNING\n          id ofid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective topics\n      DROP TABLE IF EXISTS deleted_objective_topics;\n      CREATE TEMP TABLE deleted_objective_topics\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveTopics"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id otid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective resources\n      DROP TABLE IF EXISTS deleted_objective_resources;\n      CREATE TEMP TABLE deleted_objective_resources\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveResources"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id orid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective files\n      DROP TABLE IF EXISTS deleted_objective_files;\n      CREATE TEMP TABLE deleted_objective_files\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveFiles"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ofid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Link objectives on merged goals to the FEI goals\n      DROP TABLE IF EXISTS relinked_objectives;\n      CREATE TEMP TABLE relinked_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives"\n        SET "goalId" = target_gid\n        FROM goal_merges\n        WHERE "goalId" = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          id oid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target goals\n      DROP TABLE IF EXISTS updated_target_goals;\n      CREATE TEMP TABLE updated_target_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          "updatedAt" = GREATEST(dg."updatedAt", g."updatedAt"),\n          "firstNotStartedAt" = LEAST(dg."firstNotStartedAt", g."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(dg."lastNotStartedAt", g."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(dg."firstInProgressAt", g."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(dg."lastInProgressAt", g."lastInProgressAt"),\n          "firstCeasedSuspendedAt" = LEAST(dg."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt"),\n          "lastCeasedSuspendedAt" = GREATEST(dg."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt"),\n          "firstClosedAt" = LEAST(dg."firstClosedAt", g."firstClosedAt"),\n          "lastClosedAt" = GREATEST(dg."lastClosedAt", g."lastClosedAt")\n        FROM goal_merges gm\n        JOIN "Goals" dg\n          ON gm.donor_gid = dg.id\n        WHERE gm.target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- relink non-duplicate ARGs\n      DROP TABLE IF EXISTS relinked_args;\n      CREATE TEMP TABLE relinked_args\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            "activityReportId" arid,\n            "goalId" gid\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.donor_gid = arg."goalId"\n          EXCEPT\n          SELECT\n            "activityReportId",\n            "goalId"\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.target_gid = arg."goalId"\n        )\n        UPDATE "ActivityReportGoals" AS arg\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.gid = gm.donor_gid\n        WHERE arg."goalId" = u.gid\n          AND arg."activityReportId" = u.arid\n        RETURNING\n          id argid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id argid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Soft delete donor goals\n      DROP TABLE IF EXISTS deleted_goals;\n      CREATE TEMP TABLE deleted_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals"\n        SET "deletedAt" = NOW()\n        FROM goal_merges\n        WHERE id = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          target_gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate goal collaborators\n      DROP TABLE IF EXISTS deleted_goal_collaborators;\n      CREATE TEMP TABLE deleted_goal_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalCollaborators"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gcid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective collaborators\n      DROP TABLE IF EXISTS deleted_objective_collaborators;\n      CREATE TEMP TABLE deleted_objective_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveCollaborators"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ocid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      SELECT\n        1 op_order,\n        'deleted_gfrs' operation,\n        COUNT(*) cnt\n      FROM deleted_gfrs\n      UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n      UNION SELECT 3,'relinked_objective_topics', COUNT(*) FROM relinked_objective_topics\n      UNION SELECT 4,'relinked_objective_resources', COUNT(*) FROM relinked_objective_resources\n      UNION SELECT 5,'relinked_objective_files', COUNT(*) FROM relinked_objective_files\n      UNION SELECT 6,'deleted_objective_topics', COUNT(*) FROM deleted_objective_topics\n      UNION SELECT 7,'deleted_objective_resources', COUNT(*) FROM deleted_objective_resources\n      UNION SELECT 8,'deleted_objective_files', COUNT(*) FROM deleted_objective_files\n      UNION SELECT 9,'relinked_objectives', COUNT(*) FROM relinked_objectives\n      UNION SELECT 10,'updated_target_goals', COUNT(*) FROM updated_target_goals\n      UNION SELECT 11,'relinked_args', COUNT(*) FROM relinked_args\n      UNION SELECT 12,'deleted_args', COUNT(*) FROM deleted_args\n      UNION SELECT 13,'deleted_goals', COUNT(*) FROM deleted_goals\n      UNION SELECT 14,'relinked_goal_collaborators', COUNT(*) FROM relinked_goal_collaborators\n      UNION SELECT 15,'deleted_goal_collaborators', COUNT(*) FROM deleted_goal_collaborators\n      UNION SELECT 16,'relinked_objective_collaborators', COUNT(*) FROM relinked_objective_collaborators\n      UNION SELECT 17,'deleted_objective_collaborators', COUNT(*) FROM deleted_objective_collaborators\n      ORDER BY 1\n      ;
Executing (2f0824d8-4da6-451c-be09-baf3cc5e42c9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240503000000-merge_to_fei_goal: migrated (0.092s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240506162550-remove-goal-status-columns: migrating =======
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): START TRANSACTION;
Connection validated successfully
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240506162550-remove-goal-status-columns.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "closeSuspendReason";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "closeSuspendContext";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "previousStatus";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "firstNotStartedAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "lastNotStartedAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "firstInProgressAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "lastInProgressAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "firstCeasedSuspendedAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "lastCeasedSuspendedAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "firstClosedAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "lastClosedAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "firstCompletedAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): ALTER TABLE "public"."Goals" DROP COLUMN "lastCompletedAt";
Executing (170e7f2e-ac0f-4d8d-a4d1-518a5cc7bf4b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240506162550-remove-goal-status-columns: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240509221012-monitoring-findings: migrating =======
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): START TRANSACTION;
Connection validated successfully
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240509221012-monitoring-findings.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringGranteeLinks" ("id"   SERIAL, "granteeId" TEXT NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("granteeId"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): INSERT INTO "MonitoringGranteeLinks"\n      (\n        "granteeId",\n        "createdAt",\n        "updatedAt",\n        "deletedAt"\n      )\n      SELECT\n        "granteeId",\n        MIN("createdAt") "createdAt",\n        MAX("updatedAt") "updatedAt",\n        MAX("deletedAt") "deletedAt"\n      FROM "MonitoringReviewGrantees"\n      GROUP BY 1;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringStandardLinks" ("id"   SERIAL, "standardId" INTEGER NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("standardId"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringFindingStatusLinks" ("id"   SERIAL, "statusId" INTEGER NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("statusId"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringFindingHistoryStatusLinks" ("id"   SERIAL, "statusId" INTEGER NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("statusId"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringFindingLinks" ("id"   SERIAL, "findingId" TEXT NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("findingId"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringFindingStatuses" ("id"   SERIAL , "statusId" INTEGER NOT NULL REFERENCES "MonitoringFindingStatusLinks" ("statusId"), "name" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringFindings" ("id"   SERIAL , "findingId" TEXT NOT NULL REFERENCES "MonitoringFindingLinks" ("findingId"), "statusId" INTEGER NOT NULL REFERENCES "MonitoringFindingStatusLinks" ("statusId"), "findingType" TEXT NOT NULL, "source" TEXT, "correctionDeadLine" TIMESTAMP WITH TIME ZONE, "reportedDate" TIMESTAMP WITH TIME ZONE, "closedDate" TIMESTAMP WITH TIME ZONE, "hash" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE UNIQUE INDEX "MonitoringFindings_findingId_deletedAt"\n          ON "MonitoringFindings"\n          ("findingId", "deletedAt");
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "MonitoringFindings"\n          ADD CONSTRAINT "MonitoringFindings_findingId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringFindings_findingId_deletedAt";
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE INDEX "MonitoringFindings_statusId"\n          ON "MonitoringFindings"\n          ("statusId")\n          WHERE "deletedAt" IS NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE INDEX "MonitoringFindings_findingId_statusId"\n          ON "MonitoringFindings"\n          ("findingId", "statusId")\n          WHERE "deletedAt" IS NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringFindingGrants" ("id"   SERIAL , "findingId" TEXT NOT NULL REFERENCES "MonitoringFindingLinks" ("findingId"), "granteeId" TEXT NOT NULL REFERENCES "MonitoringGranteeLinks" ("granteeId"), "statusId" INTEGER NOT NULL REFERENCES "MonitoringFindingStatusLinks" ("statusId"), "findingType" TEXT NOT NULL, "source" TEXT, "correctionDeadLine" TIMESTAMP WITH TIME ZONE, "reportedDate" TIMESTAMP WITH TIME ZONE, "closedDate" TIMESTAMP WITH TIME ZONE, "hash" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE UNIQUE INDEX "MonitoringFindingGrants_findingId_granteeId_deletedAt"\n          ON "MonitoringFindingGrants"\n          ("findingId", "granteeId", "deletedAt");
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "MonitoringFindingGrants"\n          ADD CONSTRAINT "MonitoringFindingGrants_findingId_granteeId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringFindingGrants_findingId_granteeId_deletedAt";
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE INDEX "MonitoringFindingGrants_statusId"\n          ON "MonitoringFindingGrants"\n          ("statusId")\n          WHERE "deletedAt" IS NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE INDEX "MonitoringFindingGrants_granteeId"\n          ON "MonitoringFindingGrants"\n          ("granteeId")\n          WHERE "deletedAt" IS NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE INDEX "MonitoringFindingGrants_findingId_granteeId_statusId"\n          ON "MonitoringFindingGrants"\n          ("findingId", "granteeId", "statusId")\n          WHERE "deletedAt" IS NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringFindingStandards" ("id"   SERIAL , "findingId" TEXT NOT NULL REFERENCES "MonitoringFindingLinks" ("findingId"), "standardId" INTEGER NOT NULL REFERENCES "MonitoringStandardLinks" ("standardId"), "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE UNIQUE INDEX "MonitoringFindingStandards_findingId_standardId_deletedAt"\n          ON "MonitoringFindingStandards"\n          ("findingId", "standardId", "deletedAt");
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "MonitoringFindingStandards"\n          ADD CONSTRAINT "MonitoringFindingStandards_findingId_standardId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringFindingStandards_findingId_standardId_deletedAt";
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringStandards" ("id"   SERIAL , "standardId" INTEGER NOT NULL REFERENCES "MonitoringStandardLinks" ("standardId"), "contentId" TEXT NOT NULL, "citation" TEXT, "text" TEXT, "guidance" TEXT, "citable" INTEGER NOT NULL, "hash" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE UNIQUE INDEX "MonitoringStandards_standardId_deletedAt"\n          ON "MonitoringStandards"\n          ("standardId", "deletedAt");
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "MonitoringStandards"\n          ADD CONSTRAINT "MonitoringStandards_standardId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringStandards_standardId_deletedAt";
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "MonitoringReviewGrantees" ALTER COLUMN "granteeId" SET NOT NULL;ALTER TABLE "MonitoringReviewGrantees"  ADD FOREIGN KEY ("granteeId") REFERENCES "MonitoringGranteeLinks" ("granteeId");
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): CREATE TABLE IF NOT EXISTS "MonitoringFindingHistoryStatuses" ("id"   SERIAL , "statusId" INTEGER NOT NULL REFERENCES "MonitoringFindingHistoryStatusLinks" ("statusId"), "name" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "findingId" TEXT DEFAULT NULL REFERENCES "MonitoringFindingLinks" ("findingId");
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "statusId" INTEGER DEFAULT NULL REFERENCES "MonitoringFindingHistoryStatusLinks" ("statusId");
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "narrative" TEXT DEFAULT NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "ordinal" INTEGER DEFAULT NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "determination" TEXT DEFAULT NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "public"."MonitoringReviews" ADD COLUMN "reportAttachmentId" TEXT DEFAULT NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): ALTER TABLE "public"."MonitoringReviews" ADD COLUMN "name" TEXT DEFAULT NULL;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): Update "Imports" i\n      SET\n        definitions = (\n          SELECT jsonb_agg(elem) || jsonb_build_array(\n          jsonb_build_object(\n            'keys', jsonb_build_array('findingId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_Finding.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'FindingId', 'findingId',\n              'StatusId', 'statusId',\n              'FindingType', 'findingType',\n              'Source', 'source',\n              'CorrectionDeadLine', 'correctionDeadLine',\n              'ReportDate', 'reportDate',\n              'ClosedDate', 'closedDate'\n            ),\n            'tableName', 'MonitoringFindings'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('findingId', 'granteeId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingGrants.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'FindingId', 'findingId',\n              'GranteeId', 'granteeId',\n              'StatusId', 'statusId',\n              'FindingType', 'findingType',\n              'Source', 'source',\n              'CorrectionDeadLine', 'correctionDeadLine',\n              'ReportDate', 'reportDate',\n              'ClosedDate', 'closedDate'\n            ),\n            'tableName', 'MonitoringFindingGrants'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('findingHistoryId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingHistory.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'FindingHistoryId', 'findingHistoryId',\n              'FindingId', 'findingId',\n              'ReviewId', 'reviewId',\n              'StatusId', 'statusId',\n              'Narrative', 'narrative',\n              'Ordinal', 'ordinal',\n              'Determination', 'determination'\n            ),\n            'tableName', 'MonitoringFindingHistories'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('statusId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingHistoryStatus.xml',\n            'remapDef', jsonb_build_object(\n              'StatusId', 'statusId',\n              'Name', 'name'\n            ),\n            'tableName', 'MonitoringFindingHistoryStatuses'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('findingId', 'standardId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingStandard.xml',\n            'remapDef', jsonb_build_object(\n              'FindingId', 'findingId',\n              'StandardId', 'standardId'\n            ),\n            'tableName', 'MonitoringFindingStandards'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('statusId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingStatus.xml',\n            'remapDef', jsonb_build_object(\n              'StatusId', 'statusId',\n              'Name', 'name'\n            ),\n            'tableName', 'MonitoringFindingStatuses'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('reviewId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_Review.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'ReviewId', 'reviewId',\n              'ContentId', 'contentId',\n              'StatusId', 'statusId',\n              'StartDate', 'startDate',\n              'EndDate', 'endDate',\n              'ReviewType', 'reviewType',\n              'ReportDeliveryDate', 'reportDeliveryDate',\n              'ReportAttachmentId', 'reportAttachmentId',\n              'Outcome', 'outcome',\n              'ReviewId', 'reviewId',\n              'Name', 'name'\n            ),\n            'tableName', 'MonitoringReviews'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('standardId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_Standard.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'ContentId', 'contentId',\n              'StandardId', 'standardId',\n              'Citation', 'citation',\n              'Text', 'text',\n              'Guidance', 'guidance',\n              'Citable', 'citable'\n            ),\n            'tableName', 'MonitoringStandards'\n          )\n        )\n          FROM (\n              SELECT elem\n              FROM jsonb_array_elements(i.definitions) AS elem\n              WHERE elem->>'fileName' != 'AMS_FindingHistory.xml'\n              OR elem->>'fileName' != 'AMS_Review.xml'\n          ) subquery\n      ),\n        "updatedAt" = CURRENT_TIMESTAMP\n      WHERE i.id = 1;
Executing (76c0de76-0e6e-4e93-8b5f-566dc2bcc580): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240509221012-monitoring-findings: migrated (0.411s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240510140448-update-course-model: migrating =======
Executing (b756b651-036a-4fa5-8643-748d211c093b): START TRANSACTION;
Connection validated successfully
Executing (b756b651-036a-4fa5-8643-748d211c093b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240510140448-update-course-model.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b756b651-036a-4fa5-8643-748d211c093b): ALTER TABLE "public"."Courses" ADD COLUMN "persistsOnUpload" BOOLEAN NOT NULL DEFAULT false;
Executing (b756b651-036a-4fa5-8643-748d211c093b): INSERT INTO "Courses" ("name","persistsOnUpload","createdAt","updatedAt") VALUES ('Other',true,'2025-03-28 21:03:35.994 +00:00','2025-03-28 21:03:35.994 +00:00');
Executing (b756b651-036a-4fa5-8643-748d211c093b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240510140448-update-course-model: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240520000000-merge_duplicate_args: migrating =======
Executing (94112825-1014-48d9-813e-0771fc11c7aa): START TRANSACTION;
Connection validated successfully
Executing (94112825-1014-48d9-813e-0771fc11c7aa): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240520000000-merge_duplicate_args.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (94112825-1014-48d9-813e-0771fc11c7aa): -- Creating it as a function because we'll need to rerun this in the future\n      -- up until and unless all issues producing duplicate ARGs are addressed\n\n      CREATE OR REPLACE FUNCTION dedupe_args()\n      RETURNS VOID LANGUAGE plpgsql AS\n      $$\n      BEGIN\n      -- There are some duplicate ARGs, meaning link records that connect the same\n      -- AR-Goal pairs. This migration merges them down to the link record that was\n      -- most recently updated and thus presumably has the latest status & etc.\n      -- Merging rather than simply deleting is necessary to account for\n      -- ActivityReportGoalFieldResponses and ActivityReportGoalResources, both of\n      -- which link to ARGs and so may need to be moved and deconflicted.\n      -- Neither ActivityReportGoalResources nor ActivityReportGoalFieldResponses\n      -- have applicable records at time of writing, but this may not remain true in\n      -- the future when this runs.\n\n      DROP TABLE IF EXISTS arg_merges;\n      CREATE TEMP TABLE arg_merges\n      AS\n      WITH link_counts AS (\n      SELECT\n        "activityReportId" arid,\n        "goalId" gid,\n        COUNT(*) link_cnt\n      FROM "ActivityReportGoals"\n      GROUP BY 1,2\n      ),\n      latest_updated AS (\n      SELECT\n        arid,\n        gid,\n        arg.id argid,\n        ROW_NUMBER() OVER (\n          PARTITION BY arid,gid\n          ORDER BY "updatedAt" DESC, arg.id\n        ) updated_rank\n      FROM "ActivityReportGoals" arg\n      JOIN link_counts\n        ON "activityReportId" = arid\n        AND "goalId" = gid\n      WHERE link_cnt > 1\n      )\n      SELECT\n        id donor_arg,\n        argid target_arg\n      FROM "ActivityReportGoals" arg\n      JOIN latest_updated\n        ON "activityReportId" = arid\n        AND "goalId" = gid\n        AND updated_rank = 1\n      ;\n\n      -- Relink any ActivityReportGoalFieldResponses connected to the\n      -- duplicate (and therefore donor) ARG\n      -- Because there could theoretically be multiple prompts on\n      -- multiple duplicates, we need to rank the ARGFRs referring to\n      -- a particular prompt-goal pair and select just one of each.\n      -- There's one target_arg per goal so we use that as a proxy.\n      -- Just for simplicity, ARGFRs that are already on the target\n      -- ARG are left alone and the corresponding responses on donors\n      -- will be deleted.\n      --\n      -- At time of writing this is all theoretical as there aren't\n      -- any reponses at all for FEI goals with duplicate ARGs, but this\n      -- could change by the time it runs\n      DROP TABLE IF EXISTS relinked_argfrs;\n      CREATE TEMP TABLE relinked_argfrs\n      AS\n      WITH updater AS (\n        WITH argfr_on_donor_args AS (\n          SELECT\n            donor_arg,\n            target_arg,\n            argfr."activityReportGoalId" argid,\n            argfr."goalTemplateFieldPromptId" promptid,\n            argfr.id argfrid,\n            ROW_NUMBER() OVER (\n              PARTITION BY arg."goalId", argfr."goalTemplateFieldPromptId"\n              ORDER BY argfr."activityReportGoalId" = target_arg DESC, argfr."updatedAt" DESC, argfr.id\n            ) choice_rank\n          FROM arg_merges am\n          JOIN "ActivityReportGoals" arg\n            ON donor_arg = arg.id\n          JOIN "ActivityReportGoalFieldResponses" argfr\n            ON am.donor_arg = argfr."activityReportGoalId"\n        ), unmatched AS (\n          SELECT\n            donor_arg,\n            argid,\n            argfrid\n          FROM argfr_on_donor_args aoda\n          WHERE choice_rank = 1\n            AND argid != target_arg\n        )\n        UPDATE "ActivityReportGoalFieldResponses" AS argfr\n        SET "activityReportGoalId" = target_arg\n        FROM arg_merges am\n        JOIN unmatched u\n          ON u.donor_arg = am.donor_arg\n        WHERE argfr.id = u.argfrid\n        RETURNING\n          id argfrid,\n          am.donor_arg original_arg\n      ) SELECT * FROM updater\n      ;\n\n      -- Delete duplicate objective ARGFRs\n      DROP TABLE IF EXISTS deleted_argfrs;\n      CREATE TEMP TABLE deleted_argfrs\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoalFieldResponses"\n        USING arg_merges\n        WHERE "activityReportGoalId" = donor_arg\n          AND target_arg != donor_arg\n        RETURNING\n          id argfrid,\n          donor_arg\n      ) SELECT * FROM updater\n      ;\n\n      -- Relink any ActivityReportGoalResources connected to the\n      -- duplicate (and therefore donor) ARG\n      -- Because there could theoretically be multiple resources on\n      -- multiple duplicates, we need to rank the ARGRs referring to\n      -- a particular resource-goal pair and select just one of each.\n      -- There's one target_arg per goal so we use that as a proxy.\n      -- Just for simplicity, ARGRs that are already on the target\n      -- ARG are left alone and the corresponding responses on donors\n      -- will be deleted.\n      --\n      -- At time of writing this is all theoretical as there aren't\n      -- any ARGRs at all but this could change by the time it runs\n      DROP TABLE IF EXISTS relinked_argrs;\n      CREATE TEMP TABLE relinked_argrs\n      AS\n      WITH updater AS (\n        WITH argr_on_donor_args AS (\n          SELECT\n            donor_arg,\n            target_arg,\n            argr."activityReportGoalId" argid,\n            argr."resourceId" resourceid,\n            argr.id argrid,\n            ROW_NUMBER() OVER (\n              PARTITION BY arg."goalId", argr."resourceId"\n              ORDER BY argr."activityReportGoalId" = target_arg DESC, argr."updatedAt" DESC, argr.id\n            ) choice_rank\n          FROM arg_merges am\n          JOIN "ActivityReportGoals" arg\n            ON donor_arg = arg.id\n          JOIN "ActivityReportGoalResources" argr\n            ON am.donor_arg = argr."activityReportGoalId"\n        ), unmatched AS (\n          SELECT\n            donor_arg,\n            argid,\n            argrid\n          FROM argr_on_donor_args aoda\n          WHERE choice_rank = 1\n            AND argid != target_arg\n        )\n        UPDATE "ActivityReportGoalResources" AS argr\n        SET "activityReportGoalId" = target_arg\n        FROM arg_merges am\n        JOIN unmatched u\n          ON u.donor_arg = am.donor_arg\n        WHERE argr.id = u.argrid\n        RETURNING\n          id argrid,\n          am.donor_arg original_arg\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective ARGRs\n      DROP TABLE IF EXISTS deleted_argrs;\n      CREATE TEMP TABLE deleted_argrs\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoalResources"\n        USING arg_merges\n        WHERE "activityReportGoalId" = donor_arg\n        RETURNING\n          id argrid,\n          donor_arg\n      ) SELECT * FROM updater\n      ;\n\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING arg_merges\n        WHERE id = donor_arg\n          AND target_arg != donor_arg\n        RETURNING\n          donor_arg\n      ) SELECT * FROM updater\n      ;\n\n      END\n      $$\n      ;\n      -- Actually call the function\n      SELECT dedupe_args();\n\n      SELECT\n        1 op_order,\n        'relinked_argfrs' op_name,\n        COUNT(*) record_cnt\n      FROM relinked_argfrs\n      UNION SELECT 2, 'deleted_argfrs', COUNT(*) FROM deleted_argfrs\n      UNION SELECT 3, 'relinked_argrs', COUNT(*) FROM relinked_argrs\n      UNION SELECT 4, 'deleted_argrs', COUNT(*) FROM deleted_argrs\n      UNION SELECT 5, 'deleted_args', COUNT(*) FROM deleted_args\n      ORDER BY 1;
Executing (94112825-1014-48d9-813e-0771fc11c7aa): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240520000000-merge_duplicate_args: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240520000001-create-timeseries-and-root-causes: migrating =======
Executing (a47fa735-a687-4298-8c5a-016a108b1fd1): START TRANSACTION;
Connection validated successfully
Executing (a47fa735-a687-4298-8c5a-016a108b1fd1): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240520000001-create-timeseries-and-root-causes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a47fa735-a687-4298-8c5a-016a108b1fd1): CREATE OR REPLACE FUNCTION create_timeseries_from_audit_log(tablename text)\n      RETURNS VOID LANGUAGE plpgsql AS\n      $$\n      DECLARE\n        qry text := '';\n        wtext text := '';\n        rec record;\n      BEGIN\n      -- Get the column list for the main table\n      -- NOTE regarding string formatting used to assemble the queries that the\n      -- function uses to do its work:\n      -- The format() function works like C string interpolation except\n      -- that it protects from SQL injection attacks. Like C string interpolation,\n      -- the %<character> is replaced by the comma-separated values following the\n      -- base string.\n      -- %I is formatted as a database object name and manages double quotes\n      -- %L is formatted as a string literal and manages single quotes\n      -- %s can be used for arbitrary string interpolation but doesn't\n      -- provide any protections or quote management.\n      qry := format('\n      DROP TABLE IF EXISTS clist;\n      CREATE TEMP TABLE clist\n      AS\n      SELECT\n        column_name cname\n        ,ordinal_position cnum\n        ,data_type  ctype\n      FROM information_schema.columns ic\n      WHERE table_schema = %L\n        AND table_name = %L'\n      ,'public'\n      ,tablename);\n      EXECUTE qry;\n      qry := '';\n      -- Get the pg_typeof column datatypes for the main table\n      -- these are more precise than the information schema types\n      qry := 'DROP TABLE IF EXISTS ctypes;\n      CREATE TEMP TABLE ctypes\n      AS';\n      FOR rec IN\n        SELECT * FROM clist ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n          SELECT cname, cnum, ctype, pg_typeof( %I ) pgtype FROM clist LEFT JOIN (SELECT * FROM %I LIMIT 1) a ON TRUE WHERE %L = cname UNION'\n        ,rec.cname\n        ,tablename\n        ,rec.cname);\n      END LOOP;\n      qry := qry || LEFT(wtext,-6) || '\n      ORDER BY cnum';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- set up the beginning and end of time\n      qry := format('DROP TABLE IF EXISTS timeband;\n      CREATE TEMP TABLE timeband\n      AS\n      SELECT\n        %L::timestamp timebegin,\n        NOW() timeend'\n      ,'2020-01-01');\n      EXECUTE qry;\n      qry := '';\n      wtext := '';\n      -- assemble flat_z, containing the typed columns with changed data\n      -- there will be one record per audit log entry, plus one for the\n      -- current value\n      -- This assumes every table as an id column, which the audit log\n      -- also assumes\n      qry := format('DROP TABLE IF EXISTS flat_z;\n      CREATE TEMP TABLE flat_z\n      AS\n      SELECT\n        id zid\n        ,data_id\n        ,dml_timestamp\n        ,dml_type = %L is_insert\n        ,FALSE is_current_record'\n      ,'INSERT');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        CASE\n          WHEN rec.ctype = 'USER-DEFINED' THEN -- for enums\n            -- because the enums have changed over time we\n            -- are only casting to text. The other option\n            -- of building a new enum containing all historical\n            -- enums is both more complex and won't make\n            -- using the resulting time series any easier\n            wtext := wtext || format('\n            ,(old_row_data->>%L)::%s AS %I'\n            ,rec.cname\n            ,'text'\n            ,rec.cname);\n          WHEN rec.ctype = 'ARRAY' THEN\n            -- Because the arrays are stored as strings, they need to be parsed\n            -- back into arrays. They look like:\n            -- ["element1", "element2", "", "element4"]\n            -- The X-X-X is a string very unlikely to be present\n            -- in the internal text and replaces the internal element separators (", ")\n            -- before the start ([") and end ("]) are stripped off. That step probably\n            -- isn't strictly necessary, but is in place because the end also trims\n            -- double quotes, so it's safest to already have the internal separators\n            -- containing the double quotes replaced with an alternative separator.\n            wtext := wtext || format('\n            ,(\n              string_to_array(\n                TRIM(\n                  TRIM(\n                    regexp_replace((old_row_data->>%L), %L , %L, %L\n                    ), %L\n                  ),%L\n                ), %L\n              )\n            )::%s AS %I'\n            ,rec.cname\n            ,'", "'\n            ,'X-X-X'\n            ,'g'\n            ,'["'\n            ,'"]'\n            ,'X-X-X'\n            ,rec.pgtype\n            ,rec.cname);\n          ELSE -- for everything else\n            -- All of these values can be cast as-is into their original types\n            wtext := wtext || format('\n            ,(old_row_data->>%L)::%s AS %I'\n            ,rec.cname\n            ,rec.ctype\n            ,rec.cname);\n        END CASE;\n        -- this detects whether the column was updated to be null\n        wtext := wtext || format('\n        ,(old_row_data->%L) = %L %I'\n        ,rec.cname\n        ,'null'\n        ,rec.cname || '_isnull');\n      END LOOP;\n      qry := qry || wtext || format('\n      FROM %I\n      UNION ALL\n      -- Add in the current value from the live table as a final record\n      SELECT\n        9223372036854775807 --max bigint so these always sort last\n        ,id\n        ,timeend\n        ,FALSE\n        ,TRUE'\n      , 'ZAL' || tablename);\n      wtext := '';\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        CASE\n          WHEN rec.ctype = 'USER-DEFINED' THEN -- for enums\n            -- this is to match pushing enums to text in\n            -- records pulled from the audit log\n            wtext := wtext || format('\n            ,%I::%s'\n            ,rec.cname\n            ,'text');\n          ELSE\n            wtext := wtext || format('\n            ,%I'\n            ,rec.cname);\n        END CASE;\n        wtext := wtext || format('\n        ,%I IS NULL %I'\n        ,rec.cname\n        ,rec.cname || '_isnull');\n      END LOOP;\n      qry := qry || wtext || format('\n      FROM %I\n      CROSS JOIN timeband\n      ORDER BY 2,1'\n      ,tablename);\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- create group ids for each column to identify which iteration\n      -- of column value each record should have\n      qry := 'DROP TABLE IF EXISTS group_z;\n      CREATE TEMP TABLE group_z\n      AS\n      SELECT\n        zid\n        ,data_id';\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,SUM(CASE WHEN %I OR %I IS NOT NULL THEN 1 ELSE 0 END) OVER (PARTITION BY data_id ORDER BY zid DESC ROWS UNBOUNDED PRECEDING) AS %I'\n        ,rec.cname || '_isnull'\n        ,rec.cname\n        ,rec.cname || '_group');\n      END LOOP;\n      qry := qry || wtext || E'\n' || 'FROM flat_z';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- spread the value from the records with update values throughout their respective groups\n      -- also create the start and end timestamps using adjacent timestamps. Add one millisecond\n      -- to the previous record's timestamp so it's not possible to match both with a BETWEEN.\n      -- This is not implausible if a large number of records are updated at the same time in a\n      -- shared transaction\n      qry := format('DROP TABLE IF EXISTS banded_z;\n      CREATE TEMP TABLE banded_z\n      AS\n      SELECT\n        fz.zid\n        ,fz.data_id\n        ,fz.is_insert\n        ,fz.is_current_record\n        ,(LAG(fz.dml_timestamp) OVER (PARTITION BY fz.data_id ORDER BY fz.zid)) + (1 * interval %L) timeband_start\n        ,fz.dml_timestamp timeband_end'\n        ,'1  ms');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,FIRST_VALUE(fz.%I) OVER (PARTITION BY fz.data_id, %I ORDER BY fz.zid DESC) AS %I'\n        ,rec.cname\n        ,rec.cname || '_group'\n        ,rec.cname);\n      END LOOP;\n      qry := qry || wtext || '\n      FROM flat_z fz\n      JOIN group_z gz\n        ON fz.zid = gz.zid\n        AND fz.data_id = gz.data_id';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- create the actual time series table\n      qry := format('DROP TABLE IF EXISTS %I;\n      CREATE TEMP TABLE %I\n      AS\n      SELECT\n        data_id\n        ,CASE\n          WHEN is_current_record AND timeband_start IS NULL THEN timebegin \n          ELSE COALESCE(timeband_start, timebegin)\n        END timeband_start\n        ,timeband_end'\n        ,tablename || '_timeseries'\n        ,tablename || '_timeseries');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,%I'\n        ,rec.cname);\n      END LOOP;\n      qry := qry || wtext || '\n      FROM banded_z\n      CROSS JOIN timeband\n      WHERE NOT is_insert';\n      wtext := '';\n      EXECUTE qry;\n      END\n      $$\n      ;
Executing (a47fa735-a687-4298-8c5a-016a108b1fd1): -- Create GoalFieldResponses_timeseries\n    \n      SELECT create_timeseries_from_audit_log('GoalFieldResponses');\n\n      -- Pull the data necessary to create an ARGFR from the historical\n      -- state of the associated GFR. If there is a historical state, use\n      -- it, if not, use the root cause currently on the goal. If there's\n      -- still no root cause, do nothing.\n      DROP TABLE IF EXISTS argfrs_to_insert;\n      CREATE TEMP TABLE argfrs_to_insert\n      AS\n      SELECT\n        arg.id argid,\n        gfrt."goalId" gid,\n        gfrt.data_id gfrid,\n        COALESCE(gfrt."goalTemplateFieldPromptId", gfr."goalTemplateFieldPromptId") "goalTemplateFieldPromptId",\n        COALESCE(gfrt.response, gfr.response) response\n      FROM "ActivityReports" ar\n      JOIN "ActivityReportGoals" arg\n        ON ar.id = arg."activityReportId"\n      JOIN "Goals" g\n        ON arg."goalId" = g.id\n      LEFT JOIN "GoalFieldResponses_timeseries" gfrt\n        ON arg."goalId" = gfrt."goalId"\n        AND ar."approvedAt" BETWEEN timeband_start AND timeband_end\n      LEFT JOIN "ActivityReportGoalFieldResponses" argfr\n        ON arg.id = argfr."activityReportGoalId"\n      LEFT JOIN "GoalFieldResponses" gfr\n        ON gfr."goalId" = arg."goalId"\n      WHERE argfr.id IS NULL\n        AND g."goalTemplateId" = 19017\n        AND (gfrt.response IS NOT NULL OR gfr.response IS NOT NULL)\n      ;\n      \n      -- Insert the records\n      INSERT INTO "ActivityReportGoalFieldResponses" (\n        "activityReportGoalId",\n        "goalTemplateFieldPromptId",\n        response,\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        argid,\n        "goalTemplateFieldPromptId",\n        response,\n        NOW(),\n        NOW()\n      FROM argfrs_to_insert\n      ;
Executing (a47fa735-a687-4298-8c5a-016a108b1fd1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240520000001-create-timeseries-and-root-causes: migrated (0.067s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240529000000-correct-spanish-course-names: migrating =======
Executing (5464ed1c-0fb1-4852-9c96-0e4c836e7e79): START TRANSACTION;
Connection validated successfully
Executing (5464ed1c-0fb1-4852-9c96-0e4c836e7e79): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240529000000-correct-spanish-course-names.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5464ed1c-0fb1-4852-9c96-0e4c836e7e79): -- Matches to created the mapping use hex encodings of the exact bits currently\n        -- stored in the database to avoid having to trust that the UTF-8 'unknown character'\n        -- value won't get corrupted somewhere along the deployment chain and cause the string\n        -- values to not match. An alternative method would be to match on IDs, but this is\n        -- vulnerable if anything else ends up changing the ID order in the meantime.\n        DROP TABLE IF EXISTS name_map;\n        CREATE TEMP TABLE name_map\n        AS\n        SELECT\n          id old_cid,\n          LEFT(name,30) old_name, -- here for validation convenience\n          'Apoyar al desarrollo de bebés y niños pequeños (BTS-IT)' new_name\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '41706f79617220616c206465736172726f6c6c6f20646520626562efbfbd732079206e69efbfbd6f73207065717565efbfbd6f7320284254532d495429'\n        UNION SELECT id, LEFT(name,30), 'Apoyo para niños y familias que están experimentando la carencia de hogar'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '41706f796f2070617261206e69efbfbd6f7320792066616d696c6961732071756520657374efbfbd6e206578706572696d656e74616e646f206c6120636172656e63696120646520686f676172'\n        UNION SELECT id, LEFT(name,30), 'Autoevaluación: su viaje anual'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '4175746f6576616c75616369efbfbd6e3a207375207669616a6520616e75616c'\n        UNION SELECT id, LEFT(name,30), 'Capacitación de Liderazgo y gobernanza en Head Start: valores, reglamentos y habilidades'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '43617061636974616369efbfbd6e206465204c69646572617a676f207920676f6265726e616e7a6120656e20486561642053746172743a2076616c6f7265732c207265676c616d656e746f73207920686162696c696461646573'\n        UNION SELECT id, LEFT(name,30), 'Coaching basado en la práctica'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '436f616368696e672062617361646f20656e206c61207072efbfbd6374696361'\n        UNION SELECT id, LEFT(name,30), 'Evaluación continua (BTS-IT)'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '4576616c75616369efbfbd6e20636f6e74696e756120284254532d495429'\n        UNION SELECT id, LEFT(name,30), 'Gerentes de educación en vivo'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '476572656e7465732064652065647563616369efbfbd6e20656e207669766f'\n        UNION SELECT id, LEFT(name,30), 'La gestión es importante: Asignación de costos'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '4c61206765737469efbfbd6e20657320696d706f7274616e74653a20417369676e616369efbfbd6e20646520636f73746f73'\n        UNION SELECT id, LEFT(name,30), 'Planificación del aprendizaje (BTS-IT)'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '506c616e69666963616369efbfbd6e2064656c20617072656e64697a616a6520284254532d495429'\n        UNION SELECT id, LEFT(name,30), 'Práctica basada en la relación (BTS-IT)'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '5072efbfbd63746963612062617361646120656e206c612072656c616369efbfbd6e20284254532d495429'\n        ;\n\n        -- Insert the new courses\n        INSERT INTO "Courses" (name)\n        SELECT new_name\n        FROM name_map\n        ;\n\n        -- Update the old courses with the mapsTo the new courses, and set their deletedAt\n        UPDATE "Courses" uc\n        SET\n          "mapsTo" = c.id,\n          "updatedAt" = NOW(),\n          "deletedAt" = NOW()\n        FROM name_map nm\n        JOIN "Courses" c\n          ON nm.new_name = c.name\n        WHERE uc.id = old_cid\n        ;
Executing (5464ed1c-0fb1-4852-9c96-0e4c836e7e79): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240529000000-correct-spanish-course-names: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240529190616-add-created-here-column-to-activity-report-objectives: migrating =======
Executing (138f0e97-daa4-4bf8-9d25-f6355abff4dc): START TRANSACTION;
Connection validated successfully
Executing (138f0e97-daa4-4bf8-9d25-f6355abff4dc): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240529190616-add-created-here-column-to-activity-report-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (138f0e97-daa4-4bf8-9d25-f6355abff4dc): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "objectiveCreatedHere" BOOLEAN;
Executing (138f0e97-daa4-4bf8-9d25-f6355abff4dc): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240529190616-add-created-here-column-to-activity-report-objectives: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240529200808-change-import-schedule: migrating =======
Executing (64c92347-4e9b-4e0a-be91-fd718c8f1d81): START TRANSACTION;
Connection validated successfully
Executing (64c92347-4e9b-4e0a-be91-fd718c8f1d81): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240529200808-change-import-schedule.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): UPDATE "Imports"\n      SET schedule = '30 8 * * *'\n      WHERE name = 'ITAMS Monitoring Data'\n      AND schedule = '0 7 * * *';
Connection validated successfully
Executing (64c92347-4e9b-4e0a-be91-fd718c8f1d81): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240529200808-change-import-schedule: migrated (0.045s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240530143904-add-qa-dashboard-feature-flag: migrating =======
Executing (2653fe94-2be2-4b02-995f-70df57ce557b): START TRANSACTION;
Connection validated successfully
Executing (2653fe94-2be2-4b02-995f-70df57ce557b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240530143904-add-qa-dashboard-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (2653fe94-2be2-4b02-995f-70df57ce557b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240530143904-add-qa-dashboard-feature-flag: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240531163151-remove-unused-objective-tables: migrating =======
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): START TRANSACTION;
Connection validated successfully
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240531163151-remove-unused-objective-tables.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): ALTER TABLE "public"."Objectives" DROP COLUMN "supportType";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTemplateTopics');
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTemplateFiles');
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTemplateResources');
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveCourses');
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTopics');
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveFiles');
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveResources');
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ZALObjectiveTemplateTopics";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ZALObjectiveTemplateFiles";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ZALObjectiveTemplateResources";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ZALObjectiveCourses";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ZALObjectiveTopics";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ZALObjectiveFiles";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ZALObjectiveResources";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ObjectiveTemplateTopics";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ObjectiveTemplateFiles";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ObjectiveTemplateResources";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ObjectiveCourses";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ObjectiveTopics";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ObjectiveFiles";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ObjectiveResources";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): DROP TABLE IF EXISTS "ObjectiveResourcesToModify";\n        DROP TYPE IF EXISTS "enum_ObjectiveResources_sourceFields";\n        DROP TYPE IF EXISTS "enum_ObjectiveTemplateResources_sourceFields";
Executing (d42c3ef9-23cb-43a1-b800-5ec1f8bafc30): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240531163151-remove-unused-objective-tables: migrated (0.412s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240607000000-fix-timeseries: migrating =======
Executing (c890961f-579d-4a23-b98f-f59f009248b4): START TRANSACTION;
Connection validated successfully
Executing (c890961f-579d-4a23-b98f-f59f009248b4): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240607000000-fix-timeseries.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c890961f-579d-4a23-b98f-f59f009248b4): CREATE OR REPLACE FUNCTION create_timeseries_from_audit_log(tablename text)\n      RETURNS VOID LANGUAGE plpgsql AS\n      $$\n      DECLARE\n        qry text := '';\n        wtext text := '';\n        rec record;\n      BEGIN\n      -- Get the column list for the main table\n      -- NOTE regarding string formatting used to assemble the queries that the\n      -- function uses to do its work:\n      -- The format() function works like C string interpolation except\n      -- that it protects from SQL injection attacks. Like C string interpolation,\n      -- the %<character> is replaced by the comma-separated values following the\n      -- base string.\n      -- %I is formatted as a database object name and manages double quotes\n      -- %L is formatted as a string literal and manages single quotes\n      -- %s can be used for arbitrary string interpolation but doesn't\n      -- provide any protections or quote management.\n      qry := format('\n      DROP TABLE IF EXISTS clist;\n      CREATE TEMP TABLE clist\n      AS\n      SELECT\n        column_name cname\n        ,ordinal_position cnum\n        ,data_type  ctype\n      FROM information_schema.columns ic\n      WHERE table_schema = %L\n        AND table_name = %L'\n      ,'public'\n      ,tablename);\n      EXECUTE qry;\n      qry := '';\n      -- Get the pg_typeof column datatypes for the main table\n      -- these are more precise than the information schema types\n      qry := 'DROP TABLE IF EXISTS ctypes;\n      CREATE TEMP TABLE ctypes\n      AS';\n      FOR rec IN\n        SELECT * FROM clist ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n          SELECT cname, cnum, ctype, pg_typeof( %I ) pgtype FROM clist LEFT JOIN (SELECT * FROM %I LIMIT 1) a ON TRUE WHERE %L = cname UNION'\n        ,rec.cname\n        ,tablename\n        ,rec.cname);\n      END LOOP;\n      qry := qry || LEFT(wtext,-6) || '\n      ORDER BY cnum';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- set up the beginning and end of time\n      qry := format('DROP TABLE IF EXISTS timeband;\n      CREATE TEMP TABLE timeband\n      AS\n      SELECT\n        %L::timestamp timebegin,\n        NOW() timeend'\n      ,'2020-01-01');\n      EXECUTE qry;\n      qry := '';\n      wtext := '';\n      -- assemble flat_z, containing the typed columns with changed data\n      -- there will be one record per audit log entry, plus one for the\n      -- current value\n      -- This assumes every table as an id column, which the audit log\n      -- also assumes\n      qry := format('DROP TABLE IF EXISTS flat_z;\n      CREATE TEMP TABLE flat_z\n      AS\n      SELECT\n        id zid\n        ,data_id\n        ,dml_timestamp\n        ,dml_type = %L is_insert\n        ,FALSE is_current_record'\n      ,'INSERT');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        CASE\n          WHEN rec.ctype = 'USER-DEFINED' THEN -- for enums\n            -- because the enums have changed over time we\n            -- are only casting to text. The other option\n            -- of building a new enum containing all historical\n            -- enums is both more complex and won't make\n            -- using the resulting time series any easier\n            wtext := wtext || format('\n            ,(old_row_data->>%L)::%s AS %I'\n            ,rec.cname\n            ,'text'\n            ,rec.cname);\n          WHEN rec.ctype = 'ARRAY' AND rec.pgtype::text NOT LIKE '"enum%' THEN\n            -- Because the arrays are stored as strings, they need to be parsed\n            -- back into arrays. They look like:\n            -- ["element1", "element2", "", "element4"]\n            -- The X-X-X is a string very unlikely to be present\n            -- in the internal text and replaces the internal element separators (", ")\n            -- before the start ([") and end ("]) are stripped off. That step probably\n            -- isn't strictly necessary, but is in place because the end also trims\n            -- double quotes, so it's safest to already have the internal separators\n            -- containing the double quotes replaced with an alternative separator.\n            wtext := wtext || format('\n            ,(\n              string_to_array(\n                TRIM(\n                  TRIM(\n                    regexp_replace((old_row_data->>%L), %L , %L, %L\n                    ), %L\n                  ),%L\n                ), %L\n              )\n            )::%s AS %I'\n            ,rec.cname\n            ,'", "'\n            ,'X-X-X'\n            ,'g'\n            ,'["'\n            ,'"]'\n            ,'X-X-X'\n            ,rec.pgtype\n            ,rec.cname);\n          WHEN rec.ctype = 'ARRAY' AND rec.pgtype::text LIKE '"enum%' THEN\n            -- As a combinations of both previous cases, arrays of enums need\n            -- to be cast to arrays of text.\n            wtext := wtext || format('\n            ,(\n              string_to_array(\n                TRIM(\n                  TRIM(\n                    regexp_replace((old_row_data->>%L), %L , %L, %L\n                    ), %L\n                  ),%L\n                ), %L\n              )\n            )::%s AS %I'\n            ,rec.cname\n            ,'", "'\n            ,'X-X-X'\n            ,'g'\n            ,'["'\n            ,'"]'\n            ,'X-X-X'\n            ,'text[]'\n            ,rec.cname);\n          ELSE -- for everything else\n            -- All of these values can be cast as-is into their original types\n            wtext := wtext || format('\n            ,(old_row_data->>%L)::%s AS %I'\n            ,rec.cname\n            ,rec.ctype\n            ,rec.cname);\n        END CASE;\n        -- this detects whether the column was updated to be null\n        wtext := wtext || format('\n        ,(old_row_data->%L) = %L %I'\n        ,rec.cname\n        ,'null'\n        ,rec.cname || '_isnull');\n      END LOOP;\n      qry := qry || wtext || format('\n      FROM %I\n      UNION ALL\n      -- Add in the current value from the live table as a final record\n      SELECT\n        9223372036854775807 --max bigint so these always sort last\n        ,id\n        ,timeend\n        ,FALSE\n        ,TRUE'\n      , 'ZAL' || tablename);\n      wtext := '';\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        CASE\n          WHEN rec.ctype = 'USER-DEFINED' THEN -- for enums\n            -- this is to match pushing enums to text in\n            -- records pulled from the audit log\n            wtext := wtext || format('\n            ,%I::%s'\n            ,rec.cname\n            ,'text');\n          WHEN rec.ctype = 'ARRAY' AND rec.pgtype::text LIKE '"enum%' THEN\n            -- For handling enums in arrays, which have the same issue\n            wtext := wtext || format('\n            ,%I::%s'\n            ,rec.cname\n            ,'text[]');\n          ELSE\n            wtext := wtext || format('\n            ,%I'\n            ,rec.cname);\n        END CASE;\n        wtext := wtext || format('\n        ,%I IS NULL %I'\n        ,rec.cname\n        ,rec.cname || '_isnull');\n      END LOOP;\n      qry := qry || wtext || format('\n      FROM %I\n      CROSS JOIN timeband\n      ORDER BY 2,1'\n      ,tablename);\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- create group ids for each column to identify which iteration\n      -- of column value each record should have\n      qry := 'DROP TABLE IF EXISTS group_z;\n      CREATE TEMP TABLE group_z\n      AS\n      SELECT\n        zid\n        ,data_id';\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,SUM(CASE WHEN %I OR %I IS NOT NULL THEN 1 ELSE 0 END) OVER (PARTITION BY data_id ORDER BY zid DESC ROWS UNBOUNDED PRECEDING) AS %I'\n        ,rec.cname || '_isnull'\n        ,rec.cname\n        ,rec.cname || '_group');\n      END LOOP;\n      qry := qry || wtext || E'\n' || 'FROM flat_z';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- spread the value from the records with update values throughout their respective groups\n      -- also create the start and end timestamps using adjacent timestamps. Add one millisecond\n      -- to the previous record's timestamp so it's not possible to match both with a BETWEEN.\n      -- This is not implausible if a large number of records are updated at the same time in a\n      -- shared transaction\n      qry := format('DROP TABLE IF EXISTS banded_z;\n      CREATE TEMP TABLE banded_z\n      AS\n      SELECT\n        fz.zid\n        ,fz.data_id\n        ,fz.is_insert\n        ,fz.is_current_record\n        ,(LAG(fz.dml_timestamp) OVER (PARTITION BY fz.data_id ORDER BY fz.zid)) + (1 * interval %L) timeband_start\n        ,fz.dml_timestamp timeband_end'\n        ,'1  ms');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,FIRST_VALUE(fz.%I) OVER (PARTITION BY fz.data_id, %I ORDER BY fz.zid DESC) AS %I'\n        ,rec.cname\n        ,rec.cname || '_group'\n        ,rec.cname);\n      END LOOP;\n      qry := qry || wtext || '\n      FROM flat_z fz\n      JOIN group_z gz\n        ON fz.zid = gz.zid\n        AND fz.data_id = gz.data_id';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- create the actual time series table\n      qry := format('DROP TABLE IF EXISTS %I;\n      CREATE TEMP TABLE %I\n      AS\n      SELECT\n        data_id\n        ,CASE\n          WHEN is_current_record AND timeband_start IS NULL THEN timebegin \n          ELSE COALESCE(timeband_start, timebegin)\n        END timeband_start\n        ,timeband_end'\n        ,tablename || '_timeseries'\n        ,tablename || '_timeseries');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,%I'\n        ,rec.cname);\n      END LOOP;\n      qry := qry || wtext || '\n      FROM banded_z\n      CROSS JOIN timeband\n      WHERE NOT is_insert';\n      wtext := '';\n      EXECUTE qry;\n      END\n      $$\n      ;
Executing (c890961f-579d-4a23-b98f-f59f009248b4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240607000000-fix-timeseries: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240610110823-remove-unwanted-objectives: migrating =======
Executing (3047dce3-2198-4736-a813-74695e616911): START TRANSACTION;
Connection validated successfully
Executing (3047dce3-2198-4736-a813-74695e616911): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240610110823-remove-unwanted-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3047dce3-2198-4736-a813-74695e616911): -- Get all unwanted objectives for this Goal.\n      DROP TABLE IF EXISTS ObjectivesToRemove;\n      CREATE TEMP TABLE ObjectivesToRemove\n            AS\n      SELECT\n      o."id"\n      FROM "Objectives" o\n      LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n      LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n      WHERE o."goalId" = 66089\n        AND o."status" = 'Not Started'\n        AND COALESCE(ar."calculatedStatus",'draft') = 'draft';\n\n      -- Delete from ARO Topics.\n      DROP TABLE IF EXISTS DeleteTopics;\n      CREATE TEMP TABLE DeleteTopics\n            AS\n      WITH delete_topics AS (\n      DELETE FROM "ActivityReportObjectiveTopics" WHERE "activityReportObjectiveId" IN (\n        SELECT id FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n          SELECT id FROM ObjectivesToRemove\n        )\n      )\n      RETURNING\n      id\n      ) SELECT * FROM delete_topics;\n\n\n\n     -- Delete from ARO Resources.\n     DROP TABLE IF EXISTS DeleteResources;\n      CREATE TEMP TABLE DeleteResources\n            AS\n      WITH deleted_resources AS (\n      DELETE FROM "ActivityReportObjectiveResources" WHERE "activityReportObjectiveId" IN (\n        SELECT id FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n          SELECT id FROM ObjectivesToRemove\n        )\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_resources;\n\n      -- Delete from ARO Files.\n      DROP TABLE IF EXISTS DeleteFiles;\n      CREATE TEMP TABLE DeleteFiles\n            AS\n      WITH deleted_files AS (\n      DELETE FROM "ActivityReportObjectiveFiles" WHERE "activityReportObjectiveId" IN (\n        SELECT id FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n          SELECT id FROM ObjectivesToRemove\n        )\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_files;\n\n      -- Delete from AR Courses.\n      DROP TABLE IF EXISTS DeleteCourses;\n      CREATE TEMP TABLE DeleteCourses\n            AS\n      WITH deleted_courses AS (\n      DELETE FROM "ActivityReportObjectiveCourses" WHERE "activityReportObjectiveId" IN (\n        SELECT id FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n          SELECT id FROM ObjectivesToRemove\n        )\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_courses;\n\n      -- Delete ARO's.\n      DROP TABLE IF EXISTS DeleteAROs;\n      CREATE TEMP TABLE DeleteAROs\n            AS\n      WITH deleted_aros AS (\n      DELETE FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n        SELECT id FROM ObjectivesToRemove\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_aros;\n\n      -- Delete objectives.\n      DROP TABLE IF EXISTS DeleteObjectives;\n      CREATE TEMP TABLE DeleteObjectives\n            AS\n      WITH deleted_objectives AS (\n      DELETE FROM "Objectives" WHERE id IN (\n         SELECT id FROM ObjectivesToRemove\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_objectives;\n\n      -- Get Delete counts using union.\n      SELECT COUNT(*), 'ARO Topics' FROM DeleteTopics\n      UNION ALL\n      SELECT COUNT(*), 'ARO Resources' FROM DeleteResources\n      UNION ALL\n      SELECT COUNT(*), 'ARO Files' FROM DeleteFiles\n      UNION ALL\n      SELECT COUNT(*), 'ARO Courses' FROM DeleteCourses\n      UNION ALL\n      SELECT COUNT(*), 'AROs' FROM DeleteAROs\n      UNION ALL\n      SELECT COUNT(*), 'Objectives' FROM DeleteObjectives;\n\n      -- Drop all tables.\n      DROP TABLE IF EXISTS ObjectivesToRemove;\n      DROP TABLE IF EXISTS DeleteTopics;\n      DROP TABLE IF EXISTS DeleteResources;\n      DROP TABLE IF EXISTS DeleteFiles;\n      DROP TABLE IF EXISTS DeleteCourses;\n      DROP TABLE IF EXISTS DeleteAROs;\n      DROP TABLE IF EXISTS DeleteObjectives;
Executing (3047dce3-2198-4736-a813-74695e616911): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240610110823-remove-unwanted-objectives: migrated (0.050s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240614000000-r10-clear-all-goals-and-objs: migrating =======
Executing (9c08603c-04ad-4af2-9ed1-5f61a3a6a10c): START TRANSACTION;
Connection validated successfully
Executing (9c08603c-04ad-4af2-9ed1-5f61a3a6a10c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240614000000-r10-clear-all-goals-and-objs.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9c08603c-04ad-4af2-9ed1-5f61a3a6a10c): -- 1. Get all r10 goals that are currently visible.\n      WITH r_10_active_goals AS (\n      SELECT DISTINCT\n        g.*\n      FROM "Grants" gr\n      JOIN "Goals" g\n        ON gr.id = g."grantId"\n      WHERE gr."regionId" = 10\n        AND g.status != 'Closed'\n        AND g."deletedAt" IS NULL\n        AND g."mapsToParentGoalId" IS NULL\n      ),\n      -- 2. insert the status changes for the goals and return the important elements\n      log_status_change AS (\n      INSERT INTO "GoalStatusChanges"(\n        "goalId",\n        "userId",\n        "userName",\n        "userRoles",\n        "oldStatus",\n        "newStatus",\n        "reason",\n        "context",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        g.id "goalId",\n        u.id,\n        u.name,\n        ARRAY_AGG(ro.name),\n        g.status "oldSataus", \n        'Closed' "newStatus",\n        'TTA completed' "reason",\n        'Close all goals to move to new goal language' "context",\n        now() "createdAt",\n        now() "updatedAt"\n      FROM r_10_active_goals g\n      LEFT JOIN "Users" u\n        ON (\n          (u.id = 550 AND "phoneNumber" IS NOT NULL) --for non-prod\n          OR\n          (md5(u.name || 'bdjy34gg') = '7b1166c709d27ec6519b05c24373be6ai') --for prod\n        )\n      LEFT JOIN "UserRoles" ur\n        ON u.id = ur."userId"\n      LEFT JOIN "Roles" ro\n        ON ur."roleId" = ro.id\n      GROUP BY 1,2,3,5,6,7,8,9,10\n      RETURNING\n        id,\n        "goalId",\n        "newStatus",\n        "updatedAt"\n      ),\n      -- 3. Update the actual goals\n      update_goals AS (\n      UPDATE "Goals" g\n      SET\n        "status" = lsc."newStatus",\n        "updatedAt" = lsc."updatedAt"\n      FROM log_status_change lsc\n      WHERE g.id = lsc."goalId"\n      RETURNING\n        g.id "goalId",\n        g.status\n      ),\n      -- 4. Update all objectives attached to any R10 goal\n      update_objectives AS (\n      UPDATE "Objectives" o\n      SET\n        "status" = 'Complete',\n        "updatedAt" = NOW()\n      FROM "Grants" gr\n      JOIN "Goals" g\n        ON g."grantId" = gr.id\n        AND gr."regionId" = 10\n      WHERE o."goalId" = g.id\n        AND o."status" != 'Complete'\n        AND o."deletedAt" IS NULL\n        AND o."mapsToParentObjectiveId" IS NULL\n      RETURNING\n        o.id "objectiveId",\n        o.status\n      )\n      -- 5. show stats for what was done when testing.\n      SELECT\n        'goals updated' stat,\n        COUNT("goalId") statcnt\n      FROM update_goals\n      UNION\n      SELECT\n        'objectives updated',\n        COUNT("objectiveId")\n      FROM update_objectives;
Executing (9c08603c-04ad-4af2-9ed1-5f61a3a6a10c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240614000000-r10-clear-all-goals-and-objs: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240624185931-unlock-tr-and-sessions: migrating =======
Executing (bf5555c5-9077-4cde-937b-23329686f646): START TRANSACTION;
Connection validated successfully
Executing (bf5555c5-9077-4cde-937b-23329686f646): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240624185931-unlock-tr-and-sessions.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (bf5555c5-9077-4cde-937b-23329686f646): UPDATE "SessionReportPilots"\n        SET data = jsonb_set(data, '{status}', '"In progress"', true)\n        WHERE "eventId" = 48;\n\n        UPDATE "EventReportPilots"\n        SET data = jsonb_set(data, '{status}', '"In progress"', true)\n        WHERE "id" = 48;
Executing (bf5555c5-9077-4cde-937b-23329686f646): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240624185931-unlock-tr-and-sessions: migrated (0.017s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240625000000-correct-fei-root-cause: migrating =======
Executing (06aa1668-9bf1-487c-8c99-e508633b02dd): START TRANSACTION;
Connection validated successfully
Executing (06aa1668-9bf1-487c-8c99-e508633b02dd): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240625000000-correct-fei-root-cause.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (06aa1668-9bf1-487c-8c99-e508633b02dd): -- Find all the ActivityReportGoalFieldResponses that have the\n      -- invalid 'Transportation' value\n      DROP TABLE IF EXISTS argfr_to_update;\n      CREATE TEMP TABLE argfr_to_update\n      AS\n      SELECT\n        argfr.id argfrid,\n        arg."goalId" gid\n      FROM "ActivityReportGoalFieldResponses" argfr\n      JOIN "ActivityReportGoals" arg\n        ON "activityReportGoalId" = arg.id\n      WHERE 'Transportation' = ANY(response);\n\n      -- Find all the GoalFieldResponses that have the\n      -- invalid 'Transportation' value\n      DROP TABLE IF EXISTS gfr_to_update;\n      CREATE TEMP TABLE gfr_to_update\n      AS\n      SELECT\n        id gfrid,\n        "goalId" gid\n      FROM "GoalFieldResponses"\n      WHERE 'Transportation' = ANY(response);\n\n      -- Make sure this is only the one recipient being updated.\n      -- If 'Transportation' somehow spread somewhere else then\n      -- we don't know how to correct it accurately.\n      DROP TABLE IF EXISTS recipient_list;\n      CREATE TEMP TABLE recipient_list\n      AS\n      SELECT DISTINCT gr."recipientId"\n      FROM argfr_to_update atu\n      JOIN "Goals" g\n        ON g.id = atu.gid\n      JOIN "Grants" gr\n        ON g."grantId" = gr.id\n      UNION\n      SELECT DISTINCT gr."recipientId"\n      FROM gfr_to_update atu\n      JOIN "Goals" g\n        ON g.id = atu.gid\n      JOIN "Grants" gr\n        ON g."grantId" = gr.id\n      ;\n      \n      -- As a protective step, this will create a divide by zero error and\n      -- rollback the transaction if there is more than\n      -- one recipient found with 'Transportation' responses\n      SELECT 1/\n        (\n          LEAST(2, (SELECT COUNT(*) FROM recipient_list))\n          - 2\n        )\n      ;\n\n      -- Perform the actual updates to ActivityReportGoalFieldResponses\n      CREATE TEMP TABLE argfr_updates\n      AS\n      WITH updater AS (\n      UPDATE "ActivityReportGoalFieldResponses" argfr\n      SET response = ARRAY_REPLACE(response,'Transportation','Family Circumstances')\n      FROM argfr_to_update u\n      WHERE argfrid = argfr.id\n      RETURNING\n        argfr.id argfrid,\n        'ActivityReportGoalFieldResponses' tablename\n      ) SELECT * FROM updater\n      ;\n\n      -- Perform the actual updates to GoalFieldResponses\n      CREATE TEMP TABLE gfr_updates\n      AS\n      WITH updater AS (\n      UPDATE "GoalFieldResponses" gfr\n      SET response = ARRAY_REPLACE(response,'Transportation','Family Circumstances')\n      FROM gfr_to_update u\n      WHERE gfrid = gfr.id\n      RETURNING\n        gfr.id gfrid,\n        'GoalFieldResponses' tablename\n      ) SELECT * FROM updater\n      ;\n     \n\n      -- A quick count of the results that is expected to be:\n      -- update_cnt |            tablename\n      -- -----------+----------------------------------\n      --          3 | GoalFieldResponses\n      --         10 | ActivityReportGoalFieldResponses\n      SELECT\n        COUNT(*) update_cnt,\n        tablename\n      FROM gfr_updates\n      GROUP BY 2\n      UNION\n      SELECT\n        COUNT(*),\n        tablename\n      FROM argfr_updates\n      GROUP BY 2\n      ;
Executing (06aa1668-9bf1-487c-8c99-e508633b02dd): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240625000000-correct-fei-root-cause: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240625135148-reset-bad-created-vias: migrating =======
Executing (adefec4c-8731-452b-a5c5-6b29a9a891d6): START TRANSACTION;
Connection validated successfully
Executing (adefec4c-8731-452b-a5c5-6b29a9a891d6): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240625135148-reset-bad-created-vias.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (adefec4c-8731-452b-a5c5-6b29a9a891d6): UPDATE "Goals"\n        SET "createdVia" = 'merge'\n        WHERE id IN (69403, 78365) AND "createdVia" = 'imported'; -- Nathan helpfully provided me with these IDs based on the audit log
Executing (adefec4c-8731-452b-a5c5-6b29a9a891d6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240625135148-reset-bad-created-vias: migrated (0.017s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240627000000-uncomplete_trs_and_remove_goals: migrating =======
Executing (2b061283-bc5e-4332-afb6-946782877af7): START TRANSACTION;
Connection validated successfully
Executing (2b061283-bc5e-4332-afb6-946782877af7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240627000000-uncomplete_trs_and_remove_goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2b061283-bc5e-4332-afb6-946782877af7): -- 1. Find the event report IDs for Training Reports that need\n        -- all their components set back to in progress and Goals\n        -- deleted. If any Goals have already been used (hopefully none)\n        -- then exclude that TR from the fix and we'll deal with it\n        -- later after the user fixes it.\n        DROP TABLE IF EXISTS er_to_update;\n        CREATE TEMP TABLE er_to_update\n        AS\n        WITH er_candidates AS (\n        SELECT id erid\n        FROM "EventReportPilots"\n        WHERE data->>'eventId' in ('R05-TR-23-5019','R05-TR-23-5017')\n        ),\n        er_goals AS (\n        SELECT\n          erid,\n          BOOL_AND(o.id IS NULL AND arg.id IS NULL) unused\n        FROM er_candidates\n        JOIN "EventReportPilotGoals" erpg\n          ON erid = erpg."eventId"\n        LEFT JOIN "Objectives" o\n          ON o."goalId" = erpg."goalId"\n        LEFT JOIN "ActivityReportGoals" arg\n          ON arg."goalId" = erpg."goalId"\n        GROUP BY 1\n        )\n        SELECT DISTINCT erid\n        FROM er_goals\n        WHERE unused\n        ;\n\n        -- 2. Get all the associated Session Reports to update\n        DROP TABLE IF EXISTS sr_to_update;\n        CREATE TEMP TABLE sr_to_update\n        AS\n        SELECT id srid\n        FROM "SessionReportPilots"\n        JOIN er_to_update\n          ON "eventId" = erid\n        ;\n\n        -- 3. Find all the Goals that need deleting. In step #1\n        -- we checked to make sure none of these are connected\n        -- to anything else.\n        DROP TABLE IF EXISTS goals_to_delete;\n        CREATE TEMP TABLE goals_to_delete\n        AS\n        SELECT DISTINCT erpg."goalId" gid\n        FROM "EventReportPilotGoals" erpg\n        JOIN er_to_update\n          ON erpg."eventId" = erid\n        ;\n        \n        -- 4. Delete the EventReportPilotGoal records\n        DROP TABLE IF EXISTS erpg_deletions;\n        CREATE TEMP TABLE erpg_deletions\n        AS\n        WITH updater AS (\n        DELETE FROM  "EventReportPilotGoals"\n        USING er_to_update\n        WHERE "eventId" = erid\n        RETURNING\n          id erpgid,\n          'EventReportPilotGoals deleted' operation\n        ) SELECT * FROM updater\n        ;\n\n        -- 5. Delete the Goals\n        DROP TABLE IF EXISTS goal_deletions;\n        CREATE TEMP TABLE goal_deletions\n        AS\n        WITH updater AS (\n        DELETE FROM  "Goals"\n        USING goals_to_delete\n        WHERE id = gid\n        RETURNING\n          gid,\n          'Goals deleted' operation\n        ) SELECT * FROM updater\n        ;\n\n        -- 6. Update any "Complete" session statuses back to "In Progress"\n        CREATE TEMP TABLE sr_updates\n        AS\n        WITH updater AS (\n        UPDATE "SessionReportPilots"\n        SET data = JSONB_SET(data,'{status}','"In progress"')\n        FROM sr_to_update\n        WHERE id = srid\n          AND data->>'status' = 'Complete'\n        RETURNING\n          srid,\n          'SessionReportPilots reset' operation\n        ) SELECT * FROM updater\n        ;\n\n        -- 6. Update any "Complete" event statuses back to "In Progress"\n        CREATE TEMP TABLE er_updates\n        AS\n        WITH updater AS (\n        UPDATE "EventReportPilots"\n        SET data = JSONB_SET(data,'{status}','"In progress"')\n        FROM er_to_update\n        WHERE id = erid\n          AND data->>'status' = 'Complete'\n        RETURNING\n          erid,\n          'EventReportPilots reset' operation\n        ) SELECT * FROM updater\n        ;\n      \n\n        -- A quick count of the results that is expected to be:\n        --  cnt |           operation\n        -- -----+-------------------------------\n        --    1 | EventReportPilots reset\n        --    8 | SessionReportPilots reset\n        --   60 | Goals deleted\n        --   60 | EventReportPilotGoals deleted\n        SELECT COUNT(*) cnt, operation FROM erpg_deletions GROUP BY 2\n        UNION\n        SELECT COUNT(*), operation FROM goal_deletions GROUP BY 2\n        UNION\n        SELECT COUNT(*), operation FROM sr_updates GROUP BY 2\n        UNION\n        SELECT COUNT(*), operation FROM er_updates GROUP BY 2\n        ;
Executing (2b061283-bc5e-4332-afb6-946782877af7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240627000000-uncomplete_trs_and_remove_goals: migrated (0.035s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240702000000-monitoring-config-correction: migrating =======
Executing (aa62f629-c8dc-4fa3-8b12-53bec0913630): START TRANSACTION;
Connection validated successfully
Executing (aa62f629-c8dc-4fa3-8b12-53bec0913630): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240702000000-monitoring-config-correction.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (aa62f629-c8dc-4fa3-8b12-53bec0913630): WITH \n          reconfigure AS (\n            SELECT\n              i."name",\n              jsonb_agg(\n                CASE\n                  WHEN elem->>'tableName' = 'MonitoringFindings' THEN\n                    jsonb_set(\n                      elem,\n                      '{remapDef}',\n                      (elem->'remapDef')::jsonb - 'ReportDate' || jsonb_build_object('ReportedDate', 'reportedDate')\n                  )\n                  ELSE\n                    elem\n                END\n              ) "definitions"\n            FROM "Imports" i\n            CROSS JOIN jsonb_array_elements(i."definitions") as elem\n            WHERE i."name" = 'ITAMS Monitoring Data'\n            AND "definitions" @> '[{"tableName": "MonitoringFindings"}]'\n            GROUP BY 1\n          )\n          UPDATE "Imports" i\n          SET "definitions" = r."definitions"\n          FROM "reconfigure" r\n          WHERE i."name" = r."name";
Executing (aa62f629-c8dc-4fa3-8b12-53bec0913630): WITH\n          erroneous_records AS (\n            SELECT DISTINCT if2.id \n            FROM "ImportFiles" if1\n            JOIN "ImportFiles" if2\n            ON  if1.id < if2.id\n            AND if1."ftpFileInfo" -> 'name' = if2."ftpFileInfo" -> 'name'\n          )\n        DELETE FROM "ImportFiles" i\n        USING erroneous_records er\n        WHERE i.id = er.id;
Executing (aa62f629-c8dc-4fa3-8b12-53bec0913630): CREATE UNIQUE INDEX "ImportFiles_ftpFileInfo_name_unique" ON "ImportFiles" (("ftpFileInfo" -> 'name'));
Executing (aa62f629-c8dc-4fa3-8b12-53bec0913630): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240702000000-monitoring-config-correction: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240708000000-remove_national_center_ars: migrating =======
Executing (0455e3fc-ea0a-4a0b-84fb-8f2a0c3f12ea): START TRANSACTION;
Connection validated successfully
Executing (0455e3fc-ea0a-4a0b-84fb-8f2a0c3f12ea): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240708000000-remove_national_center_ars.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0455e3fc-ea0a-4a0b-84fb-8f2a0c3f12ea): ---------------------------------------------------\n        -- NOTE:\n        -- Files and Resources are most properly managed by\n        -- maintenance jobs, so this and similar migrations\n        -- won't delete them directly. Deleting the link\n        -- records will give the maintenance job the info\n        -- it needs to perform its housekeeping.\n        ---------------------------------------------------\n        -------- Deleting unwanted ARs --------\n        -- Create the AR deletion list\n        -- Remove AR link records: -------------\n        -- ActivityRecipients\n        -- ActivityReportApprovers\n        -- ActivityReportCollaborators\n        -- ActivityReportFiles (no need to remove Files)\n        -- ActivityReportResources (no need to remove Resources)\n\n        -- Create the NextSteps deletion list\n        -- Remove NextSteps link records: -------------\n        -- NextStepResources\n        -- remove NextSteps -------------\n\n        -- Create the ARO deletion list\n        -- Remove ARO link records: -------------\n        -- ActivityReportObjectiveFiles\n        -- ActivityReportObjectiveResources\n        -- ActivityReportObjectiveTopics\n        -- ActivityReportObjectiveCourses\n        -- remove AROs -------------------\n\n        -- Create the orphaned Objective deletion list\n        -- Remove Objective link records: -------------\n        -- Delete ObjectiveCollaborators\n        -- remove Objectives -------------\n\n        -- Create the ARG deletion list\n        -- Remove ARG link records: -------------\n        -- ActivityReportGoalFieldResponses\n        -- ActivityReportGoalResources\n        -- remove ARGs -------------------\n\n        -- Create the orphaned Goal deletions list\n        -- ( check if isFromSmartsheetTtaPlan, isRttapa)\n        -- Remove Goal link records: -------------\n        -- EventReportPilotGoals\n        -- GoalFieldResponses\n        -- GoalResources\n        -- remove Goals ------------------\n\n        -- Create the orphaned ObjectiveTemplate deletion list\n        -- Create the orphaned GoalTemplate deletion list\n        -- Remove GoalTemplate link records: -------------\n        -- GoalTemplateObjectiveTemplates\n        -- Remove ObjectiveTemplates --------\n        -- Remove GoalTemplates -------------\n\n        -- Remove ARs -----------------------\n\n        -- Test query\n\n        -- Correct the onApprovedAR and onAR values for the goals\n        -- and objectives that were not deleted\n\n        -------------------------------------------------------------------------------------------------------------------\n        -------- Deleting unwanted ARs --------\n        -- Create the AR deletion list\n        DROP TABLE IF EXISTS ars_to_delete;\n        CREATE TEMP TABLE ars_to_delete\n        AS\n        SELECT id arid\n        FROM "ActivityReports"\n        WHERE id IN (24998, 24645, 24297, 24122, 27517, 30829, 29864, 6442, 23057, 23718, 25205, 25792, 25577, 25573, 26478, 26210, 27117, 26918, 28451, 28117, 27669, 29542, 29101, 29024, 30137, 29762, 31201)\n        AND "regionId" = 10\n        ;\n\n        -- Remove AR link records: -------------\n        DROP TABLE IF EXISTS deleted_activityrecipients;\n        CREATE TEMP TABLE deleted_activityrecipients AS\n        WITH deletes AS (\n          DELETE FROM "ActivityRecipients"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportapprovers;\n        CREATE TEMP TABLE deleted_activityreportapprovers AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportApprovers"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportcollaborators;\n        CREATE TEMP TABLE deleted_activityreportcollaborators AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportCollaborators"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportfiles;\n        CREATE TEMP TABLE deleted_activityreportfiles AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportFiles"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportresources;\n        CREATE TEMP TABLE deleted_activityreportresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportResources"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n\n\n\n        -- Create the NextSteps deletion list\n        DROP TABLE IF EXISTS nextsteps_to_delete;\n        CREATE TEMP TABLE nextsteps_to_delete\n        AS\n        SELECT\n          id nsid\n        FROM "NextSteps"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove NextSteps link records: -------------\n        DROP TABLE IF EXISTS deleted_nextstepresources;\n        CREATE TEMP TABLE deleted_nextstepresources AS\n        WITH deletes AS (\n          DELETE FROM "NextStepResources"\n          USING nextsteps_to_delete\n          WHERE "nextStepId" = nsid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove NextSteps -------------\n        DROP TABLE IF EXISTS deleted_nextsteps;\n        CREATE TEMP TABLE deleted_nextsteps AS\n        WITH deletes AS (\n          DELETE FROM "NextSteps"\n          USING nextsteps_to_delete\n          WHERE id = nsid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n\n        -- Create the ARO deletion list\n        DROP TABLE IF EXISTS aros_to_delete;\n        CREATE TEMP TABLE aros_to_delete\n        AS\n        SELECT\n          id aroid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove ARO link records: -------------\n        DROP TABLE IF EXISTS deleted_activityreportobjectivefiles;\n        CREATE TEMP TABLE deleted_activityreportobjectivefiles AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveFiles"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportobjectiveresources;\n        CREATE TEMP TABLE deleted_activityreportobjectiveresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveResources"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportobjectivetopics;\n        CREATE TEMP TABLE deleted_activityreportobjectivetopics AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveTopics"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportobjectivecourses;\n        CREATE TEMP TABLE deleted_activityreportobjectivecourses AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveCourses"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- remove AROs -------------------\n        DROP TABLE IF EXISTS deleted_aros;\n        CREATE TEMP TABLE deleted_aros AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectives"\n          USING aros_to_delete\n          WHERE id = aroid\n          RETURNING\n          id,\n          "objectiveId" oid\n        )\n        SELECT id, oid FROM deletes\n        ;\n\n        -- Create the orphaned Objective deletion list\n        DROP TABLE IF EXISTS objectives_to_delete;\n        CREATE TEMP TABLE objectives_to_delete\n        AS\n        SELECT DISTINCT oid\n        FROM deleted_aros\n        EXCEPT\n        SELECT DISTINCT "objectiveId"\n        FROM "ActivityReportObjectives"\n        ;\n        -- Remove Objective link records: -------------\n        -- Delete ObjectiveCollaborators\n        DROP TABLE IF EXISTS deleted_objectivecollaborators;\n        CREATE TEMP TABLE deleted_objectivecollaborators AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveCollaborators"\n          USING objectives_to_delete\n          WHERE "objectiveId" = oid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        \n        -- remove Objectives -------------------\n        DROP TABLE IF EXISTS deleted_objectives;\n        CREATE TEMP TABLE deleted_objectives AS\n        WITH deletes AS (\n          DELETE FROM "Objectives"\n          USING objectives_to_delete\n          WHERE id = oid\n          RETURNING\n          id,\n          "goalId" gid,\n          "objectiveTemplateId" otid\n        )\n        SELECT id, gid, otid FROM deletes\n        ;\n\n        -- Create the ARG deletion list\n        DROP TABLE IF EXISTS args_to_delete;\n        CREATE TEMP TABLE args_to_delete\n        AS\n        SELECT DISTINCT\n          id argid,\n          "goalId" gid\n        FROM "ActivityReportGoals"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove ARG link records: -------------\n        DROP TABLE IF EXISTS deleted_activityreportgoalfieldresponses;\n        CREATE TEMP TABLE deleted_activityreportgoalfieldresponses AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoalFieldResponses"\n          USING args_to_delete\n          WHERE "activityReportGoalId" = argid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportgoalresources;\n        CREATE TEMP TABLE deleted_activityreportgoalresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoalResources"\n          USING args_to_delete\n          WHERE "activityReportGoalId" = argid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove ARGs -------------------\n        DROP TABLE IF EXISTS deleted_args;\n        CREATE TEMP TABLE deleted_args AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoals"\n          USING args_to_delete\n          WHERE id = argid\n          RETURNING\n          id,\n          "goalId" gid\n        )\n        SELECT id, gid FROM deletes\n        ;\n\n        -- Create the orphaned Goal deletions list\n        DROP TABLE IF EXISTS goals_to_delete;\n        CREATE TEMP TABLE goals_to_delete\n        AS\n        SELECT DISTINCT gid\n        FROM deleted_args dargs\n        JOIN "Goals" g\n          ON gid = g.id\n        WHERE (g."isRttapa" IS NULL OR g."isRttapa" != 'Yes')\n          AND g."isFromSmartsheetTtaPlan" != TRUE\n          AND g."createdVia" != 'merge'\n        EXCEPT \n        SELECT gid\n        FROM (\n          SELECT DISTINCT "goalId" gid\n          FROM "ActivityReportGoals"\n          UNION\n          SELECT DISTINCT "goalId"\n          FROM "Objectives"\n          UNION\n          SELECT DISTINCT "goalId"\n          FROM "EventReportPilotGoals"\n        ) keepers\n        ;\n        -- Remove Goal link records: -------------\n        DROP TABLE IF EXISTS deleted_goalcollaborators;\n        CREATE TEMP TABLE deleted_goalcollaborators AS\n        WITH deletes AS (\n          DELETE FROM "GoalCollaborators"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_goalfieldresponses;\n        CREATE TEMP TABLE deleted_goalfieldresponses AS\n        WITH deletes AS (\n          DELETE FROM "GoalFieldResponses"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_goalresources;\n        CREATE TEMP TABLE deleted_goalresources AS\n        WITH deletes AS (\n          DELETE FROM "GoalResources"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_goalstatuschanges;\n        CREATE TEMP TABLE deleted_goalstatuschanges AS\n        WITH deletes AS (\n          DELETE FROM "GoalStatusChanges"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id,\n          "goalId" gid\n        )\n        SELECT id, gid FROM deletes\n        ;\n        -- remove Goals -------------------\n        DROP TABLE IF EXISTS deleted_goals;\n        CREATE TEMP TABLE deleted_goals AS\n        WITH deletes AS (\n          DELETE FROM "Goals"\n          USING goals_to_delete\n          WHERE id = gid\n          RETURNING\n          id,\n          "goalTemplateId" gtid\n        )\n        SELECT id, gtid FROM deletes\n        ;\n\n        -- Create the orphaned ObjectiveTemplate deletion list\n        DROP TABLE IF EXISTS ots_to_delete;\n        CREATE TEMP TABLE ots_to_delete\n        AS\n        SELECT DISTINCT otid\n        FROM deleted_objectives\n        EXCEPT\n        SELECT DISTINCT "objectiveTemplateId"\n        FROM "Objectives"\n        ;\n\n        -- Create the orphaned GoalTemplate deletion list\n        DROP TABLE IF EXISTS gts_to_delete;\n        CREATE TEMP TABLE gts_to_delete\n        AS\n        SELECT DISTINCT gtid\n        FROM deleted_goals\n        EXCEPT\n        SELECT DISTINCT "goalTemplateId"\n        FROM "Goals"\n        ;\n        -- Remove GoalTemplate link records: -------------\n        DROP TABLE IF EXISTS deleted_goaltemplateobjectivetemplates;\n        CREATE TEMP TABLE deleted_goaltemplateobjectivetemplates AS\n        WITH unified_deletes AS (\n          SELECT DISTINCT id gtotid\n          FROM "GoalTemplateObjectiveTemplates"\n          JOIN ots_to_delete\n            ON otid = "objectiveTemplateId"\n          UNION\n          SELECT DISTINCT id gtotid\n          FROM "GoalTemplateObjectiveTemplates"\n          JOIN gts_to_delete\n            ON gtid = "goalTemplateId"\n        ),\n        deletes AS (\n          DELETE FROM "GoalTemplateObjectiveTemplates"\n          USING unified_deletes\n          WHERE id = gtotid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- Remove ObjectiveTemplates --------\n        DROP TABLE IF EXISTS deleted_objectivetemplates;\n        CREATE TEMP TABLE deleted_objectivetemplates AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplates"\n          USING ots_to_delete\n          WHERE id = otid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- Remove GoalTemplates -------------\n        DROP TABLE IF EXISTS deleted_goaltemplates;\n        CREATE TEMP TABLE deleted_goaltemplates AS\n        WITH deletes AS (\n          DELETE FROM "GoalTemplates"\n          USING gts_to_delete\n          WHERE id = gtid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n        -- Remove ARs -------------\n        DROP TABLE IF EXISTS deleted_ars;\n        CREATE TEMP TABLE deleted_ars AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReports"\n          USING ars_to_delete\n          WHERE id = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n\n        -- Stats ----------------------------\n        SELECT 1,'ars_to_delete', count(*) FROM ars_to_delete\n        UNION\n        SELECT 2,'deleted_activityreportapprovers', count(*) FROM deleted_activityreportapprovers\n        UNION\n        SELECT 3,'deleted_activityreportcollaborators', count(*) FROM deleted_activityreportcollaborators\n        UNION\n        SELECT 4,'deleted_activityreportfiles', count(*) FROM deleted_activityreportfiles\n        UNION\n        SELECT 5,'deleted_activityreportresources', count(*) FROM deleted_activityreportresources\n        UNION\n        SELECT 6,'nextsteps_to_delete', count(*) FROM nextsteps_to_delete\n        UNION\n        SELECT 7,'deleted_nextstepresources', count(*) FROM deleted_nextstepresources\n        UNION\n        SELECT 8,'deleted_nextsteps', count(*) FROM deleted_nextsteps\n        UNION\n        SELECT 9,'aros_to_delete', count(*) FROM aros_to_delete\n        UNION\n        SELECT 10,'deleted_activityreportobjectivefiles', count(*) FROM deleted_activityreportobjectivefiles\n        UNION\n        SELECT 11,'deleted_activityreportobjectiveresources', count(*) FROM deleted_activityreportobjectiveresources\n        UNION\n        SELECT 12,'deleted_activityreportobjectivetopics', count(*) FROM deleted_activityreportobjectivetopics\n        UNION\n        SELECT 12,'deleted_activityreportobjectivecourses', count(*) FROM deleted_activityreportobjectivetopics\n        UNION\n        SELECT 13,'deleted_aros', count(*) FROM deleted_aros\n        UNION\n        SELECT 14,'objectives_to_delete', count(*) FROM objectives_to_delete\n        UNION\n        SELECT 14,'deleted_objectivecollaborators', count(*) FROM objectives_to_delete\n        UNION\n        SELECT 15,'deleted_objectives', count(*) FROM deleted_objectives\n        UNION\n        SELECT 16,'args_to_delete', count(*) FROM args_to_delete\n        UNION\n        SELECT 17,'deleted_activityreportgoalfieldresponses', count(*) FROM deleted_activityreportgoalfieldresponses\n        UNION\n        SELECT 18,'deleted_activityreportgoalresources', count(*) FROM deleted_activityreportgoalresources\n        UNION\n        SELECT 19,'deleted_args', count(*) FROM deleted_args\n        UNION\n        SELECT 20,'goals_to_delete', count(*) FROM goals_to_delete\n        UNION\n        SELECT 21,'deleted_goalcollaborators', count(*) FROM deleted_goalcollaborators\n        UNION\n        SELECT 22,'deleted_goalfieldresponses', count(*) FROM deleted_goalfieldresponses\n        UNION\n        SELECT 23,'deleted_goalresources', count(*) FROM deleted_goalresources\n        UNION\n        SELECT 24,'deleted_goalstatuschanges', count(*) FROM deleted_goalstatuschanges\n        UNION\n        SELECT 25,'deleted_goals', count(*) FROM deleted_goals\n        UNION\n        SELECT 26,'ots_to_delete', count(*) FROM ots_to_delete\n        UNION\n        SELECT 27,'gts_to_delete', count(*) FROM gts_to_delete\n        UNION\n        SELECT 28,'deleted_goaltemplateobjectivetemplates', count(*) FROM deleted_goaltemplateobjectivetemplates\n        UNION\n        SELECT 29,'deleted_objectivetemplates', count(*) FROM deleted_objectivetemplates\n        UNION\n        SELECT 30,'deleted_goaltemplates', count(*) FROM deleted_goaltemplates\n        UNION\n        SELECT 31,'deleted_ars', count(*) FROM deleted_ars\n        ORDER BY 1\n        ;\n\n        -- Reset the onApprovedAR and onAR values for the goals and objectives that\n        -- were not deleted\n        --  1. Calculate correct onApprovedAR values for objectives\n        DROP TABLE IF EXISTS objectives_on_ars;\n        CREATE TEMP TABLE objectives_on_ars\n        AS\n        WITH objectivelist AS (\n        SELECT DISTINCT oid FROM aros_to_delete\n        EXCEPT\n        SELECT id FROM deleted_objectives\n        )\n        SELECT\n          o.id oid,\n          BOOL_OR(ar.id IS NOT NULL AND ar."calculatedStatus" = 'approved') on_approved_ar,\n          BOOL_OR(ar.id IS NOT NULL) on_ar\n        FROM objectivelist ol\n        JOIN "Objectives" o\n          ON ol.oid = o.id\n        LEFT JOIN "ActivityReportObjectives" aro\n          ON o.id = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n          AND ar."calculatedStatus" != 'deleted'\n        GROUP BY 1\n        ;\n        --  2. Calculate correct onApprovedAR values for goals\n        DROP TABLE IF EXISTS goals_on_ars;\n        CREATE TEMP TABLE goals_on_ars\n        AS\n        WITH goallist AS (\n        SELECT DISTINCT gid FROM args_to_delete\n        EXCEPT\n        SELECT id FROM deleted_goals\n        )\n        SELECT\n          g.id gid,\n          BOOL_OR(\n            (ar.id IS NOT NULL AND ar."calculatedStatus" = 'approved')\n            OR\n            COALESCE(ooaa.on_approved_ar,FALSE)\n          ) on_approved_ar,\n          BOOL_OR(ar.id IS NOT NULL OR COALESCE(ooaa.on_ar,FALSE)) on_ar\n        FROM goallist gl\n        JOIN "Goals" g\n          ON g.id = gl.gid\n        LEFT JOIN "ActivityReportGoals" arg\n          ON g.id = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n          AND ar."calculatedStatus" != 'deleted'\n        LEFT JOIN "Objectives" o\n          ON o."goalId" = g.id\n        LEFT JOIN objectives_on_ars ooaa\n          ON ooaa.oid = o.id\n        GROUP BY 1\n        ;\n        --  3. Calculate onApprovedAR stats for objectives\n        DROP TABLE IF EXISTS initial_obj_approved_ar_stats;\n        CREATE TEMP TABLE initial_obj_approved_ar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_objectives\n        FROM "Objectives" o\n        JOIN objectives_on_ars\n          ON o.id = oid\n        ;\n        --  4. Calculate onAR stats for objectives\n        DROP TABLE IF EXISTS initial_obj_onar_stats;\n        CREATE TEMP TABLE initial_obj_onar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_ar = "onAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_objectives\n        FROM "Objectives" o\n        JOIN objectives_on_ars\n          ON o.id = oid\n        ;\n        --  5. Calculate onApprovedAR stats for goals\n        DROP TABLE IF EXISTS initial_goal_approved_ar_stats;\n        CREATE TEMP TABLE initial_goal_approved_ar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_goals\n        FROM "Goals" g\n        JOIN goals_on_ars\n          ON g.id = gid\n        ;\n        --  6. Calculate onAR stats for goals\n        DROP TABLE IF EXISTS initial_goal_onar_stats;\n        CREATE TEMP TABLE initial_goal_onar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_ar = "onAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_goals\n        FROM "Goals" g\n        JOIN goals_on_ars\n          ON g.id = gid\n        ;\n        --  7. Update onApprovedAR values for objectives and save the results\n        DROP TABLE IF EXISTS corrected_approved_objectives;\n        CREATE TEMP TABLE corrected_approved_objectives\n        AS\n        WITH updater AS (\n          UPDATE "Objectives" o\n          SET "onApprovedAR" = on_approved_ar\n          FROM objectives_on_ars\n          WHERE o.id = oid\n            AND ("onApprovedAR" != on_approved_ar OR "onApprovedAR" IS NULL)\n          RETURNING\n            oid,\n            on_approved_ar\n        ) SELECT * FROM updater\n        ;\n        --  8. Update onAR values for objectives and save the results\n        DROP TABLE IF EXISTS corrected_onar_objectives;\n        CREATE TEMP TABLE corrected_onar_objectives\n        AS\n        WITH updater AS (\n          UPDATE "Objectives" o\n          SET "onAR" = on_ar\n          FROM objectives_on_ars\n          WHERE o.id = oid\n            AND ("onAR" != on_ar OR "onAR" IS NULL)\n          RETURNING\n            oid,\n            on_ar\n        ) SELECT * FROM updater\n        ;\n        --  9. Update onApprovedAR values for goals and save the results\n        DROP TABLE IF EXISTS corrected_approved_goals;\n        CREATE TEMP TABLE corrected_approved_goals\n        AS\n        WITH updater AS (\n          UPDATE "Goals" g\n          SET "onApprovedAR" = on_approved_ar\n          FROM goals_on_ars\n          WHERE g.id = gid\n            AND ("onApprovedAR" != on_approved_ar OR "onApprovedAR" IS NULL)\n          RETURNING\n            gid,\n            on_approved_ar\n        ) SELECT * FROM updater\n        ;\n        --  10. Update onAR values for goals and save the results\n        DROP TABLE IF EXISTS corrected_onar_goals;\n        CREATE TEMP TABLE corrected_onar_goals\n        AS\n        WITH updater AS (\n          UPDATE "Goals" g\n          SET "onAR" = on_ar\n          FROM goals_on_ars\n          WHERE g.id = gid\n            AND ("onAR" != on_ar OR "onAR" IS NULL)\n          RETURNING\n            gid,\n            on_ar\n        ) SELECT * FROM updater\n        ;\n        -- produce stats on what happened\n        --  11. Final onApprovedAR stats for objectives\n        DROP TABLE IF EXISTS final_obj_approved_ar_stats;\n        CREATE TEMP TABLE final_obj_approved_ar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_objectives\n        FROM "Objectives" o\n        JOIN objectives_on_ars\n          ON o.id = oid\n        ;\n        --  12. Final onAR stats for objectives\n        DROP TABLE IF EXISTS final_obj_onar_stats;\n        CREATE TEMP TABLE final_obj_onar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_ar = "onAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_objectives\n        FROM "Objectives" o\n        JOIN objectives_on_ars\n          ON o.id = oid\n        ;\n        --  13. Final onApprovedAR stats for goals\n        DROP TABLE IF EXISTS final_goal_approved_ar_stats;\n        CREATE TEMP TABLE final_goal_approved_ar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_goals\n        FROM "Goals" g\n        JOIN goals_on_ars\n          ON g.id = gid\n        ;\n        --  14. Final onAR stats for goals\n        DROP TABLE IF EXISTS final_goal_onar_stats;\n        CREATE TEMP TABLE final_goal_onar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_ar = "onAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_goals\n        FROM "Goals" g\n        JOIN goals_on_ars\n          ON g.id = gid\n        ;\n        -- make a nice little table to see the math\n        SELECT\n          1 AS order,\n          'objective onApprovedAR starting stats' description,\n          matching_values,\n          incorrect_values,\n          should_be_marked_true_but_isnt,\n          marked_true_but_shouldnt_be,\n          total_objectives total\n        FROM initial_obj_approved_ar_stats\n        UNION\n        SELECT\n          2,\n          'objective onApprovedAR values changed',\n          NULL,\n          NULL,\n          SUM(CASE WHEN on_approved_ar THEN 1 ELSE 0 END),\n          SUM(CASE WHEN NOT on_approved_ar THEN 1 ELSE 0 END),\n          COUNT(*)\n        FROM corrected_approved_objectives\n        UNION\n        SELECT 3,'objective onApprovedAR ending stats', * FROM final_obj_approved_ar_stats\n        UNION\n        SELECT 4,'objective onAR starting stats', * FROM initial_obj_onar_stats\n        UNION\n        SELECT\n          5,\n          'objective onAR values changed',\n          NULL,\n          NULL,\n          SUM(CASE WHEN on_ar THEN 1 ELSE 0 END),\n          SUM(CASE WHEN NOT on_ar THEN 1 ELSE 0 END),\n          COUNT(*)\n        FROM corrected_onar_objectives\n        UNION\n        SELECT 6,'objective onAR ending stats', * FROM final_obj_onar_stats\n        UNION\n        SELECT 7,'goal onApprovedAR starting stats', * FROM initial_goal_approved_ar_stats\n        UNION\n        SELECT\n          8,\n          'goal onApprovedAR values changed',\n          NULL,\n          NULL,\n          SUM(CASE WHEN on_approved_ar THEN 1 ELSE 0 END),\n          SUM(CASE WHEN NOT on_approved_ar THEN 1 ELSE 0 END),\n          COUNT(*)\n        FROM corrected_approved_goals\n        UNION\n        SELECT 9,'goal onApprovedAR ending stats', * FROM final_goal_approved_ar_stats\n        UNION\n        SELECT 10,'goal onAR starting stats', * FROM initial_goal_onar_stats\n        UNION\n        SELECT\n          11,\n          'goal onAR values changed',\n          NULL,\n          NULL,\n          SUM(CASE WHEN on_ar THEN 1 ELSE 0 END),\n          SUM(CASE WHEN NOT on_ar THEN 1 ELSE 0 END),\n          COUNT(*)\n        FROM corrected_onar_goals\n        UNION\n        SELECT 12,'goal onAR ending stats', * FROM final_goal_onar_stats\n        ORDER BY 1\n        ;
Executing (0455e3fc-ea0a-4a0b-84fb-8f2a0c3f12ea): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240708000000-remove_national_center_ars: migrated (0.269s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240708153514-goalStatusChanges-historical: migrating =======
Executing (b3b3ccfb-b2c4-41f2-90b6-3ed30d838006): START TRANSACTION;
Connection validated successfully
Executing (b3b3ccfb-b2c4-41f2-90b6-3ed30d838006): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240708153514-goalStatusChanges-historical.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b3b3ccfb-b2c4-41f2-90b6-3ed30d838006): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userName" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userName" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userName" TYPE VARCHAR(255);
Executing (b3b3ccfb-b2c4-41f2-90b6-3ed30d838006): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userRoles" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userRoles" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userRoles" TYPE VARCHAR(255)[];
Executing (b3b3ccfb-b2c4-41f2-90b6-3ed30d838006): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "reason" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "reason" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "reason" TYPE TEXT;
Executing (b3b3ccfb-b2c4-41f2-90b6-3ed30d838006): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "newStatus" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "newStatus" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "newStatus" TYPE VARCHAR(255);
Executing (b3b3ccfb-b2c4-41f2-90b6-3ed30d838006): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userId" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userId" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userId" TYPE INTEGER;
Executing (b3b3ccfb-b2c4-41f2-90b6-3ed30d838006): select create_timeseries_from_audit_log('Users');\nselect create_timeseries_from_audit_log('UserRoles');\n\nWITH\n  reason_lookup AS (\n    SELECT *\n    FROM\n      (VALUES\n        ('Not Started', 'In Progress', 'reviewReport', 'UPDATE', 'Activity Report reviewed', NULL),\n        ('Draft', 'Not Started', 'submitReport', 'UPDATE', 'Activity Report submission', NULL),\n        (NULL, 'Draft', 'createGoalsForReport', 'INSERT', 'Activity Report created', NULL),\n        ('Not Started', 'In Progress', NULL, 'UPDATE', 'Objective moved to In Progress', NULL),\n        (NULL, 'Not Started', NULL, 'INSERT', NULL, NULL),\n        (NULL, 'Draft', 'saveReport', 'INSERT', 'Activity Report created', NULL),\n        (NULL, 'In Progress', 'createGoalsForReport', 'INSERT', 'Activity Report created', NULL),\n        ('Not Started', 'Draft', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        (NULL, 'Draft', NULL, 'INSERT', NULL, NULL),\n        ('Draft', 'Not Started', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        (NULL, 'In Progress', NULL, 'INSERT', NULL, NULL),\n        ('Closed', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        (NULL, 'Not Started', 'createGoalsForReport', 'INSERT', 'Activity Report created', NULL),\n        ('Draft', 'Not Started', NULL, 'UPDATE', NULL, NULL),\n        ('In Progress', 'Draft', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        (NULL, 'In Progress', 'saveReport', 'INSERT', 'User change', NULL),\n        ('Not Started', 'In Progress', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        ('Draft', 'In Progress', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        ('In Progress', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        ('In Progress', 'Not Started', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        ('In Progress', 'Not Started', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('Not Started', 'In Progress', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('Not Started', 'Draft', 'saveReport', 'UPDATE', 'User change', NULL),\n        (NULL, 'Not Started', 'saveReport', 'INSERT', 'User change', NULL),\n        ('Draft', 'In Progress', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('In Progress', 'Closed', NULL, 'UPDATE', NULL, NULL),\n        ('In Progress', 'Draft', 'saveReport', 'UPDATE', 'User change', NULL),\n        (NULL, 'Draft', 'createGoals', 'INSERT', 'Goal creation', NULL),\n        ('Not Started', NULL, 'RUN MIGRATIONS', 'DELETE', 'Migration', NULL),\n        ('Draft', 'Not Started', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('Draft', NULL, 'RUN MIGRATIONS', 'DELETE', 'Migration', NULL),\n        ('Draft', NULL, 'createGoalsForReport', 'DELETE', 'Activity Report created', NULL),\n        ('Closed', NULL, 'RUN MIGRATIONS', 'DELETE', 'Migration', NULL),\n        ('Draft', 'Not Started', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('Closed', 'In Progress', 'mergeGoalHandler', 'UPDATE', NULL, NULL),\n        ('Draft', NULL, 'saveReport', 'DELETE', 'User change', NULL),\n        ('Draft', 'In Progress', 'reviewReport', 'UPDATE', 'Activity Report reviewed', NULL),\n        (NULL, 'In Progress', 'mergeGoalHandler', 'INSERT', NULL, NULL),\n        ('Not Started', 'Closed', NULL, 'UPDATE', 'Migration', NULL),\n        ('In Progress', 'Closed', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        ('In Progress', 'Closed', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('In Progress', NULL, 'RUN MIGRATIONS', 'DELETE', 'Migration', NULL),\n        (NULL, 'Closed', 'saveReport', 'INSERT', 'User change', NULL),\n        (NULL, 'Closed', 'createGoalsForReport', 'INSERT', 'Activity Report created', NULL),\n        ('Closed', 'In Progress', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        (NULL, 'Closed', NULL, 'INSERT', 'Migration', NULL),\n        ('In Progress', 'Not Started', NULL, 'UPDATE', NULL, NULL),\n        ('Not Started', NULL, 'saveReport', 'DELETE', 'User change', NULL),\n        ('Closed', 'In Progress', 'saveReport', 'UPDATE', 'User change', NULL),\n        (NULL, 'Draft', 'updateHandler', 'INSERT', NULL, NULL),\n        (NULL, 'In Progress', 'RUN MIGRATIONS', 'INSERT', 'Migration', NULL),\n        (NULL, 'Closed', 'mergeGoalHandler', 'INSERT', NULL, NULL),\n        ('In Progress', NULL, 'createGoalsForReport', 'DELETE', 'Activity Report created', NULL),\n        ('Not Started', 'Suspended', NULL, 'UPDATE', 'Migration', NULL),\n        ('In Progress', NULL, 'saveReport', 'DELETE', 'User change', NULL),\n        ('In Progress', 'Closed', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        ('Not Started', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        (NULL, 'Not Started', 'createGoalsFromAdmin', 'INSERT', NULL, NULL),\n        ('Not Started', NULL, NULL, 'DELETE', NULL, NULL),\n        ('Not Started', NULL, 'createGoalsForReport', 'DELETE', 'Activity Report created', NULL),\n        ('Draft', 'In Progress', 'updateHandler', 'UPDATE', NULL, NULL),\n        ('Not Started', 'In Progress', 'dup_goals_Update_Goals', 'UPDATE', 'Migration', NULL),\n        ('Suspended', 'In Progress', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        ('Closed', 'In Progress', 'reviewReport', 'UPDATE', 'Activity Report reviewed', NULL),\n        ('Draft', 'In Progress', NULL, 'UPDATE', NULL, NULL),\n        ('Closed', 'In Progress', NULL, 'UPDATE', NULL, NULL),\n        (NULL, 'Draft', 'RUN MIGRATIONS', 'UPDATE', NULL, NULL),\n        ('Suspended', 'Closed', NULL, 'UPDATE', NULL, NULL),\n        ('In Progress', 'Suspended', NULL, 'UPDATE', 'Migration', NULL),\n        ('Not Started', 'In Progress', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('Draft', NULL, NULL, 'DELETE', NULL, NULL),\n        ('Suspended', 'Closed', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        (NULL, 'Not Started', 'RUN MIGRATIONS', 'UPDATE', NULL, NULL),\n        ('Not Started', 'In Progress', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        (NULL, 'In Progress', 'updateHandler', 'INSERT', NULL, NULL),\n        ('Closed', 'In Progress', 'RUN MIGRATIONS', 'UPDATE', 'Migration', NULL),\n        ('Suspended', 'In Progress', NULL, 'UPDATE', NULL, NULL),\n        ('Suspended', 'Not Started', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        ('In Progress', NULL, NULL, 'DELETE', NULL, NULL),\n        ('Suspended', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        (NULL, 'Suspended', NULL, 'INSERT', 'Migration', NULL),\n        ('Closed', NULL, 'saveReport', 'DELETE', 'User change', NULL),\n        (NULL, 'Not Started', 'mergeGoalHandler', 'INSERT', NULL, NULL),\n        ('Draft', 'In Progress', 'dup_goals_Update_Goals', 'UPDATE', 'Migration', NULL),\n        (NULL, 'Completed', NULL, 'INSERT', 'Migration', NULL),\n        (NULL, 'Suspended', 'mergeGoalHandler', 'INSERT', NULL, NULL),\n        (NULL, 'Ceased/Suspended', NULL, 'INSERT', 'Migration', NULL),\n        ('Suspended', 'Not Started', NULL, 'UPDATE', NULL, NULL),\n        ('Not Started', 'In Progress', 'submitReport', 'UPDATE', NULL, NULL),\n        ('Draft', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        ('Closed', 'In Progress', 'unlockReport', 'UPDATE', NULL, NULL),\n        ('Suspended', 'In Progress', 'mergeGoalHandler', 'UPDATE', NULL, NULL),\n        ('Suspended', 'Draft', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('Suspended', 'In Progress', 'reviewReport', 'UPDATE', 'Activity Report reviewed', NULL),\n        ('Suspended', 'Draft', 'createGoalsForReport', 'UPDATE', NULL, NULL),\n        ('Closed', 'Not Started', NULL, 'UPDATE', NULL, NULL),\n        ('Not Started', 'Draft', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('In Progress', 'Closed', 'dup_goals_Update_Goals', 'UPDATE', 'Migration', NULL),\n        (NULL, 'Draft', NULL, 'UPDATE', NULL, NULL),\n        ('Not Started', 'In Progress', 'mergeGoalHandler', 'UPDATE', NULL, NULL),\n        ('In Progress', 'Suspended', 'dup_goals_Update_Goals', 'UPDATE', 'Migration', NULL),\n        ('In Progress', 'Not Started', 'RUN MIGRATIONS', 'UPDATE', 'Migration', NULL),\n        ('Draft', NULL, 'deleteGoal', 'DELETE', NULL, NULL),\n        ('In Progress', 'Draft', NULL, 'UPDATE', NULL, NULL),\n        ('Closed', NULL, 'createGoalsForReport', 'DELETE', NULL, NULL),\n        ('In Progress', 'Draft', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        (NULL, 'In Progress', NULL, 'UPDATE', NULL, NULL),\n        ('Suspended', 'In Progress', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('Draft', 'In Progress', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('Not Started', 'Draft', NULL, 'UPDATE', NULL, NULL),\n        ('Suspended', 'In Progress', 'createGoalsForReport', 'UPDATE', NULL, NULL)\n      ) AS tmp_data("oldStatus", "newStatus", descriptor, dml_type, reason, context)\n  ),\n    status_changes_query AS (\n        SELECT\n            zg.data_id AS "goalId",\n            CASE\n                WHEN zg.dml_as = -1 OR zg.dml_as = 0 THEN NULL\n                ELSE zg.dml_as\n            END AS "userId",\n            u.name AS "userName",\n            ARRAY_AGG(DISTINCT r.name) FILTER (WHERE r.name IS NOT NULL) AS "userRoles",\n            zg.old_row_data ->> 'status' AS "oldStatus",\n            zg.new_row_data ->> 'status' AS "newStatus",\n            COALESCE((ARRAY_AGG(TRIM(NULLIF(zg.new_row_data ->> 'closeSuspendReason', ''))))[1], rl.reason) AS "reason",\n            COALESCE((ARRAY_AGG(TRIM(NULLIF(zg.new_row_data ->> 'closeSuspendContext', ''))))[1], rl.context) AS "context",\n            zg.dml_timestamp AS "createdAt",\n            zg.dml_timestamp AS "updatedAt"\n        FROM\n            "ZALGoals" zg\n        LEFT JOIN "ZADescriptor" zd ON zg.descriptor_id = zd.id\n        LEFT JOIN "Users_timeseries" u ON zg."dml_as" = u.data_id AND zg.dml_timestamp BETWEEN u.timeband_start AND u.timeband_end\n        LEFT JOIN "UserRoles_timeseries" ur ON zg."dml_as" = ur."userId" AND zg.dml_timestamp BETWEEN ur.timeband_start AND ur.timeband_end\n        LEFT JOIN "Roles" r ON ur."roleId" = r.id\n        LEFT JOIN reason_lookup rl\n            ON (zg.old_row_data ->> 'status' = rl."oldStatus")\n            AND (zg.new_row_data ->> 'status' = rl."newStatus")\n            AND (zd.descriptor = rl.descriptor)\n            AND (zg.dml_type::text = rl.dml_type)\n        WHERE\n            (NULLIF(TRIM(zg.old_row_data ->> 'status'), '') IS NOT NULL\n                OR NULLIF(TRIM(zg.new_row_data ->> 'status'), '') IS NOT NULL)\n        GROUP BY\n            zg.data_id,\n            zg.dml_as,\n            u.name,\n            zg.dml_timestamp,\n            rl.reason,\n            rl.context,\n            zg.old_row_data ->> 'status',\n            zg.new_row_data ->> 'status'\n    )\nINSERT INTO "GoalStatusChanges"\n      ("goalId", "userId", "userName", "userRoles", "oldStatus", "newStatus", "reason", "context", "createdAt", "updatedAt")\n    SELECT\n        scq."goalId", scq."userId", scq."userName", scq."userRoles", scq."oldStatus", scq."newStatus", scq."reason", scq."context", scq."createdAt", scq."updatedAt"\n    FROM status_changes_query scq\n    LEFT JOIN "GoalStatusChanges" gsc\n    ON gsc."goalId" = scq."goalId"\n    AND gsc."oldStatus" = scq."oldStatus"\n    AND gsc."newStatus" = scq."newStatus"\n    AND gsc."createdAt" BETWEEN scq."createdAt" - interval '30 seconds' AND scq."createdAt" + interval '30 seconds'\n    LEFT JOIN "Goals" g ON g.id = scq."goalId"\n    WHERE gsc.id IS NULL\n    AND g.id IS NOT NULL;
Executing (b3b3ccfb-b2c4-41f2-90b6-3ed30d838006): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240708153514-goalStatusChanges-historical: migrated (0.119s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240715000000-fix-old-session-regions: migrating =======
Executing (730cb85a-b434-4513-bfea-ae206fd0014f): START TRANSACTION;
Connection validated successfully
Executing (730cb85a-b434-4513-bfea-ae206fd0014f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240715000000-fix-old-session-regions.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (730cb85a-b434-4513-bfea-ae206fd0014f): -- One very old session lacks the regionId value\n        -- This finds and sets it\n        DROP TABLE IF EXISTS sr_updates;\n        CREATE TEMP TABLE sr_updates\n        AS\n        WITH updater AS (\n        UPDATE "SessionReportPilots" srp\n        SET data = JSONB_SET(srp.data,'{regionId}',TO_JSONB(erp."regionId"))\n        FROM "EventReportPilots" erp\n        WHERE erp.id = srp."eventId"\n          AND srp.data->>'regionId' = ''\n        RETURNING\n          srp.id srpid,\n          erp."regionId"\n        ) SELECT * FROM updater\n        ;\n\n        SELECT * FROM sr_updates;\n        -- Looks like:\n        ----------------------\n        --  srpid | regionId\n        -- -------+----------\n        --      2 |        3
Executing (730cb85a-b434-4513-bfea-ae206fd0014f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240715000000-fix-old-session-regions: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240801000000-merge_duplicate_args: migrating =======
Executing (5f3de9b9-3e3b-454a-8ef2-ba00e7656006): START TRANSACTION;
Connection validated successfully
Executing (5f3de9b9-3e3b-454a-8ef2-ba00e7656006): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240801000000-merge_duplicate_args.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5f3de9b9-3e3b-454a-8ef2-ba00e7656006): -- Call the preexisting function for deduping args\n      -- created in 20240520000000-merge_duplicate_args.js\n      SELECT dedupe_args();\n\n      -- The expected results look like:\n      -- op_order |     op_name     | record_cnt\n      ------------+-----------------+------------\n      --        1 | relinked_argfrs |          0\n      --        2 | deleted_argfrs  |          0\n      --        3 | relinked_argrs  |          0\n      --        4 | deleted_argrs   |          0\n      --        5 | deleted_args    |         66\n      SELECT\n        1 op_order,\n        'relinked_argfrs' op_name,\n        COUNT(*) record_cnt\n      FROM relinked_argfrs\n      UNION SELECT 2, 'deleted_argfrs', COUNT(*) FROM deleted_argfrs\n      UNION SELECT 3, 'relinked_argrs', COUNT(*) FROM relinked_argrs\n      UNION SELECT 4, 'deleted_argrs', COUNT(*) FROM deleted_argrs\n      UNION SELECT 5, 'deleted_args', COUNT(*) FROM deleted_args\n      ORDER BY 1;
Executing (5f3de9b9-3e3b-454a-8ef2-ba00e7656006): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240801000000-merge_duplicate_args: migrated (0.052s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240802204120-repair-multiple-aros: migrating =======
Executing (832b30e3-a74b-4f2b-a74b-cdf6688b48de): START TRANSACTION;
Connection validated successfully
Executing (832b30e3-a74b-4f2b-a74b-cdf6688b48de): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240802204120-repair-multiple-aros.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (832b30e3-a74b-4f2b-a74b-cdf6688b48de): DELETE FROM "ActivityReportObjectiveFiles" WHERE "activityReportObjectiveId" IN (232020, 232022);\n        DELETE FROM "ActivityReportObjectives" WHERE id IN (232020, 232022)
Executing (832b30e3-a74b-4f2b-a74b-cdf6688b48de): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240802204120-repair-multiple-aros: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240805181157-remove-commlog-4849: migrating =======
Executing (da0e7435-5570-4939-839b-217558c0ce03): START TRANSACTION;
Connection validated successfully
Executing (da0e7435-5570-4939-839b-217558c0ce03): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240805181157-remove-commlog-4849.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (da0e7435-5570-4939-839b-217558c0ce03): DELETE FROM "CommunicationLogs" WHERE id = 4849;
Executing (da0e7435-5570-4939-839b-217558c0ce03): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240805181157-remove-commlog-4849: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240807172716-reset-session-completions: migrating =======
Executing (f58183f4-23b0-4adc-8c91-110cf2c35329): START TRANSACTION;
Connection validated successfully
Executing (f58183f4-23b0-4adc-8c91-110cf2c35329): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240807172716-reset-session-completions.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f58183f4-23b0-4adc-8c91-110cf2c35329): -- Four sessions are not editable because they have already been\n        -- marked complete by POC. A support request has asked us to\n        -- revert this completion status so that they can be edited.\n\n        -- To do this, we set:\n\n        -- * pocComplete to false\n        -- * pocCompleteId to ""\n        -- * pocCompleteDate to ""\n\n        -- ...on both the event and the session\n\n        UPDATE "EventReportPilots"\n        SET data = jsonb_set(jsonb_set(jsonb_set(data, '{pocComplete}', 'false'), '{pocCompleteId}', '""'), '{pocCompleteDate}', '""')\n        WHERE id = 39;\n\n        UPDATE "SessionReportPilots"\n        SET data = jsonb_set(\n            jsonb_set(\n                jsonb_set(data, '{pocCompleteId}', '""'),\n                '{pocCompleteDate}', '""'\n            ),\n            '{event, data, pocComplete}', 'false'\n        )\n        WHERE data ->> 'id' IN ('74', '101', '92', '102');
Executing (f58183f4-23b0-4adc-8c91-110cf2c35329): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240807172716-reset-session-completions: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240807195655-remove-tr-goals: migrating =======
Executing (5f20608b-cb1b-4ad5-85b4-e059165c7f54): START TRANSACTION;
Connection validated successfully
Executing (5f20608b-cb1b-4ad5-85b4-e059165c7f54): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240807195655-remove-tr-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5f20608b-cb1b-4ad5-85b4-e059165c7f54): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (5f20608b-cb1b-4ad5-85b4-e059165c7f54): SELECT "ZAFRemoveAuditingOnTable"('EventReportPilotGoals');
Executing (5f20608b-cb1b-4ad5-85b4-e059165c7f54): DROP TABLE IF EXISTS "ZALEventReportPilotGoals";
Executing (5f20608b-cb1b-4ad5-85b4-e059165c7f54): DROP TABLE IF EXISTS "EventReportPilotGoals";
Executing (5f20608b-cb1b-4ad5-85b4-e059165c7f54): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (5f20608b-cb1b-4ad5-85b4-e059165c7f54): -- Goal 83050 is explicitly excluded from this migration. Decided by OHS during refinement on 8/7/2024.\n        -- Force failure if any of these TR goals have been used on an AR.\n        -- Credit to Nathan for this one.\n        SELECT 1/(LEAST(COUNT(*), 1) - 1)\n        FROM "ActivityReportGoals" arg\n        WHERE "goalId" IN (\n          SELECT "id"\n          FROM "Goals"\n          WHERE "createdVia"::text = 'tr'\n          AND "id" != 83050\n        );\n\n        -- Remove GoalSimilarityGroupGoals for Goals that were createdVia 'tr', except for goal 83050:\n        -- The column on this table for goal id is "goalId":\n        DELETE FROM "GoalSimilarityGroupGoals"\n        WHERE "goalId" IN (\n          SELECT "id"\n          FROM "Goals"\n          WHERE "createdVia"::text = 'tr' AND "id" != 83050\n        );\n\n        -- Remove GoalStatusChanges for Goals that were createdVia 'tr':\n        DELETE FROM "GoalStatusChanges"\n        WHERE "goalId" IN (\n          SELECT "id"\n          FROM "Goals"\n          WHERE "createdVia"::text = 'tr' AND "id" != 83050\n        );\n\n        -- Remove Objectives for Goals that were createdVia 'tr':\n        DELETE FROM "Objectives"\n        WHERE "goalId" IN (\n          SELECT "id"\n          FROM "Goals"\n          WHERE "createdVia"::text = 'tr' AND "id" != 83050\n        );\n\n        -- Remove goals that were createdVia 'tr':\n        DELETE FROM "Goals"\n        WHERE "createdVia"::text = 'tr' AND id != 83050;
Executing (5f20608b-cb1b-4ad5-85b4-e059165c7f54): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240807195655-remove-tr-goals: migrated (0.288s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240808190905-add-manual_mark_goals_similar: migrating =======
Executing (2c51ae54-09b2-4fa5-8991-9c8b43c38eb8): START TRANSACTION;
Connection validated successfully
Executing (2c51ae54-09b2-4fa5-8991-9c8b43c38eb8): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240808190905-add-manual_mark_goals_similar.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (2c51ae54-09b2-4fa5-8991-9c8b43c38eb8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240808190905-add-manual_mark_goals_similar: migrated (0.033s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240815000000-remove-dup-aros-via-uploadHandler: migrating =======
Executing (3a958b0a-055d-483a-bc76-f99c09d1949b): START TRANSACTION;
Connection validated successfully
Executing (3a958b0a-055d-483a-bc76-f99c09d1949b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240815000000-remove-dup-aros-via-uploadHandler.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3a958b0a-055d-483a-bc76-f99c09d1949b): -- This dedupes the AROs for three ARs (46116, 46266, 45907) in active support cases\n        -- other ARO deduping will come in a subsequent migration after the\n        -- team has reached agreement on how to handle ttaProvided values\n        -- Drop temporary tables if they exist\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        DROP TABLE IF EXISTS temp_reduced_aro;\n\n        DROP TABLE IF EXISTS temp_updated_topics;\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        DROP TABLE IF EXISTS temp_deleted_topics;\n\n        DROP TABLE IF EXISTS temp_updated_courses;\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        DROP TABLE IF EXISTS temp_deleted_courses;\n\n        DROP TABLE IF EXISTS temp_updated_files;\n        DROP TABLE IF EXISTS temp_inserted_files;\n        DROP TABLE IF EXISTS temp_deleted_files;\n\n        DROP TABLE IF EXISTS temp_updated_resources;\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        DROP TABLE IF EXISTS temp_deleted_resources;\n\n        DROP TABLE IF EXISTS temp_updated_objectives;\n        DROP TABLE IF EXISTS temp_inserted_objectives;\n        DROP TABLE IF EXISTS temp_deleted_objectives;\n\n\n        -- Create temporary table for dup_aro_sets\n        CREATE TEMP TABLE temp_dup_aro_sets AS\n        SELECT\n          (zaro.new_row_data ->> 'activityReportId')::int "activityReportId",\n          (zaro.new_row_data ->> 'objectiveId')::int "objectiveId",\n          min(zaro.dml_timestamp) "min_dml_timestamp",\n          max(zaro.dml_timestamp) "max_dml_timestamp",\n          COUNT(zaro.id) "count_id",\n          array_agg(zaro.data_id ORDER BY zaro.data_id ASC) "aroIds",\n          array_agg(DISTINCT zd.descriptor) "descriptors"\n        FROM "ZALActivityReportObjectives" zaro\n        JOIN "ZADescriptor" zd\n        ON zaro.descriptor_id = zd.id\n        LEFT JOIN "ZALActivityReportObjectives" zarod\n        ON zaro.data_id = zarod.data_id\n        AND zarod.dml_type = 'DELETE'\n            WHERE zaro.dml_type = 'INSERT'\n        AND zarod.id IS NULL\n        AND (zaro.new_row_data ->> 'activityReportId')::int in (46116, 46266, 45907)\n        GROUP BY 1,2\n        HAVING COUNT(zaro.id) > 1\n        AND array_position(array_agg(DISTINCT zd.descriptor), 'uploadHandler') IS NOT NULL\n        ORDER BY 3 DESC;\n\n        -- Create temporary table for reduced_arot\n        CREATE TEMP TABLE temp_reduced_arot AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arot."topicId",\n          MIN(arot."createdAt") "createdAt",\n          MAX(arot."updatedAt") "updatedAt",\n          ARRAY_AGG(arot.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON arot."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_updated_topics AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveTopics" t\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arot s\n            WHERE t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            RETURNING t.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_inserted_topics AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveTopics" (\n                "activityReportObjectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."topicId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arot s\n            LEFT JOIN "ActivityReportObjectiveTopics" t\n            ON t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            WHERE t."activityReportObjectiveId" IS NULL\n            AND t."topicId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_deleted_topics AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveTopics" t\n            USING temp_reduced_arot r\n            WHERE t."topicId" = r."topicId"\n            AND t.id = ANY (r.ids)\n            AND t."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING t.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aroc\n        CREATE TEMP TABLE temp_reduced_aroc AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aroc."courseId",\n          MIN(aroc."createdAt") "createdAt",\n          MAX(aroc."updatedAt") "updatedAt",\n          ARRAY_AGG(aroc.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON aroc."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_updated_courses AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveCourses" c\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aroc s\n            WHERE c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            RETURNING c.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_inserted_courses AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveCourses" (\n                "activityReportObjectiveId",\n                "courseId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."courseId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aroc s\n            LEFT JOIN "ActivityReportObjectiveCourses" c\n            ON c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            WHERE c."activityReportObjectiveId" IS NULL\n            AND c."courseId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_deleted_courses AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveCourses" c\n            USING temp_reduced_aroc r\n            WHERE c."courseId" = r."courseId"\n            AND c.id = ANY (r.ids)\n            AND c."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING c.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_arof\n        CREATE TEMP TABLE temp_reduced_arof AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arof."fileId",\n          MIN(arof."createdAt") "createdAt",\n          MAX(arof."updatedAt") "updatedAt",\n          ARRAY_AGG(arof.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON arof."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_updated_files AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveFiles" f\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arof s\n            WHERE f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            RETURNING f.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_inserted_files AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveFiles" (\n                "activityReportObjectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."fileId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arof s\n            LEFT JOIN "ActivityReportObjectiveFiles" f\n            ON f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            WHERE f."activityReportObjectiveId" IS NULL\n            AND f."fileId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_deleted_files AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveFiles" f\n            USING temp_reduced_arof r\n            WHERE f."fileId" = r."fileId"\n            AND f.id = ANY (r.ids)\n            AND f."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING f.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_aror\n        CREATE TEMP TABLE temp_reduced_aror AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aror."resourceId",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          ARRAY_AGG(aror.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveResources" aror\n        ON aror."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_updated_resources AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveResources" r\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aror s\n            WHERE r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            RETURNING r.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_inserted_resources AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveResources" (\n                "activityReportObjectiveId",\n                "resourceId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."resourceId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aror s\n            LEFT JOIN "ActivityReportObjectiveResources" r\n            ON r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            WHERE r."activityReportObjectiveId" IS NULL\n            AND r."resourceId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_deleted_resources AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveResources" r\n            USING temp_reduced_aror t\n            WHERE r."resourceId" = t."resourceId"\n            AND r.id = ANY (t.ids)\n            AND r."activityReportObjectiveId" != t."activityReportObjectiveId"\n            RETURNING r.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aro\n        CREATE TEMP TABLE temp_reduced_aro AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] id,\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          (ARRAY_AGG(aro."ttaProvided" ORDER BY LENGTH(aro."ttaProvided") DESC))[1] "ttaProvided",\n          (ARRAY_AGG(aro."title" ORDER BY LENGTH(aro."title") DESC))[1] "title",\n          CASE MAX(CASE\n              WHEN aro.status = 'Complete' THEN 4\n              WHEN aro.status = 'Suspended' THEN 3\n              WHEN aro.status = 'In Progress' THEN 2\n              WHEN aro.status = 'Not Started' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Complete'\n              WHEN 3 THEN 'Suspended'\n              WHEN 2 THEN 'In Progress'\n              WHEN 1 THEN 'Not Started'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS status,\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(aro."closeSuspendReason" ORDER BY LENGTH(aro."closeSuspendReason"::text) DESC))[1] "closeSuspendReason",\n          (ARRAY_AGG(aro."closeSuspendContext" ORDER BY LENGTH(aro."closeSuspendContext") DESC))[1] "closeSuspendContext",\n          (ARRAY_AGG(aro."originalObjectiveId" ORDER BY aro."originalObjectiveId"))[1] "originalObjectiveId",\n          CASE MAX(CASE\n              WHEN aro."supportType" = 'Maintaining' THEN 4\n              WHEN aro."supportType" = 'Implementing' THEN 3\n              WHEN aro."supportType" = 'Introducing' THEN 2\n              WHEN aro."supportType" = 'Planning' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Maintaining'\n              WHEN 3 THEN 'Implementing'\n              WHEN 2 THEN 'Introducing'\n              WHEN 1 THEN 'Planning'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS "supportType",\n          bool_or(aro."objectiveCreatedHere") "objectiveCreatedHere",\n          array_agg(aro.id order by aro.id) "aroIds"\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectives" aro\n        ON aro.id = ANY (das."aroIds")\n        GROUP BY 1,2,3;\n\n        -- Update matching records in ActivityReportObjectives\n        CREATE TEMP TABLE temp_updated_objectives AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectives" o\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt",\n                "ttaProvided" = s."ttaProvided",\n                "title" = s."title",\n                "status" = s."status",\n                "arOrder" = s."arOrder",\n                "closeSuspendReason" = s."closeSuspendReason",\n                "closeSuspendContext" = s."closeSuspendContext",\n                "originalObjectiveId" = s."originalObjectiveId",\n                "supportType" = s."supportType"::"enum_ActivityReportObjectives_supportType",\n                "objectiveCreatedHere" = s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            WHERE o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            RETURNING o.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectives\n        -- There should never be an INSERT performed here, but the code is present to complete the structure UID structure\n        CREATE TEMP TABLE temp_inserted_objectives AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectives" (\n                "activityReportId",\n                "objectiveId",\n                "id",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided",\n                "title",\n                "status",\n                "arOrder",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "originalObjectiveId",\n                "supportType",\n                "objectiveCreatedHere"\n            )\n            SELECT\n                s."activityReportId",\n                s."objectiveId",\n                s.id,\n                s."createdAt",\n                s."updatedAt",\n                s."ttaProvided",\n                s."title",\n                s."status",\n                s."arOrder",\n                s."closeSuspendReason",\n                s."closeSuspendContext",\n                s."originalObjectiveId",\n                s."supportType"::"enum_ActivityReportObjectives_supportType",\n                s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            LEFT JOIN "ActivityReportObjectives" o\n            ON o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            WHERE o.id IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectives\n        CREATE TEMP TABLE temp_deleted_objectives AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectives" o\n            USING temp_reduced_aro r\n            WHERE o."objectiveId" = r."objectiveId"\n            AND o."activityReportId" = r."activityReportId"\n            AND o.id = ANY (ARRAY_REMOVE(r."aroIds", r."aroIds"[1]))\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- results\n        SELECT\n            'ActivityReportObjectiveTopics' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_topics) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_topics) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_topics) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveCourses' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_courses) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_courses) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_courses) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveFiles' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_files) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_files) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_files) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveResources' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_resources) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_resources) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_resources) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectives' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_objectives) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_objectives) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_objectives) d;\n\n        -- Drop temporary tables at the end\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        DROP TABLE IF EXISTS temp_reduced_aro;\n\n        DROP TABLE IF EXISTS temp_updated_topics;\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        DROP TABLE IF EXISTS temp_deleted_topics;\n\n        DROP TABLE IF EXISTS temp_updated_courses;\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        DROP TABLE IF EXISTS temp_deleted_courses;\n\n        DROP TABLE IF EXISTS temp_updated_files;\n        DROP TABLE IF EXISTS temp_inserted_files;\n        DROP TABLE IF EXISTS temp_deleted_files;\n\n        DROP TABLE IF EXISTS temp_updated_resources;\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        DROP TABLE IF EXISTS temp_deleted_resources;\n\n        DROP TABLE IF EXISTS temp_updated_objectives;\n        DROP TABLE IF EXISTS temp_inserted_objectives;\n        DROP TABLE IF EXISTS temp_deleted_objectives;
Executing (3a958b0a-055d-483a-bc76-f99c09d1949b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240815000000-remove-dup-aros-via-uploadHandler: migrated (0.110s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240827142432-update-missing-fei-templates: migrating =======
Executing (865f7a8a-e480-41d4-8372-5dfbc8b049e3): START TRANSACTION;
Connection validated successfully
Executing (865f7a8a-e480-41d4-8372-5dfbc8b049e3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240827142432-update-missing-fei-templates.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (865f7a8a-e480-41d4-8372-5dfbc8b049e3): UPDATE "Goals"\n        SET "goalTemplateId" = 19017\n        WHERE "goalTemplateId" is null AND "id" IN (\n          SELECT \n              g.id  \n          FROM "Goals" g \n          INNER JOIN "GoalFieldResponses" gfr ON g.id = gfr."goalId"\n          INNER JOIN "GoalTemplateFieldPrompts" gfft ON gfr."goalTemplateFieldPromptId" = gfft.id\n          WHERE g."goalTemplateId" is null AND gfft."goalTemplateId" = 19017\n        );
Executing (865f7a8a-e480-41d4-8372-5dfbc8b049e3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240827142432-update-missing-fei-templates: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240828171934-add-new-mailer-action: migrating =======
Executing (eadad8cd-c5b2-4a97-85b5-5d0d158341f2): START TRANSACTION;
Connection validated successfully
Executing (eadad8cd-c5b2-4a97-85b5-5d0d158341f2): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240828171934-add-new-mailer-action.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportTaskDueNotifications';
Connection validated successfully
Executing (eadad8cd-c5b2-4a97-85b5-5d0d158341f2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240828171934-add-new-mailer-action: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240830000000-merge-dup-aros: migrating =======
Executing (8f072afd-56eb-4026-af9f-57e6bb9bdc3c): START TRANSACTION;
Connection validated successfully
Executing (8f072afd-56eb-4026-af9f-57e6bb9bdc3c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240830000000-merge-dup-aros.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8f072afd-56eb-4026-af9f-57e6bb9bdc3c): -- This dedupes all remaining AROs. The logic is the same as used for previous\n        -- support requests, except the latest TTA Provided that is not zero length \n        -- is selected with one exception. If an update is shorter than 10 characters\n        -- and the maximum TTA Provided on an ARO is more than 8x (e.g. 80 characters)\n        -- times as long as that update, then the update is sorted lower. Though this\n        -- case is not seen in the data upon last inspection , this prevents default\n        -- updates from outranking real updates if that case crops up before deployment.\n\n        -- We're not adding a unique constraint right now because it causes test failures.\n        \n        -- Drop temporary tables if they exist\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        DROP TABLE IF EXISTS temp_reduced_aro;\n\n        DROP TABLE IF EXISTS temp_updated_topics;\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        DROP TABLE IF EXISTS temp_deleted_topics;\n\n        DROP TABLE IF EXISTS temp_updated_courses;\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        DROP TABLE IF EXISTS temp_deleted_courses;\n\n        DROP TABLE IF EXISTS temp_updated_files;\n        DROP TABLE IF EXISTS temp_inserted_files;\n        DROP TABLE IF EXISTS temp_deleted_files;\n\n        DROP TABLE IF EXISTS temp_updated_resources;\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        DROP TABLE IF EXISTS temp_deleted_resources;\n\n        DROP TABLE IF EXISTS temp_updated_objectives;\n        DROP TABLE IF EXISTS temp_inserted_objectives;\n        DROP TABLE IF EXISTS temp_deleted_objectives;\n\n\n        -- Create temporary table for dup_aro_sets\n        CREATE TEMP TABLE temp_dup_aro_sets AS\n        WITH dupe_aro_pairs AS (\n        SELECT\n          "activityReportId" arid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        GROUP BY 1,2\n        HAVING COUNT(id) > 1\n        ),\n        dupe_aros AS (\n        SELECT\n          arid,\n          oid,\n          id aroid\n        FROM "ActivityReportObjectives"\n        JOIN dupe_aro_pairs\n          ON "activityReportId" = arid\n          AND "objectiveId" = oid\n        )\n        SELECT\n          arid "activityReportId",\n          oid "objectiveId",\n          min(zaro.dml_timestamp) "min_dml_timestamp",\n          max(zaro.dml_timestamp) "max_dml_timestamp",\n          COUNT(zaro.id) "count_id",\n          array_agg(zaro.data_id ORDER BY zaro.data_id ASC) "aroIds"\n        FROM dupe_aros\n        JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = aroid\n        GROUP BY 1,2\n        ORDER BY 3 DESC;\n\n        -- Create temporary table for reduced_arot\n        CREATE TEMP TABLE temp_reduced_arot AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arot."topicId",\n          MIN(arot."createdAt") "createdAt",\n          MAX(arot."updatedAt") "updatedAt",\n          ARRAY_AGG(arot.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON arot."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_updated_topics AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveTopics" t\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arot s\n            WHERE t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            RETURNING t.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_inserted_topics AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveTopics" (\n                "activityReportObjectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."topicId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arot s\n            LEFT JOIN "ActivityReportObjectiveTopics" t\n            ON t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            WHERE t."activityReportObjectiveId" IS NULL\n            AND t."topicId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_deleted_topics AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveTopics" t\n            USING temp_reduced_arot r\n            WHERE t."topicId" = r."topicId"\n            AND t.id = ANY (r.ids)\n            AND t."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING t.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aroc\n        CREATE TEMP TABLE temp_reduced_aroc AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aroc."courseId",\n          MIN(aroc."createdAt") "createdAt",\n          MAX(aroc."updatedAt") "updatedAt",\n          ARRAY_AGG(aroc.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON aroc."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_updated_courses AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveCourses" c\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aroc s\n            WHERE c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            RETURNING c.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_inserted_courses AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveCourses" (\n                "activityReportObjectiveId",\n                "courseId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."courseId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aroc s\n            LEFT JOIN "ActivityReportObjectiveCourses" c\n            ON c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            WHERE c."activityReportObjectiveId" IS NULL\n            AND c."courseId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_deleted_courses AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveCourses" c\n            USING temp_reduced_aroc r\n            WHERE c."courseId" = r."courseId"\n            AND c.id = ANY (r.ids)\n            AND c."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING c.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_arof\n        CREATE TEMP TABLE temp_reduced_arof AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arof."fileId",\n          MIN(arof."createdAt") "createdAt",\n          MAX(arof."updatedAt") "updatedAt",\n          ARRAY_AGG(arof.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON arof."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_updated_files AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveFiles" f\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arof s\n            WHERE f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            RETURNING f.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_inserted_files AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveFiles" (\n                "activityReportObjectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."fileId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arof s\n            LEFT JOIN "ActivityReportObjectiveFiles" f\n            ON f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            WHERE f."activityReportObjectiveId" IS NULL\n            AND f."fileId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_deleted_files AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveFiles" f\n            USING temp_reduced_arof r\n            WHERE f."fileId" = r."fileId"\n            AND f.id = ANY (r.ids)\n            AND f."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING f.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_aror\n        CREATE TEMP TABLE temp_reduced_aror AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aror."resourceId",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          ARRAY_AGG(aror.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveResources" aror\n        ON aror."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_updated_resources AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveResources" r\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aror s\n            WHERE r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            RETURNING r.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_inserted_resources AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveResources" (\n                "activityReportObjectiveId",\n                "resourceId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."resourceId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aror s\n            LEFT JOIN "ActivityReportObjectiveResources" r\n            ON r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            WHERE r."activityReportObjectiveId" IS NULL\n            AND r."resourceId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_deleted_resources AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveResources" r\n            USING temp_reduced_aror t\n            WHERE r."resourceId" = t."resourceId"\n            AND r.id = ANY (t.ids)\n            AND r."activityReportObjectiveId" != t."activityReportObjectiveId"\n            RETURNING r.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aro\n        CREATE TEMP TABLE temp_reduced_aro AS\n        WITH ttap_upd_seq AS ( -- get the update list for each aro set\n        SELECT\n          new_row_data->>'ttaProvided' ttap,\n          das."aroIds"[1] dest_aroid,\n          MAX(LENGTH(new_row_data->>'ttaProvided')) OVER (PARTITION BY "activityReportId", "objectiveId") maxlength,\n          zaro.id zaroid\n        FROM temp_dup_aro_sets das\n        JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = ANY("aroIds")\n        WHERE  new_row_data->'ttaProvided' IS NOT NULL\n        ),\n        ranked_ttap_upd AS ( -- rank the update list per the criteria\n        SELECT\n          ttap,\n          dest_aroid,\n          zaroid,\n          maxlength,\n          ROW_NUMBER() OVER (\n            PARTITION BY dest_aroid\n            ORDER BY (LENGTH(ttap) < 10 AND (maxlength / (LENGTH(ttap)+1)) > 8), zaroid DESC\n          ) select_order\n        FROM ttap_upd_seq\n        )\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          rtu.dest_aroid id,\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          rtu.ttap "ttaProvided",\n          (ARRAY_AGG(aro."title" ORDER BY LENGTH(aro."title") DESC))[1] "title",\n          CASE MAX(CASE\n              WHEN aro.status = 'Complete' THEN 4\n              WHEN aro.status = 'Suspended' THEN 3\n              WHEN aro.status = 'In Progress' THEN 2\n              WHEN aro.status = 'Not Started' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Complete'\n              WHEN 3 THEN 'Suspended'\n              WHEN 2 THEN 'In Progress'\n              WHEN 1 THEN 'Not Started'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS status,\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(aro."closeSuspendReason" ORDER BY LENGTH(aro."closeSuspendReason"::text) DESC))[1] "closeSuspendReason",\n          (ARRAY_AGG(aro."closeSuspendContext" ORDER BY LENGTH(aro."closeSuspendContext") DESC))[1] "closeSuspendContext",\n          (ARRAY_AGG(aro."originalObjectiveId" ORDER BY aro."originalObjectiveId"))[1] "originalObjectiveId",\n          CASE MAX(CASE\n              WHEN aro."supportType" = 'Maintaining' THEN 4\n              WHEN aro."supportType" = 'Implementing' THEN 3\n              WHEN aro."supportType" = 'Introducing' THEN 2\n              WHEN aro."supportType" = 'Planning' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Maintaining'\n              WHEN 3 THEN 'Implementing'\n              WHEN 2 THEN 'Introducing'\n              WHEN 1 THEN 'Planning'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS "supportType",\n          bool_or(aro."objectiveCreatedHere") "objectiveCreatedHere",\n          array_agg(aro.id order by aro.id) "aroIds"\n        FROM temp_dup_aro_sets das\n        JOIN ranked_ttap_upd rtu\n          ON rtu.select_order = 1\n          AND rtu.dest_aroid = ANY (das."aroIds")\n        JOIN "ActivityReportObjectives" aro\n          ON aro.id = ANY (das."aroIds")\n        GROUP BY 1,2,3,6;\n\n        -- Update matching records in ActivityReportObjectives\n        CREATE TEMP TABLE temp_updated_objectives AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectives" o\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt",\n                "ttaProvided" = s."ttaProvided",\n                "title" = s."title",\n                "status" = s."status",\n                "arOrder" = s."arOrder",\n                "closeSuspendReason" = s."closeSuspendReason",\n                "closeSuspendContext" = s."closeSuspendContext",\n                "originalObjectiveId" = s."originalObjectiveId",\n                "supportType" = s."supportType"::"enum_ActivityReportObjectives_supportType",\n                "objectiveCreatedHere" = s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            WHERE o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            RETURNING o.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectives\n        -- There should never be an INSERT performed here, but the code is present to complete the structure UID structure\n        CREATE TEMP TABLE temp_inserted_objectives AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectives" (\n                "activityReportId",\n                "objectiveId",\n                "id",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided",\n                "title",\n                "status",\n                "arOrder",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "originalObjectiveId",\n                "supportType",\n                "objectiveCreatedHere"\n            )\n            SELECT\n                s."activityReportId",\n                s."objectiveId",\n                s.id,\n                s."createdAt",\n                s."updatedAt",\n                s."ttaProvided",\n                s."title",\n                s."status",\n                s."arOrder",\n                s."closeSuspendReason",\n                s."closeSuspendContext",\n                s."originalObjectiveId",\n                s."supportType"::"enum_ActivityReportObjectives_supportType",\n                s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            LEFT JOIN "ActivityReportObjectives" o\n            ON o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            WHERE o.id IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectives\n        CREATE TEMP TABLE temp_deleted_objectives AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectives" o\n            USING temp_reduced_aro r\n            WHERE o."objectiveId" = r."objectiveId"\n            AND o."activityReportId" = r."activityReportId"\n            AND o.id = ANY (ARRAY_REMOVE(r."aroIds", r."aroIds"[1]))\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- results\n        SELECT\n            'ActivityReportObjectiveTopics' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_topics) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_topics) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_topics) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveCourses' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_courses) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_courses) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_courses) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveFiles' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_files) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_files) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_files) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveResources' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_resources) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_resources) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_resources) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectives' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_objectives) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_objectives) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_objectives) d;\n\n        -- Drop temporary tables at the end\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        DROP TABLE IF EXISTS temp_reduced_aro;\n\n        DROP TABLE IF EXISTS temp_updated_topics;\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        DROP TABLE IF EXISTS temp_deleted_topics;\n\n        DROP TABLE IF EXISTS temp_updated_courses;\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        DROP TABLE IF EXISTS temp_deleted_courses;\n\n        DROP TABLE IF EXISTS temp_updated_files;\n        DROP TABLE IF EXISTS temp_inserted_files;\n        DROP TABLE IF EXISTS temp_deleted_files;\n\n        DROP TABLE IF EXISTS temp_updated_resources;\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        DROP TABLE IF EXISTS temp_deleted_resources;\n\n        DROP TABLE IF EXISTS temp_updated_objectives;\n        DROP TABLE IF EXISTS temp_inserted_objectives;\n        DROP TABLE IF EXISTS temp_deleted_objectives;
Executing (8f072afd-56eb-4026-af9f-57e6bb9bdc3c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240830000000-merge-dup-aros: migrated (0.096s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240902000000-link-historical-objectives-to-templates: migrating =======
Executing (966c86cd-1f82-4167-9fb0-066c25bdd468): START TRANSACTION;
Connection validated successfully
Executing (966c86cd-1f82-4167-9fb0-066c25bdd468): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240902000000-link-historical-objectives-to-templates.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (966c86cd-1f82-4167-9fb0-066c25bdd468): -- This starts by deduping Goal and Objective templates so that re-linking operations\n        -- will be deterministic and won't create a greater mess. This involves:\n        --   - Collecting the list of templates to merge\n        --   - Failing the transaction if any goal templates with question prompts (e.g. root cause)\n        --     are slated to be merged away. If those ever appear they need an extra look\n        --   - Finding GoalTemplateObjectiveTemplates that would simply create duplicate\n        --     obj-template,goal-template pairs and deleting from GoalTemplateObjectiveTemplates\n        --     rather than updating those\n        --   - Updating GoalTemplateObjectiveTemplates to the new obj templates\n        --   - Updating GoalTemplateObjectiveTemplates to the new goal templates\n        --   - Redirecting GoalTemplateResources to their new template\n        --   - Update any goals or objectives to the merged templates\n        --   - Delete the duplicate templates\n        -- Many of these steps are empty but all the steps are included in case either something changes\n        -- between when this is written and when it's run, or if it gets rerun in the future\n\n        -- THE MAIN WORK:\n        -- This finds all objectives that have titles long enough to be meaningful but\n        -- are not linked to a matching template and marks whether they're created on an\n        -- RTR and what the most advanced status of a connected AR is. Then every\n        -- Objective that is on at least one AR that has reached 'submitted' status\n        -- is:\n        --   - Converted to a template and inserted if there is no matching template\n        --   - Updated to point to the new or existing template\n        -- A query at the end shows the movement. Note that some "unmatched" numbers will\n        -- grow slightly because the template to which they *would* match has been interted\n        -- but the objective wasn't associated with any ARs with sufficiently advanced status\n\n        -- Also doing the same for Goals\n\n        -- Deduping templates ------------------------------------------------------------------\n        -- Create the mappings\n        DROP TABLE IF EXISTS obj_template_mapping;\n        CREATE TEMP TABLE obj_template_mapping\n        AS\n        WITH hash_sets AS (\n        SELECT\n          hash,\n          "regionId" region,\n          MIN(id) target_otid,\n          MIN("createdAt") hash_created_at,\n          MAX("updatedAt") hash_updated_at,\n          MAX("lastUsed") hash_last_used,\n          COUNT(*)\n        FROM "ObjectiveTemplates"\n        GROUP BY 1,2\n        HAVING COUNT(*) > 1\n        )\n        SELECT\n          id otid,\n          target_otid,\n          hash_created_at,\n          hash_updated_at,\n          hash_last_used\n        FROM hash_sets hs\n        JOIN "ObjectiveTemplates" ot\n          ON hs.hash = ot.hash\n          AND hs.region = ot."regionId"\n        ;\n\n        DROP TABLE IF EXISTS goal_template_mapping;\n        CREATE TEMP TABLE goal_template_mapping\n        AS\n        WITH hash_sets AS (\n        SELECT\n          hash,\n          "regionId" region,\n          MIN(id) target_gtid,\n          MIN("createdAt") hash_created_at,\n          MAX("updatedAt") hash_updated_at,\n          MAX("lastUsed") hash_last_used,\n          COUNT(*)\n        FROM "GoalTemplates"\n        GROUP BY 1,2\n        HAVING COUNT(*) > 1\n        )\n        SELECT\n          id gtid,\n          target_gtid,\n          hash_created_at,\n          hash_updated_at,\n          hash_last_used\n        FROM hash_sets hs\n        JOIN "GoalTemplates" gt\n          ON hs.hash = gt.hash\n          AND hs.region = gt."regionId"\n        ;\n\n        -- Fail out of the transaction with a divide by zero error if there\n        -- are any field prompts for a goal template slated to be merged.\n        -- There won't be any now, but this makes sure that if the logic is\n        -- ever rerun in the future we won't accidentally make a big mess.\n        SELECT 1 /\n        (LEAST(COUNT(*),1) - 1)\n        FROM goal_template_mapping\n        JOIN "GoalTemplateFieldPrompts"\n          ON "goalTemplateId" = gtid\n        WHERE gtid != target_gtid\n        ;\n\n        -- Find GoalTemplateObjectiveTemplates that would just duplicate\n        -- if updated. This is also empty so far\n        DROP TABLE IF EXISTS gtot_to_be_deleted;\n        CREATE TEMP TABLE gtot_to_be_deleted\n        AS\n        SELECT\n          gtot.id target_gtotid,\n          gtot2.id gtotid_to_delete\n        FROM "GoalTemplateObjectiveTemplates" gtot\n        JOIN goal_template_mapping gtm\n          ON gtot."goalTemplateId" = gtm.target_gtid\n        JOIN obj_template_mapping otm\n          ON gtot."objectiveTemplateId" = otm.target_otid\n        JOIN "GoalTemplateObjectiveTemplates" gtot2\n          ON gtm.gtid = gtot2."goalTemplateId"\n          AND otm.otid = gtot2."objectiveTemplateId"\n        ;\n\n        \n        DELETE FROM "GoalTemplateObjectiveTemplates" gtot\n        USING gtot_to_be_deleted \n        WHERE gtot.id = gtotid_to_delete\n        ;\n\n        -- Update GoalTemplateObjectiveTemplates to point to the merged records\n        -- create a list of goal updates\n        DROP TABLE IF EXISTS updated_goal_template_obj_template;\n        CREATE TEMP TABLE updated_goal_template_obj_template\n        AS\n        WITH updater AS (\n        UPDATE "GoalTemplateObjectiveTemplates" gtot\n        SET "goalTemplateId" = target_gtid\n        FROM goal_template_mapping\n        WHERE gtot."goalTemplateId" = gtid\n        RETURNING\n          id gtotid,\n          'goal_template' update_type,\n          gtid old_value,\n          target_gtid new_value\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- Add the objective updates to the list\n        WITH updater AS (\n        UPDATE "GoalTemplateObjectiveTemplates" gtot\n        SET "objectiveTemplateId" = target_otid\n        FROM obj_template_mapping\n        WHERE gtot."objectiveTemplateId" = otid\n        RETURNING\n          id gtotid,\n          'obj_template' update_type,\n          otid old_value,\n          target_otid new_value\n        ),\n        insert AS (\n        INSERT INTO updated_goal_template_obj_template\n        SELECT * FROM updater\n        RETURNING *\n        )\n        SELECT COUNT(*) FROM insert\n        ;\n\n        -- Update GoalTemplateResources\n        -- The table is currently empty so this doesn't do anything yet\n        DROP TABLE IF EXISTS updated_goal_tempalate_resources;\n        CREATE TEMP TABLE updated_goal_tempalate_resources\n        AS\n        WITH updater AS (\n        UPDATE "GoalTemplateResources" gtr\n        SET "goalTemplateId" = target_gtid\n        FROM goal_template_mapping\n        WHERE gtr."goalTemplateId" = gtid\n        RETURNING gtid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- update Goals to point to the merged template\n        DROP TABLE IF EXISTS redirected_goals;\n        CREATE TEMP TABLE redirected_goals\n        AS\n        WITH updater AS (\n        UPDATE "Goals" g\n        SET "goalTemplateId" = target_gtid\n        FROM goal_template_mapping\n        WHERE g."goalTemplateId" = gtid\n          AND g."goalTemplateId" != target_gtid\n        RETURNING\n          id gid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- update Objectives to point to the merged template\n        DROP TABLE IF EXISTS redirected_objectives;\n        CREATE TEMP TABLE redirected_objectives\n        AS\n        WITH updater AS (\n        UPDATE "Objectives" o\n        SET "objectiveTemplateId" = target_otid\n        FROM obj_template_mapping\n        WHERE o."objectiveTemplateId" = otid\n          AND o."objectiveTemplateId" != target_otid\n        RETURNING\n          id oid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- Actually delete duplicate templates\n        DROP TABLE IF EXISTS deleted_gt_dupes;\n        CREATE TEMP TABLE deleted_gt_dupes\n        AS\n        WITH updater AS (\n        DELETE FROM "GoalTemplates" gt\n        USING goal_template_mapping\n        WHERE gt.id = gtid\n          AND gt.id != target_gtid\n        RETURNING\n          id gid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS deleted_ot_dupes;\n        CREATE TEMP TABLE deleted_ot_dupes\n        AS\n        WITH updater AS (\n        DELETE FROM "ObjectiveTemplates" ot\n        USING obj_template_mapping\n        WHERE ot.id = otid\n          AND ot.id != target_otid\n        RETURNING\n          id oid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- Connecting to objectives ------------------------------------------------------------------\n        DROP TABLE IF EXISTS unconnected_objectives;\n        CREATE TEMP TABLE unconnected_objectives\n        AS\n        WITH stat_progression AS (\n        SELECT\n          1 statord,\n          'deleted'::"enum_ActivityReports_calculatedStatus" statname\n        UNION SELECT 2, NULL\n        UNION SELECT 3,'draft'\n        UNION SELECT 4,'submitted'\n        UNION SELECT 5,'needs_action'\n        UNION SELECT 6,'approved'\n        ),\n        titlematch AS (\n        SELECT\n          o.id oid,\n          ot.id otid,\n          COALESCE(gr."regionId",ar."regionId") region,\n          o."createdVia" = 'rtr' is_rtr,\n          MAX(statord) most_advanced_ar,\n          MAX(o."createdAt") template_last_used\n        FROM "Objectives" o\n        LEFT JOIN "Goals" g\n          ON o."goalId" = g.id\n        LEFT JOIN "Grants" gr\n          ON g."grantId" = gr.id\n        LEFT JOIN "ObjectiveTemplates" ot\n          ON TRIM(o.title) = TRIM(ot."templateTitle")\n          AND gr."regionId" = ot."regionId"\n        LEFT JOIN "ActivityReportObjectives" aro\n          ON o.id = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n        JOIN stat_progression\n          ON (ar."calculatedStatus" IS NULL AND statname IS NULL)\n          OR ar."calculatedStatus" = statname\n        WHERE o."objectiveTemplateId" IS NULL\n          AND LENGTH(o.title) > 9\n        GROUP BY 1,2,3,4\n        )\n        SELECT\n          oid,\n          otid,\n          otid IS NULL template_missing,\n          region,\n          is_rtr,\n          most_advanced_ar,\n          statname,\n          template_last_used\n        FROM titlematch\n        JOIN stat_progression\n          ON most_advanced_ar = statord\n        WHERE region IS NOT NULL\n        ;\n\n        DROP TABLE IF EXISTS created_obj_templates;\n        CREATE TEMP TABLE created_obj_templates\n        AS\n        WITH updater AS (\n        INSERT INTO "ObjectiveTemplates" (\n          hash,\n          "templateTitle",\n          "regionId",\n          "creationMethod",\n          "createdAt",\n          "updatedAt",\n          "lastUsed",\n          "templateTitleModifiedAt"\n        )\n        SELECT\n          MD5(o.title),\n          o.title,\n          uo.region,\n          'Automatic'::"enum_ObjectiveTemplates_creationMethod",\n          NOW(),\n          NOW(),\n          MAX(uo.template_last_used),\n          NOW()\n        FROM unconnected_objectives uo\n        JOIN "Objectives" o\n          ON o.id = uo.oid\n        WHERE uo.otid IS NULL\n          AND uo.most_advanced_ar > 3\n        GROUP BY 1,2,3,4,5,6,8\n        RETURNING\n          id new_otid,\n          "templateTitle" new_template_title\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        UPDATE unconnected_objectives\n        SET otid = new_otid\n        FROM "Objectives"\n        JOIN created_obj_templates\n          ON new_template_title = title\n        WHERE oid = id\n        ;\n\n\n        DROP TABLE IF EXISTS updated_objectives;\n        CREATE TEMP TABLE updated_objectives\n        AS\n        WITH updater AS (\n        UPDATE "Objectives" o\n        SET "objectiveTemplateId" = otid\n        FROM unconnected_objectives\n        WHERE o.id = oid\n          AND most_advanced_ar > 3\n          AND "objectiveTemplateId" IS NULL\n        RETURNING oid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS unconnected_objectives_after;\n        CREATE TEMP TABLE unconnected_objectives_after\n        AS\n        WITH stat_progression AS (\n        SELECT\n          1 statord,\n          'deleted'::"enum_ActivityReports_calculatedStatus" statname\n        UNION SELECT 2, NULL\n        UNION SELECT 3,'draft'\n        UNION SELECT 4,'submitted'\n        UNION SELECT 5,'needs_action'\n        UNION SELECT 6,'approved'\n        ),\n        titlematch AS (\n        SELECT\n          o.id oid,\n          ot.id otid,\n          COALESCE(gr."regionId",ar."regionId") region,\n          o."createdVia" = 'rtr' is_rtr,\n          MAX(statord) most_advanced_ar,\n          MAX(o."createdAt") template_last_used\n        FROM "Objectives" o\n        LEFT JOIN "Goals" g\n          ON o."goalId" = g.id\n        LEFT JOIN "Grants" gr\n          ON g."grantId" = gr.id\n        LEFT JOIN "ObjectiveTemplates" ot\n          ON TRIM(o.title) = TRIM(ot."templateTitle")\n          AND gr."regionId" = ot."regionId"\n        LEFT JOIN "ActivityReportObjectives" aro\n          ON o.id = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n        JOIN stat_progression\n          ON (ar."calculatedStatus" IS NULL AND statname IS NULL)\n          OR ar."calculatedStatus" = statname\n        WHERE o."objectiveTemplateId" IS NULL\n          AND LENGTH(o.title) > 9\n        GROUP BY 1,2,3,4\n        )\n        SELECT\n          oid,\n          otid,\n          otid IS NULL template_missing,\n          region,\n          is_rtr,\n          most_advanced_ar,\n          statname,\n          template_last_used\n        FROM titlematch\n        JOIN stat_progression\n          ON most_advanced_ar = statord\n        WHERE region IS NOT NULL\n        ;\n\n        WITH befores AS (\n        SELECT\n          is_rtr,\n          statname,\n          COUNT(*) FILTER (WHERE template_missing) no_templ,\n          COUNT(*) cnt,\n          'before' beforeafter\n        FROM unconnected_objectives\n        GROUP BY 1,2,5\n        ),\n        afters AS (\n        SELECT\n          is_rtr,\n          statname,\n          COUNT(*) FILTER (WHERE otid IS NULL) no_templ,\n          COUNT(*) cnt,\n          'after' beforeafter\n        FROM unconnected_objectives_after\n        GROUP BY 1,2,5\n        )\n        SELECT\n          b.is_rtr,\n          b.statname most_advanced_ar_status,\n          b.no_templ no_templ_before,\n          COALESCE(a.no_templ,0) no_templ_after,\n          b.cnt "before",\n          COALESCE(a.cnt,0) "after"\n        FROM befores b\n        LEFT JOIN afters a\n          ON (\n              (b.statname IS NULL AND a.statname IS NULL)\n              OR b.statname = a.statname\n            )\n          AND (\n              (b.is_rtr IS NULL AND a.is_rtr IS NULL)\n              OR b.is_rtr = a.is_rtr\n            )\n        ORDER BY 2,1\n        ;\n\n        -- GOAL SECTION -----------------------------------------------------\n\n        DROP TABLE IF EXISTS unconnected_goals;\n        CREATE TEMP TABLE unconnected_goals\n        AS\n        WITH stat_progression AS (\n        SELECT\n          1 statord,\n          'deleted'::"enum_ActivityReports_calculatedStatus" statname\n        UNION SELECT 2, NULL\n        UNION SELECT 3,'draft'\n        UNION SELECT 4,'submitted'\n        UNION SELECT 5,'needs_action'\n        UNION SELECT 6,'approved'\n        ),\n        namematch AS (\n        SELECT\n          g.id gid,\n          gt.id gtid,\n          gr."regionId" region,\n          g."createdVia" = 'rtr' is_rtr,\n          MAX(statord) most_advanced_ar,\n          MAX(g."createdAt") template_last_used\n        FROM "Goals" g\n        JOIN "Grants" gr\n          ON g."grantId" = gr.id\n        LEFT JOIN "GoalTemplates" gt\n          ON TRIM(g.name) = TRIM(gt."templateName")\n          AND gr."regionId" = gt."regionId"\n        LEFT JOIN "ActivityReportGoals" arg\n          ON g.id = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n        JOIN stat_progression\n          ON (ar."calculatedStatus" IS NULL AND statname IS NULL)\n          OR ar."calculatedStatus" = statname\n        WHERE g."goalTemplateId" IS NULL\n        GROUP BY 1,2,3,4\n        )\n        SELECT\n          gid,\n          gtid,\n          gtid IS NULL template_missing,\n          region,\n          is_rtr,\n          most_advanced_ar,\n          statname,\n          template_last_used\n        FROM namematch\n        JOIN stat_progression\n          ON most_advanced_ar = statord\n        WHERE region IS NOT NULL\n        ;\n\n        DROP TABLE IF EXISTS created_goal_templates;\n        CREATE TEMP TABLE created_goal_templates\n        AS\n        WITH updater AS (\n        INSERT INTO "GoalTemplates" (\n          hash,\n          "templateName",\n          "regionId",\n          "creationMethod",\n          "createdAt",\n          "updatedAt",\n          "lastUsed",\n          "templateNameModifiedAt"\n          -- not inserting "source" because that's null for autocreated templates\n        )\n        SELECT\n          MD5(g.name),\n          g.name,\n          ug.region,\n          'Automatic'::"enum_GoalTemplates_creationMethod",\n          NOW(),\n          NOW(),\n          MAX(ug.template_last_used),\n          NOW()\n        FROM unconnected_goals ug\n        JOIN "Goals" g\n          ON g.id = ug.gid\n        WHERE ug.gtid IS NULL\n          AND ug.most_advanced_ar > 3\n        GROUP BY 1,2,3,4,5,6,8\n        RETURNING\n          id new_gtid,\n          "templateName" new_template_name\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        UPDATE unconnected_goals\n        SET gtid = new_gtid\n        FROM "Goals"\n        JOIN created_goal_templates\n          ON new_template_name = name\n        WHERE gid = id\n        ;\n\n        DROP TABLE IF EXISTS updated_goals;\n        CREATE TEMP TABLE updated_goals\n        AS\n        WITH updater AS (\n        UPDATE "Goals" g\n        SET "goalTemplateId" = gtid\n        FROM unconnected_goals\n        WHERE g.id = gid\n          AND most_advanced_ar > 3\n          AND "goalTemplateId" IS NULL\n        RETURNING gid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS unconnected_goals_after;\n        CREATE TEMP TABLE unconnected_goals_after\n        AS\n        WITH stat_progression AS (\n        SELECT\n          1 statord,\n          'deleted'::"enum_ActivityReports_calculatedStatus" statname\n        UNION SELECT 2, NULL\n        UNION SELECT 3,'draft'\n        UNION SELECT 4,'submitted'\n        UNION SELECT 5,'needs_action'\n        UNION SELECT 6,'approved'\n        ),\n        namematch AS (\n        SELECT\n          g.id gid,\n          gt.id gtid,\n          gr."regionId" region,\n          g."createdVia" = 'rtr' is_rtr,\n          MAX(statord) most_advanced_ar,\n          MAX(g."createdAt") template_last_used\n        FROM "Goals" g\n        JOIN "Grants" gr\n          ON g."grantId" = gr.id\n        LEFT JOIN "GoalTemplates" gt\n          ON TRIM(g.name) = TRIM(gt."templateName")\n          AND gr."regionId" = gt."regionId"\n        LEFT JOIN "ActivityReportGoals" arg\n          ON g.id = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n        JOIN stat_progression\n          ON (ar."calculatedStatus" IS NULL AND statname IS NULL)\n          OR ar."calculatedStatus" = statname\n        WHERE g."goalTemplateId" IS NULL\n        GROUP BY 1,2,3,4\n        )\n        SELECT\n          gid,\n          gtid,\n          gtid IS NULL template_missing,\n          region,\n          is_rtr,\n          most_advanced_ar,\n          statname,\n          template_last_used\n        FROM namematch\n        JOIN stat_progression\n          ON most_advanced_ar = statord\n        WHERE region IS NOT NULL\n        ;\n\n        WITH befores AS (\n        SELECT\n          is_rtr,\n          statname,\n          COUNT(*) FILTER (WHERE template_missing) no_templ,\n          COUNT(*) cnt,\n          'before' beforeafter\n        FROM unconnected_goals\n        GROUP BY 1,2,5\n        ),\n        afters AS (\n        SELECT\n          is_rtr,\n          statname,\n          COUNT(*) FILTER (WHERE gtid IS NULL) no_templ,\n          COUNT(*) cnt,\n          'after' beforeafter\n        FROM unconnected_goals_after\n        GROUP BY 1,2,5\n        )\n        SELECT\n          b.is_rtr,\n          b.statname most_advanced_ar_status,\n          b.no_templ no_templ_before,\n          COALESCE(a.no_templ,0) no_templ_after,\n          b.cnt "before",\n          COALESCE(a.cnt,0) "after"\n        FROM befores b\n        LEFT JOIN afters a\n          ON (\n              (b.statname IS NULL AND a.statname IS NULL)\n              OR b.statname = a.statname\n            )\n          AND (\n              (b.is_rtr IS NULL AND a.is_rtr IS NULL)\n              OR b.is_rtr = a.is_rtr\n            )\n        ORDER BY 2,1\n        ;\n        \n        DROP TABLE IF EXISTS obj_template_mapping;\n        DROP TABLE IF EXISTS goal_template_mapping;\n        DROP TABLE IF EXISTS gtot_to_be_deleted;\n        DROP TABLE IF EXISTS updated_goal_template_obj_template;\n        DROP TABLE IF EXISTS updated_goal_tempalate_resources;\n        DROP TABLE IF EXISTS redirected_goals;\n        DROP TABLE IF EXISTS redirected_objectives;\n        DROP TABLE IF EXISTS deleted_gt_dupes;\n        DROP TABLE IF EXISTS deleted_ot_dupes;\n\n        DROP TABLE IF EXISTS unconnected_objectives;\n        DROP TABLE IF EXISTS created_obj_templates;\n        DROP TABLE IF EXISTS updated_objectives;\n        DROP TABLE IF EXISTS unconnected_objectives_after;\n\n        DROP TABLE IF EXISTS unconnected_goal;\n        DROP TABLE IF EXISTS created_goal_templates;\n        DROP TABLE IF EXISTS updated_goals;\n        DROP TABLE IF EXISTS unconnected_goals_after;
Executing (966c86cd-1f82-4167-9fb0-066c25bdd468): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240902000000-link-historical-objectives-to-templates: migrated (0.130s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240909000000-ssdi-performance-enhancements: migrating =======
Executing (55b86ac3-756d-4d84-88ca-d4ca8b595abe): START TRANSACTION;
Connection validated successfully
Executing (55b86ac3-756d-4d84-88ca-d4ca8b595abe): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240909000000-ssdi-performance-enhancements.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- Indexes for the "ActivityReports" table\n        -- Index on ActivityReports.calculatedStatus for filtering approved reports\n        CREATE INDEX IF NOT EXISTS activity_reports_calculated_status\n            ON "ActivityReports"("calculatedStatus");\n\n        -- Index on ActivityReports.endDate for filtering by end date\n        CREATE INDEX IF NOT EXISTS activity_reports_end_date\n            ON "ActivityReports"("endDate");\n\n        -- GIN index on array column ActivityReports.ttaType for array containment queries\n        CREATE INDEX IF NOT EXISTS activity_reports_tta_type\n            ON "ActivityReports" USING gin("ttaType");\n\n        -- Indexes for the "Goals" table\n        -- Index on goalTemplateId for FEI for faster filtering\n        CREATE INDEX IF NOT EXISTS  goals_template_id_19017\n            ON "Goals"("goalTemplateId")\n            WHERE "goalTemplateId" = 19017;\n\n        -- Indexes for the "Grants" table\n        -- Index on recipientId and status for faster filtering\n        CREATE INDEX IF NOT EXISTS grants_recipientid_status\n            ON "Grants" ("recipientId", status);\n\n        -- Index on id for filtering active grants\n        CREATE INDEX IF NOT EXISTS active_grants\n            ON "Grants" (id) WHERE status = 'Active';\n\n        -- Index on Grants.status for filtering active grants\n        CREATE INDEX IF NOT EXISTS grants_status\n            ON "Grants"("status");\n\n        -- Index on Grants.regionId for filtering by region\n        CREATE INDEX IF NOT EXISTS grants_region_id\n            ON "Grants"("regionId");\n\n        -- Index on Grants.stateCode for filtering by state\n        CREATE INDEX IF NOT EXISTS grants_state_code\n            ON "Grants"("stateCode");\n\n        -- Index on recipientId for filtering or joining with Recipients\n        CREATE INDEX IF NOT EXISTS grants_recipient_id\n            ON "Grants"("recipientId");\n\n        -- Indexes for the "Recipients" table\n        -- Index for filtering recipients by name\n        CREATE INDEX IF NOT EXISTS recipients_name\n            ON "Recipients" (name);\n\n        -- Indexes for the "MonitoringClassSummaries" table\n        -- Index on reportDeliveryDate for sorting by date\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_report_delivery_date\n            ON "MonitoringClassSummaries"("reportDeliveryDate");\n\n        -- Index on emotionalSupport for filtering based on emotional support\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_emotional_support\n            ON "MonitoringClassSummaries"("emotionalSupport");\n\n        -- Index on classroomOrganization for filtering based on classroom organization\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_classroom_organization\n            ON "MonitoringClassSummaries"("classroomOrganization");\n\n        -- Index on instructionalSupport for filtering based on instructional support\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_instructional_support\n            ON "MonitoringClassSummaries"("instructionalSupport");\n\n        -- Index on grantNumber and reportDeliveryDate for faster aggregations\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_grant_number\n            ON "MonitoringClassSummaries" ("grantNumber", "reportDeliveryDate");\n\n        -- Indexes for the "MonitoringReviewStatuses" table\n        -- Index on statusId and name for filtering by status\n        CREATE INDEX IF NOT EXISTS monitoring_review_statuses_status_id_name\n            ON "MonitoringReviewStatuses" ("statusId", "name");\n\n        -- Indexes for the "GroupCollaborators" table\n        -- Index on groupId for fast lookups in group collaborations\n        CREATE INDEX IF NOT EXISTS group_collaborators_group_id\n            ON "GroupCollaborators"("groupId");\n\n        -- Index on userId for fast filtering by userId\n        CREATE INDEX IF NOT EXISTS group_collaborators_user_id\n            ON "GroupCollaborators"("userId");\n\n        -- Index for faster lookups on groupId and userId in GroupCollaborators\n        CREATE INDEX IF NOT EXISTS group_collaborators_group_id_user_id\n            ON "GroupCollaborators" ("groupId", "userId");\n\n        -- Index for faster lookups on groupId, userId, and deletedAt in GroupCollaborators\n        CREATE INDEX group_collaborators_group_user_deleted\n            ON "GroupCollaborators"("groupId", "userId", "deletedAt");\n\n        -- Indexes for the "Programs" table\n        -- Index for faster lookups on grantId and programType in Programs\n        CREATE INDEX IF NOT EXISTS programs_grantid_programtype\n            ON "Programs"("grantId", "programType");
Connection validated successfully
Executing (55b86ac3-756d-4d84-88ca-d4ca8b595abe): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240909000000-ssdi-performance-enhancements: migrated (0.101s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241002000000-clean-training-report-data: migrating =======
Executing (73f5389d-5cd6-40d8-bfd2-5984307d07a7): START TRANSACTION;
Connection validated successfully
Executing (73f5389d-5cd6-40d8-bfd2-5984307d07a7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241002000000-clean-training-report-data.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): UPDATE "SessionReportPilots" SET data = data - 'event';\n        UPDATE "EventReportPilots" SET data = data - 'sessionReports';\n        UPDATE "SessionReportPilots"\n        SET data = COALESCE(\n          jsonb_set(\n                data,\n                '{recipients}',\n                (\n                    SELECT jsonb_agg(\n                        (\n                            elem\n                            || jsonb_build_object(\n                                'label', COALESCE(elem->>'label', elem->>'name'),\n                                'value', COALESCE(elem->>'value', elem->>'activityRecipientId')::INT\n                            )\n                        ) - 'name' - 'activityRecipientId'\n                    )\n                    FROM jsonb_array_elements(data->'recipients') AS t(elem)\n                ),\n                false\n            ),\n          data\n        )\n        WHERE data ? 'recipients';
Connection validated successfully
Executing (73f5389d-5cd6-40d8-bfd2-5984307d07a7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241002000000-clean-training-report-data: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241016000000-cleanup-old-table-referances: migrating =======
Executing (325e269c-75f2-4146-a340-79770f77a867): START TRANSACTION;
Connection validated successfully
Executing (325e269c-75f2-4146-a340-79770f77a867): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241016000000-cleanup-old-table-referances.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): DO\n        $$\n        DECLARE\n            drop_stmt text;\n        BEGIN\n            FOR drop_stmt IN\n                WITH all_tables AS (\n                    SELECT table_name\n                    FROM information_schema.tables\n                    WHERE table_type = 'BASE TABLE' AND table_schema NOT IN ('information_schema', 'pg_catalog')\n                ),\n                all_functions AS (\n                    SELECT routine_name\n                    FROM information_schema.routines\n                    WHERE routine_type = 'FUNCTION' AND specific_schema NOT IN ('information_schema', 'pg_catalog')\n                )\n                SELECT 'DROP FUNCTION "' || f.routine_name || '"();' AS drop_statement\n                FROM all_functions f\n                LEFT JOIN all_tables t\n                ON f.routine_name LIKE 'ZALNoTruncateF' || t.table_name\n                OR f.routine_name LIKE 'ZALNoDeleteF' || t.table_name\n                OR f.routine_name LIKE 'ZALNoUpdateF' || t.table_name\n                WHERE t.table_name IS NULL\n                AND (f.routine_name LIKE 'ZALNoTruncateF%'\n                    OR f.routine_name LIKE 'ZALNoDeleteF%'\n                    OR f.routine_name LIKE 'ZALNoUpdateF%')\n                AND f.routine_name NOT LIKE '%DDL'\n            LOOP\n                EXECUTE drop_stmt;\n            END LOOP;\n        END\n        $$;
Connection validated successfully
Executing (325e269c-75f2-4146-a340-79770f77a867): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241016000000-cleanup-old-table-referances: migrated (0.374s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241016000001-fix-pfmo-to-pmfo: migrating =======
Executing (33f3b716-33c3-42da-bef6-3c947644a814): START TRANSACTION;
Connection validated successfully
Executing (33f3b716-33c3-42da-bef6-3c947644a814): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241016000001-fix-pfmo-to-pmfo.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- There are still two places the PMFO national center name was erroneously\n        -- recorded as PFMO:\n        -- - EventReportPilotNationalCenterUsers.nationalCenterName\n        -- - SessionReportPilots.data->objectiveTrainers\n\n        DROP TABLE IF EXISTS corrected_erpncu;\n        CREATE TEMP TABLE corrected_erpncu\n        AS\n        WITH updater AS (\n        UPDATE "EventReportPilotNationalCenterUsers"\n        SET "nationalCenterName" = 'PMFO'\n        WHERE "nationalCenterName" = 'PFMO'\n        RETURNING id\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS corrected_srp;\n        CREATE TEMP TABLE corrected_srp\n        AS\n        WITH updater AS (\n        UPDATE "SessionReportPilots"\n        SET data = regexp_replace(data::text,'PFMO','PMFO')::jsonb\n        RETURNING id\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS corrected_erp;\n        CREATE TEMP TABLE corrected_erp\n        AS\n        WITH updater AS (\n        UPDATE "EventReportPilots"\n        SET data = regexp_replace(data::text,'PFMO','PMFO')::jsonb\n        RETURNING id\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        SELECT 'fixed EventReportPilotNationalCenterUsers' operation, COUNT(*) cnt FROM corrected_erpncu\n        UNION\n        SELECT 'fixed SessionReportPilots', COUNT(*) FROM corrected_srp\n        UNION\n        SELECT 'fixed EventReportPilots', COUNT(*) FROM corrected_erp\n        ;
Connection validated successfully
Executing (33f3b716-33c3-42da-bef6-3c947644a814): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241016000001-fix-pfmo-to-pmfo: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241017203311-populate-grant-replacements: migrating =======
Executing (5fc7cca0-4a20-42ba-a7a3-dbe25d96c03c): START TRANSACTION;
Connection validated successfully
Executing (5fc7cca0-4a20-42ba-a7a3-dbe25d96c03c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241017203311-populate-grant-replacements.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5fc7cca0-4a20-42ba-a7a3-dbe25d96c03c): CREATE TABLE IF NOT EXISTS "GrantReplacementTypes" ("id"  SERIAL , "name" TEXT NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE, "mapsTo" INTEGER REFERENCES "GrantReplacementTypes" ("id"), PRIMARY KEY ("id"));
Executing (5fc7cca0-4a20-42ba-a7a3-dbe25d96c03c): INSERT INTO "GrantReplacementTypes" ("name")\n          SELECT DISTINCT gr."inactivationReason"\n          FROM "Grants" gr\n          WHERE gr."inactivationReason" IS NOT NULL;
Executing (5fc7cca0-4a20-42ba-a7a3-dbe25d96c03c): CREATE TABLE IF NOT EXISTS "GrantReplacements" ("id"  SERIAL , "replacedGrantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "replacingGrantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "grantReplacementTypeId" INTEGER REFERENCES "GrantReplacementTypes" ("id"), "replacementDate" DATE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (5fc7cca0-4a20-42ba-a7a3-dbe25d96c03c): INSERT INTO "GrantReplacements" (\n          "replacedGrantId",\n          "replacingGrantId",\n          "replacementDate",\n          "grantReplacementTypeId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          gr1."oldGrantId" AS "replacedGrantId",\n          gr1."id" AS "replacingGrantId",\n          gr2."inactivationDate" AS "replacementDate",\n          grt.id AS "grantReplacementTypeId",\n          gr1."createdAt",\n          gr1."updatedAt"\n        FROM "Grants" gr1\n        JOIN "Grants" gr2\n        ON gr1."oldGrantId" = gr2.id\n        LEFT JOIN "GrantReplacementTypes" grt\n        ON gr1."inactivationReason"::text = grt.name\n        WHERE gr1."oldGrantId" IS NOT NULL;
Executing (5fc7cca0-4a20-42ba-a7a3-dbe25d96c03c): ALTER TABLE "public"."Grants" DROP COLUMN "oldGrantId";
Executing (5fc7cca0-4a20-42ba-a7a3-dbe25d96c03c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241017203311-populate-grant-replacements: migrated (0.081s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241017203312-create-grant-relationship-to-active: migrating =======
Executing (7d2fb6ab-6345-48ec-9659-26287433a4c4): START TRANSACTION;
Connection validated successfully
Executing (7d2fb6ab-6345-48ec-9659-26287433a4c4): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241017203312-create-grant-relationship-to-active.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7d2fb6ab-6345-48ec-9659-26287433a4c4): CREATE MATERIALIZED VIEW "GrantRelationshipToActive" AS\n        WITH RECURSIVE recursive_cte AS (\n            -- Base query: Case 1: Select all Active grants from the "Grants" table\n            SELECT\n                g."id" AS "grantId",\n                g."id" AS "activeGrantId",\n                ARRAY[g."id"] AS "visited_grantIds"  -- Initialize the array with the first grantId\n            FROM "Grants" g\n            WHERE g."status" = 'Active'\n\n            UNION ALL\n\n            -- Base query: Case 2: Select all inactive grants from the "Grants" table that have replaced other grants, but that have not been replaced\n            SELECT\n                g."id" AS "grantId",\n                NULL::int AS "activeGrantId",\n                ARRAY[g."id"] AS "visited_grantIds"  -- Initialize the array with the first grantId\n            FROM "Grants" g\n            JOIN "GrantReplacements" gr1\n            ON g.id = gr1."replacingGrantId"\n            LEFT JOIN "GrantReplacements" gr2\n            ON g.id = gr2."replacedGrantId"\n            WHERE g.status != 'Active'\n            AND gr2.id IS NULL\n\n            UNION ALL\n\n            -- Base query: Case 3: Select all inactive grants from the "Grants" table that have never replaced other grants or been replaced\n            SELECT\n                g."id" AS "grantId",\n                NULL::int AS "activeGrantId",\n                ARRAY[g."id"] AS "visited_grantIds"  -- Initialize the array with the first grantId\n            FROM "Grants" g\n            JOIN "GrantReplacements" gr\n            ON g.id = gr."replacingGrantId"\n            OR g.id = gr."replacedGrantId"\n            WHERE g.status != 'Active'\n            AND gr.id IS NULL\n\n            UNION ALL\n\n            -- Recursive query: Use an array to track visited grantIds\n            SELECT\n                g."id" AS "grantId",\n                rcte."activeGrantId",\n                "visited_grantIds" || g."id"  -- Append the current grantId to the array\n            FROM recursive_cte rcte\n            JOIN "GrantReplacements" gr\n            ON rcte."grantId" = gr."replacingGrantId"\n            JOIN "Grants" g\n            ON g."id" = gr."replacedGrantId"\n            WHERE g."id" != ALL("visited_grantIds")  -- Ensure the current grantId hasn't been visited\n        )\n        SELECT DISTINCT\n            ROW_NUMBER() OVER (ORDER BY rcte."grantId", rcte."activeGrantId") AS "id",  -- Add row number as "id"\n            rcte."grantId",\n            rcte."activeGrantId"\n        FROM recursive_cte rcte\n        WITH NO DATA;
Executing (7d2fb6ab-6345-48ec-9659-26287433a4c4): CREATE INDEX "idx_GrantRelationshipToActive_grantId_activeGrantId"\n        ON "GrantRelationshipToActive" ("grantId", "activeGrantId");
Executing (7d2fb6ab-6345-48ec-9659-26287433a4c4): REFRESH MATERIALIZED VIEW "GrantRelationshipToActive";
Executing (7d2fb6ab-6345-48ec-9659-26287433a4c4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241017203312-create-grant-relationship-to-active: migrated (0.049s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241030000000-descriptor-race: migrating =======
Executing (0088e067-2698-4d4d-b529-1838ec311fed): START TRANSACTION;
Connection validated successfully
Executing (0088e067-2698-4d4d-b529-1838ec311fed): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241030000000-descriptor-race.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0088e067-2698-4d4d-b529-1838ec311fed): CREATE OR REPLACE FUNCTION public."ZAFDescriptorToID"(\n            _param_id text\n        )\n        RETURNS integer\n        LANGUAGE plpgsql\n        COST 100\n        VOLATILE PARALLEL UNSAFE\n        AS $BODY$\n        DECLARE\n            Did INTEGER;\n        BEGIN\n            IF _param_id IS NOT NULL THEN\n                -- Select the minimum id where descriptor matches\n                SELECT MIN(id) INTO Did \n                FROM "ZADescriptor" \n                WHERE descriptor = _param_id;\n\n                -- If no matching descriptor is found, insert it and retrieve the new id\n                IF Did IS NULL THEN\n                    INSERT INTO "ZADescriptor" (descriptor) \n                    VALUES (_param_id)\n                    RETURNING id INTO Did;\n                END IF;\n            END IF;\n\n            RETURN Did;\n        END\n        $BODY$;
Executing (0088e067-2698-4d4d-b529-1838ec311fed): WITH duplicates AS (\n            SELECT\n                id,\n                descriptor,\n                ROW_NUMBER() OVER (\n                    PARTITION BY descriptor\n                    ORDER BY id ASC\n                ) AS rn\n            FROM\n                public."ZADescriptor"\n        )\n        DELETE FROM public."ZADescriptor"\n        WHERE id IN (\n            SELECT id FROM duplicates WHERE rn > 1\n        );
Executing (0088e067-2698-4d4d-b529-1838ec311fed): ALTER TABLE public."ZADescriptor"\n        ADD CONSTRAINT unique_descriptor UNIQUE (descriptor);
Executing (0088e067-2698-4d4d-b529-1838ec311fed): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241030000000-descriptor-race: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241030114000-monitoring-import-cadence: migrating =======
Executing (4875a239-4f3f-4d7a-81db-93e1e7da7d9f): START TRANSACTION;
Connection validated successfully
Executing (4875a239-4f3f-4d7a-81db-93e1e7da7d9f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241030114000-monitoring-import-cadence.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (4875a239-4f3f-4d7a-81db-93e1e7da7d9f): UPDATE public."Imports"\n        SET schedule = '30 2,8,14,20 * * *'\n        WHERE id = 1;
Executing (4875a239-4f3f-4d7a-81db-93e1e7da7d9f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241030114000-monitoring-import-cadence: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241030194608-insert-standard-goals: migrating =======
Executing (45b801c4-4c7c-4408-8d1d-072066d8687f): START TRANSACTION;
Connection validated successfully
Executing (45b801c4-4c7c-4408-8d1d-072066d8687f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241030194608-insert-standard-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (45b801c4-4c7c-4408-8d1d-072066d8687f): INSERT INTO "GoalTemplates" ("creationMethod","hash","createdAt","updatedAt","templateNameModifiedAt","templateName") VALUES ('Curated','c0f559e913f1f32332d08ce9b0d1bbeb','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Teaching Practices) The recipient will implement systems and services that ensure eﬀective adult-child interactions and responsive care using eﬀective teaching and home visiting practices.'),('Curated','4f47ab526837bd4cd510af5796b3ca5d','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Child Safety) The recipient will implement systems and services to ensure that everyone promotes a culture of program safety, so children are kept safe at all times.'),('Curated','f744444d6c9c845fe001e7d95d84fcb6','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(ERSEA) The recipient will implement systems and services to ensure their Eligibility, Recruitment, Selection, Enrollment, and Attendance procedures meet the needs of their children, families, and community.'),('Curated','6f53db294964271e9399aa9b931f7fd2','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Governance) The recipient will establish and maintain a formal structure for program governance that ensures clear roles, responsibilities and procedures, eﬀective training, and representation of families and the community.'),('Curated','d6ee0cd4f720bd8036a19f4c42a18bad','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Fiscal Management) The recipient will implement strong fiscal management and reporting systems to ensure the safeguarding of federal funds, facilities, and resources.'),('Curated','d36d9df2627c62fd08b1a4c4891e040a','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Development and Learning) The recipient will implement child development and early learning services that are developmentally, culturally, and linguistically appropriate for all children and families.'),('Curated','858eb05049c3fc1239f62ca04a0b8852','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Mental Health) The recipient will implement systems and services that promote the mental and behavioral health of all children and families.'),('Curated','b55bb767557e703ece860e1e6aa2858f','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Physical Health) The recipient will implement systems and services that ensure expectant families and children''s health, oral health, and nutrition needs are met in developmentally, culturally, and linguistically appropriate ways.'),('Curated','d4a521307b6bcf2e81306563ba5bcdcb','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(DEIA) The recipient will implement comprehensive systems and services that promote diversity, equity, inclusion, accessibility, and belonging.'),('Curated','f1d8d95e92edee5ba9a0fe773ecd06f8','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Family Engagement) The recipient will implement family engagement strategies that are relationship-based and culturally and linguistically appropriate.'),('Curated','695d11691cba086703a15bb8f5368302','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Family Support) The recipient will implement collaborative systems and services with families and community partners to support family well-being and the needs of vulnerable families.'),('Curated','d2826c6b269dfc701f381382df699139','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Professional Development) The recipient will implement a systematic approach to staﬀ training and professional development that assists staﬀ in acquiring, refining, or increasing the knowledge and skills needed to provide high-quality, comprehensive services.'),('Curated','5590cde3b952790906aaa882ce5a2de3','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Workforce Development) The recipient will implement systems to recruit, hire, onboard, support, and retain staﬀ to ensure all program staﬀ have suﬃcient knowledge, experience, competencies, and resources to fulfill the roles and responsibilities of their positions.'),('Curated','9e869362b539be9d04e469ad464d1624','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(New Leaders) The recipient''s new leader(s) will identify and use resources, professional development, and access to necessary regulations to meet the needs of their role(s) and responsibilities.'),('Curated','8579cdc2adb3fef3ef10bdf6eaf36ae3','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(CQI and Data) The recipient will implement data and ongoing monitoring systems to inform continuous quality improvement.'),('Curated','01a23ac82b8e7dba8a049e760310ca56','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Program Structure) The recipient will implement management and program structures that provide eﬀective oversight and administration and meet the needs of the staﬀ, families, and communities.'),('Curated','ca72eb2ae12059082597fd767443a713','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(Disaster Recovery) The recipient will implement systems and services to support children, families, and staﬀ with recovering from disasters.'),('Curated','d1f8801cee1bbde69e119451e10ac6c4','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','2025-03-28 21:03:39.304 +00:00','(RAN investigation) The recipient will implement systems and services to address a reported child incident during the RO investigation.');
Executing (45b801c4-4c7c-4408-8d1d-072066d8687f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241030194608-insert-standard-goals: migrated (0.054s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241031142128-update-fei-class-text: migrating =======
Executing (a35e7e07-e3db-4059-a723-181bef185292): START TRANSACTION;
Connection validated successfully
Executing (a35e7e07-e3db-4059-a723-181bef185292): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241031142128-update-fei-class-text.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a35e7e07-e3db-4059-a723-181bef185292): UPDATE "GoalTemplates" \n          SET "templateName" = '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment).',\n              "hash" = md5('(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment).')\n          WHERE id = 19017;\n\n        UPDATE "GoalTemplates" \n            SET "templateName" = '(CLASS Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores).', \n                "hash" = md5('(CLASS Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores).')\n            WHERE id = 18172;\n\n        UPDATE "Goals"\n            SET "name" = '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment).'\n            WHERE "goalTemplateId" = 19017;\n\n        UPDATE "Goals"\n            SET "name" = '(CLASS Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores).'\n            WHERE "goalTemplateId" = 18172;
Executing (a35e7e07-e3db-4059-a723-181bef185292): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241031142128-update-fei-class-text: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241031203552-GrantRelationshipToActive: migrating =======
Executing (b9640925-9261-4caa-9483-bb2ed451d154): START TRANSACTION;
Connection validated successfully
Executing (b9640925-9261-4caa-9483-bb2ed451d154): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241031203552-GrantRelationshipToActive.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b9640925-9261-4caa-9483-bb2ed451d154): DROP MATERIALIZED VIEW IF EXISTS public."GrantRelationshipToActive";\n\n        CREATE MATERIALIZED VIEW IF NOT EXISTS public."GrantRelationshipToActive"\n        AS\n        WITH\n          RECURSIVE recursive_cte AS (\n            SELECT g.id AS "grantId",\n                g.id AS "activeGrantId",\n                ARRAY[g.id] AS "visited_grantIds"\n              FROM "Grants" g\n              WHERE g.status::text = 'Active'\n            UNION\n            SELECT g.id AS "grantId",\n                NULL::integer AS "activeGrantId",\n                ARRAY[g.id] AS "visited_grantIds"\n              FROM "Grants" g\n                JOIN "GrantReplacements" gr1 ON g.id = gr1."replacingGrantId"\n                LEFT JOIN "GrantReplacements" gr2 ON g.id = gr2."replacedGrantId"\n              WHERE g.status::text <> 'Active' AND gr2.id IS NULL\n            UNION\n            SELECT g.id AS "grantId",\n                NULL::integer AS "activeGrantId",\n                ARRAY[g.id] AS "visited_grantIds"\n              FROM "Grants" g\n                JOIN "GrantReplacements" gr ON g.id = gr."replacingGrantId" OR g.id = gr."replacedGrantId"\n              WHERE g.status::text <> 'Active' AND gr.id IS NULL\n            UNION\n            SELECT g.id AS "grantId",\n                rcte_1."activeGrantId",\n                rcte_1."visited_grantIds" || g.id\n              FROM recursive_cte rcte_1\n                JOIN "GrantReplacements" gr ON rcte_1."grantId" = gr."replacingGrantId"\n                JOIN "Grants" g ON g.id = gr."replacedGrantId"\n              WHERE g.id <> ALL (rcte_1."visited_grantIds")\n            ),\n            distinct_cte AS (\n              SELECT DISTINCT *\n              FROM recursive_cte\n            )\n        SELECT DISTINCT \n          row_number() OVER (ORDER BY dcte."grantId", dcte."activeGrantId") AS id,\n          dcte."grantId",\n          dcte."activeGrantId"\n        FROM distinct_cte dcte\n        ORDER BY 2,3\n        WITH DATA;\n\n        CREATE INDEX "idx_GrantRelationshipToActive_grantId_activeGrantId"\n          ON public."GrantRelationshipToActive" USING btree\n          ("grantId", "activeGrantId");
Executing (b9640925-9261-4caa-9483-bb2ed451d154): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241031203552-GrantRelationshipToActive: migrated (0.033s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241112161634-add-regional-program-director-role: migrating =======
Executing (deff9210-9183-4046-8531-f631ee00b5e0): START TRANSACTION;
Connection validated successfully
Executing (deff9210-9183-4046-8531-f631ee00b5e0): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241112161634-add-regional-program-director-role.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (deff9210-9183-4046-8531-f631ee00b5e0): INSERT INTO "Roles" ("name", "fullName", "isSpecialist", "createdAt", "updatedAt") VALUES ('RPD', 'Regional Program Director', false, now(), now());
Executing (deff9210-9183-4046-8531-f631ee00b5e0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241112161634-add-regional-program-director-role: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241113165852-add-monitoring-goal-template: migrating =======
Executing (292cce15-4989-4a76-8730-edf3d4482740): START TRANSACTION;
Connection validated successfully
Executing (292cce15-4989-4a76-8730-edf3d4482740): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241113165852-add-monitoring-goal-template.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (292cce15-4989-4a76-8730-edf3d4482740): INSERT INTO "GoalTemplates" (\n          hash,\n          "templateName",\n          "regionId",\n          "creationMethod",\n          "createdAt",\n          "updatedAt",\n          "lastUsed",\n          "templateNameModifiedAt"\n        ) Values (\n          MD5(TRIM('(Monitoring) The recipient will develop and implement a QIP/CAP to address monitoring findings.')),\n          '(Monitoring) The recipient will develop and implement a QIP/CAP to address monitoring findings.',\n          null,\n          'Curated'::"enum_GoalTemplates_creationMethod",\n          current_timestamp,\n          current_timestamp,\n          NULL,\n          current_timestamp\n        );
Executing (292cce15-4989-4a76-8730-edf3d4482740): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241113165852-add-monitoring-goal-template: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241113171838-add-system-generated-created-via-enum: migrating =======
Executing (f134f336-393b-431a-88e1-7e1d399c98be): START TRANSACTION;
Connection validated successfully
Executing (f134f336-393b-431a-88e1-7e1d399c98be): -- rename the existing type\n  ALTER TYPE "enum_GoalTemplates_creationMethod" RENAME TO "enum_GoalTemplates_creationMethod_old";\n  -- create the new type\n  CREATE TYPE "enum_GoalTemplates_creationMethod" AS ENUM(\n    'Automatic',\n'Curated',\n'System Generated'\n  );
Executing (f134f336-393b-431a-88e1-7e1d399c98be): -- update the columns to use the new type\n  ALTER TABLE "GoalTemplates" ALTER COLUMN "creationMethod" set default null;\n  ALTER TABLE "GoalTemplates" ALTER COLUMN "creationMethod" TYPE "enum_GoalTemplates_creationMethod" USING "creationMethod"::text::"enum_GoalTemplates_creationMethod";\n  \n  -- remove the old type\n  DROP TYPE "enum_GoalTemplates_creationMethod_old";
Executing (f134f336-393b-431a-88e1-7e1d399c98be): UPDATE "GoalTemplates"\n        SET "creationMethod" = 'System Generated'::"enum_GoalTemplates_creationMethod"\n        WHERE "templateName" = '(Monitoring) The recipient will develop and implement a QIP/CAP to address monitoring findings.';
Executing (f134f336-393b-431a-88e1-7e1d399c98be): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241113171838-add-system-generated-created-via-enum: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241114000000-format-comlog-comdate-history: migrating =======
Executing (36e6456c-1f99-4a31-bb3d-a03cafae2cc5): START TRANSACTION;
Connection validated successfully
Executing (36e6456c-1f99-4a31-bb3d-a03cafae2cc5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241114000000-format-comlog-comdate-history.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This reformats all historical communicationDate values to mm/dd/yyyy\n        -- \n        -- Assumptions of preexisting data:\n        -- -always month-day-year\n        -- -always separated by a slash, period, or space [/. ]\n        -- -if there is an extra separator it impacts the year\n        -- -if the third position is at least two characters, it's the year, else it's the fourth position\n        -- -the first four characters of a long year string holds the year\n        --\n        -- These assumptions are based on the data we have, so aren't guaranteed to be correct if this is rerun.\n        -- However the logic is slightly overengineered for extra robustness if new errors show up. At the time of\n        -- writing, this produces all valid strings where to_date(data->>'communicationDate','mm/dd/yyyy') succeeds\n\n        DROP TABLE IF EXISTS comdate_corrections;\n        CREATE TEMP TABLE comdate_corrections\n        AS\n        WITH reseparated AS (\n        SELECT\n          id clid,\n          data->>'communicationDate' orig,\n          -- replace [-. ] seperators (only - has been seen) with / so the subsequent logic always works\n          regexp_replace(data->>'communicationDate','[-. ]','/','g') reseparated\n        FROM "CommunicationLogs"\n        WHERE data->>'communicationDate' !~ '^\d{2}/\d{2}/\d{4}$'\n          AND COALESCE(data->>'communicationDate','') != ''\n        ),\n        date_particles AS (\n        SELECT\n          clid,\n          orig,\n          SPLIT_PART(reseparated,'/',1) month_part,\n          SPLIT_PART(reseparated,'/',2) day_part,\n          -- check where the year part is because sometimes separators between day and year are doubled\n          CASE\n            WHEN LENGTH(SPLIT_PART(reseparated,'/',3)) > 1 THEN SPLIT_PART(reseparated,'/',3)\n            ELSE SPLIT_PART(reseparated,'/',4)\n          END AS year_part\n        FROM reseparated\n        ),\n        padded_particles AS (\n        SELECT\n          clid,\n          orig,\n          LPAD(month_part,2,'0') padded_month,\n          LPAD(day_part,2,'0') padded_day,\n          -- pull out only the leftmost 4 characters, but pad them with the century if we only two chars\n          LPAD(\n            LEFT(year_part,4),\n            4,\n            '20'\n          ) padded_year\n        FROM date_particles\n        )\n        SELECT\n          clid,\n          orig,\n          padded_month || '/' || padded_day || '/' || padded_year reformat\n        FROM padded_particles\n        ;\n\n        UPDATE "CommunicationLogs"\n        SET data = jsonb_set(data, '{communicationDate}', to_jsonb(reformat))\n        FROM comdate_corrections\n        WHERE id = clid\n        ;
Connection validated successfully
Executing (36e6456c-1f99-4a31-bb3d-a03cafae2cc5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241114000000-format-comlog-comdate-history: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241114000001-make-program-dates-datetypes: migrating =======
Executing (eca831ef-9213-4923-8b9e-bcbb7e64b617): START TRANSACTION;
Connection validated successfully
Executing (eca831ef-9213-4923-8b9e-bcbb7e64b617): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241114000001-make-program-dates-datetypes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (eca831ef-9213-4923-8b9e-bcbb7e64b617): -- change Programs startDate and endDate types to date\n        ALTER TABLE "Programs" ALTER COLUMN "startDate" TYPE date\n        USING (NULLIF("startDate", '')::date)\n        ;\n        ALTER TABLE "Programs" ALTER COLUMN "endDate" TYPE date\n        USING (NULLIF("endDate", '')::date)\n        ;
Executing (eca831ef-9213-4923-8b9e-bcbb7e64b617): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241114000001-make-program-dates-datetypes: migrated (0.042s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241114190341-remove-grant-replacement-type-dupes: migrating =======
Executing (8a842ee4-2470-4074-89b3-e921f079d1dc): START TRANSACTION;
Connection validated successfully
Executing (8a842ee4-2470-4074-89b3-e921f079d1dc): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241114190341-remove-grant-replacement-type-dupes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8a842ee4-2470-4074-89b3-e921f079d1dc): SELECT "name", array_agg(id ORDER BY "createdAt") AS ids\n          FROM "GrantReplacementTypes"\n          GROUP BY "name"\n          HAVING COUNT(*) > 1
Executing (8a842ee4-2470-4074-89b3-e921f079d1dc): DELETE FROM "GrantReplacements" gr\n          USING (\n            SELECT\n              MIN(id) AS id,\n              "replacedGrantId",\n              "replacingGrantId",\n              "grantReplacementTypeId"\n            FROM "GrantReplacements"\n            GROUP BY "replacedGrantId", "replacingGrantId", "grantReplacementTypeId"\n            HAVING COUNT(*) > 1\n          ) subquery\n          WHERE gr."id" > subquery.id\n          AND gr. "replacedGrantId" = subquery."replacedGrantId"\n          AND gr. "replacingGrantId" = subquery."replacingGrantId"\n          AND gr. "grantReplacementTypeId" = subquery."grantReplacementTypeId"
Executing (8a842ee4-2470-4074-89b3-e921f079d1dc): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241114190341-remove-grant-replacement-type-dupes: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241114222525-add-monitoring-feature-flag: migrating =======
Executing (642007c4-1a0c-4959-bc45-cb83b72903ac): START TRANSACTION;
Connection validated successfully
Executing (642007c4-1a0c-4959-bc45-cb83b72903ac): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241114222525-add-monitoring-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Connection validated successfully
Executing (642007c4-1a0c-4959-bc45-cb83b72903ac): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241114222525-add-monitoring-feature-flag: migrated (0.017s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241125000000-fix-missing-goal-source: migrating =======
Executing (672b94d6-421e-4bee-9f3c-f204c2663bc3): START TRANSACTION;
Connection validated successfully
Executing (672b94d6-421e-4bee-9f3c-f204c2663bc3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241125000000-fix-missing-goal-source.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This restores Goal.createdVia values that were not being set at creation time\n        -- We considered also trying to restore Goal.source but decided that it it wasn't\n        -- worth the ambiguity\n\n        DROP TABLE IF EXISTS cv_modifications;\n        CREATE TEMP TABLE cv_modifications AS\n        SELECT\n          g.id gid,\n          CASE\n            WHEN zd.descriptor IN ('createGoals','createGoalsFromTemplate') THEN 'rtr'::"enum_Goals_createdVia"\n            WHEN zd.descriptor IN ('saveReport','createGoalsForReport') THEN 'activityReport'::"enum_Goals_createdVia"\n          END new_created_via\n        FROM "GoalTemplates" gt\n        JOIN "Goals" g\n          ON gt.id = g."goalTemplateId"\n        JOIN "ZALGoals" zg\n          ON g.id = zg.data_id\n          AND zg.dml_type = 'INSERT'\n        JOIN "ZADescriptor" zd\n          ON zg.descriptor_id = zd.id\n        WHERE gt."creationMethod" = 'Curated'\n          AND g."createdAt" > '2024-10-31'\n          AND g."createdVia" IS NULL\n          AND zd.descriptor IN ('createGoals','saveReport','createGoalsForReport','createGoalsFromTemplate')\n        ORDER BY 1;\n\n        DROP TABLE IF EXISTS updated_goals;\n        CREATE TEMP TABLE updated_goals\n        AS\n        WITH updater AS (\n        UPDATE "Goals"\n        SET "createdVia" = new_created_via\n        FROM cv_modifications\n        WHERE id = gid\n          AND "createdVia" IS NULL -- just here for extra safety\n        RETURNING id gid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- These numbers should add up\n        SELECT 'goals to be updated' item, COUNT(*) cnt FROM cv_modifications\n        UNION\n        SELECT\n          'new rtr',\n          COUNT(*)\n        FROM "Goals"\n        JOIN updated_goals\n          ON id = gid\n        WHERE "createdVia" = 'rtr'\n        UNION\n        SELECT\n          'new activityReport',\n          COUNT(*)\n        FROM "Goals"\n        JOIN updated_goals\n          ON id = gid\n        WHERE "createdVia" = 'activityReport'\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (672b94d6-421e-4bee-9f3c-f204c2663bc3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241125000000-fix-missing-goal-source: migrated (0.028s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250107000000-clean-orphan-objectives: migrating =======
Executing (e4beef48-f540-4db4-b048-c62c64faa83e): START TRANSACTION;
Connection validated successfully
Executing (e4beef48-f540-4db4-b048-c62c64faa83e): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250107000000-clean-orphan-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This marks as deleted any objectives for which all of the following are true:\n        -- - created within an AR\n        -- - Is currently linked to no AR\n        -- - Is not already marked as deleted\n\n        DROP TABLE IF EXISTS orphan_obj;\n        CREATE TEMP TABLE orphan_obj AS\n        SELECT o.id oid\n        FROM "Objectives" o\n        LEFT JOIN "ActivityReportObjectives" aro\n          ON o.id = aro."objectiveId"\n        WHERE o."createdVia" = 'activityReport'\n          AND o."deletedAt" IS NULL\n          AND aro.id IS NULL\n        ORDER BY 1;\n\n        DROP TABLE IF EXISTS updated_obj;\n        CREATE TEMP TABLE updated_obj\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Objectives"\n        SET "deletedAt" = nowts\n        FROM orphan_obj\n        CROSS JOIN nowtime\n        WHERE oid = id\n        RETURNING id deleted_oid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- The first two numbers should match and the last should be 0\n        SELECT 1 ord,'orphaned objectives' item, COUNT(*) cnt FROM orphan_obj\n        UNION\n        SELECT 2, 'objectives marked deleted' , COUNT(*)  FROM updated_obj\n        UNION\n        SELECT 3, 'remaining orphaned objectives', COUNT(*) FROM (\n          SELECT * FROM orphan_obj\n          EXCEPT\n          SELECT * FROM updated_obj\n        ) a\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (e4beef48-f540-4db4-b048-c62c64faa83e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250107000000-clean-orphan-objectives: migrated (0.033s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250107000001-merge-duplicate-objectives: migrating =======
Executing (20331b42-b955-47f1-89ce-5543e13d2e7a): START TRANSACTION;
Connection validated successfully
Executing (20331b42-b955-47f1-89ce-5543e13d2e7a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250107000001-merge-duplicate-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This merges duplicate Objectives that were EITHER:\n        -- - created on the same AR\n        -- - created on different ARs, but are not 'Completed'\n        --\n        -- The merged-away Objective will be merged into a target Objective with a greater\n        -- status progression than the merged-away Objective and is EITHER:\n        -- - the next duplicate Objective in time to be set to "Completed"\n        -- - the most advanced Objective when there is no next "Completed" Objective\n\n        -- Find all candidate duplicates\n\n        DROP TABLE IF EXISTS objective_merges;\n        CREATE TEMP TABLE objective_merges\n        AS\n        WITH candidate_dupe_pairs AS (\n        -- Get all the title, goalId pairs seen more than once\n        SELECT\n          title d_title,\n          "goalId" d_gid\n        FROM "Objectives"\n        WHERE "deletedAt" IS NULL\n        GROUP BY 1,2\n        HAVING COUNT(*) > 1\n        ), candidate_dupes AS (\n        -- get all the Objectives that have the candidate dupe pair\n        SELECT\n          id oid,\n          status,\n          MD5(d_title) || '-' || d_gid cd_set_signature,\n          "createdAt" cd_create_time\n        FROM candidate_dupe_pairs\n        JOIN "Objectives"\n          ON title = d_title\n          AND "goalId" = d_gid\n        WHERE "deletedAt" IS NULL\n        ), uncompleted_sets AS (\n        -- only sets with at least one uncompleted Objective should be examined\n        SELECT DISTINCT cd_set_signature us_signature\n        FROM candidate_dupes\n        WHERE status != 'Complete'\n        ), completed_candidates AS (\n        -- link completed Objectives to their completion events\n        SELECT\n          oid c_oid,\n          dml_timestamp complete_time,\n          ROW_NUMBER() OVER (\n            PARTITION BY oid\n            ORDER BY dml_timestamp DESC\n          ) final_complete_rank\n        FROM candidate_dupes\n        JOIN uncompleted_sets\n          ON cd_set_signature = us_signature\n        JOIN "ZALObjectives"\n          ON data_id = oid\n        WHERE status = 'Complete'\n          AND new_row_data->>'status' = 'Complete'\n        ), dupe_collections AS (\n        -- create a collection of dupes that might need merging\n        SELECT\n          oid,\n          status,\n          cd_create_time create_time,\n          complete_time,\n          us_signature set_signature\n        FROM candidate_dupes\n        JOIN uncompleted_sets\n          ON cd_set_signature = us_signature\n        LEFT JOIN completed_candidates\n          ON oid = c_oid\n          AND final_complete_rank = 1\n        ), future_completes AS (\n        -- Link uncomplete Objectives to any future dupes that are Complete\n        SELECT\n          base.oid uncomplete_oid,\n          future_completes.oid future_complete_oid,\n          ROW_NUMBER() OVER (\n            PARTITION BY base.oid\n            ORDER BY future_completes.complete_time\n          ) closest_complete_rank,\n          base.set_signature\n        FROM dupe_collections base\n        LEFT JOIN dupe_collections future_completes\n          ON base.set_signature = future_completes.set_signature\n          AND future_completes.complete_time > base.create_time\n        ), open_sets AS (\n        -- get cases where there is no future complete and multiple dupes, which also need merging\n        SELECT\n          set_signature,\n          uncomplete_oid,\n          SUM(CASE WHEN future_complete_oid IS NULL THEN 1 ELSE 0 END) OVER (\n            PARTITION BY set_signature\n          ) unmatched_sum\n        FROM future_completes\n        WHERE future_complete_oid IS NULL\n        ), ranked_status AS (\n        -- creating a status ranking so that active statuses outrank inactive\n        SELECT 'Not Started' stat, 1 srank\n        UNION SELECT 'In Progress', 2\n        UNION SELECT 'Suspended', 2\n        ), ranked_updates AS (\n        -- Find which update was the most recent amongst all the Objectives in the set\n        -- so we can use that as the receiving Objective\n        SELECT\n          uncomplete_oid,\n          set_signature,\n          dml_timestamp,\n          new_row_data->>'status' zstatus,\n          ROW_NUMBER() OVER (\n            PARTITION BY set_signature\n            ORDER BY srank DESC, dml_timestamp DESC\n          ) latest_status_rank\n        FROM open_sets\n        JOIN "ZALObjectives"\n          ON uncomplete_oid = data_id\n        JOIN ranked_status\n          ON new_row_data->>'status' = stat\n        WHERE unmatched_sum > 1\n        )\n        -- Union the merge-to-current and merge-to-complete sets\n        -- Objectives not in this list don't need merging because they are\n        -- either already complete or the last updated non-closed objective\n        SELECT DISTINCT\n          donor.uncomplete_oid donor_oid,\n          heir.uncomplete_oid target_oid,\n          donor.set_signature,\n          'to current' inheritance_type\n        FROM ranked_updates donor\n        JOIN ranked_updates heir\n          ON donor.set_signature = heir.set_signature\n          AND heir.latest_status_rank = 1\n        WHERE donor.uncomplete_oid != heir.uncomplete_oid\n        UNION\n        SELECT\n          uncomplete_oid donor_oid,\n          future_complete_oid,\n          set_signature,\n          'to complete'\n        FROM future_completes\n        WHERE closest_complete_rank = 1\n          AND uncomplete_oid != future_complete_oid\n          AND future_complete_oid IS NOT NULL\n        ;\n\n        -- Merge objective collaborators\n        DROP TABLE IF EXISTS relinked_objective_collaborators;\n        CREATE TEMP TABLE relinked_objective_collaborators\n        AS\n        WITH updater AS (\n          WITH unmatched AS (\n            SELECT\n              donor_oid,\n              "userId" uid\n            FROM objective_merges om\n            JOIN "ObjectiveCollaborators" oc\n              ON om.donor_oid = oc."objectiveId"\n            EXCEPT\n            SELECT\n              donor_oid,\n              "userId"\n            FROM objective_merges om\n            JOIN "ObjectiveCollaborators" oc\n              ON om.target_oid = oc."objectiveId"\n          )\n          UPDATE "ObjectiveCollaborators" AS oc\n          SET "objectiveId" = target_oid\n          FROM objective_merges om\n          JOIN unmatched u\n            ON u.donor_oid = om.donor_oid\n          WHERE oc."userId" = u.uid\n            AND oc."objectiveId" = u.donor_oid\n          RETURNING\n            id ocid,\n            om.donor_oid original_oid\n        ) SELECT * FROM updater\n        ;\n\n        -- Update the merge target objectives\n        DROP TABLE IF EXISTS updated_target_objectives;\n        CREATE TEMP TABLE updated_target_objectives\n        AS\n        WITH updater AS (\n          UPDATE "Objectives" AS o\n          SET\n            "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n            "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n            "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n            "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n            "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n            "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n            "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n            "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n            "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n          FROM objective_merges om\n          JOIN "Objectives" d_o\n            ON om.donor_oid = d_o.id\n          WHERE om.target_oid = o.id\n          RETURNING\n            o.id oid,\n            donor_oid\n        ) SELECT * FROM updater\n        ;\n\n        -- Update AROs associated with donor Objectives to point at target Objectives\n        -- This allows running the standard ARO deduplication logic\n        DROP TABLE IF EXISTS redirected_aros;\n        CREATE TEMP TABLE redirected_aros\n        AS\n        WITH updater AS (\n          UPDATE "ActivityReportObjectives" AS aro\n          SET "objectiveId" = target_oid\n          FROM objective_merges om\n          JOIN "ActivityReportObjectives" d_aro\n            ON d_aro."objectiveId" = donor_oid\n          WHERE d_aro.id = aro.id\n          RETURNING\n            aro.id aroid,\n            d_aro.id donor_aroid,\n            target_oid,\n            donor_oid\n        ) SELECT * FROM updater\n        ;\n        \n        --------------------------------------------------------------------------------\n        -- START Apply the logic for ARO deduplication ---------------------------------\n        --------------------------------------------------------------------------------\n\n        -- Create temporary table for dup_aro_sets\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        CREATE TEMP TABLE temp_dup_aro_sets\n        AS\n        WITH dupe_aro_pairs AS (\n        SELECT\n          "activityReportId" arid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        GROUP BY 1,2\n        HAVING COUNT(id) > 1\n        ),\n        dupe_aros AS (\n        SELECT\n          arid,\n          oid,\n          id aroid\n        FROM "ActivityReportObjectives"\n        JOIN dupe_aro_pairs\n          ON "activityReportId" = arid\n          AND "objectiveId" = oid\n        )\n        SELECT\n          arid "activityReportId",\n          oid "objectiveId",\n          min(zaro.dml_timestamp) "min_dml_timestamp",\n          max(zaro.dml_timestamp) "max_dml_timestamp",\n          COUNT(zaro.id) "count_id",\n          array_agg(zaro.data_id ORDER BY zaro.data_id ASC) "aroIds"\n        FROM dupe_aros\n        JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = aroid\n        GROUP BY 1,2\n        ORDER BY 3 DESC;\n\n        -- Create temporary table for reduced_arot\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        CREATE TEMP TABLE temp_reduced_arot\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arot."topicId",\n          MIN(arot."createdAt") "createdAt",\n          MAX(arot."updatedAt") "updatedAt",\n          ARRAY_AGG(arot.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON arot."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_updated_topics;\n        CREATE TEMP TABLE temp_updated_topics\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveTopics" t\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arot s\n            WHERE t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            RETURNING t.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        CREATE TEMP TABLE temp_inserted_topics\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveTopics" (\n                "activityReportObjectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."topicId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arot s\n            LEFT JOIN "ActivityReportObjectiveTopics" t\n            ON t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            WHERE t."activityReportObjectiveId" IS NULL\n            AND t."topicId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_deleted_topics;\n        CREATE TEMP TABLE temp_deleted_topics\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveTopics" t\n            USING temp_reduced_arot r\n            WHERE t."topicId" = r."topicId"\n            AND t.id = ANY (r.ids)\n            AND t."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING t.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aroc\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        CREATE TEMP TABLE temp_reduced_aroc\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aroc."courseId",\n          MIN(aroc."createdAt") "createdAt",\n          MAX(aroc."updatedAt") "updatedAt",\n          ARRAY_AGG(aroc.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON aroc."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_updated_courses;\n        CREATE TEMP TABLE temp_updated_courses\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveCourses" c\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aroc s\n            WHERE c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            RETURNING c.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        CREATE TEMP TABLE temp_inserted_courses\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveCourses" (\n                "activityReportObjectiveId",\n                "courseId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."courseId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aroc s\n            LEFT JOIN "ActivityReportObjectiveCourses" c\n            ON c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            WHERE c."activityReportObjectiveId" IS NULL\n            AND c."courseId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_deleted_courses;\n        CREATE TEMP TABLE temp_deleted_courses\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveCourses" c\n            USING temp_reduced_aroc r\n            WHERE c."courseId" = r."courseId"\n            AND c.id = ANY (r.ids)\n            AND c."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING c.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_arof\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        CREATE TEMP TABLE temp_reduced_arof\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arof."fileId",\n          MIN(arof."createdAt") "createdAt",\n          MAX(arof."updatedAt") "updatedAt",\n          ARRAY_AGG(arof.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON arof."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_updated_files;\n        CREATE TEMP TABLE temp_updated_files\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveFiles" f\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arof s\n            WHERE f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            RETURNING f.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_inserted_files;\n        CREATE TEMP TABLE temp_inserted_files\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveFiles" (\n                "activityReportObjectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."fileId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arof s\n            LEFT JOIN "ActivityReportObjectiveFiles" f\n            ON f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            WHERE f."activityReportObjectiveId" IS NULL\n            AND f."fileId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_deleted_files;\n        CREATE TEMP TABLE temp_deleted_files\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveFiles" f\n            USING temp_reduced_arof r\n            WHERE f."fileId" = r."fileId"\n            AND f.id = ANY (r.ids)\n            AND f."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING f.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_aror\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        CREATE TEMP TABLE temp_reduced_aror\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aror."resourceId",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          ARRAY_AGG(aror.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveResources" aror\n        ON aror."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_updated_resources;\n        CREATE TEMP TABLE temp_updated_resources\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveResources" r\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aror s\n            WHERE r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            RETURNING r.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        CREATE TEMP TABLE temp_inserted_resources\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveResources" (\n                "activityReportObjectiveId",\n                "resourceId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."resourceId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aror s\n            LEFT JOIN "ActivityReportObjectiveResources" r\n            ON r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            WHERE r."activityReportObjectiveId" IS NULL\n            AND r."resourceId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_deleted_resources;\n        CREATE TEMP TABLE temp_deleted_resources\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveResources" r\n            USING temp_reduced_aror t\n            WHERE r."resourceId" = t."resourceId"\n            AND r.id = ANY (t.ids)\n            AND r."activityReportObjectiveId" != t."activityReportObjectiveId"\n            RETURNING r.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aro\n        DROP TABLE IF EXISTS temp_reduced_aro;\n        CREATE TEMP TABLE temp_reduced_aro\n        AS\n        WITH ttap_upd_seq AS ( -- get the update list for each aro set\n        SELECT\n          new_row_data->>'ttaProvided' ttap,\n          das."aroIds"[1] dest_aroid,\n          MAX(LENGTH(new_row_data->>'ttaProvided')) OVER (PARTITION BY "activityReportId", "objectiveId") maxlength,\n          zaro.id zaroid\n        FROM temp_dup_aro_sets das\n        JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = ANY("aroIds")\n        WHERE  new_row_data->'ttaProvided' IS NOT NULL\n        ),\n        ranked_ttap_upd AS ( -- rank the update list per the criteria\n        SELECT\n          ttap,\n          dest_aroid,\n          zaroid,\n          maxlength,\n          ROW_NUMBER() OVER (\n            PARTITION BY dest_aroid\n            ORDER BY (LENGTH(ttap) < 10 AND (maxlength / (LENGTH(ttap)+1)) > 8), zaroid DESC\n          ) select_order\n        FROM ttap_upd_seq\n        )\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          rtu.dest_aroid id,\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          rtu.ttap "ttaProvided",\n          (ARRAY_AGG(aro."title" ORDER BY LENGTH(aro."title") DESC))[1] "title",\n          CASE MAX(CASE\n              WHEN aro.status = 'Complete' THEN 4\n              WHEN aro.status = 'Suspended' THEN 3\n              WHEN aro.status = 'In Progress' THEN 2\n              WHEN aro.status = 'Not Started' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Complete'\n              WHEN 3 THEN 'Suspended'\n              WHEN 2 THEN 'In Progress'\n              WHEN 1 THEN 'Not Started'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS status,\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(aro."closeSuspendReason" ORDER BY LENGTH(aro."closeSuspendReason"::text) DESC))[1] "closeSuspendReason",\n          (ARRAY_AGG(aro."closeSuspendContext" ORDER BY LENGTH(aro."closeSuspendContext") DESC))[1] "closeSuspendContext",\n          (ARRAY_AGG(aro."originalObjectiveId" ORDER BY aro."originalObjectiveId"))[1] "originalObjectiveId",\n          CASE MAX(CASE\n              WHEN aro."supportType" = 'Maintaining' THEN 4\n              WHEN aro."supportType" = 'Implementing' THEN 3\n              WHEN aro."supportType" = 'Introducing' THEN 2\n              WHEN aro."supportType" = 'Planning' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Maintaining'\n              WHEN 3 THEN 'Implementing'\n              WHEN 2 THEN 'Introducing'\n              WHEN 1 THEN 'Planning'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS "supportType",\n          bool_or(aro."objectiveCreatedHere") "objectiveCreatedHere",\n          array_agg(aro.id order by aro.id) "aroIds"\n        FROM temp_dup_aro_sets das\n        JOIN ranked_ttap_upd rtu\n          ON rtu.select_order = 1\n          AND rtu.dest_aroid = ANY (das."aroIds")\n        JOIN "ActivityReportObjectives" aro\n          ON aro.id = ANY (das."aroIds")\n        GROUP BY 1,2,3,6;\n\n        -- Update matching records in ActivityReportObjectives\n        DROP TABLE IF EXISTS temp_updated_aro;\n        CREATE TEMP TABLE temp_updated_aro\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectives" o\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt",\n                "ttaProvided" = s."ttaProvided",\n                "title" = s."title",\n                "status" = s."status",\n                "arOrder" = s."arOrder",\n                "closeSuspendReason" = s."closeSuspendReason",\n                "closeSuspendContext" = s."closeSuspendContext",\n                "originalObjectiveId" = s."originalObjectiveId",\n                "supportType" = s."supportType"::"enum_ActivityReportObjectives_supportType",\n                "objectiveCreatedHere" = s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            WHERE o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            RETURNING o.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectives\n        -- There should never be an INSERT performed here, but the code is present to complete the structure UID structure\n        DROP TABLE IF EXISTS temp_inserted_aro;\n        CREATE TEMP TABLE temp_inserted_aro\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectives" (\n                "activityReportId",\n                "objectiveId",\n                "id",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided",\n                "title",\n                "status",\n                "arOrder",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "originalObjectiveId",\n                "supportType",\n                "objectiveCreatedHere"\n            )\n            SELECT\n                s."activityReportId",\n                s."objectiveId",\n                s.id,\n                s."createdAt",\n                s."updatedAt",\n                s."ttaProvided",\n                s."title",\n                s."status",\n                s."arOrder",\n                s."closeSuspendReason",\n                s."closeSuspendContext",\n                s."originalObjectiveId",\n                s."supportType"::"enum_ActivityReportObjectives_supportType",\n                s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            LEFT JOIN "ActivityReportObjectives" o\n            ON o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            WHERE o.id IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectives\n        DROP TABLE IF EXISTS temp_deleted_aro;\n        CREATE TEMP TABLE temp_deleted_aro\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectives" o\n            USING temp_reduced_aro r\n            WHERE o."objectiveId" = r."objectiveId"\n            AND o."activityReportId" = r."activityReportId"\n            AND o.id = ANY (ARRAY_REMOVE(r."aroIds", r."aroIds"[1]))\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        --------------------------------------------------------------------------------\n        -- FINISHED Apply the logic for ARO deduplication ------------------------------\n        --------------------------------------------------------------------------------\n\n        -- results of ARO dedupe\n        SELECT\n            'ActivityReportObjectiveTopics' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_topics) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_topics) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_topics) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveCourses' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_courses) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_courses) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_courses) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveFiles' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_files) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_files) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_files) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveResources' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_resources) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_resources) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_resources) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectives' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_aro) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_aro) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_aro) d;\n\n        --------------------------------------------------------------------------------\n        -- RESUME Objective deduplication section --------------------------------------\n        --------------------------------------------------------------------------------\n        \n        -- Delete duplicate objective collaborators\n        DROP TABLE IF EXISTS deleted_objective_collaborators;\n        CREATE TEMP TABLE deleted_objective_collaborators\n        AS\n        WITH updater AS (\n          DELETE FROM "ObjectiveCollaborators"\n          USING objective_merges\n          WHERE "objectiveId" = donor_oid\n          RETURNING\n            id ocid,\n            donor_oid\n        ) SELECT * FROM updater\n        ;\n\n        -- Soft delete operation for duplicate Objectives\n        -- Originally this was a hard delete, but that breaks the\n        -- ActivityReportObjectives_originalObjectiveId_fkey constraint\n        -- and updating originalObjectiveId seems like a bad idea\n        DROP TABLE IF EXISTS temp_deleted_objectives;\n        CREATE TEMP TABLE temp_deleted_objectives\n        AS\n        WITH deleted_rows AS (\n            UPDATE "Objectives" o\n            SET "deletedAt" = NOW()\n            FROM objective_merges om\n            WHERE donor_oid = id\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        SELECT\n          1 op_order,\n          'deleted_objectives' operation,\n          COUNT(*) cnt\n        FROM temp_deleted_objectives\n        UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n        UNION SELECT 16,'relinked_objective_collaborators', COUNT(*) FROM relinked_objective_collaborators\n        UNION SELECT 17,'deleted_objective_collaborators', COUNT(*) FROM deleted_objective_collaborators\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (20331b42-b955-47f1-89ce-5543e13d2e7a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250107000001-merge-duplicate-objectives: migrated (0.083s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250109205626-AddMonitoringEnum: migrating =======
Executing (45bc90c2-65d6-4ce8-9b38-2034b5e0ef52): START TRANSACTION;
Connection validated successfully
Executing (45bc90c2-65d6-4ce8-9b38-2034b5e0ef52): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250109205626-AddMonitoringEnum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Connection validated successfully
Executing (45bc90c2-65d6-4ce8-9b38-2034b5e0ef52): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250109205626-AddMonitoringEnum: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250109205626-add-activity-report-objective-citations: migrating =======
Executing (d8f224a6-b65d-4a89-a29b-84e590f5e052): START TRANSACTION;
Connection validated successfully
Executing (d8f224a6-b65d-4a89-a29b-84e590f5e052): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250109205626-add-activity-report-objective-citations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d8f224a6-b65d-4a89-a29b-84e590f5e052): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveCitations" ("id"  SERIAL , "activityReportObjectiveId" INTEGER NOT NULL, "citation" TEXT NOT NULL, "monitoringReferences" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (d8f224a6-b65d-4a89-a29b-84e590f5e052): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250109205626-add-activity-report-objective-citations: migrated (0.046s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250109205626-create-standard-goal-template-column: migrating =======
Executing (2624a41c-7f7a-454b-8fc8-83c0e6572ee0): START TRANSACTION;
Connection validated successfully
Executing (2624a41c-7f7a-454b-8fc8-83c0e6572ee0): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250109205626-create-standard-goal-template-column.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2624a41c-7f7a-454b-8fc8-83c0e6572ee0): UPDATE "GoalTemplates"\n        SET "creationMethod" = 'Curated'\n        WHERE "creationMethod" = 'System Generated';
Executing (2624a41c-7f7a-454b-8fc8-83c0e6572ee0): ALTER TABLE "GoalTemplates"\n      ADD COLUMN standard TEXT GENERATED ALWAYS AS (\n        CASE\n        WHEN "creationMethod" = 'Curated' THEN substring("templateName" from '(?:^[(]([^)]+)[)])')\n        ELSE NULL\n        END) STORED;
Executing (2624a41c-7f7a-454b-8fc8-83c0e6572ee0): CREATE UNIQUE INDEX unique_standard_non_null\n        ON "GoalTemplates"(standard)\n        WHERE standard IS NOT NULL;
Executing (2624a41c-7f7a-454b-8fc8-83c0e6572ee0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250109205626-create-standard-goal-template-column: migrated (0.043s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250110162036-AddMonitoringEnum: migrating =======
Executing (6214be6f-146b-464e-b9ad-3fcdc3417600): START TRANSACTION;
Connection validated successfully
Executing (6214be6f-146b-464e-b9ad-3fcdc3417600): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250110162036-AddMonitoringEnum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Connection validated successfully
Executing (6214be6f-146b-464e-b9ad-3fcdc3417600): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250110162036-AddMonitoringEnum: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250110162153-add-activity-report-objective-citations: migrating =======
Executing (470635cf-1bbe-4e2c-ba7c-0b3fca61cdea): START TRANSACTION;
Connection validated successfully
Executing (470635cf-1bbe-4e2c-ba7c-0b3fca61cdea): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250110162153-add-activity-report-objective-citations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (470635cf-1bbe-4e2c-ba7c-0b3fca61cdea): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveCitations" ("id"  SERIAL , "activityReportObjectiveId" INTEGER NOT NULL, "citation" TEXT NOT NULL, "monitoringReferences" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (470635cf-1bbe-4e2c-ba7c-0b3fca61cdea): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250110162153-add-activity-report-objective-citations: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250116140614-AddMonitoringEnum: migrating =======
Executing (13a8fd64-45be-4e59-ae57-2c6ffecb058c): START TRANSACTION;
Connection validated successfully
Executing (13a8fd64-45be-4e59-ae57-2c6ffecb058c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250116140614-AddMonitoringEnum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Connection validated successfully
Executing (13a8fd64-45be-4e59-ae57-2c6ffecb058c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250116140614-AddMonitoringEnum: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250116140614-add-activity-report-objective-citations: migrating =======
Executing (aef6e0e5-0e9e-4e5f-89c2-c4e3afe62efc): START TRANSACTION;
Connection validated successfully
Executing (aef6e0e5-0e9e-4e5f-89c2-c4e3afe62efc): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250116140614-add-activity-report-objective-citations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (aef6e0e5-0e9e-4e5f-89c2-c4e3afe62efc): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveCitations" ("id"  SERIAL , "activityReportObjectiveId" INTEGER NOT NULL, "citation" TEXT NOT NULL, "monitoringReferences" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (aef6e0e5-0e9e-4e5f-89c2-c4e3afe62efc): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250116140614-add-activity-report-objective-citations: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250205000000-clean_disallowed_goal_data: migrating =======
Executing (3f684e93-8f41-4835-9324-de4f1667cd76): START TRANSACTION;
Connection validated successfully
Executing (3f684e93-8f41-4835-9324-de4f1667cd76): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250205000000-clean_disallowed_goal_data.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- If objectives are neither suspended nor complete and are on closed\n        -- Goals, this marks them 'Suspended'. It also soft-deletes Goals\n        -- with disallowed text that are not on any non-deleted AR.\n\n        -- Create a table listing all Goals with text that was disallowed due\n        -- to the EO.\n        DROP TABLE IF EXISTS disallowed_goals;\n        CREATE TEMP TABLE disallowed_goals\n        AS\n        SELECT\n          id gid,\n          name gname,\n          status gstatus\n        FROM "Goals"\n        WHERE (\n            LOWER(name) LIKE '% dei%'\n            OR\n            LOWER(name) LIKE '% equit%'\n            OR\n            LOWER(name) LIKE 'dei%'\n            OR\n            LOWER(name) LIKE 'equit%'\n          )\n          AND "deletedAt" IS NULL\n        ;\n\n        -- Get a list of all the active Objectives on Goals with a status of\n        -- 'Closed'. Keeping this order after generelizing the logic to make\n        -- a less confusing diff from the previous version that only applied\n        -- to disallowed goals.\n        DROP TABLE IF EXISTS objectives_to_suspend;\n        CREATE TEMP TABLE objectives_to_suspend\n        AS\n        SELECT\n          o.id oid,\n          -- Other columns here for convenience when inspecting\n          o.status orig_ostatus,\n          o."createdAt" obj_createtime,\n          LEFT(o.title, 30) short_otitle,\n          LEFT(g.name, 50) short_gname\n        FROM "Objectives" o\n        JOIN "Goals" g\n          ON o."goalId" = g.id\n        WHERE g.status = 'Closed'\n          AND o.status NOT IN ('Complete', 'Suspended')\n          AND g."deletedAt" IS NULL\n          AND o."deletedAt" IS NULL\n        ;\n\n        -- Update the Objectives\n        DROP TABLE IF EXISTS updated_obj;\n        CREATE TEMP TABLE updated_obj\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Objectives"\n        SET\n          "updatedAt" = nowts,\n          status = 'Suspended'\n        FROM objectives_to_suspend\n        CROSS JOIN nowtime\n        WHERE oid = id\n        RETURNING id completed_oid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- Get a list of all the disallowed Goals without any connections\n        -- to non-deleted ARs. We will soft-delete these.\n        DROP TABLE IF EXISTS goals_to_delete;\n        CREATE TEMP TABLE goals_to_delete\n        AS\n        WITH linked_goals AS (\n        SELECT\n          gid,\n          aro.id aroid,\n          "calculatedStatus" ar_status,\n          gname\n        FROM disallowed_goals\n        LEFT JOIN "ActivityReportGoals" aro\n          ON "goalId" = gid\n        LEFT JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n        ),\n        -- This is here in case the goals are connected to both deleted and\n        -- non-deleted ARs\n        marked_goals AS (\n        SELECT\n          gid marked_gid,\n          BOOL_AND(aroid IS NULL) unlinked,\n          BOOL_AND(ar_status = 'deleted') all_deleted\n        FROM linked_goals\n        GROUP BY 1\n        )\n        SELECT\n          gid,\n          -- Other columns here for convenience when inspecting\n          aroid,\n          ar_status,\n          LEFT(gname, 50) short_gname\n        FROM linked_goals\n        JOIN marked_goals\n          ON gid = marked_gid\n        WHERE unlinked\n          OR all_deleted\n        ;\n\n        DROP TABLE IF EXISTS updated_goals;\n        CREATE TEMP TABLE updated_goals\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Goals"\n        SET\n          "updatedAt" = nowts,\n          "deletedAt" = nowts\n        FROM goals_to_delete\n        CROSS JOIN nowtime\n        WHERE gid = id\n        RETURNING id deleted_gid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- disallowed_goals is just for context but the other numbers should match up\n        SELECT 1 ord,'disallowed_goals' item, COUNT(*) cnt FROM disallowed_goals\n        UNION\n        SELECT 2, 'objectives_to_suspend' , COUNT(*)  FROM objectives_to_suspend\n        UNION\n        SELECT 3, 'updated_obj', COUNT(*)  FROM updated_obj\n        UNION\n        SELECT 4, 'mismatched suspensions', COUNT(*) FROM (\n          (\n            SELECT oid FROM objectives_to_suspend\n            EXCEPT\n            SELECT completed_oid FROM updated_obj\n          )\n          UNION\n          (\n            SELECT completed_oid FROM updated_obj\n            EXCEPT\n            SELECT oid FROM objectives_to_suspend\n          )\n        ) a\n        UNION\n        SELECT 5, 'goals_to_delete' , COUNT(*)  FROM goals_to_delete\n        UNION\n        SELECT 6, 'updated_goals', COUNT(*)  FROM updated_goals\n        UNION\n        SELECT 7, 'mismatched deletions', COUNT(*) FROM (\n          (\n            SELECT gid FROM goals_to_delete\n            EXCEPT\n            SELECT deleted_gid FROM updated_goals\n          )\n          UNION\n          (\n            SELECT deleted_gid FROM updated_goals\n            EXCEPT\n            SELECT gid FROM goals_to_delete\n          )\n        ) a\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (3f684e93-8f41-4835-9324-de4f1667cd76): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250205000000-clean_disallowed_goal_data: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250205000001-apply-eo-directives: migrating =======
Executing (d560b31a-de20-4b49-8cfb-75c8151f1cd7): START TRANSACTION;
Connection validated successfully
Executing (d560b31a-de20-4b49-8cfb-75c8151f1cd7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250205000001-apply-eo-directives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TABLE "GoalTemplates" DROP COLUMN IF EXISTS "deletedAt";
Connection validated successfully
Executing (d560b31a-de20-4b49-8cfb-75c8151f1cd7): ALTER TABLE "public"."GoalTemplates" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (d560b31a-de20-4b49-8cfb-75c8151f1cd7): UPDATE "Topics" SET "deletedAt" = NOW() WHERE "name" = 'Equity';\n         UPDATE "GoalTemplates" SET "deletedAt" = NOW() WHERE "templateName" = '(DEIA) The recipient will implement comprehensive systems and services that promote diversity, equity, inclusion, accessibility, and belonging.';
Executing (d560b31a-de20-4b49-8cfb-75c8151f1cd7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250205000001-apply-eo-directives: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250205141016-update-eclkc-maps-to: migrating =======
Executing (4a547545-f352-4e0f-8e6f-eca0a8aff7d5): START TRANSACTION;
Connection validated successfully
Executing (4a547545-f352-4e0f-8e6f-eca0a8aff7d5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250205141016-update-eclkc-maps-to.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (4a547545-f352-4e0f-8e6f-eca0a8aff7d5): ALTER TABLE "public"."Resources" ADD COLUMN "mapsTo" INTEGER REFERENCES "Resources" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (4a547545-f352-4e0f-8e6f-eca0a8aff7d5): -- Create new headstart.gov resources for all eclkc resources that are missing.\n         WITH orig_resources AS (\n            SELECT DISTINCT ON ("url")\n            *\n            FROM "Resources"\n            WHERE "domain" = 'eclkc.ohs.acf.hhs.gov'\n            ORDER BY "url", "metadataUpdatedAt" DESC, "updatedAt" DESC\n            ),\n        existing_new_resources AS (\n            SELECT\n            "url"\n            FROM "Resources"\n            WHERE "domain" = 'headstart.gov'\n            GROUP BY 1\n        ) INSERT INTO "Resources" (\n        "domain", "url", "title", "mimeType",\n        "lastStatusCode", "metadata", "metadataUpdatedAt",\n        "mapsTo", "createdAt", "updatedAt"\n        )\n        SELECT\n        'headstart.gov' AS domain,\n        regexp_replace(\n            o."url", 'eclkc.ohs.acf.hhs.gov',\n            'headstart.gov'\n        ) AS "url",\n        o."title",\n        o."mimeType",\n        o."lastStatusCode",\n        o."metadata",\n        o."metadataUpdatedAt",\n        null AS "mapsTo",\n        NOW() "createdAt",\n        NOW() "updatedAt"\n        FROM\n        orig_resources o\n        LEFT JOIN existing_new_resources e\n            -- Prevent duplicating existing headstart.gov resources.\n            ON regexp_replace(o."url", 'eclkc.ohs.acf.hhs.gov', 'headstart.gov') = e."url"\n        WHERE\n        e."url" IS NULL;\n\n        -- Set the mapsTo for all old eclkc resources to the new headstart.gov resources.\n        WITH new_resources AS (\n        SELECT\n            *\n        FROM\n            "Resources"\n        WHERE\n            "domain" = 'headstart.gov'\n        )\n        UPDATE\n        "Resources" r\n        SET\n        "mapsTo" = n.id\n        FROM\n        new_resources n\n        -- Where everything in the URL matches expect the domain, which we expect to be headstart.gov.\n        WHERE\n        r."url" = regexp_replace(\n            n."url", 'headstart.gov', 'eclkc.ohs.acf.hhs.gov'\n        );
Executing (4a547545-f352-4e0f-8e6f-eca0a8aff7d5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250205141016-update-eclkc-maps-to: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250206170000-add-uniq-aro-constraint-redo: migrating =======
Executing (819761fb-8998-4561-9554-2e86e27b79d5): START TRANSACTION;
Connection validated successfully
Executing (819761fb-8998-4561-9554-2e86e27b79d5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250206170000-add-uniq-aro-constraint-redo.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This is an updated version of the ARO deduplication logic\n        -- written to accommodate records without audit log entries\n\n        -- Create temporary table for dupe_aro_pairs which is used to create\n        -- dup_aro_sets for DML work and also to use in the "before-after" test\n        DROP TABLE IF EXISTS dupe_aro_pairs;\n        CREATE TEMP TABLE dupe_aro_pairs\n        AS\n        SELECT\n          "activityReportId" arid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        GROUP BY 1,2\n        HAVING COUNT(id) > 1\n        ;\n\n        -- Create temporary table for dup_aro_sets which is used\n        -- in the DML change logic\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        CREATE TEMP TABLE temp_dup_aro_sets\n        AS\n        WITH dupe_aros AS (\n        SELECT\n          arid,\n          oid,\n          id aroid,\n          "createdAt" createtime,\n          "updatedAt" updatetime\n        FROM "ActivityReportObjectives"\n        JOIN dupe_aro_pairs\n          ON "activityReportId" = arid\n          AND "objectiveId" = oid\n        )\n        SELECT\n          arid "activityReportId",\n          oid "objectiveId",\n          min(COALESCE(zaro.dml_timestamp, createtime)) "min_dml_timestamp",\n          max(COALESCE(zaro.dml_timestamp, updatetime)) "max_dml_timestamp",\n          COUNT(zaro.id) "count_id",\n          array_agg(aroid ORDER BY zaro.data_id ASC) "aroIds"\n        FROM dupe_aros\n        LEFT JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = aroid\n        GROUP BY 1,2\n        ORDER BY 3 DESC;\n\n        \n\n        -- Create temporary table for reduced_arot\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        CREATE TEMP TABLE temp_reduced_arot\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arot."topicId",\n          MIN(arot."createdAt") "createdAt",\n          MAX(arot."updatedAt") "updatedAt",\n          ARRAY_AGG(arot.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON arot."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_updated_topics;\n        CREATE TEMP TABLE temp_updated_topics\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveTopics" t\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arot s\n            WHERE t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            RETURNING t.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        CREATE TEMP TABLE temp_inserted_topics\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveTopics" (\n                "activityReportObjectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."topicId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arot s\n            LEFT JOIN "ActivityReportObjectiveTopics" t\n            ON t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            WHERE t."activityReportObjectiveId" IS NULL\n            AND t."topicId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_deleted_topics;\n        CREATE TEMP TABLE temp_deleted_topics\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveTopics" t\n            USING temp_reduced_arot r\n            WHERE t."topicId" = r."topicId"\n            AND t.id = ANY (r.ids)\n            AND t."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING t.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aroc\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        CREATE TEMP TABLE temp_reduced_aroc\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aroc."courseId",\n          MIN(aroc."createdAt") "createdAt",\n          MAX(aroc."updatedAt") "updatedAt",\n          ARRAY_AGG(aroc.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON aroc."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_updated_courses;\n        CREATE TEMP TABLE temp_updated_courses\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveCourses" c\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aroc s\n            WHERE c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            RETURNING c.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        CREATE TEMP TABLE temp_inserted_courses\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveCourses" (\n                "activityReportObjectiveId",\n                "courseId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."courseId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aroc s\n            LEFT JOIN "ActivityReportObjectiveCourses" c\n            ON c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            WHERE c."activityReportObjectiveId" IS NULL\n            AND c."courseId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_deleted_courses;\n        CREATE TEMP TABLE temp_deleted_courses\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveCourses" c\n            USING temp_reduced_aroc r\n            WHERE c."courseId" = r."courseId"\n            AND c.id = ANY (r.ids)\n            AND c."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING c.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_arof\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        CREATE TEMP TABLE temp_reduced_arof\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arof."fileId",\n          MIN(arof."createdAt") "createdAt",\n          MAX(arof."updatedAt") "updatedAt",\n          ARRAY_AGG(arof.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON arof."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_updated_files;\n        CREATE TEMP TABLE temp_updated_files\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveFiles" f\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arof s\n            WHERE f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            RETURNING f.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_inserted_files;\n        CREATE TEMP TABLE temp_inserted_files\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveFiles" (\n                "activityReportObjectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."fileId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arof s\n            LEFT JOIN "ActivityReportObjectiveFiles" f\n            ON f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            WHERE f."activityReportObjectiveId" IS NULL\n            AND f."fileId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_deleted_files;\n        CREATE TEMP TABLE temp_deleted_files\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveFiles" f\n            USING temp_reduced_arof r\n            WHERE f."fileId" = r."fileId"\n            AND f.id = ANY (r.ids)\n            AND f."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING f.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_aror\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        CREATE TEMP TABLE temp_reduced_aror\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aror."resourceId",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          ARRAY_AGG(aror.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveResources" aror\n        ON aror."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_updated_resources;\n        CREATE TEMP TABLE temp_updated_resources\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveResources" r\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aror s\n            WHERE r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            RETURNING r.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        CREATE TEMP TABLE temp_inserted_resources\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveResources" (\n                "activityReportObjectiveId",\n                "resourceId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."resourceId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aror s\n            LEFT JOIN "ActivityReportObjectiveResources" r\n            ON r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            WHERE r."activityReportObjectiveId" IS NULL\n            AND r."resourceId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_deleted_resources;\n        CREATE TEMP TABLE temp_deleted_resources\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveResources" r\n            USING temp_reduced_aror t\n            WHERE r."resourceId" = t."resourceId"\n            AND r.id = ANY (t.ids)\n            AND r."activityReportObjectiveId" != t."activityReportObjectiveId"\n            RETURNING r.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aro\n        DROP TABLE IF EXISTS temp_reduced_aro;\n        CREATE TEMP TABLE temp_reduced_aro\n        AS\n        WITH ttap_upd_seq AS ( -- get the update list for each aro set\n        SELECT\n          COALESCE(new_row_data->>'ttaProvided',"ttaProvided") ttap,\n          das."aroIds"[1] dest_aroid,\n          MAX(LENGTH(COALESCE(new_row_data->>'ttaProvided',"ttaProvided"))) OVER (PARTITION BY aro."activityReportId", aro."objectiveId") maxlength,\n          zaro.id zaroid\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectives" aro\n          ON aro.id = ANY("aroIds")\n        LEFT JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = aro.id\n          AND new_row_data->'ttaProvided' IS NOT NULL\n        ),\n        ranked_ttap_upd AS ( -- rank the update list per the criteria\n        SELECT\n          ttap,\n          dest_aroid,\n          zaroid,\n          maxlength,\n          ROW_NUMBER() OVER (\n            PARTITION BY dest_aroid\n            ORDER BY (LENGTH(ttap) < 10 AND (maxlength / (LENGTH(ttap)+1)) > 8), zaroid DESC\n          ) select_order\n        FROM ttap_upd_seq\n        )\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          rtu.dest_aroid id,\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          rtu.ttap "ttaProvided",\n          (ARRAY_AGG(aro."title" ORDER BY LENGTH(aro."title") DESC))[1] "title",\n          CASE MAX(CASE\n              WHEN aro.status = 'Complete' THEN 4\n              WHEN aro.status = 'Suspended' THEN 3\n              WHEN aro.status = 'In Progress' THEN 2\n              WHEN aro.status = 'Not Started' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Complete'\n              WHEN 3 THEN 'Suspended'\n              WHEN 2 THEN 'In Progress'\n              WHEN 1 THEN 'Not Started'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS status,\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(aro."closeSuspendReason" ORDER BY LENGTH(aro."closeSuspendReason"::text) DESC))[1] "closeSuspendReason",\n          (ARRAY_AGG(aro."closeSuspendContext" ORDER BY LENGTH(aro."closeSuspendContext") DESC))[1] "closeSuspendContext",\n          (ARRAY_AGG(aro."originalObjectiveId" ORDER BY aro."originalObjectiveId"))[1] "originalObjectiveId",\n          CASE MAX(CASE\n              WHEN aro."supportType" = 'Maintaining' THEN 4\n              WHEN aro."supportType" = 'Implementing' THEN 3\n              WHEN aro."supportType" = 'Introducing' THEN 2\n              WHEN aro."supportType" = 'Planning' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Maintaining'\n              WHEN 3 THEN 'Implementing'\n              WHEN 2 THEN 'Introducing'\n              WHEN 1 THEN 'Planning'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS "supportType",\n          bool_or(aro."objectiveCreatedHere") "objectiveCreatedHere",\n          array_agg(aro.id order by aro.id) "aroIds"\n        FROM temp_dup_aro_sets das\n        JOIN ranked_ttap_upd rtu\n          ON rtu.select_order = 1\n          AND rtu.dest_aroid = ANY (das."aroIds")\n        JOIN "ActivityReportObjectives" aro\n          ON aro.id = ANY (das."aroIds")\n        GROUP BY 1,2,3,6;\n\n        -- Update matching records in ActivityReportObjectives\n        DROP TABLE IF EXISTS temp_updated_aro;\n        CREATE TEMP TABLE temp_updated_aro\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectives" o\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt",\n                "ttaProvided" = s."ttaProvided",\n                "title" = s."title",\n                "status" = s."status",\n                "arOrder" = s."arOrder",\n                "closeSuspendReason" = s."closeSuspendReason",\n                "closeSuspendContext" = s."closeSuspendContext",\n                "originalObjectiveId" = s."originalObjectiveId",\n                "supportType" = s."supportType"::"enum_ActivityReportObjectives_supportType",\n                "objectiveCreatedHere" = s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            WHERE o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            RETURNING o.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectives\n        -- There should never be an INSERT performed here, but the code is present to complete the structure UID structure\n        DROP TABLE IF EXISTS temp_inserted_aro;\n        CREATE TEMP TABLE temp_inserted_aro\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectives" (\n                "activityReportId",\n                "objectiveId",\n                "id",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided",\n                "title",\n                "status",\n                "arOrder",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "originalObjectiveId",\n                "supportType",\n                "objectiveCreatedHere"\n            )\n            SELECT\n                s."activityReportId",\n                s."objectiveId",\n                s.id,\n                s."createdAt",\n                s."updatedAt",\n                s."ttaProvided",\n                s."title",\n                s."status",\n                s."arOrder",\n                s."closeSuspendReason",\n                s."closeSuspendContext",\n                s."originalObjectiveId",\n                s."supportType"::"enum_ActivityReportObjectives_supportType",\n                s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            LEFT JOIN "ActivityReportObjectives" o\n            ON o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            WHERE o.id IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectives\n        DROP TABLE IF EXISTS temp_deleted_aro;\n        CREATE TEMP TABLE temp_deleted_aro\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectives" o\n            USING temp_reduced_aro r\n            WHERE o."objectiveId" = r."objectiveId"\n            AND o."activityReportId" = r."activityReportId"\n            AND o.id = ANY (ARRAY_REMOVE(r."aroIds", r."aroIds"[1]))\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        --------------------------------------------------------------------------------\n        -- FINISHED Apply the logic for ARO deduplication ------------------------------\n        --------------------------------------------------------------------------------\n\n        -- results of ARO dedupe\n        SELECT\n            'ActivityReportObjectiveTopics' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_topics) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_topics) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_topics) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveCourses' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_courses) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_courses) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_courses) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveFiles' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_files) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_files) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_files) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveResources' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_resources) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_resources) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_resources) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectives' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_aro) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_aro) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_aro) d;\n\n        -- Prepare additional test to make sure there are no duplicates remaining\n        DROP TABLE IF EXISTS dupe_aro_pairs_after;\n        CREATE TEMP TABLE dupe_aro_pairs_after\n        AS\n        SELECT\n          "activityReportId" arid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        GROUP BY 1,2\n        HAVING COUNT(id) > 1\n        ;\n\n        -- Manual check\n        SELECT 1, 'starting pairs', COUNT(*) FROM dupe_aro_pairs\n        UNION\n        SELECT 2, 'ending pairs', COUNT(*) FROM dupe_aro_pairs_after\n        ORDER BY 1;\n\n        -- Fails the transaction with\n        -- ERROR:  division by zero\n        -- if any dupe pairs remain\n        SELECT 1/ (LEAST(1,(SELECT COUNT(*) FROM dupe_aro_pairs_after)) - 1);
Connection validated successfully
Executing (819761fb-8998-4561-9554-2e86e27b79d5): DROP INDEX IF EXISTS "activity_report_objectives_activity_report_id_objective_id";\n        CREATE UNIQUE INDEX  "activity_report_objectives_activity_report_id_objective_id_unique" ON "ActivityReportObjectives" ("activityReportId","objectiveId");
Executing (819761fb-8998-4561-9554-2e86e27b79d5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250206170000-add-uniq-aro-constraint-redo: migrated (0.114s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250206180000-eo-close-goals-and-objectives: migrating =======
Executing (2d39aaed-be6d-4197-b358-bb7c573f3b40): START TRANSACTION;
Connection validated successfully
Executing (2d39aaed-be6d-4197-b358-bb7c573f3b40): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250206180000-eo-close-goals-and-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This Completes any remaining equity Objectives and Closes any\n        -- remaining equity Goals\n\n        -- Create a list of EO-impacted Goals that are not yet closed\n        DROP TABLE IF EXISTS equity_goals;\n        CREATE TEMP TABLE equity_goals\n        AS\n        SELECT\n          g.id gid,\n          LEFT(name, 30) short_gname,\n          COALESCE(NULLIF(POSITION(' dei' IN LOWER(name)),0),POSITION(' equit' IN LOWER(name))) gissue_loc,\n          status g_status\n        FROM "Goals" g\n        LEFT JOIN "GoalTemplates" gt\n          ON g."goalTemplateId" = gt.id\n        WHERE (\n            LOWER(name) LIKE '% dei%'\n            OR\n            LOWER(name) LIKE '% equit%'\n            OR\n            LOWER(name) LIKE 'dei%'\n            OR\n            LOWER(name) LIKE 'equit%'\n          )\n          AND g.status != 'Closed'\n          AND g."deletedAt" IS NULL\n        ;\n\n        -- Create a list of EO-impacted Objectives that are not yet closed\n        -- and are on a non-deleted Goal. \n        DROP TABLE IF EXISTS equity_objectives;\n        CREATE TEMP TABLE equity_objectives\n        AS\n        SELECT\n          o.id oid,\n          "goalId" ogid,\n          title full_otitle,\n          LEFT(title, 30) short_otitle,\n          COALESCE(NULLIF(POSITION(' dei' IN LOWER(title)),0),POSITION(' equit' IN LOWER(title))) oissue_loc,\n          o.status o_status\n        FROM "Objectives" o\n        JOIN "Goals" g\n          ON o."goalId" = g.id\n        LEFT JOIN equity_goals\n          ON gid = g.id\n        WHERE\n          (\n          gid IS NOT NULL -- Complete objectives on closing Goals\n          OR\n            ( -- Complete objectives with EO-impacted text\n              LOWER(title) LIKE '% dei%'\n              OR\n              LOWER(title) LIKE '% equit%'\n              OR\n              LOWER(title) LIKE 'dei%'\n              OR\n              LOWER(title) LIKE 'equit%'\n            )\n          )\n          AND o.status NOT IN ('Complete','Suspended')\n          AND o."deletedAt" IS NULL\n          AND g."deletedAt" IS NULL\n        ;\n\n        -- Complete the Objectives\n        DROP TABLE IF EXISTS updated_obj;\n        CREATE TEMP TABLE updated_obj\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Objectives"\n        SET\n          "updatedAt" = nowts,\n          status = 'Complete'\n        FROM equity_objectives\n        CROSS JOIN nowtime\n        WHERE oid = id\n        RETURNING id completed_oid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- Complete the Goals\n        DROP TABLE IF EXISTS updated_goals;\n        CREATE TEMP TABLE updated_goals\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Goals"\n        SET\n          "updatedAt" = nowts,\n          status = 'Closed'\n        FROM equity_goals\n        CROSS JOIN nowtime\n        WHERE gid = id\n        RETURNING id closed_gid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- Insert the status changes\n        DROP TABLE IF EXISTS inserted_goal_changes;\n        CREATE TEMP TABLE inserted_goal_changes\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        INSERT INTO "GoalStatusChanges" (\n          "goalId",\n          "oldStatus",\n          "newStatus",\n          reason\n        )\n        SELECT\n          gid,\n          g_status,\n          'Closed',\n          'Regional Office request'\n        FROM equity_goals\n        CROSS JOIN nowtime\n        RETURNING *\n        )\n        SELECT * FROM updater\n        ;\n        \n\n        -- The first two numbers should match and the last should be 0\n        SELECT 1 ord,'equity Objectives' item, COUNT(*) cnt FROM equity_objectives\n        UNION\n        SELECT 2, 'objectives Completed' , COUNT(*)  FROM updated_obj\n        UNION\n        SELECT 3 ,'equity Goals' item, COUNT(*) cnt FROM equity_goals\n        UNION\n        SELECT 4, 'Goals Closed' , COUNT(*)  FROM updated_goals\n        UNION\n        SELECT 5, 'Goal status changes inserted' , COUNT(*)  FROM inserted_goal_changes\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (2d39aaed-be6d-4197-b358-bb7c573f3b40): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250206180000-eo-close-goals-and-objectives: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250206180355-update-headstart-resource-titles: migrating =======
Executing (15106b40-4375-4dc1-bead-ceb485e1b31f): START TRANSACTION;
Connection validated successfully
Executing (15106b40-4375-4dc1-bead-ceb485e1b31f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250206180355-update-headstart-resource-titles.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (15106b40-4375-4dc1-bead-ceb485e1b31f): -- Update the title of all headstart.gov resources that are missing a title by mapping them to the eclkc resource.\n        UPDATE "Resources" AS h\n        SET "title" = e."title"\n        FROM "Resources" AS e\n        WHERE h."domain" = 'headstart.gov'\n        AND h."title" IS NULL\n        AND e."mapsTo" = h."id"\n        AND e."domain" = 'eclkc.ohs.acf.hhs.gov'\n        AND e."title" IS NOT NULL;
Executing (15106b40-4375-4dc1-bead-ceb485e1b31f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250206180355-update-headstart-resource-titles: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250211211956-delete-in-progress-goal: migrating =======
Executing (77fab0ff-8016-4216-8685-bfe7d80376d2): START TRANSACTION;
Connection validated successfully
Executing (77fab0ff-8016-4216-8685-bfe7d80376d2): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250211211956-delete-in-progress-goal.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (77fab0ff-8016-4216-8685-bfe7d80376d2): UPDATE "Goals" SET "deletedAt" = NOW() WHERE "id" = 97478;
Executing (77fab0ff-8016-4216-8685-bfe7d80376d2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250211211956-delete-in-progress-goal: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250213000000-clean-false-status-changes: migrating =======
Executing (cad79089-8a9f-4602-b3ef-4b20f0ce1184): START TRANSACTION;
Connection validated successfully
Executing (cad79089-8a9f-4602-b3ef-4b20f0ce1184): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250213000000-clean-false-status-changes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- Remove extra GoalStatusChange entries that:\n        --  - were inserted when Goals didn't actually change status\n        --  - are duplicate insertions of the same status change\n        -- Also update Goals that have the incorrect "oldStatus" value.\n        -- This appears to occur most often on the initial status change\n        -- for a Goal when an associated Objective is designated as\n        -- In Progress. Potentially that is also when the Goal was created\n\n        DROP TABLE IF EXISTS marked_changes;\n        CREATE TEMP TABLE marked_changes\n        AS\n        SELECT\n          id gscid,\n          "oldStatus" oldstat,\n          "newStatus" newstat,\n          LAG("newStatus") OVER (\n              PARTITION BY "goalId"\n              ORDER BY "createdAt", id\n          ) real_previous_status,\n          "newStatus" != COALESCE(\n            LAG("newStatus") OVER (\n              PARTITION BY "goalId"\n              ORDER BY "createdAt", id\n            ), 'NULL'\n          ) isrealchange\n        FROM "GoalStatusChanges" g\n        ORDER BY "createdAt"\n        ;\n\n        -- Delete any Goal status changes that don't actually have a different\n        -- newStatus value than the preceding record.\n        DROP TABLE IF EXISTS deleted_gsc;\n        CREATE TEMP TABLE deleted_gsc\n        AS\n        WITH updater AS (\n        DELETE FROM "GoalStatusChanges"\n        USING marked_changes\n        WHERE id = gscid\n          AND NOT isrealchange\n        RETURNING id deleted_gscid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- Correct any real Goal status changes that have incorrect oldStatus values\n        DROP TABLE IF EXISTS updated_gsc;\n        CREATE TEMP TABLE updated_gsc\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "GoalStatusChanges"\n        SET\n          "updatedAt" = nowts,\n          "oldStatus" = real_previous_status\n        FROM marked_changes\n        CROSS JOIN nowtime\n        WHERE id = gscid\n          AND COALESCE("oldStatus",'NULL') != COALESCE(real_previous_status,'NULL')\n        RETURNING id updated_gscid\n        )\n        SELECT * FROM updater\n        ;\n\n        DROP TABLE IF EXISTS remarked_changes;\n        CREATE TEMP TABLE remarked_changes\n        AS\n        SELECT\n          id gscid,\n          "oldStatus" oldstat,\n          "newStatus" newstat,\n          LAG("newStatus") OVER (\n              PARTITION BY "goalId"\n              ORDER BY "createdAt", id\n          ) real_previous_status,\n          "newStatus" != COALESCE(\n            LAG("newStatus") OVER (\n              PARTITION BY "goalId"\n              ORDER BY "createdAt", id\n            ), 'NULL'\n          ) isrealchange\n        FROM "GoalStatusChanges" g\n        ORDER BY "createdAt"\n        ;\n        \n\n        -- Check the math in the total_records column. same_statuses is just context.\n        -- needs_update and needs_delete should also match up and end 0\n        SELECT\n          1 ord,\n          COUNT(*) total_records,\n          COUNT(*) FILTER (WHERE oldstat = newstat) same_statuses,\n          COUNT(*) FILTER (WHERE isrealchange AND COALESCE(oldstat,'NULL') != COALESCE(real_previous_status,'NULL')) needs_update,\n          COUNT(*) FILTER (WHERE NOT isrealchange) needs_delete\n        FROM marked_changes\n        GROUP BY 1\n        UNION\n        SELECT\n          2 ord,\n          -(SELECT COUNT(*) FROM deleted_gsc),\n          NULL,\n          -(SELECT COUNT(*) FROM updated_gsc),\n          -(SELECT COUNT(*) FROM deleted_gsc)\n        UNION\n        SELECT\n          3 ord,\n          COUNT(*) total_records,\n          COUNT(*) FILTER (WHERE oldstat = newstat) same_statuses,\n          COUNT(*) FILTER (WHERE isrealchange AND COALESCE(oldstat,'NULL') != COALESCE(real_previous_status,'NULL'))  needs_update,\n          COUNT(*) FILTER (WHERE NOT isrealchange) needs_delete\n        FROM remarked_changes\n        GROUP BY 1\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (cad79089-8a9f-4602-b3ef-4b20f0ce1184): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250213000000-clean-false-status-changes: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250213194933-communication-log-recipients-one-to-many: migrating =======
Executing (702ee3dd-cb96-4788-9a31-46293fe4a468): START TRANSACTION;
Connection validated successfully
Executing (702ee3dd-cb96-4788-9a31-46293fe4a468): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250213194933-communication-log-recipients-one-to-many.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Connection validated successfully
Executing (702ee3dd-cb96-4788-9a31-46293fe4a468): CREATE TABLE IF NOT EXISTS "CommunicationLogRecipients" ("id"  SERIAL , "recipientId" INTEGER NOT NULL REFERENCES "Recipients" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "communicationLogId" INTEGER NOT NULL REFERENCES "CommunicationLogs" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (702ee3dd-cb96-4788-9a31-46293fe4a468): INSERT INTO "CommunicationLogRecipients" ("recipientId", "communicationLogId", "createdAt", "updatedAt")\n        SELECT "recipientId", id, "createdAt", "updatedAt" FROM "CommunicationLogs";
Executing (702ee3dd-cb96-4788-9a31-46293fe4a468): DROP INDEX IF EXISTS "communication_log_recipients_communication_log_id_recipient_id";\n        CREATE UNIQUE INDEX  "communication_log_recipients_communication_log_id_recipient_id_unique" ON "CommunicationLogRecipients" ("communicationLogId","recipientId");
Executing (702ee3dd-cb96-4788-9a31-46293fe4a468): ALTER TABLE "public"."CommunicationLogs" DROP COLUMN "recipientId";
Executing (702ee3dd-cb96-4788-9a31-46293fe4a468): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250213194933-communication-log-recipients-one-to-many: migrated (0.060s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250224000000-bring-back-status-for-suspended: migrating =======
Executing (22c1a74b-840a-47a7-94dd-0bdef7e27794): START TRANSACTION;
Connection validated successfully
Executing (22c1a74b-840a-47a7-94dd-0bdef7e27794): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250224000000-bring-back-status-for-suspended.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- As a result of the previous migration, we lost the ability to track\n        -- the status of Goals that are suspended. This migration will bring\n        -- that back for the suspended goals by correcting the status changes that were removed.\n\n        UPDATE "GoalStatusChanges" gsc\n        SET "oldStatus" = zal.old_row_data->>'oldStatus'\n        FROM "ZALGoalStatusChanges" zal\n        WHERE gsc.id = zal."data_id"\n          AND zal.old_row_data->>'oldStatus' IS NOT NULL\n          AND gsc."oldStatus" IS NULL\n          AND gsc."newStatus" = 'Suspended'\n          AND gsc."updatedAt" >= '2025-02-14 00:00:00'::timestamp\n          AND gsc."updatedAt" < '2025-02-15 00:00:00'::timestamp;
Connection validated successfully
Executing (22c1a74b-840a-47a7-94dd-0bdef7e27794): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250224000000-bring-back-status-for-suspended: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250228000000-delete-dupe-grant-replacements: migrating =======
Executing (46c64e63-0fcd-4786-81b7-a53072bdc6b8): START TRANSACTION;
Connection validated successfully
Executing (46c64e63-0fcd-4786-81b7-a53072bdc6b8): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250228000000-delete-dupe-grant-replacements.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- There are some old GrantReplacements records with null\n        -- grantReplacementTypeId values that are followed by another\n        -- GrantReplacements record that is the same except the\n        -- grantReplacementTypeId values are set. This removes the\n        -- null grantReplacementTypeId value set.\n\n        -- There are also many other GrantReplacements entries where\n        -- they have the same replacedGrantId and replacingGrantId, but\n        -- different non-null grantReplacementTypeId values.\n        -- This leaves those intact because they are of potential\n        -- future interest.\n\n        -- Find the dupe sets but only choose those with at least one record\n        -- where "grantReplacementTypeId" IS NULL and at least one record is\n        -- NOT null.\n        DROP TABLE IF EXISTS dupe_grant_replacement_sets;\n        CREATE TEMP TABLE dupe_grant_replacement_sets\n        AS\n        SELECT\n          "replacedGrantId" old_grid,\n          "replacingGrantId" new_grid,\n          COUNT(id) FILTER (WHERE "grantReplacementTypeId" IS NULL) nullid_cnt,\n          COUNT(id) cnt\n        FROM "GrantReplacements" gr\n        GROUP BY 1,2\n        HAVING BOOL_OR("grantReplacementTypeId" IS NULL)\n          AND BOOL_OR("grantReplacementTypeId" IS NOT NULL)\n        ;\n\n        -- delete the dupes with null grantReplacementTypeId\n        DROP TABLE IF EXISTS deleted_gr_dupes;\n        CREATE TEMP TABLE deleted_gr_dupes\n        AS\n        WITH updater AS (\n        DELETE FROM "GrantReplacements"\n        USING dupe_grant_replacement_sets\n        WHERE "replacedGrantId" = old_grid\n          AND "replacingGrantId" = new_grid\n          AND "grantReplacementTypeId" IS NULL\n        RETURNING id deleted_grid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- These should match\n        SELECT 1 ord,'dupes to delete' item, SUM(nullid_cnt) cnt FROM dupe_grant_replacement_sets\n        UNION\n        SELECT 2, 'dupes deleted' , COUNT(*)  FROM deleted_gr_dupes\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (46c64e63-0fcd-4786-81b7-a53072bdc6b8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250228000000-delete-dupe-grant-replacements: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250312123255-add-imports-post-processing: migrating =======
Executing (8fe32b7b-7665-4c97-acfd-b955bfee42dc): START TRANSACTION;
Connection validated successfully
Executing (8fe32b7b-7665-4c97-acfd-b955bfee42dc): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250312123255-add-imports-post-processing.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8fe32b7b-7665-4c97-acfd-b955bfee42dc): ALTER TABLE "public"."Imports" ADD COLUMN "postProcessingActions" JSONB;
Executing (8fe32b7b-7665-4c97-acfd-b955bfee42dc): UPDATE "Imports"\n              SET "postProcessingActions" = '[{"name": "Monitoring Goal CRON job", "function": "createMonitoringGoals"}]'\n              WHERE "name" = 'ITAMS Monitoring Data';
Executing (8fe32b7b-7665-4c97-acfd-b955bfee42dc): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250312123255-add-imports-post-processing: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250312143130-sync-mailerlog-enum: migrating =======
Executing (48c32538-c324-4f6f-86fe-96b62e3f0a6a): START TRANSACTION;
Connection validated successfully
Executing (48c32538-c324-4f6f-86fe-96b62e3f0a6a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250312143130-sync-mailerlog-enum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'collaboratorAssigned';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'changesRequested';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'approverAssigned';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'reportApproved';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'collaboratorDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'changesRequestedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'approverAssignedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'reportApprovedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'recipientReportApproved';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'recipientReportApprovedDigest';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportCollaboratorAdded';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportSessionCreated';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportEventCompleted';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportTaskDueNotifications';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportEventImported';
Connection validated successfully
Executing (48c32538-c324-4f6f-86fe-96b62e3f0a6a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250312143130-sync-mailerlog-enum: migrated (0.085s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250312210326-standard-goals-update-feature-flag: migrating =======
Executing (ec6c9586-20b1-4d9a-86cb-d749af30b6a8): START TRANSACTION;
Connection validated successfully
Executing (ec6c9586-20b1-4d9a-86cb-d749af30b6a8): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250312210326-standard-goals-update-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Executing (ec6c9586-20b1-4d9a-86cb-d749af30b6a8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250312210326-standard-goals-update-feature-flag: migrated (0.029s)

$ cross-env POSTGRES_USERNAME=postgres POSTGRES_DB=ttasmarthub tsx ./src/tools/logicalDataModelCLI.ts
(node:77) ExperimentalWarning: `--experimental-loader` may be removed in the future; instead use `register()`:
--import 'data:text/javascript,import { register } from "node:module"; import { pathToFileURL } from "node:url"; register("file%3A///app/node_modules/tsx/dist/loader.js", pathToFileURL("./"));'
(Use `node --trace-warnings ...` to show where the warning was created)
(node:77) [DEP0170] DeprecationWarning: The URL redis://null:null is invalid. Future versions of Node.js will throw an error.
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T21:04:00.512Z"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T21:04:00.778Z"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T21:04:00.801Z"}
Executing (default): SELECT\n        table_schema,\n        table_name "table",\n        json_agg(\n          json_build_object(\n            'ordinal', ordinal_position,\n            'name', column_name,\n            'type', CASE\n                  WHEN data_type = 'USER-DEFINED' THEN 'enum'\n                  WHEN data_type = 'character varying' THEN 'varchar(255)'\n                  WHEN data_type = 'ARRAY' THEN\n                    CASE\n                      WHEN SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?') = 'varchar' THEN 'varchar(255)'\n                      WHEN SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?') = 'int4' THEN 'integer'\n                      ELSE SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?')\n                    END || '[]'\n                  WHEN data_type = 'numeric' THEN CONCAT('decimal(', numeric_precision, ',', numeric_scale, ')')\n                  WHEN data_type = 'int4' THEN 'integer'\n                  ELSE data_type\n                END,\n            'subtype', SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?'),\n            'default', CASE\n                  WHEN column_default LIKE 'nextval%' THEN '<generated>'\n                  ELSE column_default\n                END,\n            'allowNull', is_nullable = 'YES',\n            'reference', SUBSTRING(pg_get_constraintdef(oid) FROM 'REFERENCES ([^)]+[)])'),\n            'subtype', SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?'),\n            'enumName', CASE\n                WHEN SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?') = 'enum'\n                THEN SUBSTRING(udt_name FROM '^[_](([^_]+[_]?)+)')\n                else null\n              END,\n            'enums', (\n              SELECT ARRAY_AGG(e.enumlabel ORDER BY e.enumlabel)\n              FROM pg_type t\n              LEFT JOIN pg_enum e\n              ON e.enumtypid = t.oid\n              WHERE '_' || t.typname = col.udt_name\n            )\n          )\n          ORDER BY ordinal_position ASC\n        ) "fields"\n      FROM information_schema.columns col\n      LEFT JOIN pg_constraint con\n      ON col.table_name = regexp_replace(con.conrelid::regclass::TEXT,'"','','g')\n      AND pg_get_constraintdef(oid) LIKE 'FOREIGN KEY ("' || col.column_name || '") REFERENCES %'\n      WHERE table_schema = 'public'\n      AND table_name != 'SequelizeMeta'\n      --AND table_name NOT LIKE 'ZA%'\n      GROUP BY 1,2
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T21:04:00.858Z"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T21:04:00.923Z"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T21:04:01.080Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T21:04:01.283Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T21:04:01.283Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T21:04:01.284Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T21:04:01.284Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T21:04:01.284Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T21:04:01.284Z"}
Done in 50.73s.
Starting all services...
 Container postgres_docker  Running
 Container head-start-ttadp-similarity_api-1  Creating
 Container head-start-ttadp-server-1  Creating
 Container head-start-ttadp-similarity_api-1  Created
 Container head-start-ttadp-server-1  Created
 Container head-start-ttadp-similarity_api-1  Starting
 Container head-start-ttadp-server-1  Starting
 Container head-start-ttadp-similarity_api-1  Started
 Container head-start-ttadp-server-1  Started
Setup completed successfully.
CONTAINER ID   IMAGE                             COMMAND                  CREATED          STATUS                  PORTS                              NAMES
ed2533505833   head-start-ttadp-similarity_api   "gunicorn -w 4 -b 0.…"   1 second ago     Up Less than a second   5000/tcp, 0.0.0.0:9100->8080/tcp   head-start-ttadp-similarity_api-1
bb115d89c0c6   head-start-ttadp-server           "docker-entrypoint.s…"   1 second ago     Up Less than a second   0.0.0.0:8080->8080/tcp             head-start-ttadp-server-1
943297dd0f60   postgres:15.6                     "docker-entrypoint.s…"   32 minutes ago   Up 32 minutes           5432/tcp                           postgres_docker
Starting server setup...
Removing old build directory...
Installing and building Node.js app...
 db Pulling 
 db Pulled 
time="2025-03-28T16:15:11-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Recreate
 Container postgres_docker  Recreated
 Container postgres_docker  Starting
 Container postgres_docker  Started
yarn install v1.22.22
[1/5] Validating package.json...
[2/5] Resolving packages...
warning Resolution field "colors@1.4.0" is incompatible with requested version "colors@1.0.x"
warning Resolution field "colors@1.4.0" is incompatible with requested version "colors@~1.2.1"
success Already up-to-date.
Done in 1.84s.
time="2025-03-28T16:15:15-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Running
yarn install v1.22.22
[1/5] Validating package.json...
[2/5] Resolving packages...
success Already up-to-date.
Done in 1.41s.
time="2025-03-28T16:15:18-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Running
yarn run v1.22.22
$ tsc -p src
Done in 56.32s.
time="2025-03-28T16:16:16-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Running
yarn run v1.22.22
$ INLINE_RUNTIME_CHUNK=false react-scripts build && mv build/ ../build/server/client
Creating an optimized production build...
Browserslist: caniuse-lite is outdated. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
postcss-resolve-url: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration
Browserslist: caniuse-lite is outdated. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
Compiled with warnings.

Failed to parse source map from '/app/frontend/node_modules/plotly.js-basic-dist/base64-arraybuffer.es5.js.map' file: Error: ENOENT: no such file or directory, open '/app/frontend/node_modules/plotly.js-basic-dist/base64-arraybuffer.es5.js.map'

Failed to parse source map: 'webpack:///dist/react-responsive.js' URL is not supported

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

File sizes after gzip:

  1.4 MB    build/static/js/main.46b8cff4.js
  91.29 kB  build/static/css/main.06c53d3f.css

The bundle size is significantly larger than recommended.
Consider reducing it with code splitting: https://goo.gl/9VhYWB
You can also analyze the project dependencies: https://goo.gl/LeUzfb

The project was built assuming it is hosted at /.
You can control this with the homepage field in your package.json.

The build folder is ready to be deployed.
You may serve it with a static server:

  yarn global add serve
  serve -s build

Find out more about deployment here:

  https://cra.link/deployment

Done in 127.92s.
Installing Python dependencies for similarity_api...
time="2025-03-28T16:18:26-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Running
Collecting en_core_web_sm@ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.6.0/en_core_web_sm-3.6.0-py3-none-any.whl
  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.6.0/en_core_web_sm-3.6.0-py3-none-any.whl (12.8 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 12.8/12.8 MB 35.7 MB/s eta 0:00:00
Requirement already satisfied: annotated-types==0.5.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 1)) (0.5.0)
Requirement already satisfied: blinker==1.6.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 2)) (1.6.2)
Requirement already satisfied: blis==0.7.10 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 3)) (0.7.10)
Requirement already satisfied: catalogue==2.0.9 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 4)) (2.0.9)
Requirement already satisfied: certifi==2024.7.4 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 5)) (2024.7.4)
Requirement already satisfied: charset-normalizer==3.2.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 6)) (3.2.0)
Requirement already satisfied: click==8.1.6 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 7)) (8.1.6)
Requirement already satisfied: confection==0.1.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 8)) (0.1.1)
Requirement already satisfied: cymem==2.0.7 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 9)) (2.0.7)
Requirement already satisfied: Flask==2.3.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 10)) (2.3.2)
Requirement already satisfied: Flask-SQLAlchemy==3.0.5 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 11)) (3.0.5)
Requirement already satisfied: greenlet==2.0.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 12)) (2.0.2)
Requirement already satisfied: idna==3.7 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 13)) (3.7)
Requirement already satisfied: importlib-metadata==6.8.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 14)) (6.8.0)
Requirement already satisfied: itsdangerous==2.1.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 15)) (2.1.2)
Requirement already satisfied: Jinja2==3.1.6 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 16)) (3.1.6)
Requirement already satisfied: joblib==1.3.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 17)) (1.3.2)
Requirement already satisfied: langcodes==3.3.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 18)) (3.3.0)
Requirement already satisfied: MarkupSafe==2.1.3 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 19)) (2.1.3)
Requirement already satisfied: murmurhash==1.0.9 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 20)) (1.0.9)
Requirement already satisfied: numpy==1.25.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 21)) (1.25.2)
Requirement already satisfied: packaging==23.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 22)) (23.1)
Requirement already satisfied: pathy==0.10.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 23)) (0.10.2)
Requirement already satisfied: preshed==3.0.8 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 24)) (3.0.8)
Requirement already satisfied: psycopg2==2.9.7 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 25)) (2.9.7)
Requirement already satisfied: pydantic==2.4.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 26)) (2.4.0)
Requirement already satisfied: pydantic-core==2.10.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 27)) (2.10.0)
Requirement already satisfied: requests==2.32.3 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 28)) (2.32.3)
Requirement already satisfied: scikit-learn==1.5.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 29)) (1.5.0)
Requirement already satisfied: scipy==1.11.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 30)) (1.11.1)
Requirement already satisfied: smart-open==6.3.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 31)) (6.3.0)
Requirement already satisfied: spacy==3.6.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 32)) (3.6.1)
Requirement already satisfied: spacy-legacy==3.0.12 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 33)) (3.0.12)
Requirement already satisfied: spacy-loggers==1.0.4 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 34)) (1.0.4)
Requirement already satisfied: SQLAlchemy==2.0.19 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 35)) (2.0.19)
Requirement already satisfied: srsly==2.4.7 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 36)) (2.4.7)
Requirement already satisfied: thinc==8.1.11 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 37)) (8.1.11)
Requirement already satisfied: threadpoolctl==3.2.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 38)) (3.2.0)
Requirement already satisfied: tqdm==4.66.3 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 39)) (4.66.3)
Requirement already satisfied: typer==0.9.0 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 40)) (0.9.0)
Requirement already satisfied: typing_extensions==4.7.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 41)) (4.7.1)
Requirement already satisfied: urllib3==2.2.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 42)) (2.2.2)
Requirement already satisfied: wasabi==1.1.2 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 43)) (1.1.2)
Requirement already satisfied: Werkzeug==3.0.6 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 44)) (3.0.6)
Requirement already satisfied: zipp==3.19.1 in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 45)) (3.19.1)
Requirement already satisfied: gunicorn in /usr/local/lib/python3.9/site-packages (from -r /app/requirements.txt (line 46)) (23.0.0)
Requirement already satisfied: setuptools in /usr/local/lib/python3.9/site-packages (from spacy==3.6.1->-r /app/requirements.txt (line 32)) (58.1.0)
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv

[notice] A new release of pip is available: 23.0.1 -> 25.0.1
[notice] To update, run: pip install --upgrade pip
Running database migrations using Node.js app...
time="2025-03-28T16:18:32-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Running
yarn run v1.22.22
$ cross-env POSTGRES_USERNAME=postgres POSTGRES_DB=ttasmarthub node_modules/.bin/sequelize db:migrate  && yarn ldm:ci

[4mSequelize CLI [Node: 20.18.2, CLI: 6.5.1, ORM: 6.29.0][24m

Loaded configuration file "config/config.js".
Using environment "dss".
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name"));
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20200827192413-create-user: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Users" ("id"   SERIAL , "hsesUserId" VARCHAR(255) UNIQUE, "name" VARCHAR(255), "phoneNumber" VARCHAR(255), "email" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20200827192413-create-user: migrated (0.052s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029141201-create-scope: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Scopes" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "description" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029141201-create-scope: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029142912-create-region: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Regions" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029142912-create-region: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029143000-region: migrating =======
Executing (default): INSERT INTO "Regions" ("id","name") VALUES (1,'1'),(2,'2'),(3,'3'),(4,'4'),(5,'5'),(6,'6'),(7,'7'),(8,'8'),(9,'9'),(10,'10'),(11,'11'),(12,'12'),(13,'13'),(14,'No Region') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029143000-region: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029143000-scope: migrating =======
Executing (default): INSERT INTO "Scopes" ("id","name","description") VALUES (1,'SITE_ACCESS','User can login and view the TTAHUB site'),(2,'ADMIN','User can view the admin panel and change user permissions (including their own)'),(3,'READ_WRITE_REPORTS','Can view and create/edit reports in the region'),(4,'READ_REPORTS','Can view reports in the region'),(5,'APPROVE_REPORTS','Can approve reports') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029143000-scope: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029214146-create-permission: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Permissions" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "regionId" INTEGER NOT NULL REFERENCES "Regions" ("id"), "scopeId" INTEGER NOT NULL REFERENCES "Scopes" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029214146-create-permission: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201029214432-add-title-to-user: migrating =======
Executing (c727c5d0-64d9-4467-a885-25cf8e75050f): START TRANSACTION;
Connection validated successfully
Executing (c727c5d0-64d9-4467-a885-25cf8e75050f): CREATE TYPE "public"."enum_Users_title" AS ENUM('Program Specialist', 'Early Childhood Specialist', 'Grantee Specialist', 'Family Engagement Specialist', 'Health Specialist', 'Systems Specialist');ALTER TABLE "public"."Users" ADD COLUMN "title" "public"."enum_Users_title";
Executing (c727c5d0-64d9-4467-a885-25cf8e75050f): ALTER TABLE "public"."Users" ADD COLUMN "homeRegionId" INTEGER DEFAULT NULL REFERENCES "Regions" ("id") ON DELETE SET NULL ON UPDATE SET NULL;
Executing (c727c5d0-64d9-4467-a885-25cf8e75050f): ALTER TABLE "Users" ALTER COLUMN "email" DROP NOT NULL;ALTER TABLE "Users" ALTER COLUMN "email" DROP DEFAULT;ALTER TABLE "Users"  ADD UNIQUE ("email");ALTER TABLE "Users" ALTER COLUMN "email" TYPE VARCHAR(255) ;
Executing (c727c5d0-64d9-4467-a885-25cf8e75050f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201029214432-add-title-to-user: migrated (0.060s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201030204458-add-unique-constraint-to-permissions: migrating =======
Executing (default): ALTER TABLE "Permissions" ADD CONSTRAINT "unique_userId_scopeId_regionId" UNIQUE ("userId", "scopeId", "regionId");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201030204458-add-unique-constraint-to-permissions: migrated (0.038s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201102125023-create-request-errors: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "RequestErrors" ("id"   BIGSERIAL , "operation" VARCHAR(255), "uri" VARCHAR(255), "method" VARCHAR(255), "requestBody" JSON, "responseBody" JSON, "responseCode" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201102125023-create-request-errors: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201120133733-create-topic: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Topics" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201120133733-create-topic: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201120182130-create-role: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Roles" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "fullName" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201120182130-create-role: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201120183631-create-role-topic: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "RoleTopics" ("id"   SERIAL , "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201120183631-create-role-topic: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201123143446-add-unique-constraint-to-roletopic: migrating =======
Executing (default): ALTER TABLE "RoleTopics" ADD CONSTRAINT "unique_roleId_topicId" UNIQUE ("roleId", "topicId");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201123143446-add-unique-constraint-to-roletopic: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201125194528-create-goal: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Goals" ("id"   SERIAL , "name" TEXT, "status" VARCHAR(255), "timeframe" VARCHAR(255), "isFromSmartsheetTtaPlan" BOOLEAN, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201125194528-create-goal: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201125195340-create-topic-goal: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "TopicGoals" ("id"   SERIAL , "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201125195340-create-topic-goal: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201130144721-add-unique-constraint-to-topicgoal: migrating =======
Executing (default): ALTER TABLE "TopicGoals" ADD CONSTRAINT "unique_topicId_goalId" UNIQUE ("topicId", "goalId");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201130144721-add-unique-constraint-to-topicgoal: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201130144748-create-grantee: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Grantees" ("id" INTEGER NOT NULL , "name" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201130144748-create-grantee: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201205200637-create-grant: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Grants" ("id" INTEGER NOT NULL , "number" VARCHAR(255) NOT NULL UNIQUE, "regionId" INTEGER REFERENCES "Regions" ("id"), "granteeId" INTEGER NOT NULL REFERENCES "Grantees" ("id"), "status" VARCHAR(255), "startDate" TIMESTAMP WITH TIME ZONE, "endDate" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201205200637-create-grant: migrated (0.033s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201205200638-create-grant-goal: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "GrantGoals" ("id"   SERIAL , "granteeId" INTEGER NOT NULL REFERENCES "Grantees" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "grantId" INTEGER NOT NULL REFERENCES "Grants" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201205200638-create-grant-goal: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201206173716-add-default-createdat-updatedat: migrating =======
Executing (default): ALTER TABLE "Users" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "createdAt" SET DEFAULT NOW();ALTER TABLE "Users" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Connection validated successfully
Executing (default): ALTER TABLE "Users" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "updatedAt" SET DEFAULT NOW();ALTER TABLE "Users" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Connection validated successfully
Executing (default): ALTER TABLE "Permissions" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "Permissions" ALTER COLUMN "createdAt" SET DEFAULT NOW();ALTER TABLE "Permissions" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Connection validated successfully
Executing (default): ALTER TABLE "Permissions" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "Permissions" ALTER COLUMN "updatedAt" SET DEFAULT NOW();ALTER TABLE "Permissions" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201206173716-add-default-createdat-updatedat: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20201206184519-rename-user-title-column: migrating =======
Executing (26d3ea40-8c72-470c-bfd6-78714f0e6931): START TRANSACTION;
Connection validated successfully
Executing (26d3ea40-8c72-470c-bfd6-78714f0e6931): ALTER TABLE "public"."Users" DROP COLUMN "title";
Executing (26d3ea40-8c72-470c-bfd6-78714f0e6931): DROP TYPE public."enum_Users_title";
Executing (26d3ea40-8c72-470c-bfd6-78714f0e6931): CREATE TYPE "public"."enum_Users_role" AS ENUM('Regional Program Manager', 'COR', 'Supervisory Program Specialist', 'Program Specialist', 'Grants Specialist', 'Central Office', 'TTAC', 'Admin. Assistant', 'Early Childhood Manager', 'Early Childhood Specialist', 'Family Engagement Specialist', 'Grantee Specialist Manager', 'Grantee Specialist', 'Health Specialist', 'System Specialist');ALTER TABLE "public"."Users" ADD COLUMN "role" "public"."enum_Users_role";
Executing (26d3ea40-8c72-470c-bfd6-78714f0e6931): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20201206184519-rename-user-title-column: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210106152317-create-non-grantee: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "NonGrantees" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210106152317-create-non-grantee: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210106160931-create-activity-reports: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReports" ("id"   SERIAL , "resourcesUsed" VARCHAR(255), "additionalNotes" VARCHAR(255), "numberOfParticipants" INTEGER, "deliveryMethod" VARCHAR(255), "duration" DECIMAL(3,1), "endDate" DATE, "startDate" DATE, "participantType" VARCHAR(255), "requester" VARCHAR(255), "status" VARCHAR(255) NOT NULL, "programTypes" VARCHAR(255)[], "targetPopulations" VARCHAR(255)[], "reason" VARCHAR(255)[], "participants" VARCHAR(255)[], "topics" VARCHAR(255)[], "ttaType" VARCHAR(255)[], "pageState" JSON, "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "lastUpdatedById" INTEGER NOT NULL REFERENCES "Users" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210106160931-create-activity-reports: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210106160953-create-activity-participants: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityParticipants" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "grantId" INTEGER REFERENCES "Grants" ("id"), "nonGranteeId" INTEGER REFERENCES "NonGrantees" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210106160953-create-activity-participants: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210114193123-create-file: migrating =======
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_Files_status' GROUP BY 1
Connection validated successfully
Executing (default): CREATE TYPE "public"."enum_Files_status" AS ENUM('UPLOADING', 'UPLOADED', 'UPLOAD_FAILED', 'SCANNING', 'APPROVED', 'REJECTED');
Connection validated successfully
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "Files" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "originalFileName" VARCHAR(255) NOT NULL, "key" VARCHAR(255) NOT NULL, "status" "public"."enum_Files_status" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210114193123-create-file: migrated (0.054s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210118203723-rename-activity-participant: migrating =======
Executing (2207b742-c953-4a96-87ef-fa9ae0789d04): START TRANSACTION;
Connection validated successfully
Executing (2207b742-c953-4a96-87ef-fa9ae0789d04): ALTER TABLE "ActivityParticipants" RENAME TO "ActivityRecipients";
Executing (2207b742-c953-4a96-87ef-fa9ae0789d04): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReports' AND c.table_schema = 'public'
Executing (2207b742-c953-4a96-87ef-fa9ae0789d04): ALTER TABLE "ActivityReports" RENAME COLUMN "participantType" TO "activityRecipientType";
Executing (2207b742-c953-4a96-87ef-fa9ae0789d04): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210118203723-rename-activity-participant: migrated (0.043s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210120153248-add-context-field: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "context" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210120153248-add-context-field: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210120200638-add-submit-fields: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "approvingManagerId" INTEGER REFERENCES "Users" ("id");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210120200638-add-submit-fields: migrated (0.017s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210120215628-add-region-to-activity-reports: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "regionId" INTEGER REFERENCES "Regions" ("id");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210120215628-add-region-to-activity-reports: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210120220221-add-collaborators-to-activity-reports: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReportCollaborators" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210120220221-add-collaborators-to-activity-reports: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210121192644-add-attachment-type-to-files: migrating =======
Executing (default): CREATE TYPE "public"."enum_Files_attachmentType" AS ENUM('ATTACHMENT', 'RESOURCE');ALTER TABLE "public"."Files" ADD COLUMN "attachmentType" "public"."enum_Files_attachmentType" NOT NULL;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210121192644-add-attachment-type-to-files: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210125190348-add-activity-report-goals-table: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReportGoals" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210125190348-add-activity-report-goals-table: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210126172035-add-unique-index-to-collaborators: migrating =======
Executing (97876742-ebf7-460b-a158-dce71e2bb2ea): START TRANSACTION;
Connection validated successfully
Executing (97876742-ebf7-460b-a158-dce71e2bb2ea): CREATE UNIQUE INDEX "activity_report_collaborators_user_id_activity_report_id" ON "ActivityReportCollaborators" ("userId", "activityReportId")
Executing (97876742-ebf7-460b-a158-dce71e2bb2ea): CREATE UNIQUE INDEX "activity_recipients_grant_id_activity_report_id" ON "ActivityRecipients" ("grantId", "activityReportId")
Executing (97876742-ebf7-460b-a158-dce71e2bb2ea): CREATE UNIQUE INDEX "activity_recipients_non_grantee_id_activity_report_id" ON "ActivityRecipients" ("nonGranteeId", "activityReportId")
Executing (97876742-ebf7-460b-a158-dce71e2bb2ea): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210126172035-add-unique-index-to-collaborators: migrated (0.033s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210129210854-add-fileSize-to-files: migrating =======
Executing (default): ALTER TABLE "public"."Files" ADD COLUMN "fileSize" INTEGER NOT NULL;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210129210854-add-fileSize-to-files: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210201174748-add-manager-notes-to-activity-reports: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "managerNotes" TEXT;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210201174748-add-manager-notes-to-activity-reports: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210205172332-add-activity-report-status-enum: migrating =======
Executing (default): ALTER TABLE "ActivityReports" ALTER COLUMN "status" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "status" DROP DEFAULT;CREATE TYPE "public"."enum_ActivityReports_status" AS ENUM('draft', 'submitted', 'needs_action', 'approved');ALTER TABLE "ActivityReports" ALTER COLUMN "status" TYPE "public"."enum_ActivityReports_status" USING ("status"::"public"."enum_ActivityReports_status");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210205172332-add-activity-report-status-enum: migrated (0.033s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210208212205-user-last-login: migrating =======
Executing (default): ALTER TABLE "public"."Users" ADD COLUMN "lastLogin" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW();
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210208212205-user-last-login: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210215161922-add-statuses-to-file-model: migrating =======
Executing (default): ALTER TYPE "enum_Files_status" ADD VALUE 'QUEUEING_FAILED';
Connection validated successfully
Executing (default): ALTER TYPE "enum_Files_status" ADD VALUE 'SCANNING_QUEUED';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210215161922-add-statuses-to-file-model: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210215181557-convert-string-types-to-text: migrating =======
Executing (7cafc504-8a3a-4701-9f46-7d79af830d0f): START TRANSACTION;
Connection validated successfully
Executing (7cafc504-8a3a-4701-9f46-7d79af830d0f): ALTER TABLE "ActivityReports" ALTER COLUMN "additionalNotes" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "additionalNotes" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "additionalNotes" TYPE TEXT;
Executing (7cafc504-8a3a-4701-9f46-7d79af830d0f): ALTER TABLE "ActivityReports" ALTER COLUMN "context" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "context" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "context" TYPE TEXT;
Executing (7cafc504-8a3a-4701-9f46-7d79af830d0f): ALTER TABLE "ActivityReports" ALTER COLUMN "resourcesUsed" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "resourcesUsed" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "resourcesUsed" TYPE TEXT;
Executing (7cafc504-8a3a-4701-9f46-7d79af830d0f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210215181557-convert-string-types-to-text: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210216051558-next-steps: migrating =======
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_NextSteps_noteType' GROUP BY 1
Connection validated successfully
Executing (default): CREATE TYPE "public"."enum_NextSteps_noteType" AS ENUM('SPECIALIST', 'GRANTEE');
Connection validated successfully
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "NextSteps" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "note" TEXT NOT NULL, "noteType" "public"."enum_NextSteps_noteType" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210216051558-next-steps: migrated (0.042s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210302170502-add-resources-to-activity-report: migrating =======
Executing (d0f49188-bb5a-4634-ab92-3143bb495dc8): START TRANSACTION;
Connection validated successfully
Executing (d0f49188-bb5a-4634-ab92-3143bb495dc8): ALTER TABLE "public"."ActivityReports" ADD COLUMN "nonECLKCResourcesUsed" TEXT[];
Executing (d0f49188-bb5a-4634-ab92-3143bb495dc8): ALTER TABLE "public"."ActivityReports" DROP COLUMN "resourcesUsed";
Executing (d0f49188-bb5a-4634-ab92-3143bb495dc8): ALTER TABLE "public"."ActivityReports" ADD COLUMN "ECLKCResourcesUsed" TEXT[];
Executing (d0f49188-bb5a-4634-ab92-3143bb495dc8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210302170502-add-resources-to-activity-report: migrated (0.084s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210302214251-user-hses-username: migrating =======
Executing (3dcac9c4-6576-4de8-ba34-360fe060c2f6): START TRANSACTION;
Connection validated successfully
Executing (3dcac9c4-6576-4de8-ba34-360fe060c2f6): ALTER TABLE "public"."Users" ADD COLUMN "hsesUsername" VARCHAR(255);
Executing (3dcac9c4-6576-4de8-ba34-360fe060c2f6): ALTER TABLE "public"."Users" ADD COLUMN "hsesAuthorities" VARCHAR(255)[];
Executing (3dcac9c4-6576-4de8-ba34-360fe060c2f6): UPDATE "Users" SET "hsesUsername"="email"
Executing (3dcac9c4-6576-4de8-ba34-360fe060c2f6): ALTER TABLE "Users" ALTER COLUMN "hsesUsername" SET NOT NULL;ALTER TABLE "Users" ALTER COLUMN "hsesUsername" DROP DEFAULT;ALTER TABLE "Users" ALTER COLUMN "hsesUsername" TYPE VARCHAR(255);
Executing (3dcac9c4-6576-4de8-ba34-360fe060c2f6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210302214251-user-hses-username: migrated (0.090s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210302215921-add-virtual-delivery-type: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "virtualDeliveryType" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210302215921-add-virtual-delivery-type: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210305174257-remove-attachment-type: migrating =======
Executing (6a46dade-e8cb-4dea-b34e-a63e804fb473): START TRANSACTION;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Executing (6a46dade-e8cb-4dea-b34e-a63e804fb473): ALTER TABLE "public"."Files" DROP COLUMN "attachmentType";
Executing (6a46dade-e8cb-4dea-b34e-a63e804fb473): DROP TYPE public."enum_Files_attachmentType";
Connection validated successfully
Executing (6a46dade-e8cb-4dea-b34e-a63e804fb473): COMMIT;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210305174257-remove-attachment-type: migrated (0.050s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210305220918-ar-legacy-id: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "legacyId" VARCHAR(255); COMMENT ON COLUMN "ActivityReports"."legacyId" IS 'Legacy identifier taken from smartsheet ReportID. Some ids adjusted to match their region.';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210305220918-ar-legacy-id: migrated (0.034s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210308162757-remove-activity-report-goals-table: migrating =======
Executing (default): DROP TABLE IF EXISTS "ActivityReportGoals" CASCADE;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210308162757-remove-activity-report-goals-table: migrated (0.028s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210309214315-imported-data: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "imported" JSONB; COMMENT ON COLUMN "ActivityReports"."imported" IS 'Storage for raw values from smartsheet CSV imports';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210309214315-imported-data: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210310172128-add-grant-goal-unique-index: migrating =======
Executing (default): CREATE UNIQUE INDEX "grant_goals_grant_id_goal_id" ON "GrantGoals" ("grantId", "goalId")
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210310172128-add-grant-goal-unique-index: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210310173436-activityreport-allow-null-user-ids: migrating =======
Executing (b4009356-47fd-4c12-83c4-663def8c36b9): START TRANSACTION;
Connection validated successfully
Executing (b4009356-47fd-4c12-83c4-663def8c36b9): ALTER TABLE "ActivityReports" ALTER COLUMN "userId" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "userId" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "userId" TYPE INTEGER;
Executing (b4009356-47fd-4c12-83c4-663def8c36b9): ALTER TABLE "ActivityReports" ALTER COLUMN "lastUpdatedById" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "lastUpdatedById" DROP DEFAULT;ALTER TABLE "ActivityReports" ALTER COLUMN "lastUpdatedById" TYPE INTEGER;
Executing (b4009356-47fd-4c12-83c4-663def8c36b9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210310173436-activityreport-allow-null-user-ids: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210310181116-create-objectives: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Objectives" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "title" TEXT, "ttaProvided" TEXT, "status" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210310181116-create-objectives: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210310181122-create-activity-report-objectives: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReportObjectives" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210310181122-create-activity-report-objectives: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210311211736-legacyid-unique: migrating =======
Executing (default): ALTER TABLE "ActivityReports" ALTER COLUMN "legacyId" DROP NOT NULL;ALTER TABLE "ActivityReports" ALTER COLUMN "legacyId" DROP DEFAULT;ALTER TABLE "ActivityReports"  ADD UNIQUE ("legacyId");ALTER TABLE "ActivityReports" ALTER COLUMN "legacyId" TYPE VARCHAR(255) ;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210311211736-legacyid-unique: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210315181828-goal-timeframe-text: migrating =======
Executing (default): ALTER TABLE "Goals" ALTER COLUMN "timeframe" DROP NOT NULL;ALTER TABLE "Goals" ALTER COLUMN "timeframe" DROP DEFAULT;ALTER TABLE "Goals" ALTER COLUMN "timeframe" TYPE TEXT;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210315181828-goal-timeframe-text: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210315234158-seed-non-grantee-recipients: migrating =======
Executing (default): INSERT INTO "NonGrantees" ("name") VALUES ('CCDF / Child Care Administrator'),('Head Start Collaboration Office'),('QRIS System'),('Regional Head Start Association'),('Regional TTA/Other Specialists'),('State CCR&R'),('State Early Learning Standards'),('State Education System'),('State Health System'),('State Head Start Association'),('State Professional Development / Continuing Education') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210315234158-seed-non-grantee-recipients: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210323155040-add-scanning-failed-enum: migrating =======
Executing (default): ALTER TYPE "enum_Files_status" ADD VALUE 'SCANNING_FAILED';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210323155040-add-scanning-failed-enum: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210323195745-fix-legacy-report-region-id: migrating =======
Executing (default): UPDATE "ActivityReports" SET "legacyId" = regexp_replace("legacyId", 'R(\d)-', 'R0\1-') WHERE "legacyId" ~ 'R\d-'
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210323195745-fix-legacy-report-region-id: migrated (0.015s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210407135721-add-deleted-report-status: migrating =======
Executing (default): ALTER TYPE "enum_ActivityReports_status" ADD VALUE 'deleted';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210407135721-add-deleted-report-status: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210407214251-user-multi-role: migrating =======
Executing (default): ALTER TABLE "Users" ALTER COLUMN role TYPE public."enum_Users_role"[]     USING CASE WHEN role IS NULL THEN '{}' ELSE ARRAY[role] END; ALTER TABLE "Users" ALTER COLUMN role SET DEFAULT '{}';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210407214251-user-multi-role: migrated (0.034s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210412211312-add-cdi-flag-to-grants: migrating =======
Executing (70746ab6-a8ed-4275-8112-67ba66be3740): START TRANSACTION;
Connection validated successfully
Executing (70746ab6-a8ed-4275-8112-67ba66be3740): ALTER TABLE "public"."Grants" ADD COLUMN "cdi" BOOLEAN DEFAULT false;
Executing (70746ab6-a8ed-4275-8112-67ba66be3740): UPDATE "Grants" SET "cdi" = true WHERE "regionId" = 13
Executing (70746ab6-a8ed-4275-8112-67ba66be3740): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210412211312-add-cdi-flag-to-grants: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210419174123-remove-not-null-on-objectives-goal: migrating =======
Executing (default): ALTER TABLE "Objectives" ALTER COLUMN "goalId" DROP NOT NULL;ALTER TABLE "Objectives" ALTER COLUMN "goalId" DROP DEFAULT;ALTER TABLE "Objectives" ALTER COLUMN "goalId" TYPE INTEGER;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210419174123-remove-not-null-on-objectives-goal: migrated (0.017s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210908164843-add_grant_program_specialist_to_grant: migrating =======
Executing (dbad8537-6849-4251-8efb-1fd3b84ec8ec): START TRANSACTION;
Connection validated successfully
Executing (dbad8537-6849-4251-8efb-1fd3b84ec8ec): ALTER TABLE "public"."Grants" ADD COLUMN "programSpecialistName" VARCHAR(255);
Executing (dbad8537-6849-4251-8efb-1fd3b84ec8ec): ALTER TABLE "public"."Grants" ADD COLUMN "programSpecialistEmail" VARCHAR(255);
Executing (dbad8537-6849-4251-8efb-1fd3b84ec8ec): ALTER TABLE "public"."Grants" ADD COLUMN "grantSpecialistName" VARCHAR(255);
Executing (dbad8537-6849-4251-8efb-1fd3b84ec8ec): ALTER TABLE "public"."Grants" ADD COLUMN "grantSpecialistEmail" VARCHAR(255);
Executing (dbad8537-6849-4251-8efb-1fd3b84ec8ec): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210908164843-add_grant_program_specialist_to_grant: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210916165628-add-flags-to-user: migrating =======
Executing (b0cf46ea-692d-43be-b95e-624e3b96f503): START TRANSACTION;
Connection validated successfully
Executing (b0cf46ea-692d-43be-b95e-624e3b96f503): CREATE TYPE "public"."enum_Users_flags" AS ENUM('grantee_record_page');ALTER TABLE "public"."Users" ADD COLUMN "flags" "public"."enum_Users_flags";
Executing (b0cf46ea-692d-43be-b95e-624e3b96f503): ALTER TABLE "Users" ALTER COLUMN flags TYPE public."enum_Users_flags"[] USING CASE WHEN flags IS NULL THEN '{}' ELSE ARRAY[flags] END; ALTER TABLE "Users" ALTER COLUMN flags SET DEFAULT '{}';
Executing (b0cf46ea-692d-43be-b95e-624e3b96f503): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210916165628-add-flags-to-user: migrated (0.035s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210922173135-add-calculatedStatus: migrating =======
Executing (0510de4a-4994-4566-87db-0b4d11360891): START TRANSACTION;
Connection validated successfully
Executing (0510de4a-4994-4566-87db-0b4d11360891): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReports' AND c.table_schema = 'public'
Executing (0510de4a-4994-4566-87db-0b4d11360891): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReports' AND c.table_schema = 'public'
Executing (0510de4a-4994-4566-87db-0b4d11360891): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReports' AND c.table_schema = 'public'
Executing (0510de4a-4994-4566-87db-0b4d11360891): CREATE TYPE "public"."enum_ActivityReports_calculatedStatus" AS ENUM('deleted', 'draft', 'submitted', 'needs_action', 'approved');ALTER TABLE "public"."ActivityReports" ADD COLUMN "calculatedStatus" "public"."enum_ActivityReports_calculatedStatus";
Executing (0510de4a-4994-4566-87db-0b4d11360891): ALTER TABLE "ActivityReports" RENAME COLUMN "status" TO "submissionStatus";
Executing (0510de4a-4994-4566-87db-0b4d11360891): ALTER TABLE "ActivityReports" RENAME COLUMN "approvingManagerId" TO "oldApprovingManagerId";
Executing (0510de4a-4994-4566-87db-0b4d11360891): ALTER TABLE "ActivityReports" RENAME COLUMN "managerNotes" TO "oldManagerNotes";
Executing (0510de4a-4994-4566-87db-0b4d11360891): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210922173135-add-calculatedStatus: migrated (0.108s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210922192856-create-activity-report-approvers: migrating =======
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ActivityReportApprovers_status' GROUP BY 1
Connection validated successfully
Executing (default): CREATE TYPE "public"."enum_ActivityReportApprovers_status" AS ENUM('needs_action', 'approved');
Connection validated successfully
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "ActivityReportApprovers" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "status" "public"."enum_ActivityReportApprovers_status", "note" TEXT, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): ALTER TABLE "ActivityReportApprovers" ADD CONSTRAINT "unique_activityReportId_userId" UNIQUE ("activityReportId", "userId");
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210922192856-create-activity-report-approvers: migrated (0.054s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20210930173153-add-grantee-type-to-grantee: migrating =======
Executing (default): ALTER TABLE "public"."Grantees" ADD COLUMN "granteeType" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20210930173153-add-grantee-type-to-grantee: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211006095432-add-old-grant-id-to-grants: migrating =======
Executing (default): ALTER TABLE "public"."Grants" ADD COLUMN "oldGrantId" INTEGER; COMMENT ON COLUMN "Grants"."oldGrantId" IS 'Link to expired grant in order to retrieve legacy goals.';
Connection validated successfully
Executing (default): ALTER TABLE "Grants" ADD CONSTRAINT "Grants_oldGrantId_fkey" FOREIGN KEY ("oldGrantId") REFERENCES "Grants" ("id") ON UPDATE CASCADE ON DELETE CASCADE;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211006095432-add-old-grant-id-to-grants: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211008175906-add-program-table: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Programs" ("id" INTEGER NOT NULL , "grantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "programType" VARCHAR(255), "startYear" VARCHAR(255), "startDate" VARCHAR(255), "endDate" VARCHAR(255), "status" VARCHAR(255), "name" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211008175906-add-program-table: migrated (0.033s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211025175906-add-unlock-approved-reports-scope: migrating =======
Executing (default): INSERT INTO "Scopes" ("id","name","description") VALUES (6,'UNLOCK_APPROVED_REPORTS','User can unlock approved reports, reverting the report to the needs action state.') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211025175906-add-unlock-approved-reports-scope: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211110181535-add-ar-approved-date: migrating =======
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "approvedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL; COMMENT ON COLUMN "ActivityReports"."approvedAt" IS 'Timestamp when a report was approved';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211110181535-add-ar-approved-date: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211202212104-convert-grantee-to-recipient: migrating =======
Executing (default): DO $$ BEGIN\n        ALTER TYPE "enum_NextSteps_noteType" ADD VALUE 'RECIPIENT';\n      EXCEPTION\n        WHEN duplicate_object THEN null;\n      END $$;
Connection validated successfully
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): START TRANSACTION;
Connection validated successfully
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityRecipients' AND c.table_schema = 'public'
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): ALTER TABLE "ActivityRecipients" RENAME COLUMN "nonGranteeId" TO "otherEntityId";
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): ALTER TABLE "ActivityRecipients" RENAME CONSTRAINT "ActivityParticipants_nonGranteeId_fkey" TO "ActivityRecipients_otherEntityId";
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Grants' AND c.table_schema = 'public'
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): ALTER TABLE "Grants" RENAME COLUMN "granteeId" TO "recipientId";
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): ALTER TABLE "Grants" RENAME CONSTRAINT "Grants_granteeId_fkey" TO "Grants_recipientId_fkey";
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): UPDATE "NextSteps" SET "noteType" = 'RECIPIENT' WHERE "noteType" = 'GRANTEE';
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): ALTER TABLE "NonGrantees" RENAME TO "OtherEntities";
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): ALTER TABLE "Grantees" RENAME TO "Recipients";
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Recipients' AND c.table_schema = 'public'
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): ALTER TABLE "Recipients" RENAME COLUMN "granteeType" TO "recipientType";
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): UPDATE "ActivityReports" SET "activityRecipientType" = 'recipient' WHERE "activityRecipientType" = 'grantee';
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): UPDATE "ActivityReports" SET "activityRecipientType" = 'other-entity' WHERE "activityRecipientType" = 'non-grantee';
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): UPDATE "ActivityReports" SET "activityRecipientType" = 'recipient' WHERE "activityRecipientType" = 'nonGrantee' and imported->>'nonGranteeActivity' = '';
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): UPDATE "ActivityReports" SET "activityRecipientType" = 'other-entity' WHERE "activityRecipientType" = 'nonGrantee' and imported->>'nonGranteeActivity' != '';
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): UPDATE "ActivityReports" SET "reason" = ARRAY_REPLACE("reason", 'New Grantee', 'New Recipient');
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): UPDATE "ActivityReports" SET "requester" = 'regionalOffice' WHERE "requester" = 'Regional Office';
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): UPDATE "ActivityReports" SET "requester" = 'recipient' WHERE "requester" = 'Grantee';
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): UPDATE "ActivityReports" SET "requester" = 'recipient' WHERE "requester" = 'grantee';
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'GrantGoals' AND c.table_schema = 'public'
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): ALTER TABLE "GrantGoals" RENAME COLUMN "granteeId" TO "recipientId";
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): ALTER TABLE "GrantGoals" RENAME CONSTRAINT "GrantGoals_granteeId_fkey" TO "GrantGoals_recipientId_fkey";
Executing (6c90a8ce-4a03-49da-a59e-1de10eacc78c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211202212104-convert-grantee-to-recipient: migrated (0.119s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20211207214532-add_grant_state: migrating =======
Executing (default): ALTER TABLE "public"."Grants" ADD COLUMN "stateCode" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20211207214532-add_grant_state: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220103142419-remove-grantee-record-flag: migrating =======
Executing (1a1b072d-9ba8-4ac2-b3e9-24986ebff1ab): START TRANSACTION;
Connection validated successfully
Executing (1a1b072d-9ba8-4ac2-b3e9-24986ebff1ab): UPDATE "Users" SET "flags"=$1
Executing (1a1b072d-9ba8-4ac2-b3e9-24986ebff1ab): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220103142419-remove-grantee-record-flag: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220111194358-add-goals-objective-flag: migrating =======
Executing (default): DO $$ BEGIN\n        ALTER TYPE "enum_Users_flags" ADD VALUE 'recipient_goals_objectives';\n      EXCEPTION\n        WHEN duplicate_object THEN null;\n      END $$;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220111194358-add-goals-objective-flag: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220114214532-add_grant_annual_funding_month: migrating =======
Executing (default): ALTER TABLE "public"."Grants" ADD COLUMN "annualFundingMonth" VARCHAR(255);
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220114214532-add_grant_annual_funding_month: migrated (0.017s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220115000000-audit-system: migrating =======
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): START TRANSACTION;
Connection validated successfully
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220115000000-audit-system.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): DO $$\n          BEGIN\n              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'dml_type') THEN\n                  CREATE TYPE dml_type AS ENUM ('INSERT', 'UPDATE', 'DELETE');\n              END IF;\n          END$$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE TABLE IF NOT EXISTS "ZADescriptor" ("id"   SERIAL , "descriptor" TEXT NOT NULL, PRIMARY KEY ("id"));
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFDescriptorToID"(_param_id text)\n          RETURNS INTEGER\n          LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              Did INTEGER;\n          BEGIN\n              IF _param_id IS NOT NULL THEN\n                  Did := id FROM "ZADescriptor" WHERE descriptor = _param_id;\n                  IF Did IS NULL THEN\n                      INSERT INTO "ZADescriptor" (descriptor) VALUES (_param_id);\n                      Did := id FROM "ZADescriptor" WHERE descriptor = _param_id;\n                  END IF;\n              END IF;\n              RAISE NOTICE 'DescriptorToID: % -> %', _param_id, Did;\n              RETURN Did;\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): DO $$\n          BEGIN\n            PERFORM "ZAFDescriptorToID"('ARCHIVE AUDIT LOG');\n          END;\n          $$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE TABLE IF NOT EXISTS "ZAFilter" ("id"   SERIAL , "tableName" VARCHAR(255), "columnName" VARCHAR(255) NOT NULL, PRIMARY KEY ("id"));
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): INSERT INTO "ZAFilter" ("tableName", "columnName")\n          VALUES ( NULL, 'updatedAt');
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFCreateALNoUpdate"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE FUNCTION %I()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                $body$\n                BEGIN\n                  RAISE EXCEPTION 'Update of %s is not supported to maintain audit log integrity.';\n                END;\n                $body$;$sql$,\n                'ZALNoUpdateF' || t_name,\n                'ZAL' || t_name);\n\n            EXECUTE format($sql$\n                CREATE TRIGGER %I\n                  BEFORE UPDATE ON %I\n                  FOR EACH ROW EXECUTE FUNCTION %I()$sql$,\n                'ZALNoUpdateT' || t_name,\n                'ZAL' || t_name,\n                'ZALNoUpdateF' || t_name);\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFCreateALNoDelete"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE FUNCTION %I()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                $body$\n                DECLARE\n                  CREATED_BY bigint;\n                  TRANSACTION_ID uuid;\n                  SESSION_SIG TEXT;\n                  DESCRIPTOR_ID int;\n                BEGIN\n                  CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true), '')::BIGINT, -1);\n\n                  TRANSACTION_ID := COALESCE(\n                      NULLIF(current_setting('audit.transactionId', true), '')::uuid,\n                      lpad(txid_current()::text,32, '0')::uuid);\n\n                  SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n                  DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                      NULLIF(current_setting('audit.auditDescriptor', true)::TEXT, ''));\n\n                  IF ( DESCRIPTOR_ID = "ZAFDescriptorToID"('ARCHIVE AUDIT LOG') ) THEN\n                    RAISE NOTICE 'Archive Data: %% by %%', %L, CREATED_BY;\n\n                    INSERT INTO "ZALDDL" (\n                      command_tag,\n                      object_type,\n                      schema_name,\n                      object_identity,\n                      ddl_timestamp,\n                      ddl_by,\n                      ddl_txid,\n                      session_sig,\n                      descriptor_id)\n                  VALUES (\n                      'ARCHIVE DATA'\n                      'AUDIT LOG TABLE',\n                      'ttasmarthub',\n                      %L,\n                      CURRENT_TIMESTAMP,\n                      CREATED_BY,\n                      TRANSACTION_ID,\n                      SESSION_SIG,\n                      DESCRIPTOR_ID);\n                  ELSE\n                    RAISE EXCEPTION 'Delete from %s is not supported to maintain audit log integrity.';\n                  END IF;\n                END;\n                $body$;$sql$,\n                'ZALNoDeleteF' || t_name,\n                'ZAL' || t_name,\n                'ZAL' || t_name,\n                'ZAL' || t_name);\n\n              EXECUTE format($sql$\n                  CREATE TRIGGER %I\n                    BEFORE DELETE ON %I\n                    FOR EACH ROW EXECUTE FUNCTION %I()$sql$,\n                  'ZALNoDeleteT' || t_name,\n                  'ZAL' || t_name,\n                  'ZALNoDeleteF' || t_name);\n            END\n            $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFCreateALNoTruncate"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE FUNCTION %I()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                $body$\n                BEGIN\n                    RAISE EXCEPTION 'Truncate on %s is not supported to maintain audit log integrity.';\n                END;\n                $body$;$sql$,\n                'ZALNoTruncateF' || t_name,\n                'ZAL' || t_name);\n\n            EXECUTE format($sql$\n                CREATE TRIGGER %I\n                  BEFORE TRUNCATE ON %I\n                  FOR EACH STATEMENT EXECUTE FUNCTION %I()$sql$,\n                'ZALNoTruncateT' || t_name,\n                'ZAL' || t_name,\n                'ZALNoTruncateF' || t_name);\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE TABLE IF NOT EXISTS "ZALDDL" ("id"   BIGSERIAL , "command_tag" VARCHAR(255), "object_type" VARCHAR(255), "schema_name" VARCHAR(255), "object_identity" VARCHAR(255), "ddl_timestamp" TIMESTAMP WITH TIME ZONE NOT NULL, "ddl_by" INTEGER DEFAULT NULL, "ddl_txid" UUID NOT NULL, "session_sig" TEXT DEFAULT NULL, "descriptor_id" INTEGER DEFAULT NULL, PRIMARY KEY ("id"));
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFAuditDDLCommand"()\n            RETURNS event_trigger\n            LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              CREATED_BY BIGINT;\n              TRANSACTION_ID UUID;\n              SESSION_SIG TEXT;\n              DESCRIPTOR_ID INT;\n              --is_superuser bool = false;\n              r RECORD;\n          BEGIN\n              --select u.rolsuper into is_superuser from pg_catalog.pg_roles u where u.rolname = SESSION_USER;\n              --if is_superuser then\n              --    return;\n              --end if;\n\n              CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true), '')::BIGINT, -1);\n\n              TRANSACTION_ID := COALESCE(\n                  NULLIF(current_setting('audit.transactionId', true), '')::uuid,\n                  lpad(txid_current()::text,32,'0')::uuid);\n\n              SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n              DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                  NULLIF(current_setting('audit.auditDescriptor', true)::TEXT, ''));\n\n              FOR r IN SELECT * FROM pg_event_trigger_ddl_commands() LOOP\n                INSERT INTO "ZALDDL" (\n                  command_tag,\n                  object_type,\n                  schema_name,\n                  object_identity,\n                  ddl_timestamp,\n                  ddl_by,\n                  ddl_txid,\n                  session_sig,\n                  descriptor_id)\n              VALUES (\n                  r.command_tag,\n                  r.object_type,\n                  r.schema_name,\n                  r.object_identity,\n                  CURRENT_TIMESTAMP,\n                  CREATED_BY,\n                  TRANSACTION_ID,\n                  SESSION_SIG,\n                  DESCRIPTOR_ID);\n              END LOOP;\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE EVENT TRIGGER "ZATAuditAlterCommands"\n          ON ddl_command_end\n          WHEN TAG IN ('ALTER FUNCTION', 'ALTER TABLE', 'ALTER TRIGGER', 'ALTER TYPE')\n          EXECUTE FUNCTION "ZAFAuditDDLCommand"();
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE EVENT TRIGGER "ZATAuditCreateCommands"\n          ON ddl_command_end\n          WHEN TAG IN ('CREATE FUNCTION', 'CREATE TABLE', 'CREATE TABLE AS', 'CREATE TRIGGER', 'CREATE TYPE', 'SELECT INTO')\n          EXECUTE FUNCTION "ZAFAuditDDLCommand"();
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE EVENT TRIGGER "ZATAuditDropCommands"\n          ON ddl_command_end\n          WHEN TAG IN ('DROP FUNCTION', 'DROP TABLE', 'DROP TRIGGER', 'DROP TYPE')\n          EXECUTE FUNCTION "ZAFAuditDDLCommand"();
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): SELECT\n            "ZAFCreateALNoUpdate"('DDL'),\n            "ZAFCreateALNoDelete"('DDL'),\n            "ZAFCreateALNoTruncate"('DDL');
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFCreateALTable"(t_name varchar(63))\n              RETURNS VOID\n              LANGUAGE plpgsql AS\n            $func$\n            BEGIN\n              RAISE NOTICE 'Create Audit Log Table: %','ZAL' || t_name;\n              EXECUTE format($sql$\n                  CREATE TABLE IF NOT EXISTS %I (\n                    id BIGSERIAL,\n                    data_id bigint NOT NULL,\n                    dml_type dml_type NOT NULL,\n                    old_row_data jsonb,\n                    new_row_data jsonb,\n                    dml_timestamp timestamp NOT NULL,\n                    dml_by int NOT NULL,\n                    dml_txid uuid NOT NULL,\n                    session_sig TEXT NULL,\n                    descriptor_id INT,\n                    PRIMARY KEY (id)\n                    );$sql$,\n                    'ZAL' || t_name);\n            END\n            $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFCreateALFunction"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE OR REPLACE FUNCTION %I ()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                  $body$\n                  DECLARE\n                      CREATED_BY bigint;\n                      TRANSACTION_ID uuid;\n                      SESSION_SIG TEXT;\n                      DESCRIPTOR_ID int;\n                      UNIQUE_OLD jsonb;\n                      UNIQUE_NEW jsonb;\n                      IS_LOGGABLE boolean;\n                  BEGIN\n                      CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true),'')::BIGINT, -1);\n\n                      TRANSACTION_ID := COALESCE(\n                          NULLIF(current_setting('audit.transactionId', true),'')::uuid,\n                          lpad(txid_current()::text,32,'0')::uuid);\n\n                      SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n                      DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                          NULLIF(current_setting('audit.auditDescriptor', true), '')::TEXT);\n\n                      IF (TG_OP = 'INSERT') THEN\n                          INSERT INTO %I (\n                              data_id,\n                              old_row_data,\n                              new_row_data,\n                              dml_type,\n                              dml_timestamp,\n                              dml_by,\n                              dml_txid,\n                              session_sig,\n                              descriptor_id\n                          )\n                          VALUES(\n                              NEW.id,\n                              null,\n                              to_jsonb(NEW),\n                              'INSERT',\n                              CURRENT_TIMESTAMP,\n                              CREATED_BY,\n                              TRANSACTION_ID,\n                              SESSION_SIG,\n                              DESCRIPTOR_ID\n                          );\n\n                          RETURN NEW;\n                      ELSIF (TG_OP = 'UPDATE') THEN\n                          SELECT\n                          json_object(array_agg(a."columnName"),array_agg(a.pre_value)) AS pre,\n                          json_object(array_agg(a."columnName"),array_agg(a.post_value)) AS post,\n                          (count(trigerable) - count(NULLIF(trigerable,TRUE)) > 0) AS loggable\n                          INTO\n                          UNIQUE_OLD,\n                          UNIQUE_NEW,\n                          IS_LOGGABLE\n                          FROM (\n                              SELECT\n                              pre.key AS "columnName",\n                              pre.value #>> '{}' AS pre_value,\n                              post.value #>> '{}' AS post_value,\n                              NOT COALESCE(filter."columnName" = filter."columnName",FALSE) as trigerable\n                              FROM jsonb_each(to_jsonb(OLD)) AS pre\n                              INNER JOIN jsonb_each(to_jsonb(NEW)) AS post\n                              ON pre.key = post.key\n                              AND pre.value IS DISTINCT FROM post.value\n                              LEFT JOIN "ZAFilter" filter\n                              ON pre.key = filter."columnName"\n                              and ( filter."tableName" = %L OR filter."tableName" IS NULL)\n                          ) a;\n\n                          IF IS_LOGGABLE THEN\n                          INSERT INTO %I (\n                              data_id,\n                              old_row_data,\n                              new_row_data,\n                              dml_type,\n                              dml_timestamp,\n                              dml_by,\n                              dml_txid,\n                              session_sig,\n                              descriptor_id\n                          )\n                          VALUES(\n                              NEW.id,\n                              UNIQUE_OLD,\n                              UNIQUE_NEW,\n                              'UPDATE',\n                              CURRENT_TIMESTAMP,\n                              CREATED_BY,\n                              TRANSACTION_ID,\n                              SESSION_SIG,\n                              DESCRIPTOR_ID\n                          );\n                          END IF;\n                          RETURN NEW;\n                      ELSIF (TG_OP = 'DELETE') THEN\n                      INSERT INTO %I (\n                          data_id,\n                          old_row_data,\n                          new_row_data,\n                          dml_type,\n                          dml_timestamp,\n                          dml_by,\n                          dml_txid,\n                          session_sig,\n                          descriptor_id\n                      )\n                      VALUES(\n                          OLD.id,\n                          to_jsonb(OLD),\n                          null,\n                          'DELETE',\n                          CURRENT_TIMESTAMP,\n                          CREATED_BY,\n                          TRANSACTION_ID,\n                          SESSION_SIG,\n                          DESCRIPTOR_ID\n                      );\n\n                      RETURN OLD;\n                      END IF;\n\n                  END;\n                  $body$;$sql$,\n                'ZALF' || t_name,\n                'ZAL' || t_name,\n                t_name,\n                'ZAL' || t_name,\n                'ZAL' || t_name);\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFCreateALTrigger"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE TRIGGER %I\n                  AFTER INSERT OR UPDATE OR DELETE ON %I\n                  FOR EACH ROW EXECUTE FUNCTION %I()$sql$,\n                'ZALT' || t_name,\n                t_name,\n                'ZALF' || t_name);\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFCreateAuditTruncateTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                CREATE FUNCTION %I()\n                  RETURNS trigger\n                  LANGUAGE plpgsql AS\n                $body$\n                DECLARE\n                  CREATED_BY bigint;\n                  TRANSACTION_ID uuid;\n                  SESSION_SIG TEXT;\n                  DESCRIPTOR_ID int;\n                BEGIN\n                  CREATED_BY := COALESCE(current_setting('var.loggedUser', true)::BIGINT, -1);\n\n                  TRANSACTION_ID := COALESCE(\n                      current_setting('var.transactionId', true)::uuid,\n                      lpad(txid_current()::text,32,'0')::uuid);\n\n                  SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n                  DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                      NULLIF(current_setting('var.auditDescriptor', true)::TEXT, ''));\n\n                  RAISE NOTICE 'command_tag: %%','TRUNCATE';\n                  RAISE NOTICE 'object_type: %%','TABLE';\n                  RAISE NOTICE 'schema_name: %%','ttasmarthub';\n                  RAISE NOTICE 'object_identity: %%',%L;\n                  RAISE NOTICE 'ddl_timestamp: %%',CURRENT_TIMESTAMP;\n                  RAISE NOTICE 'ddl_by: %%',CREATED_BY;\n                  RAISE NOTICE 'ddl_txid: %%',TRANSACTION_ID;\n                  RAISE NOTICE 'descriptor_id: %%',DESCRIPTOR_ID;\n\n                  INSERT INTO "ZALDDL" (\n                    command_tag,\n                    object_type,\n                    schema_name,\n                    object_identity,\n                    ddl_timestamp,\n                    ddl_by,\n                    ddl_txid,\n                    session_sig,\n                    descriptor_id)\n                VALUES (\n                    'TRUNCATE'\n                    'TABLE',\n                    'ttasmarthub',\n                    %L,\n                    CURRENT_TIMESTAMP,\n                    CREATED_BY,\n                    TRANSACTION_ID,\n                    SESSION_SIG,\n                    DESCRIPTOR_ID);\n                END;\n                $body$;$sql$,\n                'ZALTruncateF' || t_name,\n                t_name,\n                t_name);\n\n            EXECUTE format($sql$\n                CREATE TRIGGER %I\n                  AFTER TRUNCATE ON %I\n                  FOR EACH STATEMENT EXECUTE FUNCTION %I()$sql$,\n                'ZALTruncateT' || t_name,\n                t_name,\n                'ZALTruncateF' || t_name);\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFAddAuditingOnTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            RAISE NOTICE 'Adding Auditing on %', t_name;\n            PERFORM "ZAFCreateALTable"(t_name);\n            PERFORM "ZAFCreateALFunction"(t_name);\n            PERFORM "ZAFCreateALTrigger"(t_name);\n            PERFORM "ZAFCreateAuditTruncateTable"(t_name);\n            PERFORM "ZAFCreateALNoUpdate"(t_name);\n            PERFORM "ZAFCreateALNoDelete"(t_name);\n            PERFORM "ZAFCreateALNoTruncate"(t_name);\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFAuditCreateTable"()\n            RETURNS event_trigger\n            LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              obj record;\n          BEGIN\n              FOR obj IN\n              SELECT *\n              FROM pg_event_trigger_ddl_commands()\n              LOOP\n                IF obj.command_tag = 'CREATE TABLE'\n                  AND obj.object_type = 'table'\n                  AND obj.schema_name = 'public'\n                  AND (parse_ident(obj.object_identity))[2] NOT LIKE 'ZAL%' THEN\n                      PERFORM "ZAFAddAuditingOnTable"((parse_ident(obj.object_identity))[2]);\n                  END IF;\n              END LOOP;\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE EVENT TRIGGER "ZATAuditCreateTable"\n            ON ddl_command_end\n            WHEN TAG IN ('SELECT INTO', 'CREATE TABLE', 'CREATE TABLE AS')\n            EXECUTE FUNCTION "ZAFAuditCreateTable"();
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): SELECT table_name, "ZAFAddAuditingOnTable"(table_name::varchar)\n          FROM information_schema.tables\n          WHERE table_schema='public'\n            AND table_type='BASE TABLE'\n            AND table_name != 'SequelizeMeta'\n            AND table_name != 'RequestErrors'\n            AND table_name NOT LIKE 'ZAL%';
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFRemoveAuditingOnTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            EXECUTE format($sql$\n                DROP TRIGGER IF EXISTS %I\n                  ON %I$sql$,\n                'ZALT' || t_name,\n                t_name);\n\n            EXECUTE format($sql$\n                DROP FUNCTION IF EXISTS %I()$sql$,\n                'ZALF' || t_name);\n\n            EXECUTE format($sql$\n                DROP TRIGGER IF EXISTS %I\n                  ON %I$sql$,\n                'ZALTruncateT' || t_name,\n                t_name);\n\n            EXECUTE format($sql$\n                DROP FUNCTION IF EXISTS %I()$sql$,\n                'ZALTruncateF' || t_name);\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFAuditDropTable"()\n            RETURNS event_trigger\n            LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              obj record;\n          BEGIN\n              FOR obj IN\n              SELECT *\n              FROM pg_event_trigger_dropped_objects()\n              LOOP\n                  IF obj.object_name NOT LIKE 'ZAL%' THEN\n                      PERFORM "ZAFRemoveAuditingOnTable"(obj.object_name);\n                  END IF;\n              END LOOP;\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE EVENT TRIGGER "ZATAuditDropTable"\n          ON sql_drop\n          WHEN TAG IN ('DROP TABLE')\n          EXECUTE FUNCTION "ZAFAuditDropTable"();
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): CREATE OR REPLACE FUNCTION "ZAFSetTriggerState"(\n                TABLENAME varchar,\n                TRIGGERTYPE varchar,\n                CURRENTSTATE varchar,\n                NEWSTATE varchar)\n            RETURNS void\n            LANGUAGE plpgsql AS\n          $func$\n          DECLARE\n              CREATED_BY bigint;\n              DESCRIPTOR TEXT;\n              DESCRIPTOR_ID int;\n              obj record;\n          BEGIN\n            CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true), '')::BIGINT, -1);\n\n            DESCRIPTOR := NULLIF(current_setting('audit.auditDescriptor', true)::TEXT, '');\n\n            DESCRIPTOR_ID := "ZAFDescriptorToID"(DESCRIPTOR);\n\n            IF ( DESCRIPTOR_ID is not null ) THEN\n              RAISE NOTICE 'Audit Trigger State: % changed from % to % by % for %',\n                COALESCE(TABLENAME, 'any table'),\n                COALESCE(CURRENTSTATE, 'any state'),\n                COALESCE(NEWSTATE, 'oppisite state'),\n                CREATED_BY,\n                DESCRIPTOR;\n              FOR obj IN\n              select\n                c.relname "tableName",\n                t.tgname "triggerName",\n                (m.mapping ->> 'current')::varchar "currentState",\n                (m.mapping ->> 'new')::varchar "newState",\n                (c.relname like 'ZAL%') "isAuditTable",\n                substring(t.tgname,length('ZAL')+1,length(t.tgname)-length(c.relname)-(length('ZAL')*(c.relname not like 'ZAL%')::int)) "triggerType"\n              from pg_trigger t\n              join pg_class c\n              on c.oid = t.tgrelid\n              join jsonb_array_elements(\n                '[\n                  {"from":"O","current":"ENABLE","new":"DISABLE"},\n                  {"from":"D","current":"DISABLE","new":"ENABLE"},\n                  {"from":"R","current":"ENABLE","new":"DISABLE"},\n                  {"from":"A","current":"ENABLE","new":"DISABLE"}\n                ]') m(mapping)\n              on t.tgenabled::char(1) = (m.mapping ->> 'from')::char(1)\n              where t.tgname like 'ZAL%'\n              and (COALESCE(c.relname like TABLENAME, false) or TABLENAME is null)\n              and (COALESCE((m.mapping ->> 'current')::varchar = upper(CURRENTSTATE), false) or CURRENTSTATE is null)\n              and (COALESCE((m.mapping ->> 'new')::varchar = upper(NEWSTATE), false) or NEWSTATE is null)\n              and (COALESCE(upper(CURRENTSTATE), 'NULL') != COALESCE(upper(NEWSTATE), 'NULL') or (CURRENTSTATE is null and NEWSTATE is null))\n              and (COALESCE(substring(t.tgname,length('ZAL')+1,length(t.tgname)-length(c.relname)-(length('ZAL')*(c.relname not like 'ZAL%')::int)) like TRIGGERTYPE, false) or TRIGGERTYPE is null)\n              order by  c.relname, t.tgname\n              LOOP\n                  RAISE NOTICE 'Audit Trigger State: % % on %', obj."triggerName", obj."newState", obj."tableName";\n                  execute format('ALTER TABLE %I %s TRIGGER %I', obj."tableName", obj."newState", obj."triggerName");\n              END LOOP;\n            ELSE\n              RAISE EXCEPTION 'Archive Trigger states can not be modified without providing a valid descriptor value.';\n            END IF;\n          END\n          $func$;
Executing (390a6823-0627-4fab-ab93-99247f6e1b9e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220115000000-audit-system: migrated (0.350s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220204151917-remove-old-manager: migrating =======
Executing (0d4956c1-ede4-4e13-9c61-bbbf64a94ea4): START TRANSACTION;
Connection validated successfully
Executing (0d4956c1-ede4-4e13-9c61-bbbf64a94ea4): ALTER TABLE "public"."ActivityReports" DROP COLUMN "oldManagerNotes";
Executing (0d4956c1-ede4-4e13-9c61-bbbf64a94ea4): ALTER TABLE "public"."ActivityReports" DROP COLUMN "oldApprovingManagerId";
Executing (0d4956c1-ede4-4e13-9c61-bbbf64a94ea4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220204151917-remove-old-manager: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220228110425-add-ar-creator-role: migrating =======
Executing (default): CREATE TYPE "public"."enum_ActivityReports_creatorRole" AS ENUM('Regional Program Manager', 'COR', 'Supervisory Program Specialist', 'Program Specialist', 'Grants Specialist', 'Central Office', 'TTAC', 'Admin. Assistant', 'Early Childhood Manager', 'Early Childhood Specialist', 'Family Engagement Specialist', 'Grantee Specialist Manager', 'Grantee Specialist', 'Health Specialist', 'System Specialist');ALTER TABLE "public"."ActivityReports" ADD COLUMN "creatorRole" "public"."enum_ActivityReports_creatorRole";
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220228110425-add-ar-creator-role: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220304152116-add-endDate-to-goals: migrating =======
Executing (faab688c-20d4-4b1c-8ebb-40f001eff546): START TRANSACTION;
Connection validated successfully
Executing (faab688c-20d4-4b1c-8ebb-40f001eff546): ALTER TABLE "public"."Goals" ADD COLUMN "endDate" DATE;
Executing (faab688c-20d4-4b1c-8ebb-40f001eff546): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220304152116-add-endDate-to-goals: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220308082915-add-goal-close-suspend-reason: migrating =======
Executing (624368bc-3aee-43a5-9bc1-cfb9e610f98d): START TRANSACTION;
Connection validated successfully
Executing (624368bc-3aee-43a5-9bc1-cfb9e610f98d): CREATE TYPE "public"."enum_Goals_closeSuspendReason" AS ENUM('Duplicate goal', 'Recipient request', 'TTA complete', 'Key staff turnover', 'Recipient is not responding', 'Other');ALTER TABLE "public"."Goals" ADD COLUMN "closeSuspendReason" "public"."enum_Goals_closeSuspendReason";
Executing (624368bc-3aee-43a5-9bc1-cfb9e610f98d): ALTER TABLE "public"."Goals" ADD COLUMN "closeSuspendContext" TEXT;
Executing (624368bc-3aee-43a5-9bc1-cfb9e610f98d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220308082915-add-goal-close-suspend-reason: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220308110425-fix-double-recipient: migrating =======
Executing (8f308578-9535-47d0-8df4-78764972f343): START TRANSACTION;
Connection validated successfully
Executing (8f308578-9535-47d0-8df4-78764972f343): UPDATE "Grants" SET "recipientId" = 7782 WHERE "id" = 9957;
Executing (8f308578-9535-47d0-8df4-78764972f343): UPDATE "GrantGoals" SET "recipientId" = 7782 WHERE "id" = 9957;
Executing (8f308578-9535-47d0-8df4-78764972f343): DELETE FROM "Recipients" WHERE "id" = 5;
Executing (8f308578-9535-47d0-8df4-78764972f343): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220308110425-fix-double-recipient: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220311135140-update-topics-table: migrating =======
Executing (f4febd9f-99be-48ca-bcc0-4645e4837add): START TRANSACTION;
Connection validated successfully
Executing (f4febd9f-99be-48ca-bcc0-4645e4837add): DELETE FROM "Topics"
Executing (f4febd9f-99be-48ca-bcc0-4645e4837add): INSERT INTO "Topics" ("name","createdAt","updatedAt") VALUES ('Behavioral / Mental Health / Trauma','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Child Assessment, Development, Screening','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('CLASS: Classroom Organization','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('CLASS: Emotional Support','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('CLASS: Instructional Support','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Coaching','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Communication','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Community and Self-Assessment','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Culture & Language','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Curriculum (Instructional or Parenting)','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Data and Evaluation','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('ERSEA','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Environmental Health and Safety / EPRR','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Equity','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Facilities','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Family Support Services','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Fiscal / Budget','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Five-Year Grant','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Home Visiting','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Human Resources','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Leadership / Governance','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Learning Environments','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Nutrition','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Oral Health','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Parent and Family Engagement','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Partnerships and Community Engagement','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Physical Health and Screenings','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Pregnancy Services / Expectant Families','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Program Planning and Services','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Quality Improvement Plan / QIP','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Recordkeeping and Reporting','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Safety Practices','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Staff Wellness','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Teaching Practices / Teacher-Child Interactions','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Technology and Information Systems','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Transition Practices','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00'),('Transportation','2025-03-28 23:18:44.914 +00:00','2025-03-28 23:18:44.914 +00:00');
Executing (f4febd9f-99be-48ca-bcc0-4645e4837add): ALTER TABLE "public"."Topics" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (f4febd9f-99be-48ca-bcc0-4645e4837add): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220311135140-update-topics-table: migrated (0.087s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220311155440-add-objective-topics: migrating =======
Executing (508c9368-a1f7-4924-8d86-b600a794ecd2): START TRANSACTION;
Connection validated successfully
Executing (508c9368-a1f7-4924-8d86-b600a794ecd2): CREATE TABLE IF NOT EXISTS "ObjectiveTopics" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (508c9368-a1f7-4924-8d86-b600a794ecd2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220311155440-add-objective-topics: migrated (0.053s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220311160359-add-resource-objectives: migrating =======
Executing (c8a1ecf8-1d43-4b02-86f1-6c2c711d05ab): START TRANSACTION;
Connection validated successfully
Executing (c8a1ecf8-1d43-4b02-86f1-6c2c711d05ab): CREATE TABLE IF NOT EXISTS "ObjectiveResources" ("id"   SERIAL , "userProvidedUrl" VARCHAR(255) NOT NULL, "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (c8a1ecf8-1d43-4b02-86f1-6c2c711d05ab): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220311160359-add-resource-objectives: migrated (0.056s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220324111512-update-goal-close-suspend-enum-values: migrating =======
Executing (default): ALTER TYPE "enum_Goals_closeSuspendReason" ADD VALUE 'Key staff turnover / vacancies';
Connection validated successfully
Executing (default): ALTER TYPE "enum_Goals_closeSuspendReason" ADD VALUE 'Regional Office request';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220324111512-update-goal-close-suspend-enum-values: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220328144415-add-previous-status-to-goals: migrating =======
Executing (200de1b5-c867-4ca7-977c-c4d77d027b3e): START TRANSACTION;
Connection validated successfully
Executing (200de1b5-c867-4ca7-977c-c4d77d027b3e): ALTER TABLE "public"."Goals" ADD COLUMN "previousStatus" TEXT;
Executing (200de1b5-c867-4ca7-977c-c4d77d027b3e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220328144415-add-previous-status-to-goals: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220424000000-restore-topicgoals: migrating =======
Executing (17620028-e210-4f73-8ccf-e94d992effc0): START TRANSACTION;
Connection validated successfully
Executing (17620028-e210-4f73-8ccf-e94d992effc0): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220424000000-restore-topicgoals.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (17620028-e210-4f73-8ccf-e94d992effc0): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (17620028-e210-4f73-8ccf-e94d992effc0): ALTER TABLE "public"."Topics" ADD COLUMN "mapsTo" INTEGER;
Executing (17620028-e210-4f73-8ccf-e94d992effc0): DO $$\n          ------------------------------------------------------------------------------------\n          BEGIN\n            DROP TABLE IF EXISTS "__temp_TopicGoals";\n            CREATE TEMP TABLE "__temp_TopicGoals" (\n              id integer NOT NULL,\n              "topicId" integer NOT NULL,\n              "goalId" integer NOT NULL,\n              "createdAt" timestamp with time zone NOT NULL,\n              "updatedAt" timestamp with time zone NOT NULL\n            );\n            ------------------------------------------------------------------------------------\n            ALTER TABLE "Topics"\n            DROP CONSTRAINT "Topics_name_key";\n            ------------------------------------------------------------------------------------\n            ALTER TABLE "Topics"\n            ADD CONSTRAINT "Topics_name_key" UNIQUE (name, "deletedAt", "mapsTo");\n            ------------------------------------------------------------------------------------\n          END$$;
Executing (17620028-e210-4f73-8ccf-e94d992effc0): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (17620028-e210-4f73-8ccf-e94d992effc0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220424000000-restore-topicgoals: migrated (0.140s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220425000000-goal-templates: migrating =======
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): START TRANSACTION;
Connection validated successfully
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220425000000-goal-templates.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ActivityReportGoals" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_DisconnectedGoals_closeSuspendReason' GROUP BY 1
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TYPE "public"."enum_DisconnectedGoals_closeSuspendReason" AS ENUM('Duplicate goal', 'Recipient request', 'TTA complete', 'Key staff turnover / vacancies', 'Recipient is not responding', 'Regional Office request');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "DisconnectedGoals" ("id"   SERIAL , "name" TEXT NOT NULL, "status" VARCHAR(255), "timeframe" VARCHAR(255), "isFromSmartsheetTtaPlan" BOOLEAN, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "closeSuspendReason" "public"."enum_DisconnectedGoals_closeSuspendReason", "closeSuspendContext" TEXT, "endDate" TIMESTAMP WITH TIME ZONE, "previousStatus" VARCHAR(255), PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_GoalTemplates_creationMethod' GROUP BY 1
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TYPE "public"."enum_GoalTemplates_creationMethod" AS ENUM('Automatic', 'Curated');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "GoalTemplates" ("id"   SERIAL , "hash" TEXT NOT NULL, "templateName" TEXT NOT NULL, "regionId" INTEGER REFERENCES "Regions" ("id"), "creationMethod" "public"."enum_GoalTemplates_creationMethod" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "lastUsed" TIMESTAMP WITH TIME ZONE, "templateNameModifiedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceGoals" INTEGER[] NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ObjectiveTemplates_creationMethod' GROUP BY 1
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TYPE "public"."enum_ObjectiveTemplates_creationMethod" AS ENUM('Automatic', 'Curated');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ObjectiveTemplates" ("id"   SERIAL , "hash" TEXT NOT NULL, "templateTitle" TEXT NOT NULL, "regionId" INTEGER REFERENCES "Regions" ("id"), "creationMethod" "public"."enum_ObjectiveTemplates_creationMethod" NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "lastUsed" TIMESTAMP WITH TIME ZONE, "templateTitleModifiedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceObjectives" INTEGER[] NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ObjectiveTemplateResources" ("id"   SERIAL , "userProvidedUrl" VARCHAR(255) NOT NULL, "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ObjectiveTemplateTopics" ("id"   SERIAL , "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "GoalTemplateObjectiveTemplates" ("id"   SERIAL , "goalTemplateId" INTEGER NOT NULL REFERENCES "GoalTemplates" ("id"), "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ObjectiveRoles" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ObjectiveTemplateRoles" ("id"   SERIAL , "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Roles" ADD COLUMN "isSpecialist" BOOLEAN;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Roles" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Roles" ADD COLUMN "mapsTo" INTEGER;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): DO $$\n          BEGIN\n            CREATE TEMP TABLE "TempRoles" AS\n            SELECT\n              MIN(r."id") "id",\n              r.name,\n              r."fullName",\n              MIN(r."createdAt") "createdAt",\n              MAX(r."updatedAt") "updatedAt",\n              MAX(r."deletedAt") "deletedAt",\n              r."isSpecialist",\n              r."mapsTo"\n            FROM "Roles" r\n            GROUP BY  r.name, r."fullName", r."isSpecialist", r."mapsTo"\n            ORDER BY  r.name, r."fullName", r."isSpecialist", r."mapsTo";\n            ------------------------------------------------------------------------------------\n            TRUNCATE TABLE\n              "Roles",\n              "RoleTopics",\n              "ObjectiveRoles",\n              "ObjectiveTemplateRoles"\n            RESTART IDENTITY;\n            ------------------------------------------------------------------------------------\n            INSERT INTO "Roles" (\n              "id",\n              "name",\n              "fullName",\n              "createdAt",\n              "updatedAt",\n              "deletedAt",\n              "isSpecialist",\n              "mapsTo"\n            )\n            SELECT\n              "id",\n              "name",\n              "fullName",\n              "createdAt",\n              "updatedAt",\n              "deletedAt",\n              "isSpecialist",\n              "mapsTo"\n            FROM "TempRoles";\n\n            PERFORM SETVAL('"Roles_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "Roles"), 1), false);\n            ------------------------------------------------------------------------------------\n            UPDATE "Roles"\n            SET "isSpecialist" = true\n            WHERE "fullName" in (\n              'Family Engagement Specialist',\n              'Health Specialist',\n              'Early Childhood Specialist',\n              'System Specialist',\n              'Grantee Specialist',\n              'Grants Specialist'\n            );\n            ------------------------------------------------------------------------------------\n            UPDATE "Roles"\n            SET "isSpecialist" = false\n            WHERE "isSpecialist" IS NULL;\n            ------------------------------------------------------------------------------------\n            ALTER TABLE "Roles"\n            ALTER COLUMN "isSpecialist"\n            SET NOT NULL;\n            ------------------------------------------------------------------------------------\n            UPDATE ONLY "Roles" r1\n            SET\n              "deletedAt" = NOW(),\n              "mapsTo" = r2.id\n            FROM "Roles" r2\n            WHERE r1."fullName" = 'Grants Specialist'\n            AND r2."fullName" = 'Grantee Specialist';\n            ------------------------------------------------------------------------------------\n            DROP TABLE "TempRoles";\n          END$$;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "goalTemplateId" INTEGER REFERENCES "GoalTemplates" ("id") ON UPDATE CASCADE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "grantId" INTEGER REFERENCES "Grants" ("id") ON UPDATE CASCADE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "onApprovedAR" BOOLEAN;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): DO $$\n          BEGIN\n          ------------------------------------------------------------------------------------\n          UPDATE ONLY "Goals"\n          SET "onApprovedAR" = false\n          WHERE "onApprovedAR" IS NULL;\n          ------------------------------------------------------------------------------------\n          ALTER TABLE "Goals"\n          ALTER COLUMN "onApprovedAR"\n          SET NOT NULL;\n          ------------------------------------------------------------------------------------\n          END$$;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "objectiveTemplateId" INTEGER REFERENCES "ObjectiveTemplates" ("id") ON UPDATE CASCADE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "otherEntityId" INTEGER REFERENCES "OtherEntities" ("id") ON UPDATE CASCADE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "onApprovedAR" BOOLEAN;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): DO $$\n          BEGIN\n          ------------------------------------------------------------------------------------\n          UPDATE ONLY "Objectives"\n          SET "onApprovedAR" = false\n          WHERE "onApprovedAR" IS NULL;\n          ------------------------------------------------------------------------------------\n          ALTER TABLE "Objectives"\n          ALTER COLUMN "onApprovedAR"\n          SET NOT NULL;\n          ------------------------------------------------------------------------------------\n          END$$;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "ttaProvided" TEXT;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): INSERT INTO "ObjectiveTopics" ("objectiveId", "topicId", "createdAt", "updatedAt")\n          SELECT\n              gtart."objectiveId",\n              gtart."topicId",\n              MIN(gtart."createdAt") "createdAt",\n              MAX(gtart."updatedAt") "updatedAt"\n          FROM (\n              SELECT\n                  o.id "objectiveId",\n                  tg."topicId",\n                  MIN(tg."createdAt") "createdAt",\n                  MAX(tg."updatedAt") "updatedAt"\n              FROM "Objectives" o\n              JOIN "TopicGoals" tg\n              on o."goalId" = tg."goalId"\n              LEFT JOIN "ObjectiveTopics" ot\n              ON o.id = ot."objectiveId"\n              WHERE ot.id is null\n              GROUP BY\n                  o.id,\n                  tg."topicId"\n              UNION\n              SELECT\n                  art."objectiveId",\n                  t.id "topicId",\n                  MIN(art."createdAt") "createdAt",\n                  MAX(art."updatedAt") "updatedAt"\n              FROM (\n                  SELECT\n                      aro."objectiveId",\n                      UNNEST(ar.topics) topic,\n                      MIN(ar."createdAt") "createdAt",\n                      MAX(ar."updatedAt") "updatedAt"\n                  FROM "ActivityReports" ar\n                  JOIN "ActivityReportObjectives" aro\n                  ON ar.id = aro."activityReportId"\n                  GROUP BY\n                      aro."objectiveId",\n                      UNNEST(ar.topics)\n                  ) art\n              LEFT JOIN "Topics" t\n              ON art.topic = t.name\n              AND t."deletedAt" is null\n              LEFT JOIN "ObjectiveTopics" ot\n              ON art."objectiveId" = ot."objectiveId"\n              AND t.id = ot."topicId"\n              WHERE ot.id IS null\n              AND  t.id IS NOT null\n              GROUP BY\n                  art."objectiveId",\n                  t.id\n              ) gtart\n          GROUP BY\n              gtart."objectiveId",\n              gtart."topicId";
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): DROP TABLE IF EXISTS "TopicGoals";
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): DO $$\n          BEGIN\n            -- 1. create a unified temptable to match all goals to grants: __all_distinct_grants_goals\n            CREATE TEMP TABLE "__all_distinct_grants_goals" AS\n            WITH\n              all_grants as (\n                SELECT\n                  "gr"."id" "grantId",\n                  gr.status,\n                  gr."regionId",\n                  g.id "goalId"\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                JOIN "ActivityRecipients" arp\n                ON aro."activityReportId" = arp."activityReportId"\n                JOIN "Grants" gr\n                ON arp."grantId" = gr.id\n                UNION\n                SELECT\n                  "gr"."id" "grantId",\n                  gr.status,\n                  gr."regionId",\n                  g.id "goalId"\n                FROM "Goals" g\n                JOIN "GrantGoals" gg\n                ON g.id = gg."goalId"\n                JOIN "Grants" gr\n                ON gg."grantId" = gr.id\n              )\n              SELECT DISTINCT *\n              FROM all_grants;\n            ------------------------------------------------------------------------------------\n            -- 2. Populate GoalTemplates\n            INSERT INTO "GoalTemplates" (\n              "hash",\n              "templateName",\n              "regionId",\n              "creationMethod",\n              "createdAt",\n              "updatedAt",\n              "lastUsed",\n              "templateNameModifiedAt",\n              "sourceGoals")\n            SELECT DISTINCT\n              md5(NULLIF(TRIM(g.name),'')) "hash",\n              TRIM(g.name) "name",\n              adg."regionId",\n              'Automatic'::"enum_GoalTemplates_creationMethod",\n              min(g."createdAt") "createdAt",\n              NOW() "updatedAt",\n              max(g."createdAt") "lastUsed",\n              NOW() "templateNameModifiedAt",\n              array_agg(DISTINCT g.id) "sourceGoals"\n            FROM "Goals" g\n            JOIN "__all_distinct_grants_goals" adg\n            ON g.id = adg."goalId"\n            WHERE adg."regionId" IS NOT NULL\n            AND NULLIF(TRIM(g.name),'') IS NOT NULL\n            GROUP BY\n              md5(NULLIF(TRIM(g.name),'')),\n              TRIM(g.name),\n              adg."regionId";\n            ------------------------------------------------------------------------------------\n            -- 3. Populate DisconnectedGoals with the goals that do not link to any grants\n            INSERT INTO "DisconnectedGoals" (\n              "name",\n              "status",\n              "timeframe",\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "endDate",\n              "previousStatus")\n            SELECT DISTINCT\n              g."name",\n              g."status",\n              g."timeframe",\n              g."isFromSmartsheetTtaPlan",\n              g."createdAt",\n              g."updatedAt",\n              ("g"."closeSuspendReason"::TEXT)::"enum_DisconnectedGoals_closeSuspendReason",\n              g."closeSuspendContext",\n              g."endDate",\n              g."previousStatus"\n            FROM "Goals" g\n            LEFT JOIN "__all_distinct_grants_goals" adg\n            ON g.id = adg."goalId"\n            WHERE adg."goalId" is null;\n            ------------------------------------------------------------------------------------\n            -- 4. Populate ObjectiveTemplates\n            INSERT INTO "ObjectiveTemplates" (\n              "hash",\n              "templateTitle",\n              "regionId",\n              "creationMethod",\n              "createdAt",\n              "updatedAt",\n              "lastUsed",\n              "templateTitleModifiedAt",\n              "sourceObjectives")\n            SELECT DISTINCT\n              md5(nullif(TRIM(o.title),'')),\n              TRIM(o.title),\n              ar."regionId" "regionId",\n              'Automatic'::"enum_ObjectiveTemplates_creationMethod",\n              min(o."createdAt") "createdAt",\n                NOW() "updatedAt",\n                max(o."createdAt") "lastUsed",\n                NOW() "templateNameModifiedAt",\n              array_agg(DISTINCT o.id) "sourceObjectives"\n            FROM "Objectives" o\n            LEFT JOIN "ActivityReportObjectives" aro\n            ON o."id" = aro."objectiveId"\n            LEFT JOIN "ActivityReports" ar\n            ON aro."activityReportId" = ar."id"\n            WHERE NULLIF(TRIM(o.title),'') IS NOT NULL\n            GROUP BY\n              md5(nullif(TRIM(o.title),'')),\n              TRIM(o.title),\n              ar."regionId";\n            ------------------------------------------------------------------------------------\n            -- 5. Populate ObjectiveTemplateTopics\n            INSERT INTO "ObjectiveTemplateTopics" (\n              "objectiveTemplateId",\n              "topicId",\n              "createdAt",\n              "updatedAt")\n            SELECT DISTINCT\n              o.id,\n              ot."topicId",\n              MIN(ot."createdAt"),\n              MAX(ot."updatedAt")\n            FROM "ObjectiveTemplates" o\n            JOIN "ObjectiveTopics" ot\n            ON ot."objectiveId" = any (o."sourceObjectives"::int[])\n            GROUP BY\n              o.id,\n              ot."topicId";\n            ------------------------------------------------------------------------------------\n            -- 6. Populate ObjectiveTemplateResources\n            INSERT INTO "ObjectiveTemplateResources" (\n              "objectiveTemplateId",\n              "userProvidedUrl",\n              "createdAt",\n              "updatedAt")\n            SELECT DISTINCT\n              ot.id,\n              "or"."userProvidedUrl",\n              MIN("or"."createdAt"),\n              MAX("or"."updatedAt")\n            FROM "ObjectiveTemplates" ot\n            JOIN "ObjectiveResources" "or"\n            ON "or"."objectiveId" = any (ot."sourceObjectives"::int[])\n            GROUP BY\n              ot.id,\n              "or"."userProvidedUrl";\n            ------------------------------------------------------------------------------------\n            -- 7. Populate discrete temp goals per grant, deduplicated and split into progressions\n            CREATE TEMP TABLE "__temp_goals"\n            (\n                "id" serial,\n                "grantId" integer,\n                "name" text COLLATE pg_catalog."default",\n                "status" character varying(255) COLLATE pg_catalog."default",\n                "timeframe" text COLLATE pg_catalog."default",\n                "isFromSmartsheetTtaPlan" boolean,\n                "createdAt" timestamp with time zone NOT NULL,\n                "updatedAt" timestamp with time zone NOT NULL,\n                "closeSuspendReason" "enum_Goals_closeSuspendReason",\n                "closeSuspendContext" text COLLATE pg_catalog."default",\n                "goalTemplateId" integer,\n                "onApprovedAR" boolean,\n                "originalGoalIds" integer[]\n            );\n\n            WITH\n              goal_data AS (\n                SELECT DISTINCT\n                  adg."grantId",\n                  "g"."id",\n                  "g"."name",\n                  NULLIF(TRIM("g"."status"),'') "status",\n                  "g"."timeframe",\n                  "g"."isFromSmartsheetTtaPlan",\n                  "g"."createdAt",\n                  "g"."updatedAt",\n                  "g"."closeSuspendReason",\n                  "g"."closeSuspendContext",\n                  adg.status AS grstatus,\n                  MD5(trim(g.name)) AS gname_md5,\n                  CASE COALESCE(NULLIF(TRIM(g.status),''),'')\n                    WHEN 'Draft' THEN 0\n                    WHEN 'Not Started' THEN 1\n                    WHEN 'In Progress' THEN 2\n                    WHEN 'Completed' THEN 4\n                    WHEN 'Closed' THEN 4\n                    WHEN 'Ceased/Suspended' THEN 3\n                    ELSE -1\n                  END AS gstatus_num,\n                  adg."regionId"\n                FROM "Goals" g\n                JOIN "__all_distinct_grants_goals" adg\n                ON g."id" = adg."goalId"\n              ),\n              orderable_goals AS (\n                SELECT\n                  *,\n                  ROW_NUMBER() OVER (PARTITION BY "grantId", "gname_md5" ORDER BY "updatedAt" ASC, "gstatus_num" ASC) AS "stableOrder"\n                FROM goal_data\n              ),\n              flagged_goals AS (\n                SELECT\n                  *,\n                  CASE\n                    WHEN\n                      (LEAD("gstatus_num") OVER (PARTITION BY "grantId", "gname_md5" ORDER BY "stableOrder")) < "gstatus_num"\n                      OR\n                      (LEAD("gstatus_num") OVER (PARTITION BY "grantId", "gname_md5" ORDER BY "stableOrder")) IS NULL\n                    THEN 1\n                    ELSE 0\n                  END AS "retain_flag"\n                FROM orderable_goals\n              ),\n              goal_progressions as (\n                SELECT\n                  *,\n                  "grantId" || '-' || "gname_md5" || '-' || SUM("retain_flag") OVER (PARTITION BY "grantId", "gname_md5" ORDER BY "stableOrder" DESC ROWS UNBOUNDED PRECEDING) AS "progression_id"\n                FROM flagged_goals\n                ORDER BY "grantId", "gname_md5", "stableOrder"\n              ),\n              goal_merges as (\n                SELECT\n                  gpa."grantId",\n                  gpa.id "primaryId",\n                  gpb.id "subId"\n                FROM goal_progressions gpa\n                LEFT JOIN goal_progressions gpb\n                ON gpa."grantId" = gpb."grantId"\n                AND gpa."progression_id" = gpb."progression_id"\n                AND gpa."retain_flag" = 1\n                AND gpb."retain_flag" = 0\n              ),\n              approved_goals as (\n                SELECT distinct\n                  g.id "goalId",\n                  bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                JOIN "ActivityReportObjectives" aro\n                ON o."id" = aro."objectiveId"\n                JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar."id"\n                group by g.id\n                order by g.id\n              )\n              INSERT INTO "__temp_goals" (\n                "grantId",\n                "name",\n                "status",\n                "timeframe",\n                "isFromSmartsheetTtaPlan",\n                "createdAt",\n                "updatedAt",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "goalTemplateId",\n                "onApprovedAR",\n                "originalGoalIds"\n              )\n              SELECT\n                gda."grantId",\n                gda."name",\n                (array_agg(NULLIF(TRIM(gda."status"),'') order by gda.gstatus_num desc))[1] "status",\n                (array_remove(array_agg(gdb."timeframe" order by gdb."updatedAt"),NULL))[1] "timeframe",\n                SUM(COALESCE(gdb."isFromSmartsheetTtaPlan",false)::int) > 0 "isFromSmartsheetTtaPlan",\n                MIN(gdb."createdAt") "createdAt",\n                MAX(gdb."updatedAt") "updatedAt",\n                (array_remove(array_agg(gdb."closeSuspendReason" order by gdb."updatedAt"),NULL))[1] "closeSuspendReason",\n                (array_remove(array_agg(gdb."closeSuspendContext" order by gdb."updatedAt"),NULL))[1] "closeSuspendContext",\n                gt.id "goalTemplateId",\n                COALESCE(bool_or(ag."onApprovedAR"),false) "onApprovedAR",\n                array_agg(gdb."id") "originalGoalIds"\n              FROM goal_data gda\n              JOIN goal_merges gm\n              ON gda."grantId" = gm."grantId"\n              and gda."id" = gm."primaryId"\n              LEFT JOIN goal_data gdb\n              ON gdb."grantId" = gm."grantId"\n              AND (gdb."id" = gm."primaryId"\n                OR gdb."id" = gm."subId")\n              JOIN "GoalTemplates" gt\n              ON gda.id = any (gt."sourceGoals"::int[])\n              AND gda."regionId" = gt."regionId"\n              LEFT JOIN approved_goals ag\n              ON gdb."id" = ag."goalId"\n              GROUP BY\n                gda."grantId",\n                gda."name",\n                gt.id\n              order by\n                MIN(gdb."createdAt"),\n                gda."grantId";\n            ------------------------------------------------------------------------------------\n            -- 8. Populate discrete temp objectives per goal per grant or other entity, deduplicated and\n            --    split into progressions\n            CREATE TEMP TABLE "__temp_objectives"\n            (\n                "id" serial,\n                "otherEntityId" integer,\n                "goalId" integer,\n                "title" text COLLATE pg_catalog."default",\n                "status" character varying(255) COLLATE pg_catalog."default",\n                "createdAt" timestamp with time zone NOT NULL DEFAULT now(),\n                "updatedAt" timestamp with time zone NOT NULL DEFAULT now(),\n                "objectiveTemplateId" integer,\n                "onApprovedAR" boolean,\n                "originalObjectiveIds" integer[]\n            );\n\n            WITH\n              otherentity_objectives AS (\n                SELECT DISTINCT\n                  oe.id "otherEntityId",\n                  aro."objectiveId",\n                  a."regionId"\n                FROM "OtherEntities" oe\n                JOIN "ActivityRecipients" ar\n                ON oe.id = ar."otherEntityId"\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n                JOIN "ActivityReportObjectives" aro\n                ON ar."activityReportId" = aro."activityReportId"\n                order by oe.id, aro."objectiveId"\n              ),\n              objective_otherentity_data AS (\n                SELECT DISTINCT\n                  oo."otherEntityId",\n                  "o"."id",\n                  "o"."title",\n                  "o"."status",\n                  "o"."createdAt",\n                  "o"."updatedAt",\n                  MD5(trim(o.title)) AS otitle_md5,\n                  CASE COALESCE(o.status,'')\n                    WHEN 'Draft' THEN 0\n                    WHEN 'Not Started' THEN 1\n                    WHEN 'In Progress' THEN 2\n                    WHEN 'Complete' THEN 4\n                    WHEN 'Suspended' THEN 3\n                    ELSE -1\n                  END AS ostatus_num,\n                  oo."regionId"\n                FROM "Objectives" o\n                JOIN "otherentity_objectives" oo\n                ON o."id" = oo."objectiveId"\n                WHERE "o"."title" IS NOT null\n              ),\n              objective_goal_data AS (\n                SELECT DISTINCT\n                  tg."id" "goalId",\n                  "o"."id",\n                  "o"."title",\n                  "o"."status",\n                  "o"."createdAt",\n                  "o"."updatedAt",\n                  MD5(trim(o.title)) AS otitle_md5,\n                  CASE COALESCE(o.status,'')\n                    WHEN 'Draft' THEN 0\n                    WHEN 'Not Started' THEN 1\n                    WHEN 'In Progress' THEN 2\n                    WHEN 'Complete' THEN 4\n                    WHEN 'Suspended' THEN 3\n                    ELSE -1\n                  END AS ostatus_num,\n                  gr."regionId"\n                FROM "Objectives" o\n                JOIN "__temp_goals" tg\n                ON o."goalId" = any (tg."originalGoalIds"::int[])\n                JOIN "Grants" gr\n                ON tg."grantId" = gr.id\n              ),\n              objective_data AS (\n                SELECT\n                  ood."otherEntityId",\n                  null "goalId",\n                  ood."id",\n                  ood."title",\n                  ood."status",\n                  ood."createdAt",\n                  ood."updatedAt",\n                  ood.otitle_md5,\n                  ood.ostatus_num,\n                  ood."regionId"\n                FROM objective_otherentity_data ood\n                UNION\n                SELECT\n                  null "otherEntityId",\n                  ogd."goalId",\n                  ogd."id",\n                  ogd."title",\n                  ogd."status",\n                  ogd."createdAt",\n                  ogd."updatedAt",\n                  ogd.otitle_md5,\n                  ogd.ostatus_num,\n                  ogd."regionId"\n                FROM objective_goal_data ogd\n              ),\n              orderable_objectives AS (\n                SELECT\n                  *,\n                  ROW_NUMBER() OVER (PARTITION BY "otherEntityId", "goalId", "otitle_md5" ORDER BY "updatedAt" ASC, ostatus_num ASC) AS "stableOrder"\n                FROM objective_data\n              ),\n              flagged_objectives AS (\n                SELECT\n                  *,\n                  CASE\n                    WHEN\n                      (LEAD("ostatus_num") OVER (PARTITION BY "otherEntityId", "goalId", "otitle_md5" ORDER BY "stableOrder")) < "ostatus_num"\n                      OR\n                      (LEAD("ostatus_num") OVER (PARTITION BY "otherEntityId", "goalId", "otitle_md5" ORDER BY "stableOrder")) IS NULL\n                    THEN 1\n                    ELSE 0\n                  END AS "retain_flag"\n                FROM orderable_objectives\n              ),\n              objective_progressions as (\n                SELECT\n                  *,\n                  "otherEntityId" || '-' || "goalId" || '-' || "otitle_md5" || '-' || SUM("retain_flag") OVER (PARTITION BY "otherEntityId", "goalId", "otitle_md5" ORDER BY "stableOrder" DESC ROWS UNBOUNDED PRECEDING) AS "progression_id"\n                FROM flagged_objectives\n                ORDER BY "otherEntityId", "goalId", "otitle_md5", "stableOrder"\n              ),\n              objective_merges as (\n                SELECT\n                  opa."otherEntityId",\n                  opa."goalId",\n                  opa.id "primaryId",\n                  opb.id "subId"\n                FROM objective_progressions opa\n                LEFT JOIN objective_progressions opb\n                ON COALESCE(opa."otherEntityId",-1) = COALESCE(opa."otherEntityId",-1)\n                AND COALESCE(opa."goalId",-1) = COALESCE(opb."goalId",-1)\n                AND opa."progression_id" = opb."progression_id"\n                AND opa."retain_flag" = 1\n                AND opb."retain_flag" = 0\n              ),\n              approved_objectives as (\n                SELECT distinct\n                  o.id "objectiveId",\n                  bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n                FROM "Objectives" o\n                LEFT JOIN "ActivityReportObjectives" aro\n                ON o."id" = aro."objectiveId"\n                LEFT JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar."id"\n                group by o.id\n                order by o.id\n              )\n              INSERT INTO "__temp_objectives" (\n                "otherEntityId",\n                "goalId",\n                "title",\n                "status",\n                "createdAt",\n                "updatedAt",\n                "objectiveTemplateId",\n                "onApprovedAR",\n                "originalObjectiveIds"\n              )\n              SELECT\n                oda."otherEntityId",\n                oda."goalId",\n                oda."title",\n                (array_agg(oda."status" order by oda.ostatus_num desc))[1] "status",\n                MIN(odb."createdAt") "createdAt",\n                MAX(odb."updatedAt") "updatedAt",\n                ot.id "objectiveTemplateId",\n                COALESCE(bool_or(ao."onApprovedAR"),false) "onApprovedAR",\n                array_agg(odb."id") "originalObjectiveIds"\n              FROM objective_data oda\n              LEFT JOIN objective_merges om\n              ON COALESCE(oda."otherEntityId",-1) = COALESCE(om."otherEntityId",-1)\n              AND COALESCE(oda."goalId",-1) = COALESCE(om."goalId",-1)\n              AND oda."id" = om."primaryId"\n              LEFT JOIN objective_data odb\n              ON COALESCE(odb."otherEntityId",-1) = COALESCE(om."otherEntityId",-1)\n              AND COALESCE(odb."goalId",-1) = COALESCE(om."goalId",-1)\n              AND (odb."id" = om."primaryId"\n                OR odb."id" = om."subId")\n              JOIN "ObjectiveTemplates" ot\n              ON oda.id = any (ot."sourceObjectives"::int[])\n              AND oda."regionId" = ot."regionId"\n              LEFT JOIN approved_objectives ao\n              ON odb.id = ao."objectiveId"\n              GROUP BY\n                oda."otherEntityId",\n                oda."goalId",\n                oda."title",\n                ot.id\n              order by\n                MIN(odb."createdAt"),\n                oda."otherEntityId",\n                oda."goalId";\n            ------------------------------------------------------------------------------------\n            -- 9. Populate  temp objectives topics\n            CREATE TEMP TABLE "__temp_objectives_topics"\n            (\n                "id" serial,\n                "objectiveId" integer NOT NULL,\n                "topicId" integer NOT NULL,\n                "createdAt" timestamp with time zone NOT NULL,\n                "updatedAt" timestamp with time zone NOT NULL\n            );\n\n            INSERT INTO "__temp_objectives_topics" (\n              "objectiveId",\n              "topicId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "o"."id" "objectiveId",\n              "oto"."topicId",\n              MIN("oto"."createdAt"),\n              MAX("oto"."updatedAt")\n            FROM "ObjectiveTopics" "oto"\n            JOIN "__temp_objectives" "o"\n            ON "oto"."id" = any (o."originalObjectiveIds"::int[])\n            GROUP BY\n              "o"."id",\n              "oto"."topicId";\n            ------------------------------------------------------------------------------------\n            -- 10. Populate  temp objectives resources\n            CREATE TEMP TABLE "__temp_objectives_resources"\n            (\n                "id" serial,\n                "userProvidedUrl" character varying(255) COLLATE pg_catalog."default" NOT NULL,\n                "objectiveId" integer NOT NULL,\n                "createdAt" timestamp with time zone NOT NULL,\n                "updatedAt" timestamp with time zone NOT NULL\n            );\n\n            INSERT INTO "__temp_objectives_resources" (\n              "userProvidedUrl",\n              "objectiveId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "ore"."userProvidedUrl",\n              "o"."id" "objectiveId",\n              MIN("ore"."createdAt"),\n              MAX("ore"."updatedAt")\n            FROM "ObjectiveResources" "ore"\n            JOIN "__temp_objectives" "o"\n            ON "ore"."id" = any (o."originalObjectiveIds"::int[])\n            GROUP BY\n              "ore"."userProvidedUrl",\n              "o"."id";\n            ------------------------------------------------------------------------------------\n            -- 11. Populate temp activity report objectives\n            CREATE TEMP TABLE "__temp_activity_report_objectives"\n            (\n                id serial,\n                "activityReportId" integer NOT NULL,\n                "objectiveId" integer NOT NULL,\n                "createdAt" timestamp with time zone NOT NULL DEFAULT now(),\n                "updatedAt" timestamp with time zone NOT NULL DEFAULT now(),\n                "ttaProvided" text\n            );\n\n            INSERT INTO "__temp_activity_report_objectives" (\n              "activityReportId",\n              "objectiveId",\n              "createdAt",\n              "updatedAt",\n              "ttaProvided"\n            )\n            SELECT\n              "aro"."activityReportId",\n              o."id" "objectiveId",\n              MIN("aro"."createdAt"),\n              MAX("aro"."updatedAt"),\n              TRIM(string_agg(oo."ttaProvided", E'\n'))\n            FROM "ActivityReportObjectives" aro\n            JOIN "__temp_objectives" "o"\n            ON "aro"."objectiveId" = any (o."originalObjectiveIds"::int[])\n            JOIN "Objectives" oo\n            ON aro."objectiveId" = oo.id\n            GROUP BY\n              "aro"."activityReportId",\n              o."id";\n            ------------------------------------------------------------------------------------\n            -- 12. Truncate all tables that directly reference goals and objectives\n            TRUNCATE TABLE\n              "ActivityReportGoals",\n              "ActivityReportObjectives",\n              "ObjectiveRoles",\n              "ObjectiveTemplateRoles",\n              "ObjectiveResources",\n              "ObjectiveTopics",\n              "Objectives",\n              "Goals",\n              "GrantGoals"\n            RESTART IDENTITY;\n            ------------------------------------------------------------------------------------\n            -- 13. Repopulate Goals from temp table\n            INSERT INTO "Goals" (\n              "id",\n              "grantId",\n              "name",\n              "status",\n              "timeframe",\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "goalTemplateId",\n              "onApprovedAR"\n            )\n            SELECT\n              "id",\n              "grantId",\n              "name",\n              "status",\n              "timeframe",\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "goalTemplateId",\n              "onApprovedAR"\n            FROM "__temp_goals";\n\n            PERFORM SETVAL('"Goals_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "Goals"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 14. Repopulate Objectives from temp table\n            INSERT INTO "Objectives"(\n              "id",\n              "otherEntityId",\n              "goalId",\n              "title",\n              "status",\n              "createdAt",\n              "updatedAt",\n              "objectiveTemplateId",\n              "onApprovedAR"\n            )\n            SELECT\n              "id",\n              "otherEntityId",\n              "goalId",\n              "title",\n              "status",\n              "createdAt",\n              "updatedAt",\n              "objectiveTemplateId",\n              "onApprovedAR"\n            FROM "__temp_objectives";\n\n            PERFORM SETVAL('"Objectives_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "Objectives"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 15. Repopulate ObjectiveTopics from temp table\n            INSERT INTO "ObjectiveTopics" (\n              "id",\n              "objectiveId",\n              "topicId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "id",\n              "objectiveId",\n              "topicId",\n              "createdAt",\n              "updatedAt"\n            FROM "__temp_objectives_topics";\n\n            PERFORM SETVAL('"ObjectiveTopics_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "ObjectiveTopics"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 16. Repopulate ObjectiveResources from temp table\n            INSERT INTO "ObjectiveResources" (\n              "id",\n              "userProvidedUrl",\n              "objectiveId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "id",\n              "userProvidedUrl",\n              "objectiveId",\n              "createdAt",\n              "updatedAt"\n            FROM "__temp_objectives_resources";\n\n            PERFORM SETVAL('"ObjectiveResources_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "ObjectiveResources"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 17. Repopulate ActivityReportObjectives from temp table\n            INSERT INTO "ActivityReportObjectives"(\n              "id",\n              "activityReportId",\n              "objectiveId",\n              "createdAt",\n              "updatedAt",\n              "ttaProvided"\n            )\n            SELECT\n              "id",\n              "activityReportId",\n              "objectiveId",\n              "createdAt",\n              "updatedAt",\n              "ttaProvided"\n            FROM "__temp_activity_report_objectives";\n\n            PERFORM SETVAL('"ActivityReportObjectives_id_seq"', COALESCE((SELECT MAX(id) +1 FROM "ActivityReportObjectives"), 1), false);\n            ------------------------------------------------------------------------------------\n            -- 18. Drop all temp tables used\n            DROP TABLE\n              "__all_distinct_grants_goals",\n              "__temp_goals",\n              "__temp_objectives",\n              "__temp_objectives_topics",\n              "__temp_objectives_resources",\n              "__temp_activity_report_objectives";\n            ------------------------------------------------------------------------------------\n            -- 19. Drop sourceGoals column from GoalTemplates\n            ALTER TABLE "GoalTemplates"\n            DROP COLUMN "sourceGoals";\n            ------------------------------------------------------------------------------------\n            -- 20. Drop sourceObjectives column from ObjectiveTemplates\n            ALTER TABLE "ObjectiveTemplates"\n            DROP COLUMN "sourceObjectives";\n            ------------------------------------------------------------------------------------\n            -- 21. Populate GoalTemplateObjectiveTemplates\n            INSERT INTO "GoalTemplateObjectiveTemplates" (\n              "objectiveTemplateId",\n              "goalTemplateId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              o."objectiveTemplateId",\n              g."goalTemplateId",\n              MIN(o."createdAt"),\n              MAX(o."updatedAt")\n            FROM "Objectives" o\n            JOIN "Goals" g\n            ON o."goalId" = g."id"\n            GROUP BY\n              o."objectiveTemplateId",\n              g."goalTemplateId";\n            ------------------------------------------------------------------------------------\n            -- 22. Populate goal status for all goals based on rules defined on TTAHub-813\n            WITH\n              rule_1 AS (\n                SELECT\n                  g.id "goalId",\n                  'Closed' status\n                FROM "Goals" g\n                JOIN "Grants" gr\n                ON g."grantId" = gr.id\n                JOIN "Grants" gr2\n                ON gr."recipientId" = gr2."recipientId"\n                GROUP BY g.id\n                HAVING SUM((gr2.status = 'Active')::int) = 0\n                AND SUM((gr2.status = 'Inactive')::int) > 0\n              ),\n              rule_2 AS (\n                SELECT\n                  g.id "goalId",\n                  'Closed' status\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                AND o.status = 'Complete'\n                JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar.id\n                GROUP BY g.id\n                HAVING SUM((ar."ttaType" = '{training}')::int) > 0\n                AND SUM((ar."ttaType" != '{training}')::int) = 0\n              ),\n              rule_3 AS (\n                SELECT\n                  g.id "goalId",\n                  'In Progress' status\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                AND o.status in ('In Progress', 'Complete')\n                JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar.id\n              ),\n              rule_4 AS (\n                SELECT\n                  g.id "goalId",\n                  'Not Started' status\n                FROM "Goals" g\n                JOIN "Objectives" o\n                ON g.id = o."goalId"\n                JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                JOIN "ActivityReports" ar\n                ON aro."activityReportId" = ar.id\n                group by g.id\n                having array_agg(distinct o.status)::text = '{"Not Started"}'\n              ),\n              rule_5 AS (\n                SELECT\n                  g.id "goalId",\n                  'Not Started' status\n                FROM "Goals" g\n                LEFT JOIN "Objectives" o\n                ON g.id = o."goalId"\n                LEFT JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                WHERE aro.id is null\n                AND g."isFromSmartsheetTtaPlan" = true\n                AND NOW() - g."createdAt" < '1 year'\n              ),\n              rule_6 AS (\n                SELECT\n                  g.id "goalId",\n                  'Closed' status\n                FROM "Goals" g\n                LEFT JOIN "Objectives" o\n                ON g.id = o."goalId"\n                LEFT JOIN "ActivityReportObjectives" aro\n                ON o.id = aro."objectiveId"\n                WHERE aro.id is null\n                AND g."isFromSmartsheetTtaPlan" = true\n                AND NOW() - g."createdAt" > '1 year'\n              ),\n              status_rules AS (\n                SELECT\n                  g.id "goalId",\n                  COALESCE(g.status, r1.status,r2.status,r3.status,r4.status,r5.status,r6.status) status\n                FROM "Goals" g\n                LEFT JOIN rule_1 r1\n                ON g.id = r1."goalId"\n                LEFT JOIN rule_2 r2\n                ON g.id = r2."goalId"\n                LEFT JOIN rule_3 r3\n                ON g.id = r3."goalId"\n                LEFT JOIN rule_4 r4\n                ON g.id = r4."goalId"\n                LEFT JOIN rule_5 r5\n                ON g.id = r5."goalId"\n                LEFT JOIN rule_6 r6\n                ON g.id = r6."goalId"\n              )\n              UPDATE "Goals" g\n              SET status = sr.status\n              FROM status_rules sr\n              WHERE g.id = sr."goalId";\n\n              UPDATE "Goals" g\n              SET status = 'Suspended'\n              WHERE g.status = 'Ceased/Suspended';\n\n              UPDATE "Goals" g\n              SET status = 'Closed'\n              WHERE g.status = 'Completed';\n            ------------------------------------------------------------------------------------\n            -- 23. Populate ActivityReportGoals\n            INSERT INTO "ActivityReportGoals" (\n              "activityReportId",\n              "goalId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              aro."activityReportId",\n              o."goalId",\n              MIN(aro."createdAt"),\n              MAX(aro."updatedAt")\n            FROM "Objectives" o\n            JOIN "ActivityReportObjectives" aro\n            ON o.id = aro."objectiveId"\n            WHERE o."goalId" IS NOT NULL\n            GROUP BY\n              aro."activityReportId",\n              o."goalId";\n            ------------------------------------------------------------------------------------\n            -- 24. Drop GrantGoals\n            DROP TABLE "GrantGoals";\n            ------------------------------------------------------------------------------------\n          END$$;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "Goals" ALTER COLUMN "grantId" SET NOT NULL;ALTER TABLE "Goals" ALTER COLUMN "grantId" DROP DEFAULT;ALTER TABLE "Goals" ALTER COLUMN "grantId" TYPE INTEGER;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" DROP COLUMN "ttaProvided";
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ActivityReportFiles" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveFiles" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ObjectiveFiles" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): CREATE TABLE IF NOT EXISTS "ObjectiveTemplateFiles" ("id"   SERIAL , "objectiveTemplateId" INTEGER NOT NULL REFERENCES "ObjectiveTemplates" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): DO $$\n          BEGIN\n            INSERT INTO "ActivityReportFiles" (\n              "activityReportId",\n              "fileId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT\n              "activityReportId",\n              id,\n              "createdAt",\n              "updatedAt"\n            FROM "Files";\n\n            ALTER TABLE "Files"\n            DROP COLUMN "activityReportId";\n          END$$;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "firstNotStartedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "lastNotStartedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "firstInProgressAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "lastInProgressAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "firstCeasedSuspendedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "lastCeasedSuspendedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "firstClosedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "lastClosedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "firstCompletedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Goals" ADD COLUMN "lastCompletedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "firstNotStartedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "lastNotStartedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "firstInProgressAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "lastInProgressAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "firstCompleteAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "lastCompleteAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "firstSuspendedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): ALTER TABLE "public"."Objectives" ADD COLUMN "lastSuspendedAt" TIMESTAMP WITH TIME ZONE;
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (ca995a5f-71e7-4e3a-97ca-d0732ad7cb44): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220425000000-goal-templates: migrated (0.891s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220520133458-add-collaborator-roles: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "CollaboratorRoles" ("id"   SERIAL , "activityReportCollaboratorId" INTEGER NOT NULL REFERENCES "ActivityReportCollaborators" ("id") ON DELETE CASCADE, "role" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220520133458-add-collaborator-roles: migrated (0.039s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220527150122-create-next-steps-date: migrating =======
Executing (651482d1-0627-4138-9b52-bbc6f88529f1): START TRANSACTION;
Connection validated successfully
Executing (651482d1-0627-4138-9b52-bbc6f88529f1): ALTER TABLE "public"."NextSteps" ADD COLUMN "completeDate" DATE;
Executing (651482d1-0627-4138-9b52-bbc6f88529f1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220527150122-create-next-steps-date: migrated (0.015s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220608030125-add-new-user-roles: migrating =======
Executing (default): ALTER TYPE "enum_Users_role" ADD VALUE 'National Center';
Connection validated successfully
Executing (default): ALTER TYPE "enum_ActivityReports_creatorRole" ADD VALUE 'National Center';
Connection validated successfully
Executing (default): ALTER TYPE "enum_Users_role" ADD VALUE 'Customer Service Contract';
Connection validated successfully
Executing (default): ALTER TYPE "enum_ActivityReports_creatorRole" ADD VALUE 'Customer Service Contract';
Connection validated successfully
Executing (default): ALTER TYPE "enum_Users_role" ADD VALUE 'Other Federal Staff';
Connection validated successfully
Executing (default): ALTER TYPE "enum_ActivityReports_creatorRole" ADD VALUE 'Other Federal Staff';
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220608030125-add-new-user-roles: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220706152116-add-uei-to-recipient: migrating =======
Executing (75df5fb2-04fb-40a0-b4bc-15c287186a20): START TRANSACTION;
Connection validated successfully
Executing (75df5fb2-04fb-40a0-b4bc-15c287186a20): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220706152116-add-uei-to-recipient.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (75df5fb2-04fb-40a0-b4bc-15c287186a20): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (75df5fb2-04fb-40a0-b4bc-15c287186a20): ALTER TABLE "public"."Recipients" ADD COLUMN "uei" VARCHAR(255) DEFAULT '';
Executing (75df5fb2-04fb-40a0-b4bc-15c287186a20): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (75df5fb2-04fb-40a0-b4bc-15c287186a20): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220706152116-add-uei-to-recipient: migrated (0.098s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220715000000-remove-duplicate-legacy-topics: migrating =======
Executing (e7a73a94-887c-4c31-b04b-920d82a775c8): START TRANSACTION;
Connection validated successfully
Executing (e7a73a94-887c-4c31-b04b-920d82a775c8): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220715000000-remove-duplicate-legacy-topics.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e7a73a94-887c-4c31-b04b-920d82a775c8): DO $$\n          BEGIN\n            CREATE TEMP TABLE "TempLegacyTopics" AS\n            SELECT\n              ti.id "topicId",\n              tv."mapsTo"\n            FROM "Topics" tv\n            JOIN "Topics" ti\n            ON tv.name = ti.name\n            AND tv."deletedAt" IS NOT NULL\n            AND ti."deletedAt" IS NULL\n            AND ti."createdAt" > '2022-07-13';\n            ------------------------------------------------------------------------------------\n            UPDATE "ObjectiveTopics" ot\n            SET\n              "topicId" = tlt."mapsTo"\n            FROM "TempLegacyTopics" tlt\n            WHERE ot."topicId" = tlt."topicId"\n            AND tlt."mapsTo" IS NOT NULL;\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTopics" ot\n            USING "TempLegacyTopics" tlt\n            WHERE ot."topicId" = tlt."topicId"\n            AND tlt."mapsTo" IS NULL;\n            ------------------------------------------------------------------------------------\n            UPDATE "ObjectiveTemplateTopics" ott\n            SET\n              "topicId" = tlt."mapsTo"\n            FROM "TempLegacyTopics" tlt\n            WHERE ott."topicId" = tlt."topicId"\n            AND tlt."mapsTo" IS NOT NULL;\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplateTopics" ott\n            USING "TempLegacyTopics" tlt\n            WHERE ott."topicId" = tlt."topicId"\n            AND tlt."mapsTo" IS NULL;\n            ------------------------------------------------------------------------------------\n            DELETE FROM "Topics" t\n            USING "TempLegacyTopics" tlt\n            WHERE t."id" = tlt."topicId";\n            ------------------------------------------------------------------------------------\n            DROP TABLE "TempLegacyTopics";\n          END$$;
Executing (e7a73a94-887c-4c31-b04b-920d82a775c8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220715000000-remove-duplicate-legacy-topics: migrated (0.028s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220724152116-create-mailer: migrating =======
Executing (0b77d898-4a57-4c12-a186-f94d71428d8a): START TRANSACTION;
Connection validated successfully
Executing (0b77d898-4a57-4c12-a186-f94d71428d8a): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220724152116-create-mailer.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_MailerLogs_action' GROUP BY 1
Connection validated successfully
Executing (default): CREATE TYPE "public"."enum_MailerLogs_action" AS ENUM('collaboratorAssigned', 'changesRequested', 'approverAssigned', 'reportApproved', 'collaboratorDigest', 'changesRequestedDigest', 'approverAssignedDigest', 'reportApprovedDigest');
Connection validated successfully
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (default): CREATE TABLE IF NOT EXISTS "MailerLogs" ("id"   BIGSERIAL , "jobId" VARCHAR(255) NOT NULL, "emailTo" VARCHAR(255)[] NOT NULL, "action" "public"."enum_MailerLogs_action" NOT NULL, "subject" VARCHAR(255) NOT NULL, "activityReports" INTEGER[] NOT NULL, "success" BOOLEAN, "result" JSON, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (0b77d898-4a57-4c12-a186-f94d71428d8a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220724152116-create-mailer: migrated (0.073s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220725000000-remove-erroneous-records: migrating =======
Executing (9e9b3956-ed78-4152-8482-306b6cf22021): START TRANSACTION;
Connection validated successfully
Executing (9e9b3956-ed78-4152-8482-306b6cf22021): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220725000000-remove-erroneous-records.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9e9b3956-ed78-4152-8482-306b6cf22021): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (9e9b3956-ed78-4152-8482-306b6cf22021): DO $$\n          BEGIN\n            CREATE TEMP TABLE "erroneousAROs" AS\n            SELECT\n              aro.id "aroId",\n              aro."objectiveId"\n            FROM  "ActivityReportObjectives" aro\n            JOIN "Objectives" o\n            ON aro."objectiveId" = o.id\n            JOIN "Goals" g\n            ON o."goalId" = g.id\n            LEFT JOIN "ActivityRecipients" r\n            ON aro."activityReportId" = r."activityReportId"\n            AND g."grantId" = r."grantId"\n            WHERE r.id IS NULL;\n            ------------------------------------------------------------------------------------\n            CREATE TEMP TABLE "erroneousARGs" AS\n            SELECT\n              arg.id "argId",\n              arg."goalId"\n            FROM  "ActivityReportGoals" arg\n            JOIN "Goals" g\n            ON arg."goalId" = g.id\n            LEFT JOIN "ActivityRecipients" r\n            ON arg."activityReportId" = r."activityReportId"\n            AND g."grantId" = r."grantId"\n            WHERE r.id is null;\n            ------------------------------------------------------------------------------------\n            CREATE TEMP TABLE "erroneousObjectives" AS\n            WITH\n            "erroneousAROsByObjective" AS (\n              Select\n                "objectiveId",\n                ARRAY_AGG("aroId" ORDER BY "aroId") aros\n              FROM "erroneousAROs" earo\n              GROUP BY "objectiveId"\n            ),\n            "AROsByObjective" as (\n              Select\n                o.id "objectiveId",\n                ARRAY_AGG(aro.id ORDER BY aro.id) aros\n              FROM "Objectives" o\n              JOIN "ActivityReportObjectives" aro\n              ON o.id = aro."objectiveId"\n              GROUP BY o.id\n            )\n            SELECT\n              earoo."objectiveId",\n              o."goalId"\n            FROM "erroneousAROsByObjective" earoo\n            JOIN "AROsByObjective" aroo\n            ON earoo."objectiveId" = aroo."objectiveId"\n            AND earoo."aros" = aroo."aros"\n            JOIN "Objectives" o\n            ON earoo."objectiveId" = o.id;\n            ------------------------------------------------------------------------------------\n            CREATE TEMP TABLE "erroneousGoals" AS\n            WITH\n            "erroneousObjectivesByGoal" AS (\n              SELECT\n                eo."goalId",\n                ARRAY_AGG(eo."objectiveId" ORDER BY eo."objectiveId") objectives\n              FROM "erroneousObjectives" eo\n              GROUP BY eo."goalId"\n            ),\n            "objectivesByGoal" AS (\n              SELECT\n                g.id "goalId",\n                ARRAY_AGG(o."id" ORDER BY o."id") objectives\n              FROM "Goals" g\n              JOIN "Objectives" o\n              ON g.id = o."goalId"\n              WHERE "isFromSmartsheetTtaPlan" = false\n              GROUP BY g.id\n            )\n            SELECT\n              eog."goalId"\n            FROM "erroneousObjectivesByGoal" eog\n            JOIN "objectivesByGoal" og\n            ON eog."goalId" = og."goalId"\n            AND eog.objectives = og.objectives;\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 34754\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "erroneousAROs" earo\n            WHERE aro.id = earo."aroId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 28357\n            DELETE FROM "ActivityReportGoals" arg\n            USING "erroneousARGs" earg\n            WHERE arg.id = earg."argId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 0\n            DELETE FROM "ObjectiveFiles" "of"\n            USING "erroneousObjectives" eo\n            WHERE "of"."objectiveId" = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 0\n            DELETE FROM "ObjectiveResources" "or"\n            USING "erroneousObjectives" eo\n            WHERE "or"."objectiveId" = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 0\n            DELETE FROM "ObjectiveRoles" "or"\n            USING "erroneousObjectives" eo\n            WHERE "or"."objectiveId" = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 3951\n            DELETE FROM "ObjectiveTopics" ot\n            USING "erroneousObjectives" eo\n            WHERE ot."objectiveId" = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 29591\n            DELETE FROM "Objectives" o\n            USING "erroneousObjectives" eo\n            WHERE o.id = eo."objectiveId";\n            ------------------------------------------------------------------------------------\n            -- EXPECTED TO DELETE 4\n            DELETE FROM "Goals" g\n            USING "erroneousGoals" eg\n            WHERE g.id = eg."goalId";\n            ------------------------------------------------------------------------------------\n            DROP TABLE\n              "erroneousAROs",\n              "erroneousARGs",\n              "erroneousObjectives",\n              "erroneousGoals";\n          END$$;
Executing (9e9b3956-ed78-4152-8482-306b6cf22021): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (9e9b3956-ed78-4152-8482-306b6cf22021): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220725000000-remove-erroneous-records: migrated (0.157s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220725000000-remove-extra-resources-data: migrating =======
Executing (dc7479ad-dd0e-4d32-bf7b-62cacbb6812e): START TRANSACTION;
Connection validated successfully
Executing (dc7479ad-dd0e-4d32-bf7b-62cacbb6812e): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220725000000-remove-extra-resources-data.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (dc7479ad-dd0e-4d32-bf7b-62cacbb6812e): UPDATE "ActivityReports" SET "nonECLKCResourcesUsed" =\n          (select array_remove("nonECLKCResourcesUsed", '{"value":""}'))\n          where  '{"value":""}' = ANY ("nonECLKCResourcesUsed");
Executing (dc7479ad-dd0e-4d32-bf7b-62cacbb6812e): UPDATE "ActivityReports" SET "ECLKCResourcesUsed" =\n            (select array_remove("ECLKCResourcesUsed", '{"value":""}'))\n            where  '{"value":""}' = ANY ("ECLKCResourcesUsed");
Executing (dc7479ad-dd0e-4d32-bf7b-62cacbb6812e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220725000000-remove-extra-resources-data: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220728000000-revert-g-13970: migrating =======
Executing (91c73add-c663-4023-80b5-848d1490c026): START TRANSACTION;
Connection validated successfully
Executing (91c73add-c663-4023-80b5-848d1490c026): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220728000000-revert-g-13970.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (91c73add-c663-4023-80b5-848d1490c026): UPDATE "Goals"\n         SET\n           status = 'In Progress',\n           "closeSuspendReason" = NULL,\n           "closeSuspendContext" = NULL\n         WHERE id IN (13970, 33134, 33132, 33133, 33131, 32561, 32562, 32563, 32560, 27334, 34063, 31864);
Executing (91c73add-c663-4023-80b5-848d1490c026): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220728000000-revert-g-13970: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220802000000-goal-objective-metadata-caching: migrating =======
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): START TRANSACTION;
Connection validated successfully
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220802000000-goal-objective-metadata-caching.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "name" TEXT;
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "status" VARCHAR(255);
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "timeframe" TEXT;
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): CREATE TYPE "public"."enum_ActivityReportGoals_closeSuspendReason" AS ENUM('Duplicate goal', 'Recipient request', 'TTA complete', 'Key staff turnover / vacancies', 'Recipient is not responding', 'Regional Office request');ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "closeSuspendReason" "public"."enum_ActivityReportGoals_closeSuspendReason";
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "closeSuspendContext" TEXT;
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "endDate" TIMESTAMP WITH TIME ZONE;
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): UPDATE ONLY "ActivityReportGoals" arg\n          SET\n            "name" = g."name",\n            "status" = g."status",\n            "endDate" = g."endDate",\n            "timeframe" = g."timeframe",\n            "closeSuspendReason" = g."closeSuspendReason"::text::"enum_ActivityReportGoals_closeSuspendReason",\n            "closeSuspendContext" = g."closeSuspendContext"\n          FROM "Goals" g\n          WHERE arg."goalId" = g.id;
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "title" TEXT;
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "status" VARCHAR(255);
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): UPDATE ONLY "ActivityReportObjectives" aro\n          SET\n            "title" = o."title",\n            "status" = o.status\n          FROM "Objectives" o\n          WHERE aro."objectiveId" = o.id;
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "ActivityReportObjectiveFiles" ADD CONSTRAINT "ActivityReportObjectiveFiles_activityReportObjectiveId_fileId_uk" UNIQUE ("activityReportObjectiveId", "fileId");
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveResources" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userProvidedUrl" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "ActivityReportObjectiveResources" ADD CONSTRAINT "ActivityReportObjectiveResources_activityReportObjectiveId_userProvidedUrl_uk" UNIQUE ("activityReportObjectiveId", "userProvidedUrl");
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): INSERT INTO "ActivityReportObjectiveResources"\n          (\n            "userProvidedUrl",\n            "activityReportObjectiveId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            r."userProvidedUrl",\n            aro.id "activityReportObjectiveId",\n            aro."updatedAt" "createdAt",\n            aro."updatedAt" "updatedAt"\n          FROM "ActivityReportObjectives" aro\n          JOIN "ObjectiveResources" r\n          ON aro."objectiveId" = r."objectiveId";
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveRoles" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "ActivityReportObjectiveRoles" ADD CONSTRAINT "ActivityReportObjectiveRoles_activityReportObjectiveId_roleId_uk" UNIQUE ("activityReportObjectiveId", "roleId");
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): INSERT INTO "ActivityReportObjectiveRoles"\n          (\n            "roleId",\n            "activityReportObjectiveId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            r."roleId",\n            aro.id "activityReportObjectiveId",\n            aro."updatedAt" "createdAt",\n            aro."updatedAt" "updatedAt"\n          FROM "ActivityReportObjectives" aro\n          JOIN "ObjectiveRoles" r\n          ON aro."objectiveId" = r."objectiveId";
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveTopics" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "topicId" INTEGER NOT NULL REFERENCES "Topics" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): ALTER TABLE "ActivityReportObjectiveTopics" ADD CONSTRAINT "ActivityReportObjectiveTopics_activityReportObjectiveId_topicId_uk" UNIQUE ("activityReportObjectiveId", "topicId");
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): INSERT INTO "ActivityReportObjectiveTopics"\n          (\n            "topicId",\n            "activityReportObjectiveId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            ot."topicId",\n            aro.id "activityReportObjectiveId",\n            aro."updatedAt" "createdAt",\n            aro."updatedAt" "updatedAt"\n          FROM "ActivityReportObjectives" aro\n          JOIN "ObjectiveTopics" ot\n          ON aro."objectiveId" = ot."objectiveId";
Executing (dc089d37-8cd1-4e98-a3c4-740ee67d6262): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220802000000-goal-objective-metadata-caching: migrated (0.232s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220804175018-add-created-via-to-goals: migrating =======
Executing (6f530b97-8201-4b00-b2bd-9a4601c4f3db): START TRANSACTION;
Connection validated successfully
Executing (6f530b97-8201-4b00-b2bd-9a4601c4f3db): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220804175018-add-created-via-to-goals.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6f530b97-8201-4b00-b2bd-9a4601c4f3db): CREATE TYPE "public"."enum_Goals_createdVia" AS ENUM('imported', 'activityReport', 'rtr');ALTER TABLE "public"."Goals" ADD COLUMN "createdVia" "public"."enum_Goals_createdVia";
Executing (6f530b97-8201-4b00-b2bd-9a4601c4f3db): UPDATE "Goals" SET "createdVia" = 'imported' WHERE "isFromSmartsheetTtaPlan" IS true;\n      UPDATE "Goals" SET "createdVia" = 'activityReport' WHERE "isFromSmartsheetTtaPlan" IS NULL OR "isFromSmartsheetTtaPlan" = false;
Executing (6f530b97-8201-4b00-b2bd-9a4601c4f3db): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220804175018-add-created-via-to-goals: migrated (0.071s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220808170215-unify-roles-table: migrating =======
Executing (8a114773-6d92-4c7c-ad5e-33e0098e9fd3): START TRANSACTION;
Connection validated successfully
Executing (8a114773-6d92-4c7c-ad5e-33e0098e9fd3): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220808170215-unify-roles-table.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8a114773-6d92-4c7c-ad5e-33e0098e9fd3): -- update current roles\n      UPDATE "Roles" SET "fullName" = 'Other Federal Staff' WHERE "fullName" = 'Central Office: Other Divisions';\n      UPDATE "Roles" SET "name" = 'OFS' WHERE "fullName" = 'Other Federal Staff';\n      UPDATE "Roles" SET "fullName" = 'COR' WHERE "name" = 'COR';\n      UPDATE "Roles" SET "fullName" = 'Central Office' WHERE "fullName" = 'Central Office: TTA and Comprehensive Services Division';\n\n      -- insert new roles\n      INSERT INTO "Roles" ("name", "fullName", "isSpecialist", "createdAt", "updatedAt") VALUES ('NC', 'National Center', false, now(), now());\n      INSERT INTO "Roles" ("name", "fullName", "isSpecialist", "createdAt", "updatedAt") VALUES ('CSC', 'Customer Service Contact', false, now(), now());
Executing (8a114773-6d92-4c7c-ad5e-33e0098e9fd3): CREATE TABLE IF NOT EXISTS "UserRoles" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE, "roleId" INTEGER NOT NULL REFERENCES "Roles" ("id") ON DELETE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, UNIQUE ("userId", "roleId"), PRIMARY KEY ("id"));
Executing (8a114773-6d92-4c7c-ad5e-33e0098e9fd3): DO\n        $$\n        DECLARE\n            u record;\n        BEGIN\n     WITH\n         "RolesForUser" as (\n             SELECT\n                 id "userId",\n                 UNNEST("role")::text "roleName"\n             FROM "Users"\n         )\n     INSERT INTO "UserRoles"\n     (\n          "userId",\n          "roleId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT DISTINCT\n          rfu."userId",\n          r.id "roleId",\n          now() "createdAt",\n          now() "updatedAt"\n      FROM "RolesForUser" rfu\n      JOIN "Roles" r\n      ON rfu."roleName" = r."fullName"\n      ORDER BY 1,2;\n        END;\n        $$\n        LANGUAGE plpgsql;
Executing (8a114773-6d92-4c7c-ad5e-33e0098e9fd3): ALTER TABLE "public"."Users" DROP COLUMN "role";
Executing (8a114773-6d92-4c7c-ad5e-33e0098e9fd3): DROP TYPE public."enum_Users_role";
Executing (8a114773-6d92-4c7c-ad5e-33e0098e9fd3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220808170215-unify-roles-table: migrated (0.081s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220809151140-update-collaborator-roles: migrating =======
Executing (d0233823-f896-4f7d-886e-ce9223e3b4df): START TRANSACTION;
Connection validated successfully
Executing (d0233823-f896-4f7d-886e-ce9223e3b4df): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220809151140-update-collaborator-roles.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TABLE "public"."CollaboratorRoles" ADD COLUMN "roleId" INTEGER REFERENCES "Roles" ("id");
Connection validated successfully
Executing (d0233823-f896-4f7d-886e-ce9223e3b4df): UPDATE "CollaboratorRoles" cr\n        SET "roleId" = r.id\n        FROM "Roles" r\n        WHERE cr.role = r."fullName";
Executing (d0233823-f896-4f7d-886e-ce9223e3b4df): ALTER TABLE "public"."CollaboratorRoles" DROP COLUMN "role";
Executing (d0233823-f896-4f7d-886e-ce9223e3b4df): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220809151140-update-collaborator-roles: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220812205424-new-ar-topics: migrating =======
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): START TRANSACTION;
Connection validated successfully
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20220812205424-new-ar-topics.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): INSERT INTO "Topics"\n          ("name", "createdAt", "updatedAt")\n          VALUES\n          ('Child Screening and Assessment', current_timestamp, current_timestamp),\n          ('Teaching / Caregiving Practices', current_timestamp, current_timestamp),\n          ('Disabilities Services', current_timestamp, current_timestamp),\n          ('Ongoing Monitoring Management System', current_timestamp, current_timestamp),\n          ('Training and Professional Development', current_timestamp, current_timestamp);
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): UPDATE "Topics" t1 \n        SET \n            "mapsTo" = t2.id, \n            "deletedAt" = current_timestamp \n        FROM "Topics" t2 \n        WHERE t1.name = 'Child Assessment, Development, Screening' \n        AND t2.name = 'Child Screening and Assessment' \n        AND t1."deletedAt" IS NULL;
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): UPDATE "Topics" t1 \n        SET \n            "mapsTo" = t2.id, \n            "deletedAt" = current_timestamp \n        FROM "Topics" t2 \n        WHERE t1.name = 'Teaching Practices / Teacher-Child Interactions' \n        AND t2.name = 'Teaching / Caregiving Practices' \n        AND t1."deletedAt" IS NULL;
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): UPDATE "Topics" t1 \n        SET \n            "mapsTo" = t2.id \n        FROM "Topics" t2 \n        WHERE t1.name = 'Child Assessment, Development, Screening' \n        AND t2.name = 'Child Screening and Assessment' \n        AND t2."deletedAt" IS NULL;
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): UPDATE "Topics" t1 \n        SET \n            "mapsTo" = t2.id \n        FROM "Topics" t2 \n        WHERE t1.name = 'Teaching Practices / Teacher-Child Interactions' \n        AND t2.name = 'Teaching / Caregiving Practices' \n        AND t2."deletedAt" IS NULL;
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): UPDATE "ActivityReports" \n        SET \n            topics = array_replace(topics, 'Child Assessment, Development, Screening', 'Child Screening and Assessment') \n        WHERE topics @> '{"Child Assessment, Development, Screening"}';
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): UPDATE "ActivityReports" \n        SET \n            topics = array_replace(topics, 'Teaching Practices / Teacher-Child Interactions', 'Teaching / Caregiving Practices') \n        WHERE topics @> '{"Teaching Practices / Teacher-Child Interactions"}';
Executing (7c535341-c84e-4f9a-8f55-3b848c9cbce1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220812205424-new-ar-topics: migrated (0.050s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220819014844-user-settings-table: migrating =======
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): START TRANSACTION;
Connection validated successfully
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): CREATE TABLE IF NOT EXISTS "UserSettings" ("id"   SERIAL , "class" VARCHAR(255) NOT NULL, "key" VARCHAR(255) NOT NULL, "default" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenReportSubmittedForReview', '"never"', current_timestamp, current_timestamp)
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenChangeRequested', '"never"', current_timestamp, current_timestamp)
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenReportApproval', '"never"', current_timestamp, current_timestamp)
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenAppointedCollaborator', '"never"', current_timestamp, current_timestamp)
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): CREATE TABLE IF NOT EXISTS "UserSettingOverrides" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "userSettingId" INTEGER NOT NULL REFERENCES "UserSettings" ("id"), "value" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): CREATE INDEX "user_setting_overrides_user_id_user_setting_id" ON "UserSettingOverrides" ("userId", "userSettingId")
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): ALTER TABLE "UserSettingOverrides" ADD CONSTRAINT "UserSettingOverrides_userId_userSettingId_uk" UNIQUE ("userId", "userSettingId");
Executing (fc0cb71c-8f6e-4b7a-89c2-dd0bc128d40d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220819014844-user-settings-table: migrated (0.120s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220824042254-user-validation-status: migrating =======
Executing (b0dd09c5-020e-4a7e-ad26-4e8256898e15): START TRANSACTION;
Connection validated successfully
Executing (b0dd09c5-020e-4a7e-ad26-4e8256898e15): CREATE TABLE IF NOT EXISTS "UserValidationStatus" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "type" VARCHAR(255) NOT NULL, "token" VARCHAR(255), "validatedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (b0dd09c5-020e-4a7e-ad26-4e8256898e15): CREATE INDEX "user_validation_status_user_id_type" ON "UserValidationStatus" ("userId", "type")
Executing (b0dd09c5-020e-4a7e-ad26-4e8256898e15): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220824042254-user-validation-status: migrated (0.054s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220902172413-ar-reason-grantee-to-recipient: migrating =======
Executing (8b549cdd-b48d-4b55-9818-67529ae6e268): START TRANSACTION;
Connection validated successfully
Executing (8b549cdd-b48d-4b55-9818-67529ae6e268): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220902172413-ar-reason-grantee-to-recipient.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8b549cdd-b48d-4b55-9818-67529ae6e268): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (8b549cdd-b48d-4b55-9818-67529ae6e268): UPDATE "ActivityReports"\n          SET "reason" = ARRAY_REPLACE("reason", 'New Grantee', 'New Recipient')\n          WHERE "reason" @> '{"New Grantee"}';
Executing (8b549cdd-b48d-4b55-9818-67529ae6e268): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (8b549cdd-b48d-4b55-9818-67529ae6e268): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220902172413-ar-reason-grantee-to-recipient: migrated (0.106s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220922152714-add-version-to-activity-reports: migrating =======
Executing (598876b3-e222-4eae-a9b2-5768765b2ead): START TRANSACTION;
Connection validated successfully
Executing (598876b3-e222-4eae-a9b2-5768765b2ead): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20220922152714-add-version-to-activity-reports.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (598876b3-e222-4eae-a9b2-5768765b2ead): ALTER TABLE "public"."ActivityReports" ADD COLUMN "version" INTEGER NOT NULL DEFAULT 1;
Executing (598876b3-e222-4eae-a9b2-5768765b2ead): UPDATE "ActivityReports" SET "version" = 0 WHERE "legacyId" IS NOT null; \n      UPDATE "ActivityReports" SET "version" = 1 WHERE "legacyId" IS null;
Executing (598876b3-e222-4eae-a9b2-5768765b2ead): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220922152714-add-version-to-activity-reports: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20220928150520-unify-objective-complete-status-data: migrating =======
Executing (2fc3482f-995b-45d1-b2aa-5702782dfaae): START TRANSACTION;
Connection validated successfully
Executing (2fc3482f-995b-45d1-b2aa-5702782dfaae): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20220928150520-unify-objective-complete-status-data.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2fc3482f-995b-45d1-b2aa-5702782dfaae): UPDATE "Objectives" SET "status" = 'Complete' WHERE "status" = 'Completed'
Executing (2fc3482f-995b-45d1-b2aa-5702782dfaae): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20220928150520-unify-objective-complete-status-data: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221012130706-add-is-rttapa-to-goals: migrating =======
Executing (98d9b3b8-82df-4606-9f78-f7a28c556519): START TRANSACTION;
Connection validated successfully
Executing (98d9b3b8-82df-4606-9f78-f7a28c556519): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20221012130706-add-is-rttapa-to-goals.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (98d9b3b8-82df-4606-9f78-f7a28c556519): CREATE TYPE "public"."enum_Goals_isRttapa" AS ENUM('Yes', 'No');ALTER TABLE "public"."Goals" ADD COLUMN "isRttapa" "public"."enum_Goals_isRttapa";
Executing (98d9b3b8-82df-4606-9f78-f7a28c556519): UPDATE "Goals" SET "isRttapa" = 'Yes' WHERE "isFromSmartsheetTtaPlan" IS true;
Executing (98d9b3b8-82df-4606-9f78-f7a28c556519): CREATE TYPE "public"."enum_ActivityReportGoals_isRttapa" AS ENUM('Yes', 'No');ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "isRttapa" "public"."enum_ActivityReportGoals_isRttapa";
Executing (98d9b3b8-82df-4606-9f78-f7a28c556519): UPDATE "ActivityReportGoals" SET "isRttapa" = 'Yes' WHERE "goalId" IN (SELECT "id" FROM "Goals" WHERE "Goals"."isFromSmartsheetTtaPlan" IS true);
Executing (98d9b3b8-82df-4606-9f78-f7a28c556519): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221012130706-add-is-rttapa-to-goals: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221017000000-missing-objectives: migrating =======
Executing (28fb9058-3de1-404f-9595-4f55cc883239): START TRANSACTION;
Connection validated successfully
Executing (28fb9058-3de1-404f-9595-4f55cc883239): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221017000000-missing-objectives.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (28fb9058-3de1-404f-9595-4f55cc883239): ----------------------------------------------------------------------------------------------------\n          -- 1. Create ActivityReportGoals for each of the goals linked via ActivityReportObjectives\n          -----------------------------------------------------------------------------------------------------\n          WITH\n            "GoalsThroughObjectives" AS (\n              SELECT DISTINCT\n                aro."activityReportId",\n                o."goalId",\n                g."grantId",\n                md5(g."name") "goalHash"\n              FROM "ActivityReportObjectives" aro\n              JOIN "Objectives" o\n              ON aro."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              WHERE o."goalId" IS NOT NULL\n            ),\n            "GoalsDirect" AS (\n              SELECT DISTINCT\n                arg."activityReportId",\n                arg."goalId",\n                g."grantId",\n                md5(g."name") "goalHash"\n              FROM "ActivityReportGoals" arg\n              JOIN "Goals" g\n              ON arg."goalId" = g.id\n            ),\n            "MissingDirectGoals" AS (\n              SELECT *\n              FROM "GoalsThroughObjectives"\n              EXCEPT\n              SELECT *\n              FROM "GoalsDirect"\n            )\n            INSERT INTO "ActivityReportGoals"\n            (\n              "activityReportId",\n              "goalId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT DISTINCT\n              aro."activityReportId",\n              o."goalId",\n              MIN(aro."createdAt") "createdAt",\n              MAX(aro."updatedAt") "updatedAt"\n            FROM "ActivityReportObjectives" aro\n            LEFT JOIN "Objectives" o\n            ON aro."objectiveId" = o.id\n            LEFT JOIN "Goals" g\n            ON o."goalId" = g.id\n            JOIN "MissingDirectGoals" m\n            ON aro."activityReportId" = m."activityReportId"\n            AND o."goalId" = m."goalId"\n            AND g."grantId" = m."grantId"\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."activityReportId" = aro."activityReportId"\n            AND arg."goalId" = o."goalId"\n            WHERE arg.id IS NULL\n            GROUP BY\n              aro."activityReportId",\n              o."goalId";\n\n          ----------------------------------------------------------------------------------------------------\n          -- 2. Identify all reports with inconsistencies between recipients and connected goals and objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_incomplete_reports";\n          CREATE TEMP TABLE "temp_incomplete_reports" AS\n          WITH\n            "through_goals" AS (\n              SELECT\n                ar."activityReportId",\n                a."calculatedStatus",\n                array_agg(distinct ar."grantId" order by ar."grantId") "recipientGrantIds",\n                array_agg(distinct g."grantId" order by g."grantId") "goalGrantIds",\n                array[]::text[] "distinctObjectives",\n                array_agg(distinct md5(g.name) order by md5(g.name)) "distinctGoals"\n                FROM "ActivityRecipients" ar\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n              JOIN "Grants" gr\n              ON ar."grantId" = gr.id\n              AND a."startDate" < gr."endDate"\n              LEFT JOIN "ActivityReportGoals" arg\n              ON ar."activityReportId" = arg."activityReportId"\n              LEFT JOIN "Goals" g\n              ON arg."goalId" = g.id\n              JOIN "Grants" gr2\n              ON g."grantId" = gr2.id\n              AND a."startDate" < gr2."endDate"\n              WHERE g."grantId" is not null\n              GROUP BY ar."activityReportId", a."calculatedStatus"\n              HAVING\n              array_agg(distinct ar."grantId" order by ar."grantId") != array_agg(distinct g."grantId" order by g."grantId")\n              AND ARRAY_LENGTH(ARRAY(\n                SELECT UNNEST(array_agg(distinct ar."grantId" order by ar."grantId"))\n                INTERSECT\n                SELECT UNNEST(array_agg(distinct g."grantId" order by g."grantId"))\n              ),1) > 0\n            ),\n            "through_objectives" AS (\n              SELECT\n                ar."activityReportId",\n                a."calculatedStatus",\n                array_agg(distinct ar."grantId" order by ar."grantId") "recipientGrantIds",\n                array_agg(distinct g."grantId" order by g."grantId") "goalGrantIds",\n                array_agg(distinct md5(o.title) order by md5(o.title)) "distinctObjectives",\n                array_agg(distinct md5(g.name) order by md5(g.name)) "distinctGoals"\n              FROM "ActivityRecipients" ar\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n              JOIN "Grants" gr\n              ON ar."grantId" = gr.id\n              AND a."startDate" < gr."endDate"\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON ar."activityReportId" = aro."activityReportId"\n              LEFT JOIN "Objectives" o\n              ON aro."objectiveId" = o.id\n              LEFT JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "Grants" gr2\n              ON g."grantId" = gr2.id\n              AND a."startDate" < gr2."endDate"\n              WHERE g."grantId" is not null\n              GROUP BY ar."activityReportId", a."calculatedStatus"\n              HAVING\n                array_agg(distinct ar."grantId" order by ar."grantId") != array_agg(distinct g."grantId" order by g."grantId")\n                AND ARRAY_LENGTH(ARRAY(\n                  SELECT UNNEST(array_agg(distinct ar."grantId" order by ar."grantId"))\n                  INTERSECT\n                  SELECT UNNEST(array_agg(distinct g."grantId" order by g."grantId"))\n                ),1) > 0\n            ),\n            "through_both_unmerged" AS (\n              SELECT *\n              FROM "through_goals"\n              UNION\n              SELECT *\n              FROM "through_objectives"\n            ),\n            "through_both" AS (\n              SELECT\n                tbu."activityReportId",\n                tbu."calculatedStatus",\n                ARRAY_AGG(DISTINCT w.v) "recipientGrantIds",\n                ARRAY_AGG(DISTINCT x.v) "goalGrantIds",\n                ARRAY_AGG(DISTINCT y.v) "distinctObjectives",\n                ARRAY_AGG(DISTINCT z.v) "distinctGoals"\n              FROM "through_both_unmerged" tbu\n              CROSS JOIN LATERAL UNNEST(tbu."recipientGrantIds") AS w(v)\n              CROSS JOIN LATERAL UNNEST(tbu."goalGrantIds") AS x(v)\n              CROSS JOIN LATERAL UNNEST(tbu."distinctObjectives") AS y(v)\n              CROSS JOIN LATERAL UNNEST(tbu."distinctGoals") AS z(v)\n              GROUP BY tbu."activityReportId", "calculatedStatus"\n              ORDER BY tbu."activityReportId"\n            )\n            SELECT\n              *,\n              ARRAY(SELECT UNNEST("recipientGrantIds") INTERSECT SELECT UNNEST("goalGrantIds")) "intersectionGrantId",\n              ARRAY(SELECT UNNEST("recipientGrantIds") EXCEPT SELECT UNNEST("goalGrantIds")) "onlyRecipientGrantId",\n              ARRAY(SELECT UNNEST("goalGrantIds") EXCEPT SELECT UNNEST("recipientGrantIds")) "onlyGoalGrantId"\n            FROM "through_both";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 3. Identify missing goals.\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals";\n          CREATE TEMP TABLE "temp_missing_goals" AS\n          SELECT\n            ir."activityReportId",\n            md5(g.name) "goalHash",\n            g.name "name",\n            CASE\n              WHEN 'Closed' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Closed'\n              WHEN 'Suspended' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Suspended'\n              WHEN 'In Progress' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'In Progress'\n              WHEN 'Not Started' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Not Started'\n            END status,\n            (ARRAY_AGG(g.timeframe ORDER BY g.id desc))[1] timeframe,\n            bool_or(g."isFromSmartsheetTtaPlan")  "isFromSmartsheetTtaPlan",\n            MIN(g."createdAt") "createdAt",\n            MAX(g."updatedAt") "updatedAt",\n            ARRAY_AGG(g."closeSuspendReason" ORDER BY g.id) "closeSuspendReason",\n            ARRAY_AGG(g."closeSuspendContext" ORDER BY g.id) "closeSuspendContext",\n            MIN(g."endDate") "endDate",\n            ARRAY_AGG(g."previousStatus") "previousStatus",\n            MIN(g."goalTemplateId") "goalTemplateId",\n            MIN(g."grantId") "grantId",\n            bool_or(g."onApprovedAR") "onApprovedAR",\n            MIN(g."firstNotStartedAt") "firstNotStartedAt",\n            MAX(g."lastNotStartedAt") "lastNotStartedAt",\n            MIN(g."firstInProgressAt") "firstInProgressAt",\n            MAX(g."lastInProgressAt") "lastInProgressAt",\n            MIN(g."firstCeasedSuspendedAt") "firstCeasedSuspendedAt",\n            MAX(g."lastCeasedSuspendedAt") "lastCeasedSuspendedAt",\n            MIN(g."firstClosedAt") "firstClosedAt",\n            MAX(g."lastClosedAt") "lastClosedAt",\n            MIN(g."firstCompletedAt") "firstCompletedAt",\n            MAX(g."lastCompletedAt") "lastCompletedAt"\n          FROM "temp_incomplete_reports" ir\n          JOIN "ActivityReportGoals" arg\n          ON ir."activityReportId" = arg."activityReportId"\n          JOIN "Goals" g\n          ON arg."goalId" = g.id\n          AND g."grantId" = ANY(ir."intersectionGrantId")\n          AND md5(g.name) = ANY(ir."distinctGoals")\n          GROUP BY\n            ir."activityReportId",\n            g.name;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 4. Find missing goals for the grants identified that already exist\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_already_exist";\n          CREATE TEMP TABLE "temp_missing_goals_already_exist" AS\n          SELECT DISTINCT\n            g.id "goalId"\n          FROM "temp_incomplete_reports" ir\n          CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n          JOIN "temp_missing_goals" mg\n          ON ir."activityReportId" = mg."activityReportId"\n          AND mg."goalHash" = ANY(ir."distinctGoals")\n          LEFT JOIN "Goals" g\n          ON g."grantId" = orgi."grantId"\n          AND md5(g.name) = mg."goalHash"\n          WHERE g.id IS NOT NULL;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 5. Create missing goals for the grants identified\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_added";\n          CREATE TEMP TABLE "temp_missing_goals_added" AS\n          WITH "inserted" AS (\n            INSERT INTO "Goals"\n            (\n              name,\n              status,\n              timeframe,\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "endDate",\n              "previousStatus",\n              "goalTemplateId",\n              "grantId",\n              "onApprovedAR",\n              "firstNotStartedAt",\n              "lastNotStartedAt",\n              "firstInProgressAt",\n              "lastInProgressAt",\n              "firstCeasedSuspendedAt",\n              "lastCeasedSuspendedAt",\n              "firstClosedAt",\n              "lastClosedAt",\n              "firstCompletedAt",\n              "lastCompletedAt"\n            )\n            SELECT DISTINCT\n              mg.name,\n              mg.status,\n              mg.timeframe,\n              mg."isFromSmartsheetTtaPlan",\n              mg."createdAt",\n              mg."updatedAt",\n              mg."closeSuspendReason"[1] "closeSuspendReason",\n              mg."closeSuspendContext"[1] "closeSuspendContext",\n              mg."endDate",\n              mg."previousStatus"[1] "previousStatus",\n              mg."goalTemplateId",\n              orgi."grantId",\n              mg."onApprovedAR",\n              mg."firstNotStartedAt",\n              mg."lastNotStartedAt",\n              mg."firstInProgressAt",\n              mg."lastInProgressAt",\n              mg."firstCeasedSuspendedAt",\n              mg."lastCeasedSuspendedAt",\n              mg."firstClosedAt",\n              mg."lastClosedAt",\n              mg."firstCompletedAt",\n              mg."lastCompletedAt"\n            FROM "temp_incomplete_reports" ir\n            CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n            JOIN "temp_missing_goals" mg\n            ON ir."activityReportId" = mg."activityReportId"\n            AND mg."goalHash" = ANY(ir."distinctGoals")\n            LEFT JOIN "Goals" g\n            ON g."grantId" = orgi."grantId"\n            AND md5(g.name) = mg."goalHash"\n            WHERE g.id IS NULL\n            RETURNING\n              id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 6. Collect new and existing goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_added_and_existing";\n          CREATE TEMP TABLE "temp_missing_goals_added_and_existing" AS\n          SELECT *\n          FROM "temp_missing_goals_already_exist"\n          UNION\n          SELECT *\n          FROM "temp_missing_goals_added";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 7. Create new ActivityReportGoals for added goals and found goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_args_added";\n          CREATE TEMP TABLE "temp_missing_args_added" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ActivityReportGoals"\n              (\n                "activityReportId",\n                "goalId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT DISTINCT\n                ir."activityReportId",\n                g.id "goalId",\n                MIN(arg2."createdAt") "createdAt",\n                MAX(arg2."updatedAt") "updatedAt"\n              FROM "temp_missing_goals_added_and_existing" mga\n              JOIN "Goals" g\n              ON mga."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              LEFT JOIN "ActivityReportGoals" arg\n              ON ir."activityReportId" = arg."activityReportId"\n              AND g.id = arg."goalId"\n              JOIN "ActivityReportGoals" arg2\n              ON ir."activityReportId" = arg2."activityReportId"\n              JOIN "Goals" g2\n              ON arg2."goalId" = g2.id\n              AND g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              WHERE arg.id IS NULL\n              GROUP BY\n                ir."activityReportId",\n                g.id\n              RETURNING\n                id "activityReportGoalId"\n            )\n            SELECT\n              "activityReportGoalId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 8. Collect and calculate onApprovedAR for newly added goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_goals_now_on_approved_ar";\n          CREATE TEMP TABLE "temp_goals_now_on_approved_ar" AS\n          SELECT\n            mga."goalId",\n            'approved' = any(array_agg(distinct ar."calculatedStatus")) "onApprovedAR"\n          FROM "temp_missing_goals_added_and_existing" mga\n          JOIN "Goals" g\n          ON mga."goalId" = g.id\n          JOIN "ActivityReportGoals" arg\n          ON mga."goalId" = arg."goalId"\n          LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n          GROUP BY mga."goalId"\n          HAVING bool_or(g."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n          -----------------------------------------------------------------------------------------------------\n          -- 9. Update onApprovedAR for goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_goals_on_approved_ar_updated";\n          CREATE TEMP TABLE "temp_goals_on_approved_ar_updated" AS\n          WITH\n            "updated" AS (\n              UPDATE "Goals" g\n              SET\n                "onApprovedAR" = t."onApprovedAR"\n              FROM "temp_goals_now_on_approved_ar" t\n              WHERE g.id = t."goalId"\n              RETURNING\n                id "goalId"\n            )\n            SELECT\n              "goalId"\n            FROM "updated";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 9. Identify missing objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objectives";\n            CREATE TEMP TABLE "temp_missing_objectives" AS\n            SELECT\n              ir."activityReportId",\n              md5(o.title) "objectiveHash",\n              ARRAY_AGG(DISTINCT md5(g.name)) "goalHashs",\n              MIN(o.id) "objectiveId",\n              o.title,\n              o.status,\n              MIN(o."createdAt") "createdAt",\n              MIN(o."updatedAt") "updatedAt",\n              MIN(o."objectiveTemplateId") "objectiveTemplateId",\n              MIN(o."otherEntityId") "otherEntityId",\n              BOOL_OR(o."onApprovedAR") "onApprovedAR",\n              MIN(o."firstNotStartedAt") "firstNotStartedAt",\n              MIN(o."lastNotStartedAt") "lastNotStartedAt",\n              MIN(o."firstInProgressAt") "firstInProgressAt",\n              MIN(o."lastInProgressAt") "lastInProgressAt",\n              MIN(o."firstCompleteAt") "firstCompleteAt",\n              MIN(o."lastCompleteAt") "lastCompleteAt",\n              MIN(o."firstSuspendedAt") "firstSuspendedAt",\n              MIN(o."lastSuspendedAt") "lastSuspendedAt"\n            FROM "temp_incomplete_reports" ir\n            JOIN "ActivityReportObjectives" aro\n            ON ir."activityReportId" = aro."activityReportId"\n            JOIN "Objectives" o\n            ON aro."objectiveId" = o.id\n            AND md5(o.title) = ANY(ir."distinctObjectives")\n            JOIN "Goals" g\n            ON o."goalId" = g.id\n            AND g."grantId" = ANY(ir."intersectionGrantId")\n            AND md5(g.name) = ANY(ir."distinctGoals")\n            GROUP BY\n              ir."activityReportId",\n              o.title,\n              o.status;\n\n            -----------------------------------------------------------------------------------------------------\n            -- 10. Find missing objectives for the grants identified that already exist\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objectives_already_exist";\n            CREATE TEMP TABLE "temp_missing_objectives_already_exist" AS\n            SELECT DISTINCT\n              o.id "objectiveId"\n            FROM "temp_incomplete_reports" ir\n            CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n            JOIN "temp_missing_objectives" mo\n            ON ir."activityReportId" = mo."activityReportId"\n            JOIN "Goals" g\n            ON g."grantId" = orgi."grantId"\n            AND md5(g.name) = ANY(mo."goalHashs")\n            LEFT JOIN "Objectives" o\n            ON g.id = o."goalId"\n            and md5(o.title) = mo."objectiveHash"\n            WHERE o.id IS NOT NULL;\n\n            -----------------------------------------------------------------------------------------------------\n            -- 12. Create missing objectives for the grants identified\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objectives_added";\n            CREATE TEMP TABLE "temp_missing_objectives_added" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "Objectives"\n                (\n                  "goalId",\n                  title,\n                  status,\n                  "createdAt",\n                  "updatedAt",\n                  "objectiveTemplateId",\n                  "otherEntityId",\n                  "onApprovedAR",\n                  "firstNotStartedAt",\n                  "lastNotStartedAt",\n                  "firstInProgressAt",\n                  "lastInProgressAt",\n                  "firstCompleteAt",\n                  "lastCompleteAt",\n                  "firstSuspendedAt",\n                  "lastSuspendedAt"\n                )\n                SELECT DISTINCT\n                  g.id "goalId",\n                  mo.title,\n                  mo.status,\n                  mo."createdAt",\n                  mo."updatedAt",\n                  mo."objectiveTemplateId",\n                  mo."otherEntityId",\n                  mo."onApprovedAR",\n                  mo."firstNotStartedAt",\n                  mo."lastNotStartedAt",\n                  mo."firstInProgressAt",\n                  mo."lastInProgressAt",\n                  mo."firstCompleteAt",\n                  mo."lastCompleteAt",\n                  mo."firstSuspendedAt",\n                  mo."lastSuspendedAt"\n                FROM "temp_incomplete_reports" ir\n                CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n                JOIN "temp_missing_objectives" mo\n                ON ir."activityReportId" = mo."activityReportId"\n                JOIN "Goals" g\n                ON g."grantId" = orgi."grantId"\n                AND md5(g.name) = ANY(mo."goalHashs")\n                LEFT JOIN "Objectives" o\n                ON g.id = o."goalId"\n                and md5(o.title) = mo."objectiveHash"\n                WHERE o.id IS NULL\n                RETURNING\n                  id "objectiveId"\n              )\n              SELECT\n                "objectiveId"\n              FROM "inserted";\n            -----------------------------------------------------------------------------------------------------\n            -- 13. Collect new and existing objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objectives_added_and_existing";\n            CREATE TEMP TABLE "temp_missing_objectives_added_and_existing" AS\n            SELECT *\n            FROM "temp_missing_objectives_already_exist"\n            UNION\n            SELECT *\n            FROM "temp_missing_objectives_added";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 14. Create new ActivityReportObjectives for added and found objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_aros_added";\n            CREATE TEMP TABLE "temp_missing_aros_added" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "ActivityReportObjectives"\n                (\n                  "activityReportId",\n                  "objectiveId",\n                  "createdAt",\n                  "updatedAt",\n                  "ttaProvided"\n                )\n                SELECT\n                  ir."activityReportId",\n                  o.id "objectiveId",\n                  MIN(aro2."createdAt") "createdAt",\n                  MAX(aro2."updatedAt") "updatedAt",\n                  ARRAY_AGG(aro2."ttaProvided")\n                FROM "temp_missing_objectives_added_and_existing" moa\n                JOIN "Objectives" o\n                ON moa."objectiveId" = o.id\n                JOIN "Goals" g\n                ON o."goalId" = g.id\n                JOIN "temp_incomplete_reports" ir\n                ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n                AND md5(g.name) = ANY(ir."distinctGoals")\n                AND md5(o.title) = ANY(ir."distinctObjectives")\n                LEFT JOIN "ActivityReportObjectives" aro\n                ON ir."activityReportId" = aro."activityReportId"\n                AND o.id = aro."objectiveId"\n                JOIN "ActivityReportObjectives" aro2\n                ON ir."activityReportId" = aro2."activityReportId"\n                JOIN "Objectives" o2\n                ON aro2."objectiveId" = o2.id\n                AND md5(o.title) = md5(o2.title)\n                JOIN "Goals" g2\n                ON o2."goalId" = g2.id\n                AND g2."grantId" = ANY(ir."intersectionGrantId")\n                AND md5(g.name) = md5(g2.name)\n                WHERE aro.id IS NULL\n                GROUP BY\n                  ir."activityReportId",\n                  o.id\n                RETURNING\n                  id "activityReportObjectiveId"\n              )\n              SELECT\n                "activityReportObjectiveId"\n              FROM "inserted";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 15. Create new Objective files for added and found objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objective_files";\n            CREATE TEMP TABLE "temp_missing_objective_files" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "ObjectiveFiles"\n                (\n                  "objectiveId",\n                  "fileId",\n                  "createdAt",\n                  "updatedAt"\n                )\n                SELECT\n                  o.id "objectiveId",\n                  f2."fileId",\n                  MIN(f2."createdAt") "createdAt",\n                  MAX(f2."updatedAt") "updatedAt"\n                FROM "temp_missing_objectives_added_and_existing" moa\n                JOIN "Objectives" o\n                ON moa."objectiveId" = o.id\n                JOIN "Goals" g\n                ON o."goalId" = g.id\n                JOIN "temp_incomplete_reports" ir\n                ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n                AND md5(g.name) = ANY(ir."distinctGoals")\n                AND md5(o.title) = ANY(ir."distinctObjectives")\n                LEFT JOIN "ObjectiveFiles" f\n                ON o.id = f."objectiveId"\n                LEFT JOIN "Goals" g2\n                ON g2."grantId" = ANY(ir."intersectionGrantId")\n                AND md5(g.name) = md5(g2.name)\n                LEFT JOIN "Objectives" o2\n                ON g2.id = o2."goalId"\n                AND md5(o.title) = md5(o2.title)\n                LEFT JOIN "ObjectiveFiles" f2\n                ON o2.id = f2."objectiveId"\n                WHERE f.id IS NULL\n                AND f2."fileId" IS NOT NULL\n                GROUP BY\n                  o.id,\n                  f2."fileId"\n                RETURNING\n                  id "objectiveFileId"\n              )\n              SELECT\n                "objectiveFileId"\n              FROM "inserted";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 16. Create new Objective resources for added and found objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objective_Resources";\n            CREATE TEMP TABLE "temp_missing_objective_Resources" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "ObjectiveResources"\n                (\n                  "objectiveId",\n                  "userProvidedUrl",\n                  "createdAt",\n                  "updatedAt"\n                )\n                SELECT\n                  o.id "objectiveId",\n                  r2."userProvidedUrl",\n                  MIN(r2."createdAt") "createdAt",\n                  MAX(r2."updatedAt") "updatedAt"\n                FROM "temp_missing_objectives_added_and_existing" moa\n                JOIN "Objectives" o\n                ON moa."objectiveId" = o.id\n                JOIN "Goals" g\n                ON o."goalId" = g.id\n                JOIN "temp_incomplete_reports" ir\n                ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n                AND md5(g.name) = ANY(ir."distinctGoals")\n                AND md5(o.title) = ANY(ir."distinctObjectives")\n                LEFT JOIN "ObjectiveResources" r\n                ON o.id = r."objectiveId"\n                LEFT JOIN "Goals" g2\n                ON g2."grantId" = ANY(ir."intersectionGrantId")\n                AND md5(g.name) = md5(g2.name)\n                LEFT JOIN "Objectives" o2\n                ON g2.id = o2."goalId"\n                AND md5(o.title) = md5(o2.title)\n                LEFT JOIN "ObjectiveResources" r2\n                ON o2.id = r2."objectiveId"\n                WHERE r.id IS NULL\n                AND r2."userProvidedUrl" IS NOT NULL\n                GROUP BY\n                  o.id,\n                  r2."userProvidedUrl"\n                RETURNING\n                  id "objectiveResourceId"\n              )\n              SELECT\n                "objectiveResourceId"\n              FROM "inserted";\n\n            -----------------------------------------------------------------------------------------------------\n            -- 17. Create new Objective Roles for added and found objectives\n            -----------------------------------------------------------------------------------------------------\n            DROP TABLE IF EXISTS "temp_missing_objective_Roles";\n            CREATE TEMP TABLE "temp_missing_objective_Roles" AS\n            WITH\n              "inserted" AS (\n                INSERT INTO "ObjectiveRoles"\n                (\n                  "objectiveId",\n                  "roleId",\n                  "createdAt",\n                  "updatedAt"\n                )\n                SELECT\n                  o.id "objectiveId",\n                  r2."roleId",\n                  MIN(r2."createdAt") "createdAt",\n                  MAX(r2."updatedAt") "updatedAt"\n                FROM "temp_missing_objectives_added_and_existing" moa\n                JOIN "Objectives" o\n                ON moa."objectiveId" = o.id\n                JOIN "Goals" g\n                ON o."goalId" = g.id\n                JOIN "temp_incomplete_reports" ir\n                ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n                AND md5(g.name) = ANY(ir."distinctGoals")\n                AND md5(o.title) = ANY(ir."distinctObjectives")\n                LEFT JOIN "ObjectiveRoles" r\n                ON o.id = r."objectiveId"\n                LEFT JOIN "Goals" g2\n                ON g2."grantId" = ANY(ir."intersectionGrantId")\n                AND md5(g.name) = md5(g2.name)\n                LEFT JOIN "Objectives" o2\n                ON g2.id = o2."goalId"\n                AND md5(o.title) = md5(o2.title)\n                LEFT JOIN "ObjectiveRoles" r2\n                ON o2.id = r2."objectiveId"\n                WHERE r.id IS NULL\n                AND r2."roleId" IS NOT NULL\n                GROUP BY\n                  o.id,\n                  r2."roleId"\n                RETURNING\n                  id "objectiveRoleId"\n              )\n              SELECT\n                "objectiveRoleId"\n              FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 18. Create new Objective Topics for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objective_Topics";\n          CREATE TEMP TABLE "temp_missing_objective_Topics" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ObjectiveTopics"\n              (\n                "objectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT\n                o.id "objectiveId",\n                t2."topicId",\n                MIN(t2."createdAt") "createdAt",\n                MAX(t2."updatedAt") "updatedAt"\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ObjectiveTopics" t\n              ON o.id = t."objectiveId"\n              LEFT JOIN "Goals" g2\n              ON g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              LEFT JOIN "Objectives" o2\n              ON g2.id = o2."goalId"\n              AND md5(o.title) = md5(o2.title)\n              LEFT JOIN "ObjectiveTopics" t2\n              ON o2.id = t2."objectiveId"\n              WHERE t.id IS NULL\n              AND t2."topicId" IS NOT NULL\n              GROUP BY\n                o.id,\n                t2."topicId"\n              RETURNING\n                id "objectiveTopicId"\n            )\n            SELECT\n              "objectiveTopicId"\n            FROM "inserted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 19. Collect and calculate onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_now_on_approved_ar";\n        CREATE TEMP TABLE "temp_objectives_now_on_approved_ar" AS\n        SELECT\n          moa."objectiveId",\n          'approved' = any(array_agg(distinct ar."calculatedStatus")) "onApprovedAR"\n        FROM "temp_missing_objectives_added_and_existing" moa\n        JOIN "Objectives" o\n        ON moa."objectiveId" = o.id\n        JOIN "ActivityReportObjectives" aro\n        ON moa."objectiveId" = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        GROUP BY moa."objectiveId"\n        HAVING bool_or(o."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 20. Update onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar_updated";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar_updated" AS\n        WITH\n          "updated" AS (\n            UPDATE "Objectives" o\n            SET\n              "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_objectives_now_on_approved_ar" t\n            WHERE o.id = t."objectiveId"\n            RETURNING\n              id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "updated";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 21. Collect args to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_args_to_be_deleted";\n        CREATE TEMP TABLE "temp_args_to_be_deleted" AS\n        SELECT DISTINCT\n          arg.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "ActivityReportGoals" arg\n        ON ir."activityReportId" = arg."activityReportId"\n        AND g.id = arg."goalId";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 22. Deleted args\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_args_deleted";\n        CREATE TEMP TABLE "temp_args_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "ActivityReportGoals" arg\n            USING "temp_args_to_be_deleted" argd\n            WHERE arg.id = argd.id\n            RETURNING\n              arg.id "argId"\n          )\n          SELECT\n            "argId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 23. Collect aros to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_aros_to_be_deleted";\n        CREATE TEMP TABLE "temp_aros_to_be_deleted" AS\n        SELECT DISTINCT\n          aro.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        JOIN "ActivityReportObjectives" aro\n        ON ir."activityReportId" = aro."activityReportId"\n        AND o.id = aro."objectiveId";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 24. Delete aros\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_aros_deleted";\n        CREATE TEMP TABLE "temp_aros_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "temp_aros_to_be_deleted" arod\n            WHERE aro.id = arod.id\n            RETURNING\n              aro.id "aroId"\n          )\n          SELECT\n            "aroId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 25. Collect objectives to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_to_be_deleted";\n        CREATE TEMP TABLE "temp_objectives_to_be_deleted" AS\n        SELECT\n          o.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        WHERE aro.id IS NULL;\n\n        -----------------------------------------------------------------------------------------------------\n        -- 26. Collect objectives to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar" AS\n        SELECT\n          o.id,\n          bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        WHERE aro.id IS NOT NULL\n        GROUP\n          BY o.id\n        HAVING\n          bool_or(o."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 27. Delete Objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_deleted";\n        CREATE TEMP TABLE "temp_objectives_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "Objectives" o\n            USING "temp_objectives_to_be_deleted" od\n            WHERE o.id = od.id\n            RETURNING\n              o.id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 28. Update onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar_updated2";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar_updated2" AS\n        WITH\n          "updated" AS (\n            UPDATE "Objectives" o\n            SET "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_objectives_on_approved_ar" t\n            WHERE o.id = t."id"\n            RETURNING\n              o.id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "updated";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 29. Collect goals to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_to_be_deleted";\n        CREATE TEMP TABLE "temp_goals_to_be_deleted" AS\n        SELECT g.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        LEFT JOIN "Objectives" o\n        ON g.id = o."goalId"\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        WHERE arg.id IS NULL\n        AND o.id IS NULL;\n\n        -----------------------------------------------------------------------------------------------------\n        -- 30. Collect and calculate onApprovedAR for goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_on_approved_ar";\n        CREATE TEMP TABLE "temp_goals_on_approved_ar" AS\n        SELECT\n          g.id,\n          bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        WHERE arg.id IS NOT NULL\n        GROUP BY g.id\n        HAVING bool_or(g."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 31. Delete goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_deleted";\n        CREATE TEMP TABLE "temp_goals_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "Goals" g\n            USING "temp_goals_to_be_deleted" gd\n            WHERE g.id = gd.id\n            RETURNING\n              g.id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 32. Update onApprovedAR for goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_on_approved_ar_updated2";\n        CREATE TEMP TABLE "temp_goals_on_approved_ar_updated2" AS\n        WITH\n          "updated" AS (\n            UPDATE "Goals" g\n            SET "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_goals_on_approved_ar" t\n            WHERE g.id = t."id"\n            RETURNING\n              g.id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "updated";\n\n\n        -----------------------------------------------------------------------------------------------------\n        -- 33. Output of some counts from steps above\n        -----------------------------------------------------------------------------------------------------\n        /*\n        SELECT\n        'incomplete_reports' "name",\n        count(*) cnt\n        FROM "temp_incomplete_reports"\n        UNION\n        SELECT\n        'missing_goals_added' "name",\n        count(*) cnt\n        FROM "temp_missing_goals_added_and_existing"\n        UNION\n        SELECT\n        'missing_args_added' "name",\n        count(*) cnt\n        FROM "temp_missing_args_added"\n        UNION\n        SELECT\n        'goals_on_approved_ar_updated' "name",\n        count(*) cnt\n        FROM "temp_goals_on_approved_ar_updated"\n        UNION\n        SELECT\n        'missing_objectives_added' "name",\n        count(*) cnt\n        FROM "temp_missing_objectives_added_and_existing"\n        UNION\n        SELECT\n        'missing_aros_added' "name",\n        count(*) cnt\n        FROM "temp_missing_aros_added"\n        UNION\n        SELECT\n        'objectives_on_approved_ar_updated' "name",\n        count(*) cnt\n        FROM "temp_objectives_on_approved_ar_updated";\n        */
Executing (28fb9058-3de1-404f-9595-4f55cc883239): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221017000000-missing-objectives: migrated (0.485s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221018174734-remove-objective-roles: migrating =======
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): START TRANSACTION;
Connection validated successfully
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221018174734-remove-objective-roles.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): SELECT "ZAFRemoveAuditingOnTable"('ActivityReportObjectiveRoles');
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveRoles');
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): DROP TABLE IF EXISTS "ZALActivityReportObjectiveRoles";
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): DROP TABLE IF EXISTS "ZALObjectiveRoles";
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): DROP TABLE IF EXISTS "ActivityReportObjectiveRoles";
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): DROP TABLE IF EXISTS "ObjectiveRoles";
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (45b7bc50-5fbf-4768-ac2a-4b80c6769fb4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221018174734-remove-objective-roles: migrated (0.221s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221103000000-emergent-goals-not-rttapa: migrating =======
Executing (41d52366-b247-4ae0-b2d3-cda60a621aa7): START TRANSACTION;
Connection validated successfully
Executing (41d52366-b247-4ae0-b2d3-cda60a621aa7): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221103000000-emergent-goals-not-rttapa.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (41d52366-b247-4ae0-b2d3-cda60a621aa7): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (41d52366-b247-4ae0-b2d3-cda60a621aa7): UPDATE "Goals" g\n          SET "isRttapa" = 'No'::"enum_Goals_isRttapa"\n          WHERE COALESCE(g."isFromSmartsheetTtaPlan",false) = false;
Executing (41d52366-b247-4ae0-b2d3-cda60a621aa7): UPDATE "ActivityReportGoals" arg\n          SET "isRttapa" = (g."isRttapa"::TEXT)::"enum_ActivityReportGoals_isRttapa"\n          FROM "Goals" g\n          WHERE arg."goalId" = g.id\n          AND arg."isRttapa" IS NULL\n          AND g."isRttapa" IS NOT NULL;
Executing (41d52366-b247-4ae0-b2d3-cda60a621aa7): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (41d52366-b247-4ae0-b2d3-cda60a621aa7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221103000000-emergent-goals-not-rttapa: migrated (0.119s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221104000000-template-race-condition: migrating =======
Executing (0c8ab46d-846b-418e-b5f9-395c6b84cbf3): START TRANSACTION;
Connection validated successfully
Executing (0c8ab46d-846b-418e-b5f9-395c6b84cbf3): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221104000000-template-race-condition.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0c8ab46d-846b-418e-b5f9-395c6b84cbf3): DO $$\n          BEGIN\n            CREATE TEMP TABLE "TempDuplicateGoalTemplates" AS\n            SELECT\n              min(gt.id) "goalTemplateId",\n              dgt.id "duplicateGoalTemplateId",\n              dgt.hash,\n              dgt."regionId"\n            FROM "GoalTemplates" gt\n            JOIN "GoalTemplates" dgt\n            ON gt.hash = dgt.hash\n            AND gt.id < dgt.id\n            GROUP BY 2,3,4;\n            ------------------------------------------------------------------------------------\n            UPDATE "Goals" g\n            SET\n              "goalTemplateId" = tdgt."goalTemplateId"\n            FROM "TempDuplicateGoalTemplates" tdgt\n            WHERE g."goalTemplateId" = tdgt."duplicateGoalTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "GoalTemplateDates" AS (\n                SELECT\n                  gt.id "goalTemplateId",\n                  min(gt2."createdAt") "createdAt",\n                  max(gt2."updatedAt") "updatedAt",\n                  max(gt2."lastUsed") "lastUsed",\n                  max(gt2."templateNameModifiedAt") "templateNameModifiedAt"\n                FROM "GoalTemplates" gt\n                JOIN "TempDuplicateGoalTemplates" tdgt\n                ON gt.id = tdgt."goalTemplateId"\n                JOIN "GoalTemplates" gt2\n                ON tdgt."goalTemplateId" = gt2.id\n                OR tdgt."duplicateGoalTemplateId" = gt2.id\n                GROUP BY 1\n              )\n            UPDATE "GoalTemplates" gt\n            SET\n              "createdAt" = gtd."createdAt",\n              "updatedAt" = gtd."updatedAt",\n              "lastUsed" = gtd."lastUsed",\n              "templateNameModifiedAt" = gtd."templateNameModifiedAt"\n            FROM "GoalTemplateDates" gtd\n            WHERE gt.id = gtd."goalTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "GoalTemplateObjectiveTemplatesToUpdate" AS (\n                SELECT\n                  gtot.id "goalTemplateObjectiveTemplateId",\n                  tdgt."goalTemplateId",\n                  tdgt."duplicateGoalTemplateId",\n                  gtot."objectiveTemplateId",\n                  gtot."createdAt",\n                  gtot."updatedAt"\n                FROM "GoalTemplateObjectiveTemplates" gtot\n                JOIN "TempDuplicateGoalTemplates" tdgt\n                ON gtot."objectiveTemplateId" = tdgt."duplicateGoalTemplateId"\n                LEFT JOIN "GoalTemplateObjectiveTemplates" gtot2\n                ON tdgt."goalTemplateId" = gtot2."goalTemplateId"\n                AND gtot."objectiveTemplateId" = gtot2."objectiveTemplateId"\n                WHERE gtot2.id IS NULL\n              )\n            UPDATE "GoalTemplateObjectiveTemplates" gtot\n            SET  "goalTemplateId" = gtotu."goalTemplateId"\n            FROM "GoalTemplateObjectiveTemplatesToUpdate" gtotu\n            WHERE gtot.id = gtotu."goalTemplateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            UPDATE "GoalTemplateObjectiveTemplates" gtot\n            SET  "goalTemplateId" = tdgt."goalTemplateId"\n            FROM "TempDuplicateGoalTemplates" tdgt\n            WHERE gtot."goalTemplateId" = tdgt."duplicateGoalTemplateId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "GoalTemplates" gt\n            USING "TempDuplicateGoalTemplates" tdgt\n            WHERE gt."id" = tdgt."duplicateGoalTemplateId";\n            ------------------------------------------------------------------------------------\n            DROP TABLE "TempDuplicateGoalTemplates";\n          END$$;
Executing (0c8ab46d-846b-418e-b5f9-395c6b84cbf3): DO $$\n          BEGIN\n            CREATE TEMP TABLE "TempDuplicateObjectiveTemplates" AS\n            SELECT\n              min(ot.id) "objectiveTemplateId",\n              dot.id "duplicateObjectiveTemplateId",\n              dot.hash,\n              dot."regionId"\n            FROM "ObjectiveTemplates" ot\n            JOIN "ObjectiveTemplates" dot\n            ON ot.hash = dot.hash\n            AND ot.id < dot.id\n            GROUP BY 2,3,4;\n            ------------------------------------------------------------------------------------\n            UPDATE "Objectives" o\n            SET\n              "objectiveTemplateId" = tdot."objectiveTemplateId"\n            FROM "TempDuplicateObjectiveTemplates" tdot\n            WHERE o."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "ObjectiveTemplateDates" AS (\n                SELECT\n                  ot.id "objectiveTemplateId",\n                  min(ot2."createdAt") "createdAt",\n                  max(ot2."updatedAt") "updatedAt",\n                  max(ot2."lastUsed") "lastUsed",\n                  max(ot2."templateTitleModifiedAt") "templateTitleModifiedAt"\n                FROM "ObjectiveTemplates" ot\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON ot.id = tdot."objectiveTemplateId"\n                JOIN "ObjectiveTemplates" ot2\n                ON tdot."objectiveTemplateId" = ot2.id\n                OR tdot."duplicateObjectiveTemplateId" = ot2.id\n                GROUP BY 1\n              )\n            UPDATE "ObjectiveTemplates" ot\n            SET\n              "createdAt" = otd."createdAt",\n              "updatedAt" = otd."updatedAt",\n              "lastUsed" = otd."lastUsed",\n              "templateTitleModifiedAt" = otd."templateTitleModifiedAt"\n            FROM "ObjectiveTemplateDates" otd\n            WHERE ot.id = otd."objectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "GoalTemplateObjectiveTemplatesToUpdate" AS (\n                SELECT\n                  gtot.id "goalTemplateObjectiveTemplateId",\n                  tdot."objectiveTemplateId",\n                  tdot."duplicateObjectiveTemplateId",\n                  gtot."goalTemplateId",\n                  gtot."createdAt",\n                  gtot."updatedAt"\n                FROM "GoalTemplateObjectiveTemplates" gtot\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON gtot."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId"\n                LEFT JOIN "GoalTemplateObjectiveTemplates" gtot2\n                ON tdot."objectiveTemplateId" = gtot2."objectiveTemplateId"\n                AND gtot."goalTemplateId" = gtot2."goalTemplateId"\n                WHERE gtot2.id IS NULL\n              )\n            UPDATE "GoalTemplateObjectiveTemplates" gtot\n            SET  "objectiveTemplateId" = gtotu."objectiveTemplateId"\n            FROM "GoalTemplateObjectiveTemplatesToUpdate" gtotu\n            WHERE gtot.id = gtotu."goalTemplateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "GoalTemplateObjectiveTemplates" gtot\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE gtot."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "ObjectiveTemplateFilesToUpdate" AS (\n                SELECT\n                  otf.id "objectiveTemplateFileId",\n                  tdot."objectiveTemplateId",\n                  tdot."duplicateObjectiveTemplateId",\n                  otf."fileId",\n                  otf."createdAt",\n                  otf."updatedAt"\n                FROM "ObjectiveTemplateFiles" otf\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON otf."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId"\n                LEFT JOIN "ObjectiveTemplateFiles" otf2\n                ON tdot."objectiveTemplateId" = otf2."objectiveTemplateId"\n                AND otf."fileId" = otf2."fileId"\n                WHERE otf2.id IS NULL\n              )\n            UPDATE "ObjectiveTemplateFiles" otf\n            SET\n              "objectiveTemplateId" = otfu."objectiveTemplateId"\n            FROM "ObjectiveTemplateFilesToUpdate" otfu\n            WHERE otf.id = otfu."objectiveTemplateFileId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplateFiles" otf\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE otf."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "ObjectiveTemplateResourcesToUpdate" AS (\n                SELECT\n                  otr.id "objectiveTemplateResourceId",\n                  tdot."objectiveTemplateId",\n                  tdot."duplicateObjectiveTemplateId",\n                  otr."userProvidedUrl",\n                  otr."createdAt",\n                  otr."updatedAt"\n                FROM "ObjectiveTemplateResources" otr\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON otr."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId"\n                LEFT JOIN "ObjectiveTemplateResources" otr2\n                ON tdot."objectiveTemplateId" = otr2."objectiveTemplateId"\n                AND otr."userProvidedUrl" = otr2."userProvidedUrl"\n                WHERE otr2.id IS NULL\n              )\n            UPDATE "ObjectiveTemplateResources" otr\n            SET\n              "objectiveTemplateId" = otru."objectiveTemplateId"\n            FROM "ObjectiveTemplateResourcesToUpdate" otru\n            WHERE otr.id = otru."objectiveTemplateResourceId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplateResources" otr\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE otr."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            WITH\n              "ObjectiveTemplateTopicsToUpdate" AS (\n                SELECT\n                  ott.id "objectiveTemplateTopicId",\n                  tdot."objectiveTemplateId",\n                  tdot."duplicateObjectiveTemplateId",\n                  ott."topicId",\n                  ott."createdAt",\n                  ott."updatedAt"\n                FROM "ObjectiveTemplateTopics" ott\n                JOIN "TempDuplicateObjectiveTemplates" tdot\n                ON ott."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId"\n                LEFT JOIN "ObjectiveTemplateTopics" ott2\n                ON tdot."objectiveTemplateId" = ott2."objectiveTemplateId"\n                AND ott."topicId" = ott2."topicId"\n                WHERE ott2.id IS NULL\n              )\n            UPDATE "ObjectiveTemplateTopics" ott\n            SET\n              "objectiveTemplateId" = ottu."objectiveTemplateId"\n            FROM "ObjectiveTemplateTopicsToUpdate" ottu\n            WHERE ott.id = ottu."objectiveTemplateTopicId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplateTopics" ott\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE ott."objectiveTemplateId" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            DELETE FROM "ObjectiveTemplates" ot\n            USING "TempDuplicateObjectiveTemplates" tdot\n            WHERE ot."id" = tdot."duplicateObjectiveTemplateId";\n            ------------------------------------------------------------------------------------\n            DROP TABLE "TempDuplicateObjectiveTemplates";\n          END$$;
Executing (0c8ab46d-846b-418e-b5f9-395c6b84cbf3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221104000000-template-race-condition: migrated (0.040s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221117-133423-create-aro-sort-column: migrating =======
Executing (e9ffbc4b-8b55-434c-b3d3-f0fb940e7f60): START TRANSACTION;
Connection validated successfully
Executing (e9ffbc4b-8b55-434c-b3d3-f0fb940e7f60): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20221117-133423-create-aro-sort-column.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e9ffbc4b-8b55-434c-b3d3-f0fb940e7f60): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "arOrder" INTEGER DEFAULT 1;
Executing (e9ffbc4b-8b55-434c-b3d3-f0fb940e7f60): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221117-133423-create-aro-sort-column: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221117151412-add-rtr-order-to-objectives: migrating =======
Executing (020ab343-37b3-4723-aeec-bc245cb44be7): START TRANSACTION;
Connection validated successfully
Executing (020ab343-37b3-4723-aeec-bc245cb44be7): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221117151412-add-rtr-order-to-objectives.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (020ab343-37b3-4723-aeec-bc245cb44be7): ALTER TABLE "public"."Objectives" ADD COLUMN "rtrOrder" INTEGER DEFAULT 1;
Executing (020ab343-37b3-4723-aeec-bc245cb44be7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221117151412-add-rtr-order-to-objectives: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221121200321-add-actively-edited-to-activity-report-goal: migrating =======
Executing (91a32d8b-d8a6-432b-89a2-8a18a12887a2): START TRANSACTION;
Connection validated successfully
Executing (91a32d8b-d8a6-432b-89a2-8a18a12887a2): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20221121200321-add-actively-edited-to-activity-report-goal.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (91a32d8b-d8a6-432b-89a2-8a18a12887a2): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "isActivelyEdited" BOOLEAN;
Executing (91a32d8b-d8a6-432b-89a2-8a18a12887a2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221121200321-add-actively-edited-to-activity-report-goal: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221122125923-update-aro-completed-status: migrating =======
Executing (05b68d45-a02d-43da-887f-e01b608c7aa3): START TRANSACTION;
Connection validated successfully
Executing (05b68d45-a02d-43da-887f-e01b608c7aa3): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20221122125923-update-aro-completed-status.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (05b68d45-a02d-43da-887f-e01b608c7aa3): UPDATE "ActivityReportObjectives" SET "status" = 'Complete' WHERE "status" = 'Completed'
Executing (05b68d45-a02d-43da-887f-e01b608c7aa3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221122125923-update-aro-completed-status: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221129000000-dedupe-objectives: migrating =======
Executing (c5d69195-4213-48bf-aaf2-37f708390f2b): START TRANSACTION;
Connection validated successfully
Executing (c5d69195-4213-48bf-aaf2-37f708390f2b): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20221129000000-dedupe-objectives.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c5d69195-4213-48bf-aaf2-37f708390f2b): WITH\n          obj_recovered_dates AS (\n            SELECT\n              data_id recovered_obj_id,\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Not Started') "firstNotStartedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Not Started') "lastNotStartedAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'In Progress') "firstInProgressAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'In Progress') "lastInProgressAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Suspended') "firstSuspendedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Suspended') "lastSuspendedAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Complete') "firstCompleteAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Complete') "lastCompleteAt"\n            FROM public."ZALObjectives"\n            WHERE new_row_data ->> 'status' IS NOT NULL\n            GROUP BY 1\n          )\n          UPDATE "Objectives" o\n          SET\n            "firstNotStartedAt" = ord."firstNotStartedAt",\n            "lastNotStartedAt" = ord."lastNotStartedAt",\n            "firstInProgressAt" = ord."firstInProgressAt",\n            "lastInProgressAt" = ord."lastInProgressAt",\n            "firstSuspendedAt" = ord."firstSuspendedAt",\n            "lastSuspendedAt" = ord."lastSuspendedAt",\n            "firstCompleteAt" = ord."firstCompleteAt",\n            "lastCompleteAt" = ord."lastCompleteAt"\n          FROM obj_recovered_dates ord\n          WHERE o.id = recovered_obj_id\n          ;
Executing (c5d69195-4213-48bf-aaf2-37f708390f2b): WITH\n          goal_recovered_dates AS (\n            SELECT\n              data_id recovered_goal_id,\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Not Started') "firstNotStartedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Not Started') "lastNotStartedAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'In Progress') "firstInProgressAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'In Progress') "lastInProgressAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Suspended') "firstCeasedSuspendedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Suspended') "lastCeasedSuspendedAt",\n              MIN(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Closed') "firstClosedAt",\n              MAX(dml_timestamp) FILTER (WHERE new_row_data ->> 'status' = 'Closed') "lastClosedAt"\n            FROM public."ZALGoals"\n            WHERE new_row_data ->> 'status' IS NOT NULL\n            GROUP BY 1\n          )\n          UPDATE "Goals" g\n          SET\n            "firstNotStartedAt" = grd."firstNotStartedAt",\n            "lastNotStartedAt" = grd."lastNotStartedAt",\n            "firstInProgressAt" = grd."firstInProgressAt",\n            "lastInProgressAt" = grd."lastInProgressAt",\n            "firstCeasedSuspendedAt" = grd."firstCeasedSuspendedAt",\n            "lastCeasedSuspendedAt" = grd."lastCeasedSuspendedAt",\n            "firstClosedAt" = grd."firstClosedAt",\n            "lastClosedAt" = grd."lastClosedAt"\n          FROM goal_recovered_dates grd\n          WHERE g.id = recovered_goal_id\n          ;
Executing (c5d69195-4213-48bf-aaf2-37f708390f2b): WITH\n          -- make easily sortable statuses\n          status_order AS (\n            SELECT\n              'Not Started' AS statname,\n              1 AS statrank\n            UNION SELECT 'In Progress',2\n            UNION SELECT 'Complete', 4\n          ),\n          -- collect duplicate objectives based on matching title and goalId\n          grouped_objectives AS (\n            SELECT\n              *,\n              COALESCE("goalId",0) || '-' || COALESCE("otherEntityId",0) || '-' || MD5(TRIM(title))\n              AS group_id,\n              CASE WHEN status = 'Complete' THEN 1 ELSE 0 END\n              AS seq_end -- Complete objectives end a sequence within a group\n            FROM "Objectives"\n          ),\n          -- break groups of duplicates into sets that will be consolidated to a single objective\n          -- when a 'Complete' ends a sequence of duplicate objectives within a group, they form a set\n          -- the complete objective will inherit all the data associated with the objectives of that set\n          objective_sets AS (\n            SELECT\n              *,\n                group_id || '-' ||\n                SUM(seq_end) OVER (PARTITION BY group_id ORDER BY "updatedAt" DESC)\n              AS obj_set_id\n            FROM grouped_objectives\n          ),\n          set_aggregates AS (\n            SELECT\n              obj_set_id AS aggregate_osid,\n              COUNT(*) AS os_count,\n              TRIM(title) trimmed_title,\n              MIN("createdAt") min_createdat,\n              MAX("updatedAt") max_updatedat,\n              MIN("objectiveTemplateId") min_obj_template_id,\n              BOOL_OR("onApprovedAR") any_onapprovedar,\n              MIN("firstNotStartedAt") new_fnotstartedat,\n              MAX("lastNotStartedAt") new_lnotstartedat,\n              MIN("firstInProgressAt") new_finprogressat,\n              MAX("lastInProgressAt") new_linprogressat,\n              MIN("firstCompleteAt") new_fcompleteat,\n              MAX("lastCompleteAt") new_lcompleteat,\n              MIN("firstSuspendedAt") new_fsuspendedat,\n              MAX("lastSuspendedAt") new_lsuspendedat\n            FROM objective_sets\n            GROUP BY 1,3\n            HAVING COUNT(*) > 1\n          ),\n          -- Rank objectives within sets to find the objective with the most-advanced status and latest update\n          -- only one set within a dupe group can lack a Complete objective, so at most one objective per dupe group will survive deduping with a non-complete status\n          ranked_objectives AS (\n            SELECT\n              *,\n              ROW_NUMBER() OVER (PARTITION BY obj_set_id ORDER BY statrank DESC, "updatedAt" DESC)\n              AS obj_rank\n            FROM objective_sets os\n            LEFT JOIN status_order so\n              ON status = statname\n          ),\n          --- for each of the three datasets merge objectives into the older records as described\n          updated_objectives AS (\n            UPDATE "Objectives" o\n            SET\n              "createdAt" = min_createdat,\n              "updatedAt" = max_updatedat,\n              "objectiveTemplateId" = min_obj_template_id,\n              "onApprovedAR" = any_onapprovedar,\n              "firstNotStartedAt" = new_fnotstartedat,\n              "lastNotStartedAt" = new_lnotstartedat,\n              "firstInProgressAt" = new_finprogressat,\n              "lastInProgressAt" = new_linprogressat,\n              "firstCompleteAt" = new_fcompleteat,\n              "lastCompleteAt" = new_lcompleteat,\n              "firstSuspendedAt" = new_fsuspendedat,\n              "lastSuspendedAt" = new_lsuspendedat\n            FROM ranked_objectives ro\n            JOIN set_aggregates sa\n              ON sa.aggregate_osid = ro.obj_set_id\n            WHERE o.id = ro.id\n              AND ro.obj_rank = 1\n              AND sa.os_count > 1\n            RETURNING\n              o.id\n          ),\n          -- create a unified list of affected objectives and which objectives inherit their metadata\n          affected_objectives AS (\n            SELECT\n              uo.id inheriting_oid,\n              all_o.id donor_oid\n            FROM updated_objectives uo\n            JOIN objective_sets os\n              ON uo.id = os.id\n            JOIN objective_sets all_o\n              ON os.obj_set_id = all_o.obj_set_id\n          ),\n          --- migrate/merge/delete metadata table values from newer objectives into the older objectives\n          affected_objective_files AS (\n            SELECT\n              of.id,\n              ao.inheriting_oid,\n              ROW_NUMBER() OVER (\n                PARTITION BY ao.inheriting_oid, of."fileId"\n                ORDER BY "createdAt", of.id\n              ) AS dupe_rank,\n              ao.donor_oid = ao.inheriting_oid AS on_inheriting_obj\n            FROM affected_objectives ao\n            JOIN "ObjectiveFiles" of\n              ON ao.donor_oid = of."objectiveId"\n            WHERE ao.inheriting_oid <> ao.donor_oid\n          ),\n          -- Move objective file links from deduped objectives to the inheriting objective, or delete the linking record if the file is a dupe\n          migrated_objective_files AS (\n            UPDATE "ObjectiveFiles" f\n            SET\n              "objectiveId" = aof.inheriting_oid\n            FROM affected_objective_files aof\n            WHERE aof.id = f.id\n              AND NOT on_inheriting_obj\n              AND dupe_rank = 1\n            RETURNING\n              aof.id\n          ),\n          deleted_objective_files AS (\n            DELETE FROM "ObjectiveFiles" f\n            USING affected_objective_files aof\n            WHERE f.id = aof.id\n              AND dupe_rank > 1\n            RETURNING\n              aof.id\n          ),\n          affected_objective_resources AS (\n            SELECT\n              or_.id,\n              ao.inheriting_oid,\n              ROW_NUMBER() OVER (\n                PARTITION BY ao.inheriting_oid, or_."userProvidedUrl"\n                ORDER BY "createdAt", or_.id\n              ) AS dupe_rank,\n              ao.donor_oid = ao.inheriting_oid AS on_inheriting_obj\n            FROM affected_objectives ao\n            JOIN "ObjectiveResources" or_\n              ON ao.donor_oid = or_."objectiveId"\n          ),\n          migrated_objective_resources AS (\n            UPDATE "ObjectiveResources" r\n            SET\n              "objectiveId" = aor.inheriting_oid\n            FROM affected_objective_resources aor\n            WHERE aor.id = r.id\n              AND NOT on_inheriting_obj\n              AND dupe_rank = 1\n            RETURNING\n              aor.id\n          ),\n          deleted_objective_resources AS (\n            DELETE FROM "ObjectiveResources" r\n            USING affected_objective_resources aor\n            WHERE r.id = aor.id\n              AND dupe_rank > 1\n            RETURNING\n              aor.id\n          ),\n          affected_objective_topics AS (\n            SELECT\n              ot.id,\n              ao.inheriting_oid,\n              ROW_NUMBER() OVER (\n                PARTITION BY ao.inheriting_oid, ot."topicId"\n                ORDER BY "createdAt", ot.id\n              ) AS dupe_rank,\n              ao.donor_oid = ao.inheriting_oid AS on_inheriting_obj\n            FROM affected_objectives ao\n            JOIN "ObjectiveTopics" ot\n              ON ao.donor_oid = ot."objectiveId"\n          ),\n          migrated_objective_topics AS (\n            UPDATE "ObjectiveTopics" r\n            SET\n              "objectiveId" = aot.inheriting_oid\n            FROM affected_objective_topics aot\n            WHERE aot.id = r.id\n              AND NOT on_inheriting_obj\n              AND dupe_rank = 1\n            RETURNING\n              aot.id\n          ),\n          deleted_objective_topics AS (\n            DELETE FROM "ObjectiveTopics" t\n            USING affected_objective_topics aot\n            WHERE t.id = aot.id\n              AND dupe_rank > 1\n            RETURNING\n              aot.id\n          ),\n          --- migrate/merge/delete ARO records to use the top ranked objectives\n          ranked_aros AS (\n            SELECT\n              aro.id,\n              ao.inheriting_oid,\n              ROW_NUMBER() OVER (\n                PARTITION BY ao.inheriting_oid, aro."activityReportId"\n                ORDER BY "createdAt", aro.id\n              ) AS dupe_rank,\n              ao.donor_oid = ao.inheriting_oid AS on_inheriting_obj,\n              aro."activityReportId" ar_id,\n              aro."ttaProvided" tta_provided\n            FROM affected_objectives ao\n            JOIN "ActivityReportObjectives" aro\n              ON ao.donor_oid = aro."objectiveId"\n          ),\n          affected_aros AS (\n            SELECT\n              raro.id,\n              raro.inheriting_oid,\n              raro.dupe_rank,\n              raro.on_inheriting_obj,\n              raro.ar_id,\n              top_rank.id inheriting_aroid\n            FROM ranked_aros raro\n            JOIN ranked_aros top_rank\n              ON raro.inheriting_oid = top_rank.inheriting_oid\n              AND raro.ar_id = top_rank.ar_id\n              AND top_rank.dupe_rank = 1\n          ),\n          -- Handle the possibility that different AROs for different duplicate Objs have different ttaProvided\n          -- This is more of a theoretical issue than one we expect to see in the data,\n          -- so it will hopefully do nothing, but this assures that if they do exist, the\n          -- different texts aren't lost, merely concatenated.\n          tta_provided_agg AS (\n            SELECT\n              inheriting_oid,\n              ar_id,\n              STRING_AGG(DISTINCT tta_provided, ', ') tta_provided_concat\n            FROM ranked_aros\n            GROUP BY 1,2\n          ),\n          -- Doing the update here even if it's already on the inheriting objective because of\n          -- the tta provided concatenation\n          migrated_aros AS (\n            UPDATE "ActivityReportObjectives" aro\n            SET\n              "objectiveId" = aaro.inheriting_oid,\n              "ttaProvided" = tta_provided_concat\n            FROM affected_aros aaro\n            JOIN tta_provided_agg tpa\n              ON tpa.inheriting_oid = aaro.inheriting_oid\n              AND aaro.ar_id = tpa.ar_id\n            WHERE aaro.id = aro.id\n              AND dupe_rank = 1\n            RETURNING\n              aaro.id\n          ),\n          -- do the same migrations with linking records attaching to AROs as were done with\n          -- linking records attaching to Objectives\n          affected_aro_files AS (\n            SELECT\n              arof.id,\n              aaro.inheriting_aroid,\n              ROW_NUMBER() OVER (\n                PARTITION BY arof."fileId", aaro.inheriting_aroid\n                ORDER BY aaro.dupe_rank, arof.id\n              ) AS dupe_rank,\n              aaro.dupe_rank = 1 AS on_inheriting_aro\n            FROM affected_aros aaro\n            JOIN "ActivityReportObjectiveFiles" arof\n              ON aaro.id = arof."activityReportObjectiveId"\n          ),\n          migrated_aro_files AS (\n            UPDATE "ActivityReportObjectiveFiles" arof\n            SET\n              "activityReportObjectiveId" = inheriting_aroid\n            FROM affected_aro_files aarof\n            WHERE aarof.id = arof.id\n              AND dupe_rank = 1\n              AND NOT on_inheriting_aro\n            RETURNING\n              arof.id\n          ),\n          deleted_aro_files AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING affected_aro_files aarof\n            WHERE aarof.id = arof.id\n              AND dupe_rank > 1\n            RETURNING\n              arof.id\n          ),\n          affected_aro_resources AS (\n            SELECT\n              aror.id,\n              aaro.inheriting_aroid,\n              ROW_NUMBER() OVER (\n                PARTITION BY aaro.inheriting_aroid, aror."userProvidedUrl"\n                ORDER BY aaro.dupe_rank, aror.id\n              ) AS dupe_rank,\n              aaro.dupe_rank = 1 AS on_inheriting_aro\n            FROM affected_aros aaro\n            JOIN "ActivityReportObjectiveResources" aror\n              ON aaro.id = aror."activityReportObjectiveId"\n          ),\n          migrated_aro_resources AS (\n            UPDATE "ActivityReportObjectiveResources" aror\n            SET\n              "activityReportObjectiveId" = inheriting_aroid\n            FROM affected_aro_resources aaror\n            WHERE aaror.id = aror.id\n              AND dupe_rank = 1\n              AND NOT on_inheriting_aro\n            RETURNING\n              aror.id\n          ),\n          deleted_aro_resources AS (\n            DELETE FROM "ActivityReportObjectiveResources" aror\n            USING affected_aro_resources aaror\n            WHERE aaror.id = aror.id\n              AND dupe_rank > 1\n            RETURNING\n              aror.id\n          ),\n          affected_aro_topics AS (\n            SELECT\n              arot.id,\n              aaro.inheriting_aroid,\n              ROW_NUMBER() OVER (\n                PARTITION BY aaro.inheriting_aroid, arot."topicId"\n                ORDER BY aaro.dupe_rank, arot.id\n              ) AS dupe_rank,\n              aaro.dupe_rank = 1 AS on_inheriting_aro\n            FROM affected_aros aaro\n            JOIN "ActivityReportObjectiveTopics" arot\n              ON aaro.id = arot."activityReportObjectiveId"\n          ),\n          migrated_aro_topics AS (\n            UPDATE "ActivityReportObjectiveTopics" arot\n            SET\n              "activityReportObjectiveId" = inheriting_aroid\n            FROM affected_aro_topics aarot\n            WHERE aarot.id = arot.id\n              AND dupe_rank = 1\n              AND NOT on_inheriting_aro\n            RETURNING\n              arot.id\n          ),\n          deleted_aro_topics AS (\n            DELETE FROM "ActivityReportObjectiveTopics" arot\n            USING affected_aro_topics aarot\n            WHERE aarot.id = arot.id\n              AND dupe_rank > 1\n            RETURNING\n              arot.id\n          ),\n          deleted_aros AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING affected_aros aaro\n            WHERE aro.id = aaro.id\n              AND dupe_rank > 1\n            RETURNING\n              aaro.id\n          ),\n          --- delete the donor objectives\n          deleted_objectives AS (\n            DELETE FROM "Objectives" o\n            USING affected_objectives ao\n            WHERE o.id = ao.donor_oid\n              AND ao.inheriting_oid <> ao.donor_oid\n            RETURNING\n              o.id\n          )\n          --- results\n          SELECT 'updated_objectives', count(*)\n          FROM updated_objectives\n          UNION\n          SELECT 'migrated_objective_files', count(*)\n          FROM migrated_objective_files\n          UNION\n          SELECT 'deleted_objective_files', count(*)\n          FROM deleted_objective_files\n          UNION\n          SELECT 'migrated_objective_resources', count(*)\n          FROM migrated_objective_resources\n          UNION\n          SELECT 'deleted_objective_resources', count(*)\n          FROM deleted_objective_resources\n          UNION\n          SELECT 'migrated_objective_topics', count(*)\n          FROM migrated_objective_topics\n          UNION\n          SELECT 'deleted_objective_topics', count(*)\n          FROM deleted_objective_topics\n          UNION\n          SELECT 'migrated_aros', count(*)\n          FROM migrated_aros\n          UNION\n          SELECT 'migrated_aro_files', count(*)\n          FROM migrated_aro_files\n          UNION\n          SELECT 'deleted_aro_files', count(*)\n          FROM deleted_aro_files\n          UNION\n          SELECT 'migrated_aro_resources', count(*)\n          FROM migrated_aro_resources\n          UNION\n          SELECT 'deleted_aro_resources', count(*)\n          FROM deleted_aro_resources\n          UNION\n          SELECT 'migrated_aro_topics', count(*)\n          FROM migrated_aro_topics\n          UNION\n          SELECT 'deleted_aro_topics', count(*)\n          FROM deleted_aro_topics\n          UNION\n          SELECT 'deleted_aros', count(*)\n          FROM deleted_aros\n          UNION\n          SELECT 'deleted_objectives', count(*)\n          FROM deleted_objectives;
Executing (c5d69195-4213-48bf-aaf2-37f708390f2b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221129000000-dedupe-objectives: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221201231306-user-settings-ps-emails: migrating =======
Executing (ca4062d5-6102-42c1-8164-15740d3ad27f): START TRANSACTION;
Connection validated successfully
Executing (ca4062d5-6102-42c1-8164-15740d3ad27f): INSERT INTO "UserSettings" ("class", "key", "default", "createdAt", "updatedAt")\n        VALUES ('email', 'emailWhenRecipientReportApprovedProgramSpecialist', '"never"', current_timestamp, current_timestamp)
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE 'recipientReportApproved';\n        ALTER TYPE "enum_MailerLogs_action" ADD VALUE 'recipientReportApprovedDigest';
Connection validated successfully
Executing (ca4062d5-6102-42c1-8164-15740d3ad27f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221201231306-user-settings-ps-emails: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221206165155-alter-resource-column: migrating =======
Executing (ff9a453a-0354-4c2c-a73f-ffe72d7f03ff): START TRANSACTION;
Connection validated successfully
Executing (ff9a453a-0354-4c2c-a73f-ffe72d7f03ff): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20221206165155-alter-resource-column.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ff9a453a-0354-4c2c-a73f-ffe72d7f03ff): ALTER TABLE "ObjectiveResources" ALTER COLUMN "userProvidedUrl" SET NOT NULL;ALTER TABLE "ObjectiveResources" ALTER COLUMN "userProvidedUrl" DROP DEFAULT;ALTER TABLE "ObjectiveResources" ALTER COLUMN "userProvidedUrl" TYPE TEXT;
Executing (ff9a453a-0354-4c2c-a73f-ffe72d7f03ff): ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "userProvidedUrl" SET NOT NULL;ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "userProvidedUrl" DROP DEFAULT;ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "userProvidedUrl" TYPE TEXT;
Executing (ff9a453a-0354-4c2c-a73f-ffe72d7f03ff): ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "userProvidedUrl" SET NOT NULL;ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "userProvidedUrl" DROP DEFAULT;ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "userProvidedUrl" TYPE TEXT;
Executing (ff9a453a-0354-4c2c-a73f-ffe72d7f03ff): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221206165155-alter-resource-column: migrated (0.049s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20221213153251-add-created-via-to-objectives: migrating =======
Executing (601d43e8-65d6-43e5-b07e-09a716997422): START TRANSACTION;
Connection validated successfully
Executing (601d43e8-65d6-43e5-b07e-09a716997422): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20221213153251-add-created-via-to-objectives.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (601d43e8-65d6-43e5-b07e-09a716997422): CREATE TYPE "public"."enum_Objectives_createdVia" AS ENUM('activityReport', 'rtr');ALTER TABLE "public"."Objectives" ADD COLUMN "createdVia" "public"."enum_Objectives_createdVia";
Executing (601d43e8-65d6-43e5-b07e-09a716997422): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20221213153251-add-created-via-to-objectives: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230110204839-remove-goals-objectives-feature-flag: migrating =======
Executing (f74195cc-55b6-4ff2-a662-5f873b3a5905): START TRANSACTION;
Connection validated successfully
Executing (f74195cc-55b6-4ff2-a662-5f873b3a5905): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230110204839-remove-goals-objectives-feature-flag.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f74195cc-55b6-4ff2-a662-5f873b3a5905): -- remove references to deprecated values\n        UPDATE "Users"\n                  SET "flags" = array_remove("flags", 'recipient_goals_objectives')\n        WHERE 'recipient_goals_objectives' = ANY("flags");\n\n        -- rename the existing type\n        ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n\n        -- create the new type using FLAGS:\n        CREATE TYPE "enum_Users_flags" AS ENUM();\n\n        -- update the columns to use the new type\n        ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n        ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n        ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n\n        -- remove the old type\n        DROP TYPE "enum_Users_flags_old";
Executing (f74195cc-55b6-4ff2-a662-5f873b3a5905): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230110204839-remove-goals-objectives-feature-flag: migrated (0.050s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230119000000-create-groups: migrating =======
Executing (d7bc6c7f-8389-44e8-9c0f-011f3548b195): START TRANSACTION;
Connection validated successfully
Executing (d7bc6c7f-8389-44e8-9c0f-011f3548b195): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230119000000-create-groups.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d7bc6c7f-8389-44e8-9c0f-011f3548b195): CREATE TABLE IF NOT EXISTS "Groups" ("id"   SERIAL , "name" TEXT UNIQUE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (d7bc6c7f-8389-44e8-9c0f-011f3548b195): CREATE TABLE IF NOT EXISTS "GroupGrants" ("id"   SERIAL , "grantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "groupId" INTEGER NOT NULL REFERENCES "Groups" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (d7bc6c7f-8389-44e8-9c0f-011f3548b195): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230119000000-create-groups: migrated (0.078s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230124000000-missing-objectives: migrating =======
Executing (691bb87b-5c67-4f03-afa3-3d411fc0c79e): START TRANSACTION;
Connection validated successfully
Executing (691bb87b-5c67-4f03-afa3-3d411fc0c79e): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230124000000-missing-objectives.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (691bb87b-5c67-4f03-afa3-3d411fc0c79e): ----------------------------------------------------------------------------------------------------\n          -- 1. Create ActivityReportGoals for each of the goals linked via ActivityReportObjectives\n          -----------------------------------------------------------------------------------------------------\n          WITH\n            "GoalsThroughObjectives" AS (\n              SELECT DISTINCT\n                aro."activityReportId",\n                o."goalId",\n                g."grantId",\n                md5(g."name") "goalHash"\n              FROM "ActivityReportObjectives" aro\n              JOIN "Objectives" o\n              ON aro."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              WHERE o."goalId" IS NOT NULL\n            ),\n            "GoalsDirect" AS (\n              SELECT DISTINCT\n                arg."activityReportId",\n                arg."goalId",\n                g."grantId",\n                md5(g."name") "goalHash"\n              FROM "ActivityReportGoals" arg\n              JOIN "Goals" g\n              ON arg."goalId" = g.id\n            ),\n            "MissingDirectGoals" AS (\n              SELECT *\n              FROM "GoalsThroughObjectives"\n              EXCEPT\n              SELECT *\n              FROM "GoalsDirect"\n            )\n            INSERT INTO "ActivityReportGoals"\n            (\n              "activityReportId",\n              "goalId",\n              "createdAt",\n              "updatedAt"\n            )\n            SELECT DISTINCT\n              aro."activityReportId",\n              o."goalId",\n              MIN(aro."createdAt") "createdAt",\n              MAX(aro."updatedAt") "updatedAt"\n            FROM "ActivityReportObjectives" aro\n            LEFT JOIN "Objectives" o\n            ON aro."objectiveId" = o.id\n            LEFT JOIN "Goals" g\n            ON o."goalId" = g.id\n            JOIN "MissingDirectGoals" m\n            ON aro."activityReportId" = m."activityReportId"\n            AND o."goalId" = m."goalId"\n            AND g."grantId" = m."grantId"\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."activityReportId" = aro."activityReportId"\n            AND arg."goalId" = o."goalId"\n            WHERE arg.id IS NULL\n            GROUP BY\n              aro."activityReportId",\n              o."goalId";\n\n          ----------------------------------------------------------------------------------------------------\n          -- 2. Identify all reports with inconsistencies between recipients and connected goals and objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_incomplete_reports";\n          CREATE TEMP TABLE "temp_incomplete_reports" AS\n          WITH\n            "through_goals" AS (\n              SELECT\n                ar."activityReportId",\n                a."calculatedStatus",\n                array_agg(distinct ar."grantId" order by ar."grantId") "recipientGrantIds",\n                array_agg(distinct g."grantId" order by g."grantId") "goalGrantIds",\n                array[]::text[] "distinctObjectives",\n                array_agg(distinct md5(g.name) order by md5(g.name)) "distinctGoals"\n                FROM "ActivityRecipients" ar\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n              JOIN "Grants" gr\n              ON ar."grantId" = gr.id\n              AND a."startDate" < gr."endDate"\n              LEFT JOIN "ActivityReportGoals" arg\n              ON ar."activityReportId" = arg."activityReportId"\n              LEFT JOIN "Goals" g\n              ON arg."goalId" = g.id\n              JOIN "Grants" gr2\n              ON g."grantId" = gr2.id\n              AND a."startDate" < gr2."endDate"\n              WHERE g."grantId" is not null\n              GROUP BY ar."activityReportId", a."calculatedStatus"\n              HAVING\n              array_agg(distinct ar."grantId" order by ar."grantId") != array_agg(distinct g."grantId" order by g."grantId")\n              AND ARRAY_LENGTH(ARRAY(\n                SELECT UNNEST(array_agg(distinct ar."grantId" order by ar."grantId"))\n                INTERSECT\n                SELECT UNNEST(array_agg(distinct g."grantId" order by g."grantId"))\n              ),1) > 0\n            ),\n            "through_objectives" AS (\n              SELECT\n                ar."activityReportId",\n                a."calculatedStatus",\n                array_agg(distinct ar."grantId" order by ar."grantId") "recipientGrantIds",\n                array_agg(distinct g."grantId" order by g."grantId") "goalGrantIds",\n                array_agg(distinct md5(o.title) order by md5(o.title)) "distinctObjectives",\n                array_agg(distinct md5(g.name) order by md5(g.name)) "distinctGoals"\n              FROM "ActivityRecipients" ar\n                JOIN "ActivityReports" a\n                ON ar."activityReportId" = a.id\n              JOIN "Grants" gr\n              ON ar."grantId" = gr.id\n              AND a."startDate" < gr."endDate"\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON ar."activityReportId" = aro."activityReportId"\n              LEFT JOIN "Objectives" o\n              ON aro."objectiveId" = o.id\n              LEFT JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "Grants" gr2\n              ON g."grantId" = gr2.id\n              AND a."startDate" < gr2."endDate"\n              WHERE g."grantId" is not null\n              GROUP BY ar."activityReportId", a."calculatedStatus"\n              HAVING\n                array_agg(distinct ar."grantId" order by ar."grantId") != array_agg(distinct g."grantId" order by g."grantId")\n                AND ARRAY_LENGTH(ARRAY(\n                  SELECT UNNEST(array_agg(distinct ar."grantId" order by ar."grantId"))\n                  INTERSECT\n                  SELECT UNNEST(array_agg(distinct g."grantId" order by g."grantId"))\n                ),1) > 0\n            ),\n            "through_both_unmerged" AS (\n              SELECT *\n              FROM "through_goals"\n              UNION\n              SELECT *\n              FROM "through_objectives"\n            ),\n            "through_both" AS (\n              SELECT\n                tbu."activityReportId",\n                tbu."calculatedStatus",\n                ARRAY_AGG(DISTINCT w.v) "recipientGrantIds",\n                ARRAY_AGG(DISTINCT x.v) "goalGrantIds",\n                ARRAY_AGG(DISTINCT y.v) "distinctObjectives",\n                ARRAY_AGG(DISTINCT z.v) "distinctGoals"\n              FROM "through_both_unmerged" tbu\n              CROSS JOIN LATERAL UNNEST(tbu."recipientGrantIds") AS w(v)\n              CROSS JOIN LATERAL UNNEST(tbu."goalGrantIds") AS x(v)\n              CROSS JOIN LATERAL UNNEST(tbu."distinctObjectives") AS y(v)\n              CROSS JOIN LATERAL UNNEST(tbu."distinctGoals") AS z(v)\n              GROUP BY tbu."activityReportId", "calculatedStatus"\n              ORDER BY tbu."activityReportId"\n            )\n            SELECT\n              *,\n              ARRAY(SELECT UNNEST("recipientGrantIds") INTERSECT SELECT UNNEST("goalGrantIds")) "intersectionGrantId",\n              ARRAY(SELECT UNNEST("recipientGrantIds") EXCEPT SELECT UNNEST("goalGrantIds")) "onlyRecipientGrantId",\n              ARRAY(SELECT UNNEST("goalGrantIds") EXCEPT SELECT UNNEST("recipientGrantIds")) "onlyGoalGrantId"\n            FROM "through_both";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 3. Identify missing goals.\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals";\n          CREATE TEMP TABLE "temp_missing_goals" AS\n          SELECT\n            ir."activityReportId",\n            md5(g.name) "goalHash",\n            g.name "name",\n            CASE\n              WHEN 'Closed' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Closed'\n              WHEN 'Suspended' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Suspended'\n              WHEN 'In Progress' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'In Progress'\n              WHEN 'Not Started' = ANY(ARRAY_AGG(DISTINCT g.status)) THEN 'Not Started'\n            END status,\n            (ARRAY_AGG(g.timeframe ORDER BY g.id desc))[1] timeframe,\n            bool_or(g."isFromSmartsheetTtaPlan")  "isFromSmartsheetTtaPlan",\n            MIN(g."createdAt") "createdAt",\n            MAX(g."updatedAt") "updatedAt",\n            ARRAY_AGG(g."closeSuspendReason" ORDER BY g.id) "closeSuspendReason",\n            ARRAY_AGG(g."closeSuspendContext" ORDER BY g.id) "closeSuspendContext",\n            MIN(g."endDate") "endDate",\n            ARRAY_AGG(g."previousStatus") "previousStatus",\n            MIN(g."goalTemplateId") "goalTemplateId",\n            MIN(g."grantId") "grantId",\n            bool_or(g."onApprovedAR") "onApprovedAR",\n            MIN(g."firstNotStartedAt") "firstNotStartedAt",\n            MAX(g."lastNotStartedAt") "lastNotStartedAt",\n            MIN(g."firstInProgressAt") "firstInProgressAt",\n            MAX(g."lastInProgressAt") "lastInProgressAt",\n            MIN(g."firstCeasedSuspendedAt") "firstCeasedSuspendedAt",\n            MAX(g."lastCeasedSuspendedAt") "lastCeasedSuspendedAt",\n            MIN(g."firstClosedAt") "firstClosedAt",\n            MAX(g."lastClosedAt") "lastClosedAt",\n            MIN(g."firstCompletedAt") "firstCompletedAt",\n            MAX(g."lastCompletedAt") "lastCompletedAt"\n          FROM "temp_incomplete_reports" ir\n          JOIN "ActivityReportGoals" arg\n          ON ir."activityReportId" = arg."activityReportId"\n          JOIN "Goals" g\n          ON arg."goalId" = g.id\n          AND g."grantId" = ANY(ir."intersectionGrantId")\n          AND md5(g.name) = ANY(ir."distinctGoals")\n          GROUP BY\n            ir."activityReportId",\n            g.name;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 4. Find missing goals for the grants identified that already exist\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_already_exist";\n          CREATE TEMP TABLE "temp_missing_goals_already_exist" AS\n          SELECT DISTINCT\n            g.id "goalId"\n          FROM "temp_incomplete_reports" ir\n          CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n          JOIN "temp_missing_goals" mg\n          ON ir."activityReportId" = mg."activityReportId"\n          AND mg."goalHash" = ANY(ir."distinctGoals")\n          LEFT JOIN "Goals" g\n          ON g."grantId" = orgi."grantId"\n          AND md5(g.name) = mg."goalHash"\n          WHERE g.id IS NOT NULL;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 5. Create missing goals for the grants identified\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_added";\n          CREATE TEMP TABLE "temp_missing_goals_added" AS\n          WITH "inserted" AS (\n            INSERT INTO "Goals"\n            (\n              name,\n              status,\n              timeframe,\n              "isFromSmartsheetTtaPlan",\n              "createdAt",\n              "updatedAt",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "endDate",\n              "previousStatus",\n              "goalTemplateId",\n              "grantId",\n              "onApprovedAR",\n              "firstNotStartedAt",\n              "lastNotStartedAt",\n              "firstInProgressAt",\n              "lastInProgressAt",\n              "firstCeasedSuspendedAt",\n              "lastCeasedSuspendedAt",\n              "firstClosedAt",\n              "lastClosedAt",\n              "firstCompletedAt",\n              "lastCompletedAt"\n            )\n            SELECT DISTINCT\n              mg.name,\n              mg.status,\n              mg.timeframe,\n              mg."isFromSmartsheetTtaPlan",\n              mg."createdAt",\n              mg."updatedAt",\n              mg."closeSuspendReason"[1] "closeSuspendReason",\n              mg."closeSuspendContext"[1] "closeSuspendContext",\n              mg."endDate",\n              mg."previousStatus"[1] "previousStatus",\n              mg."goalTemplateId",\n              orgi."grantId",\n              mg."onApprovedAR",\n              mg."firstNotStartedAt",\n              mg."lastNotStartedAt",\n              mg."firstInProgressAt",\n              mg."lastInProgressAt",\n              mg."firstCeasedSuspendedAt",\n              mg."lastCeasedSuspendedAt",\n              mg."firstClosedAt",\n              mg."lastClosedAt",\n              mg."firstCompletedAt",\n              mg."lastCompletedAt"\n            FROM "temp_incomplete_reports" ir\n            CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n            JOIN "temp_missing_goals" mg\n            ON ir."activityReportId" = mg."activityReportId"\n            AND mg."goalHash" = ANY(ir."distinctGoals")\n            LEFT JOIN "Goals" g\n            ON g."grantId" = orgi."grantId"\n            AND md5(g.name) = mg."goalHash"\n            WHERE g.id IS NULL\n            RETURNING\n              id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 6. Collect new and existing goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_goals_added_and_existing";\n          CREATE TEMP TABLE "temp_missing_goals_added_and_existing" AS\n          SELECT *\n          FROM "temp_missing_goals_already_exist"\n          UNION\n          SELECT *\n          FROM "temp_missing_goals_added";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 7. Create new ActivityReportGoals for added goals and found goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_args_added";\n          CREATE TEMP TABLE "temp_missing_args_added" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ActivityReportGoals"\n              (\n                "activityReportId",\n                "goalId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT DISTINCT\n                ir."activityReportId",\n                g.id "goalId",\n                MIN(arg2."createdAt") "createdAt",\n                MAX(arg2."updatedAt") "updatedAt"\n              FROM "temp_missing_goals_added_and_existing" mga\n              JOIN "Goals" g\n              ON mga."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              LEFT JOIN "ActivityReportGoals" arg\n              ON ir."activityReportId" = arg."activityReportId"\n              AND g.id = arg."goalId"\n              JOIN "ActivityReportGoals" arg2\n              ON ir."activityReportId" = arg2."activityReportId"\n              JOIN "Goals" g2\n              ON arg2."goalId" = g2.id\n              AND g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              WHERE arg.id IS NULL\n              GROUP BY\n                ir."activityReportId",\n                g.id\n              RETURNING\n                id "activityReportGoalId"\n            )\n            SELECT\n              "activityReportGoalId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 8. Collect and calculate onApprovedAR for newly added goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_goals_now_on_approved_ar";\n          CREATE TEMP TABLE "temp_goals_now_on_approved_ar" AS\n          SELECT\n            mga."goalId",\n            'approved' = any(array_agg(distinct ar."calculatedStatus")) "onApprovedAR"\n          FROM "temp_missing_goals_added_and_existing" mga\n          JOIN "Goals" g\n          ON mga."goalId" = g.id\n          JOIN "ActivityReportGoals" arg\n          ON mga."goalId" = arg."goalId"\n          LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n          GROUP BY mga."goalId"\n          HAVING bool_or(g."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n          -----------------------------------------------------------------------------------------------------\n          -- 9. Update onApprovedAR for goals\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_goals_on_approved_ar_updated";\n          CREATE TEMP TABLE "temp_goals_on_approved_ar_updated" AS\n          WITH\n            "updated" AS (\n              UPDATE "Goals" g\n              SET\n                "onApprovedAR" = t."onApprovedAR"\n              FROM "temp_goals_now_on_approved_ar" t\n              WHERE g.id = t."goalId"\n              RETURNING\n                id "goalId"\n            )\n            SELECT\n              "goalId"\n            FROM "updated";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 9. Identify missing objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objectives";\n          CREATE TEMP TABLE "temp_missing_objectives" AS\n          SELECT\n            ir."activityReportId",\n            md5(o.title) "objectiveHash",\n            ARRAY_AGG(DISTINCT md5(g.name)) "goalHashs",\n            MIN(o.id) "objectiveId",\n            o.title,\n            o.status,\n            MIN(o."createdAt") "createdAt",\n            MIN(o."updatedAt") "updatedAt",\n            MIN(o."objectiveTemplateId") "objectiveTemplateId",\n            MIN(o."otherEntityId") "otherEntityId",\n            BOOL_OR(o."onApprovedAR") "onApprovedAR",\n            MIN(o."firstNotStartedAt") "firstNotStartedAt",\n            MIN(o."lastNotStartedAt") "lastNotStartedAt",\n            MIN(o."firstInProgressAt") "firstInProgressAt",\n            MIN(o."lastInProgressAt") "lastInProgressAt",\n            MIN(o."firstCompleteAt") "firstCompleteAt",\n            MIN(o."lastCompleteAt") "lastCompleteAt",\n            MIN(o."firstSuspendedAt") "firstSuspendedAt",\n            MIN(o."lastSuspendedAt") "lastSuspendedAt"\n          FROM "temp_incomplete_reports" ir\n          JOIN "ActivityReportObjectives" aro\n          ON ir."activityReportId" = aro."activityReportId"\n          JOIN "Objectives" o\n          ON aro."objectiveId" = o.id\n          AND md5(o.title) = ANY(ir."distinctObjectives")\n          JOIN "Goals" g\n          ON o."goalId" = g.id\n          AND g."grantId" = ANY(ir."intersectionGrantId")\n          AND md5(g.name) = ANY(ir."distinctGoals")\n          GROUP BY\n            ir."activityReportId",\n            o.title,\n            o.status;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 10. Find missing objectives for the grants identified that already exist\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objectives_already_exist";\n          CREATE TEMP TABLE "temp_missing_objectives_already_exist" AS\n          SELECT DISTINCT\n            o.id "objectiveId"\n          FROM "temp_incomplete_reports" ir\n          CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n          JOIN "temp_missing_objectives" mo\n          ON ir."activityReportId" = mo."activityReportId"\n          JOIN "Goals" g\n          ON g."grantId" = orgi."grantId"\n          AND md5(g.name) = ANY(mo."goalHashs")\n          LEFT JOIN "Objectives" o\n          ON g.id = o."goalId"\n          and md5(o.title) = mo."objectiveHash"\n          WHERE o.id IS NOT NULL;\n\n          -----------------------------------------------------------------------------------------------------\n          -- 12. Create missing objectives for the grants identified\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objectives_added";\n          CREATE TEMP TABLE "temp_missing_objectives_added" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "Objectives"\n              (\n                "goalId",\n                title,\n                status,\n                "createdAt",\n                "updatedAt",\n                "objectiveTemplateId",\n                "otherEntityId",\n                "onApprovedAR",\n                "firstNotStartedAt",\n                "lastNotStartedAt",\n                "firstInProgressAt",\n                "lastInProgressAt",\n                "firstCompleteAt",\n                "lastCompleteAt",\n                "firstSuspendedAt",\n                "lastSuspendedAt"\n              )\n              SELECT DISTINCT\n                g.id "goalId",\n                mo.title,\n                mo.status,\n                mo."createdAt",\n                mo."updatedAt",\n                mo."objectiveTemplateId",\n                mo."otherEntityId",\n                mo."onApprovedAR",\n                mo."firstNotStartedAt",\n                mo."lastNotStartedAt",\n                mo."firstInProgressAt",\n                mo."lastInProgressAt",\n                mo."firstCompleteAt",\n                mo."lastCompleteAt",\n                mo."firstSuspendedAt",\n                mo."lastSuspendedAt"\n              FROM "temp_incomplete_reports" ir\n              CROSS JOIN unnest(ir."onlyRecipientGrantId") orgi("grantId")\n              JOIN "temp_missing_objectives" mo\n              ON ir."activityReportId" = mo."activityReportId"\n              JOIN "Goals" g\n              ON g."grantId" = orgi."grantId"\n              AND md5(g.name) = ANY(mo."goalHashs")\n              LEFT JOIN "Objectives" o\n              ON g.id = o."goalId"\n              and md5(o.title) = mo."objectiveHash"\n              WHERE o.id IS NULL\n              RETURNING\n                id "objectiveId"\n            )\n            SELECT\n              "objectiveId"\n            FROM "inserted";\n          -----------------------------------------------------------------------------------------------------\n          -- 13. Collect new and existing objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objectives_added_and_existing";\n          CREATE TEMP TABLE "temp_missing_objectives_added_and_existing" AS\n          SELECT *\n          FROM "temp_missing_objectives_already_exist"\n          UNION\n          SELECT *\n          FROM "temp_missing_objectives_added";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 14. Create new ActivityReportObjectives for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_aros_added";\n          CREATE TEMP TABLE "temp_missing_aros_added" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ActivityReportObjectives"\n              (\n                "activityReportId",\n                "objectiveId",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided"\n              )\n              SELECT\n                ir."activityReportId",\n                o.id "objectiveId",\n                MIN(aro2."createdAt") "createdAt",\n                MAX(aro2."updatedAt") "updatedAt",\n                ARRAY_AGG(aro2."ttaProvided")\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON ir."activityReportId" = aro."activityReportId"\n              AND o.id = aro."objectiveId"\n              JOIN "ActivityReportObjectives" aro2\n              ON ir."activityReportId" = aro2."activityReportId"\n              JOIN "Objectives" o2\n              ON aro2."objectiveId" = o2.id\n              AND md5(o.title) = md5(o2.title)\n              JOIN "Goals" g2\n              ON o2."goalId" = g2.id\n              AND g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              WHERE aro.id IS NULL\n              GROUP BY\n                ir."activityReportId",\n                o.id\n              RETURNING\n                id "activityReportObjectiveId"\n            )\n            SELECT\n              "activityReportObjectiveId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 15. Create new Objective files for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objective_files";\n          CREATE TEMP TABLE "temp_missing_objective_files" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ObjectiveFiles"\n              (\n                "objectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT\n                o.id "objectiveId",\n                f2."fileId",\n                MIN(f2."createdAt") "createdAt",\n                MAX(f2."updatedAt") "updatedAt"\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ObjectiveFiles" f\n              ON o.id = f."objectiveId"\n              LEFT JOIN "Goals" g2\n              ON g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              LEFT JOIN "Objectives" o2\n              ON g2.id = o2."goalId"\n              AND md5(o.title) = md5(o2.title)\n              LEFT JOIN "ObjectiveFiles" f2\n              ON o2.id = f2."objectiveId"\n              WHERE f.id IS NULL\n              AND f2."fileId" IS NOT NULL\n              GROUP BY\n                o.id,\n                f2."fileId"\n              RETURNING\n                id "objectiveFileId"\n            )\n            SELECT\n              "objectiveFileId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 16. Create new Objective resources for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objective_Resources";\n          CREATE TEMP TABLE "temp_missing_objective_Resources" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ObjectiveResources"\n              (\n                "objectiveId",\n                "userProvidedUrl",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT\n                o.id "objectiveId",\n                r2."userProvidedUrl",\n                MIN(r2."createdAt") "createdAt",\n                MAX(r2."updatedAt") "updatedAt"\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ObjectiveResources" r\n              ON o.id = r."objectiveId"\n              LEFT JOIN "Goals" g2\n              ON g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              LEFT JOIN "Objectives" o2\n              ON g2.id = o2."goalId"\n              AND md5(o.title) = md5(o2.title)\n              LEFT JOIN "ObjectiveResources" r2\n              ON o2.id = r2."objectiveId"\n              WHERE r.id IS NULL\n              AND r2."userProvidedUrl" IS NOT NULL\n              GROUP BY\n                o.id,\n                r2."userProvidedUrl"\n              RETURNING\n                id "objectiveResourceId"\n            )\n            SELECT\n              "objectiveResourceId"\n            FROM "inserted";\n\n          -----------------------------------------------------------------------------------------------------\n          -- 17. Create new Objective Roles for added and found objectives\n          -- REMOVED because ObjectiveRoles does not exist\n          -----------------------------------------------------------------------------------------------------\n            \n\n          -----------------------------------------------------------------------------------------------------\n          -- 18. Create new Objective Topics for added and found objectives\n          -----------------------------------------------------------------------------------------------------\n          DROP TABLE IF EXISTS "temp_missing_objective_Topics";\n          CREATE TEMP TABLE "temp_missing_objective_Topics" AS\n          WITH\n            "inserted" AS (\n              INSERT INTO "ObjectiveTopics"\n              (\n                "objectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n              )\n              SELECT\n                o.id "objectiveId",\n                t2."topicId",\n                MIN(t2."createdAt") "createdAt",\n                MAX(t2."updatedAt") "updatedAt"\n              FROM "temp_missing_objectives_added_and_existing" moa\n              JOIN "Objectives" o\n              ON moa."objectiveId" = o.id\n              JOIN "Goals" g\n              ON o."goalId" = g.id\n              JOIN "temp_incomplete_reports" ir\n              ON g."grantId" = ANY(ir."onlyRecipientGrantId")\n              AND md5(g.name) = ANY(ir."distinctGoals")\n              AND md5(o.title) = ANY(ir."distinctObjectives")\n              LEFT JOIN "ObjectiveTopics" t\n              ON o.id = t."objectiveId"\n              LEFT JOIN "Goals" g2\n              ON g2."grantId" = ANY(ir."intersectionGrantId")\n              AND md5(g.name) = md5(g2.name)\n              LEFT JOIN "Objectives" o2\n              ON g2.id = o2."goalId"\n              AND md5(o.title) = md5(o2.title)\n              LEFT JOIN "ObjectiveTopics" t2\n              ON o2.id = t2."objectiveId"\n              WHERE t.id IS NULL\n              AND t2."topicId" IS NOT NULL\n              GROUP BY\n                o.id,\n                t2."topicId"\n              RETURNING\n                id "objectiveTopicId"\n            )\n            SELECT\n              "objectiveTopicId"\n            FROM "inserted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 19. Collect and calculate onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_now_on_approved_ar";\n        CREATE TEMP TABLE "temp_objectives_now_on_approved_ar" AS\n        SELECT\n          moa."objectiveId",\n          'approved' = any(array_agg(distinct ar."calculatedStatus")) "onApprovedAR"\n        FROM "temp_missing_objectives_added_and_existing" moa\n        JOIN "Objectives" o\n        ON moa."objectiveId" = o.id\n        JOIN "ActivityReportObjectives" aro\n        ON moa."objectiveId" = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        GROUP BY moa."objectiveId"\n        HAVING bool_or(o."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 20. Update onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar_updated";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar_updated" AS\n        WITH\n          "updated" AS (\n            UPDATE "Objectives" o\n            SET\n              "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_objectives_now_on_approved_ar" t\n            WHERE o.id = t."objectiveId"\n            RETURNING\n              id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "updated";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 21. Collect args to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_args_to_be_deleted";\n        CREATE TEMP TABLE "temp_args_to_be_deleted" AS\n        SELECT DISTINCT\n          arg.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "ActivityReportGoals" arg\n        ON ir."activityReportId" = arg."activityReportId"\n        AND g.id = arg."goalId";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 22. Deleted args\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_args_deleted";\n        CREATE TEMP TABLE "temp_args_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "ActivityReportGoals" arg\n            USING "temp_args_to_be_deleted" argd\n            WHERE arg.id = argd.id\n            RETURNING\n              arg.id "argId"\n          )\n          SELECT\n            "argId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 23. Collect aros to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_aros_to_be_deleted";\n        CREATE TEMP TABLE "temp_aros_to_be_deleted" AS\n        SELECT DISTINCT\n          aro.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        JOIN "ActivityReportObjectives" aro\n        ON ir."activityReportId" = aro."activityReportId"\n        AND o.id = aro."objectiveId";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 24. Delete aros\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_aros_deleted";\n        CREATE TEMP TABLE "temp_aros_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "temp_aros_to_be_deleted" arod\n            WHERE aro.id = arod.id\n            RETURNING\n              aro.id "aroId"\n          )\n          SELECT\n            "aroId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 25. Collect objectives to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_to_be_deleted";\n        CREATE TEMP TABLE "temp_objectives_to_be_deleted" AS\n        SELECT\n          o.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        WHERE aro.id IS NULL;\n\n        -----------------------------------------------------------------------------------------------------\n        -- 26. Collect objectives to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar" AS\n        SELECT\n          o.id,\n          bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        JOIN "Objectives" o\n        ON g.id = o."goalId"\n        AND md5(o."title") = ANY(ir."distinctObjectives")\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        WHERE aro.id IS NOT NULL\n        GROUP\n          BY o.id\n        HAVING\n          bool_or(o."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 27. Delete Objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_deleted";\n        CREATE TEMP TABLE "temp_objectives_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "Objectives" o\n            USING "temp_objectives_to_be_deleted" od\n            WHERE o.id = od.id\n            RETURNING\n              o.id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 28. Update onApprovedAR for objectives\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_objectives_on_approved_ar_updated2";\n        CREATE TEMP TABLE "temp_objectives_on_approved_ar_updated2" AS\n        WITH\n          "updated" AS (\n            UPDATE "Objectives" o\n            SET "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_objectives_on_approved_ar" t\n            WHERE o.id = t."id"\n            RETURNING\n              o.id "objectiveId"\n          )\n          SELECT\n            "objectiveId"\n          FROM "updated";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 29. Collect goals to be deleted\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_to_be_deleted";\n        CREATE TEMP TABLE "temp_goals_to_be_deleted" AS\n        SELECT g.id\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        LEFT JOIN "Objectives" o\n        ON g.id = o."goalId"\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        WHERE arg.id IS NULL\n        AND o.id IS NULL;\n\n        -----------------------------------------------------------------------------------------------------\n        -- 30. Collect and calculate onApprovedAR for goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_on_approved_ar";\n        CREATE TEMP TABLE "temp_goals_on_approved_ar" AS\n        SELECT\n          g.id,\n          bool_or(ar."calculatedStatus" = 'approved') "onApprovedAR"\n        FROM "temp_incomplete_reports" ir\n        JOIN "Goals" g\n        ON g."grantId" = ANY(ir."onlyGoalGrantId")\n        AND md5(g."name") = ANY(ir."distinctGoals")\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        WHERE arg.id IS NOT NULL\n        GROUP BY g.id\n        HAVING bool_or(g."onApprovedAR") != ('approved' = any(array_agg(distinct ar."calculatedStatus")));\n\n        -----------------------------------------------------------------------------------------------------\n        -- 31. Delete goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_deleted";\n        CREATE TEMP TABLE "temp_goals_deleted" AS\n        WITH\n          "deleted" AS (\n            DELETE FROM "Goals" g\n            USING "temp_goals_to_be_deleted" gd\n            WHERE g.id = gd.id\n            RETURNING\n              g.id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "deleted";\n\n        -----------------------------------------------------------------------------------------------------\n        -- 32. Update onApprovedAR for goals\n        -----------------------------------------------------------------------------------------------------\n        DROP TABLE IF EXISTS "temp_goals_on_approved_ar_updated2";\n        CREATE TEMP TABLE "temp_goals_on_approved_ar_updated2" AS\n        WITH\n          "updated" AS (\n            UPDATE "Goals" g\n            SET "onApprovedAR" = t."onApprovedAR"\n            FROM "temp_goals_on_approved_ar" t\n            WHERE g.id = t."id"\n            RETURNING\n              g.id "goalId"\n          )\n          SELECT\n            "goalId"\n          FROM "updated";\n\n\n        -----------------------------------------------------------------------------------------------------\n        -- 33. Output of some counts from steps above\n        -----------------------------------------------------------------------------------------------------\n        /*\n        SELECT\n        'incomplete_reports' "name",\n        count(*) cnt\n        FROM "temp_incomplete_reports"\n        UNION\n        SELECT\n        'missing_goals_added' "name",\n        count(*) cnt\n        FROM "temp_missing_goals_added_and_existing"\n        UNION\n        SELECT\n        'missing_args_added' "name",\n        count(*) cnt\n        FROM "temp_missing_args_added"\n        UNION\n        SELECT\n        'goals_on_approved_ar_updated' "name",\n        count(*) cnt\n        FROM "temp_goals_on_approved_ar_updated"\n        UNION\n        SELECT\n        'missing_objectives_added' "name",\n        count(*) cnt\n        FROM "temp_missing_objectives_added_and_existing"\n        UNION\n        SELECT\n        'missing_aros_added' "name",\n        count(*) cnt\n        FROM "temp_missing_aros_added"\n        UNION\n        SELECT\n        'objectives_on_approved_ar_updated' "name",\n        count(*) cnt\n        FROM "temp_objectives_on_approved_ar_updated";\n        */
Executing (691bb87b-5c67-4f03-afa3-3d411fc0c79e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230124000000-missing-objectives: migrated (0.159s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230125000000-rtr-goal-performance: migrating =======
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): START TRANSACTION;
Connection validated successfully
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230125000000-rtr-goal-performance.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "public"."Goals" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "public"."Objectives" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "public"."ObjectiveFiles" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "public"."ObjectiveResources" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "public"."ObjectiveTopics" ADD COLUMN "onAR" BOOLEAN DEFAULT false;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "public"."ObjectiveFiles" ADD COLUMN "onApprovedAR" BOOLEAN DEFAULT false;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "public"."ObjectiveResources" ADD COLUMN "onApprovedAR" BOOLEAN DEFAULT false;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "public"."ObjectiveTopics" ADD COLUMN "onApprovedAR" BOOLEAN DEFAULT false;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): WITH\n            "GoalsOnARs" AS (\n              SELECT\n                g.id,\n                (arg.id IS NOT NULL) "onAR"\n              FROM "Goals" g\n              LEFT JOIN "ActivityReportGoals" arg\n              ON g.id = arg."goalId"\n            )\n          UPDATE "Goals" g\n          SET "onAR" = goa."onAR"\n          FROM "GoalsOnARs" goa\n          WHERE g.id = goa.id;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): WITH\n            "ObjectivesOnARs" AS (\n              SELECT\n                o.id,\n                (aro.id IS NOT NULL) "onAR"\n              FROM "Objectives" o\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON o.id = aro."objectiveId"\n            )\n          UPDATE "Objectives" o\n          SET "onAR" = ooa."onAR"\n          FROM "ObjectivesOnARs" ooa\n          WHERE o.id = ooa.id;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): WITH\n            "ObjectiveFilesOnARs" AS (\n              SELECT\n                "of"."id",\n                (arof.id IS NOT NULL) "onAR",\n                (arof.id IS NOT NULL\n                AND ar."calculatedStatus"::text = 'approved') "onApprovedAR"\n              FROM "ObjectiveFiles" "of"\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON "of"."objectiveId" = aro."objectiveId"\n              LEFT JOIN "ActivityReportObjectiveFiles" arof\n              ON aro.id = arof."activityReportObjectiveId"\n              AND "of"."fileId" = arof."fileId"\n              LEFT JOIN "ActivityReports" ar\n              ON aro."activityReportId" = ar.id\n            )\n          UPDATE "ObjectiveFiles" "of"\n          SET\n            "onAR" = ofoa."onAR",\n            "onApprovedAR" = ofoa."onApprovedAR"\n          FROM "ObjectiveFilesOnARs" ofoa\n          WHERE "of".id = ofoa.id;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): WITH\n            "ObjectiveResourcesOnARs" AS (\n              SELECT\n                "or"."id",\n                (aror.id IS NOT NULL) "onAR",\n                (aror.id IS NOT NULL\n                AND ar."calculatedStatus"::text = 'approved') "onApprovedAR"\n              FROM "ObjectiveResources" "or"\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON "or"."objectiveId" = aro."objectiveId"\n              LEFT JOIN "ActivityReportObjectiveResources" aror\n              ON aro.id = aror."activityReportObjectiveId"\n              AND "or"."userProvidedUrl" = aror."userProvidedUrl"\n              LEFT JOIN "ActivityReports" ar\n              ON aro."activityReportId" = ar.id\n            )\n          UPDATE "ObjectiveResources" "or"\n          SET\n            "onAR" = oroa."onAR",\n            "onApprovedAR" = oroa."onApprovedAR"\n          FROM "ObjectiveResourcesOnARs" oroa\n          WHERE "or".id = oroa.id;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): WITH\n            "ObjectiveTopicsOnARs" AS (\n              SELECT\n                ot."id",\n                (arot.id IS NOT NULL) "onAR",\n                (arot.id IS NOT NULL\n                AND ar."calculatedStatus"::text = 'approved') "onApprovedAR"\n              FROM "ObjectiveTopics" ot\n              LEFT JOIN "ActivityReportObjectives" aro\n              ON ot."objectiveId" = aro."objectiveId"\n              LEFT JOIN "ActivityReportObjectiveTopics" arot\n              ON aro.id = arot."activityReportObjectiveId"\n              AND ot."topicId" = arot."topicId"\n              LEFT JOIN "ActivityReports" ar\n              ON aro."activityReportId" = ar.id\n            )\n          UPDATE "ObjectiveTopics" ot\n          SET\n            "onAR" = otoa."onAR",\n            "onApprovedAR" = otoa."onApprovedAR"\n          FROM "ObjectiveTopicsOnARs" otoa\n          WHERE ot.id = otoa.id;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "Goals" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "Goals" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "Goals" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "Objectives" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "Objectives" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "Objectives" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "ObjectiveResources" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "ObjectiveResources" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "ObjectiveResources" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onAR" SET NOT NULL;ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onAR" SET DEFAULT false;ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onAR" TYPE BOOLEAN;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onApprovedAR" SET NOT NULL;ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onApprovedAR" SET DEFAULT false;ALTER TABLE "ObjectiveFiles" ALTER COLUMN "onApprovedAR" TYPE BOOLEAN;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "ObjectiveResources" ALTER COLUMN "onApprovedAR" SET NOT NULL;ALTER TABLE "ObjectiveResources" ALTER COLUMN "onApprovedAR" SET DEFAULT false;ALTER TABLE "ObjectiveResources" ALTER COLUMN "onApprovedAR" TYPE BOOLEAN;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onApprovedAR" SET NOT NULL;ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onApprovedAR" SET DEFAULT false;ALTER TABLE "ObjectiveTopics" ALTER COLUMN "onApprovedAR" TYPE BOOLEAN;
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (8bc2d4e5-5051-4b70-b0ae-d668248950ea): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230125000000-rtr-goal-performance: migrated (0.196s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230205000000-add-resources-dashboard-feature-flag: migrating =======
Executing (default): DO $$ BEGIN\n          ALTER TYPE "enum_Users_flags" ADD VALUE 'resources_dashboard';\n        EXCEPTION\n          WHEN duplicate_object THEN null;\n        END $$;
Connection validated successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230205000000-add-resources-dashboard-feature-flag: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230206000000-resources-phase-0: migrating =======
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): START TRANSACTION;
Connection validated successfully
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230206000000-resources-phase-0.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-subpart-eligibility-recruitment-selection-enrollment-attendance'\n            WHERE id in (555)\n            AND "userProvidedUrl" = '1302 Subpart A—Eligibility, Recruitment, Selection, Enrollment, and Attendance | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-subpart-eligibility-recruitment-selection-enrollment-attendance'\n            WHERE id in (2594)\n            AND "userProvidedUrl" = '1302 Subpart E—Family and Community Engagement Program Services | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/coaching-corner-series https://cultivatelearning.uw.edu/circle-time-magazine/'\n            WHERE id in (2729)\n            AND "userProvidedUrl" = 'Coaching Corner Series | ECLKC (hhs.gov), Circle Time Magazine - Cultivate Learning (uw.edu) ';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/fiscal-management/article/comparability-wages'\n            WHERE id in (2085)\n            AND "userProvidedUrl" = 'Comparability of Wages | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/program-planning/foundations-excellence/foundations-excellence'\n            WHERE id in (1799, 1800)\n            AND "userProvidedUrl" = 'Foundations for Excellence | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/guiding-questions-active-supervision-safety'\n            WHERE id in (680)\n            AND "userProvidedUrl" = 'Guiding Questions for Active Supervision and Safety | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii https://eclkc.ohs.acf.hhs.gov/professional-development/article/15-minute-service-suites'\n            WHERE id in (568)\n            AND "userProvidedUrl" = 'Head Start Performance Standards: Head Start Program Performance Standards | ECLKC (hhs.gov)  15-Minute In-Service Suites:https://eclkc.ohs.acf.hhs.gov/professional-development/article/15-minute-service-suites';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-91-staff-qualifications-competency-requirements'\n            WHERE id in (451, 452)\n            AND "userProvidedUrl" = 'Head Start Program Performancehttps://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-91-staff-qualifications-competency-requirements';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-44-child-nutrition https://eclkc.ohs.acf.hhs.gov/sites/default/files/video/attachments/family-style-dining-tips.pdf'\n            WHERE id in (2577)\n            AND "userProvidedUrl" = 'Head Start Program Performance Standards 1302.44 https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-44-child-nutrition  Tips for Family Style Dining https://eclkc.ohs.acf.hhs.gov/sites/default/files/video/attachments/family-style-dining-tips.pdf';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-91-staff-qualifications-competency-requirements'\n            WHERE id in (1371, 1372)\n            AND "userProvidedUrl" = 'Head Start Program Performance Standards- 1302.91 Staff qualifications and competency requirements https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-91-staff-qualifications-competency-requirements';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/head-start-work-heart-work-ohs-priorities'\n            WHERE id in (252)\n            AND "userProvidedUrl" = 'Head Start Work Is Heart Work: OHS Priorities | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-subpart-eligibility-recruitment-selection-enrollment-attendance'\n            WHERE id in (2598)\n            AND "userProvidedUrl" = 'http://1302 Subpart E—Family and Community Engagement Program Services | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-subpart-eligibility-recruitment-selection-enrollment-attendance'\n            WHERE id in (2466)\n            AND "userProvidedUrl" = 'http://1302 Subpart E—Family and Community Engagement Program Services | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-11-determining-community-strengths-needs-resources https://eclkc.ohs.acf.hhs.gov/program-planning/community-assessment-foundation-program-planning-head-start/community-assessment-foundation-program-planning-head-start'\n            WHERE id in (11314, 11315, 11930)\n            AND "userProvidedUrl" = 'http://eclkc.ohs.hhs.gov/45CFR 1302.11(b)(2) Community Assessment: The Foundation for Program Planning';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1302-11-determining-community-strengths-needs-resources https://eclkc.ohs.acf.hhs.gov/program-planning/community-assessment-foundation-program-planning-head-start/community-assessment-foundation-program-planning-head-start'\n            WHERE id in (11956, 11957, 12699)\n            AND "userProvidedUrl" = 'http://eclkc.ohs.hhs.gov/45CFR 1302.11(b)(2) Community Assessment: The Foundation for Program Planning';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/family-engagement/article/journeys-hope-courage'\n            WHERE id in (2600)\n            AND "userProvidedUrl" = 'http://Journeys of Hope and Courage | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/family-engagement/article/journeys-hope-courage'\n            WHERE id in (2468)\n            AND "userProvidedUrl" = 'http://Journeys of Hope and Courage | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/school-readiness/article/parent-family-community-engagement-pfce-framework'\n            WHERE id in (2599)\n            AND "userProvidedUrl" = 'http://Parent, Family, and Community Engagement (PFCE) Framework | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/school-readiness/article/parent-family-community-engagement-pfce-framework'\n            WHERE id in (2467)\n            AND "userProvidedUrl" = 'http://Parent, Family, and Community Engagement (PFCE) Framework | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://childrenslearninginstitute.org/resources/'\n            WHERE id in (10199)\n            AND "userProvidedUrl" = 'https://childrenslearninginstitute.org/resources/ https://';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/importance-schedules-routines https://eclkc.ohs.acf.hhs.gov/school-readiness/ https://challengingbehavior.org/pyramid-model/behavior-intervention/pbs/'\n            WHERE id in (1297, 1300, 1303, 2083)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/importance-schedules-routines https://eclkc.ohs.acf.hhs.gov/school-readiness/https://challengingbehavior.org/pyramid-model/behavior-intervention/pbs/';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/importance-schedules-routines https://eclkc.ohs.acf.hhs.gov/school-readiness/ https://challengingbehavior.org/pyramid-model/behavior-intervention/pbs/'\n            WHERE id in (1325, 1328, 1950)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/about-us/article/importance-schedules-routines https://eclkc.ohs.acf.hhs.gov/school-readiness/https://challengingbehavior.org/pyramid-model/behavior-intervention/pbs/';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/browse/keyword/relationship-based-practices https://eclkc.ohs.acf.hhs.gov/family-engagement/relationship-based-competencies-support-family-engagement/relationship-based-competencies-support-family-engagement'\n            WHERE id in (12731)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/browse/keyword/relationship-based-practices Relationship-Based Competencies to Support Family Engagement (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/browse/keyword/relationship-based-practices https://eclkc.ohs.acf.hhs.gov/family-engagement/relationship-based-competencies-support-family-engagement/relationship-based-competencies-support-family-engagement'\n            WHERE id in (13548)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/browse/keyword/relationship-based-practices Relationship-Based Competencies to Support Family Engagement (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide https://eclkc.ohs.acf.hhs.gov/video/expectations-2022-2023-program-year'\n            WHERE id in (1248)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide, Expectations for the 2022-2023 Program Year (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide https://eclkc.ohs.acf.hhs.gov/video/expectations-2022-2023-program-year'\n            WHERE id in (1270)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide, Expectations for the 2022-2023 Program Year (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide https://eclkc.ohs.acf.hhs.gov/video/expectations-2022-2023-program-year'\n            WHERE id in (190)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/children-disabilities/disability-services-coordinator-orientation-guide/disability-services-coordinator-orientation-guide, Expectations for the 2022-2023 Program Year (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15-minutos'\n            WHERE id in (12220, 12223, 12226, 12229, 12232, 12235, 12238, 12241)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15- minutos';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15-minutos'\n            WHERE id in (13026, 13029, 13032, 13035, 13038, 13041, 13044, 13047)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15- minutos';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15-minutos'\n            WHERE id in (190)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/es/desarrollo-profesional/articulo/conjuntos-de-materiales-de-capacitacion-de-15- minutos';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act'\n            WHERE id in (16147, 16148, 16149, 16150)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/Head Start Act';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-642-powers-functions-head-start-agencies'\n            WHERE id in (16151, 16152, 16153, 16154)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/Head Start Act 642 (d)(2)(A-I)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-642-powers-functions-head-start-agencies'\n            WHERE id in (17183, 17184, 17185, 17186)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/Head Start Act 642 (d)(2)(A-I)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/human-resources/home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledge-skills'\n            WHERE id in (166)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/humanresources/ home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledgeskills';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/human-resources/home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledge-skills'\n            WHERE id in (152)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/humanresources/ home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledgeskills';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/human-resources/home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledge-skills'\n            WHERE id in (49)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/humanresources/ home-visitor-supervisors-handbook/home-based-staff-qualifications-knowledgeskills';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (789)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/mental-health/article/understanding-trauma-  healing-adults';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (780)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/mental-health/article/understanding-trauma-  healing-adults';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (13776, 13777, 13778, 13779, 13780, 13781, 13782, 13783, 13784)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl House Framework, Early Childhood Learning and Outcomes Framework, Parent and Family Engagement Framework, Education Manager’s Calendar, Head Start Program Performance Standards.';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (14651, 14652, 14653, 14654, 14655, 14656, 14657, 14658, 14659)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl House Framework, Early Childhood Learning and Outcomes Framework, Parent and Family Engagement Framework, Education Manager’s Calendar, Head Start Program Performance Standards.';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (15724)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl Program leaders guide PBCIA resources for practice-based coaching. CLASS crosswalk, 15-minute in-service suite creating a caring community, IPD Beginning Teacher Series';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (16729)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl Program leaders guide PBCIA resources for practice-based coaching. CLASS crosswalk, 15-minute in-service suite creating a caring community, IPD Beginning Teacher Series';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (839)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/ncecdtl Program leaders guide PBCIA resources for practice-based coaching. CLASS crosswalk, 15-minute in-service suite creating a caring community, IPD Beginning Teacher Series';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-648a-staff-qualifications-development'\n            WHERE id in (168)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/headstart- act/sec-648a-staff-qualifications-development';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-648a-staff-qualifications-development'\n            WHERE id in (154)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/headstart- act/sec-648a-staff-qualifications-development';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-act/sec-648a-staff-qualifications-development'\n            WHERE id in (51)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/headstart- act/sec-648a-staff-qualifications-development';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-program-performance-standards-showcase/safety-practices https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1304-1-purpose https://eclkc.ohs.acf.hhs.gov/program-management'\n            WHERE id in (14927)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-program-performance-standards-showcase/safety-practices 1304.1 Purpose. | ECLKC (hhs.gov) Program Management | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-program-performance-standards-showcase/safety-practices https://eclkc.ohs.acf.hhs.gov/policy/45-cfr-chap-xiii/1304-1-purpose https://eclkc.ohs.acf.hhs.gov/program-management'\n            WHERE id in (15849)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/policy/head-start-program-performance-standards-showcase/safety-practices 1304.1 Purpose. | ECLKC (hhs.gov) Program Management | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-components-implementation-strategies'\n            WHERE id in (12642, 12643, 12644, 12645, 12646, 12647, 12648, 12649, 12650, 12651, 12652, 12653, 12654, 12655, 12656, 12657)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional- development/article/practice- based-coaching- components-implementation-strategies';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-components-implementation-strategies'\n            WHERE id in (13459, 13460, 13461, 13462, 13463, 13464, 13465, 13466, 13467, 13468, 13469, 13470, 13471, 13472, 13473, 13474)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional- development/article/practice- based-coaching- components-implementation-strategies';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-pbc'\n            WHERE id in (12566, 12568, 12570, 12572, 12574, 12577, 12579, 12581, 12583, 12585)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professionaldevelopment/ article/practice-based-coaching-pbc';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-pbc'\n            WHERE id in (13378, 13380, 13382, 13384, 13385)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professionaldevelopment/ article/practice-based-coaching-pbc';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/program-planning/article/program-planning-cycle https://eclkc.ohs.acf.hhs.gov/organizational-leadership/article/management-systems-wheel'\n            WHERE id in (297, 299, 301, 303, 305, 307, 309, 311, 313, 315)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/program-planning/article/program-planning-cycle  Management Systems Wheel https://eclkc.ohs.acf.hhs.gov/organizational-leadership/article/management-systems-wheel';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/education-manager-planning-calendar https://eclkc.ohs.acf.hhs.gov/video/expectations-2022-2023-program-year'\n            WHERE id in (1282)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/education-manager-planning-calendar, Expectations for the 2022-2023 Program Year (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=A-Z%20School%20Readiness&start=0'\n            WHERE id in (17046)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=A-Z%20School%20Readiness&start=0&filter=&site=*';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=A-Z%20School%20Readiness&start=0'\n            WHERE id in (18119)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=A-Z%20School%20Readiness&start=0&filter=&site=*';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=ERSEA&start=10'\n            WHERE id in (558)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=ERSEA&start=10&filter=&site=*';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=ERSEA&start=10'\n            WHERE id in (543, 1396)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q=ERSEA&start=10&filter=&site=*';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/sites/default/files/pdf/health-competencies-assessment.pdf https://eclkc.ohs.acf.hhs.gov/health-services-management/article/head-start-health-services-competencies'\n            WHERE id in (11104)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/sites/default/files/pdf/health-competencies-assessment.pdf Health Service Competencies';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/sites/default/files/pdf/health-competencies-assessment.pdf https://eclkc.ohs.acf.hhs.gov/health-services-management/article/head-start-health-services-competencies'\n            WHERE id in (11746)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/sites/default/files/pdf/health-competencies-assessment.pdf Health Service Competencies';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/organizational-leadership/article/management-systems-wheel'\n            WHERE id in (11309)\n            AND "userProvidedUrl" = 'https://eclkc.ohs.hhs.gov/management Head Start Management Wheel Systems';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://mypeers.mangoapps.com/ce/pulse/user/teams/project_teams/uploaded_files?project_id=1360260&folder=6182710'\n            WHERE id in (9328, 9329, 9330, 9331, 9332, 9333, 9334, 9335, 15055, 15056, 15057, 15058, 15059, 15060)\n            AND "userProvidedUrl" = 'https://mypeers.mangoapps.com/ce/pulse/user/teams/project_teams/uploaded_ files?project_id=1360260&folder=6182710';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'https://mypeers.mangoapps.com/ce/pulse/user/teams/project_teams/uploaded_files?project_id=1360260&folder=6182710'\n            WHERE id in (10585, 10586, 10587, 10588, 10589, 10590, 10591, 10592, 15979, 15980, 15981, 15982, 15983, 15984)\n            AND "userProvidedUrl" = 'https://mypeers.mangoapps.com/ce/pulse/user/teams/project_teams/uploaded_ files?project_id=1360260&folder=6182710';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (2406)\n            AND "userProvidedUrl" = 'https://nrckids.org/files/CFOC4 pdf- FINAL.pdf';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ActivityReportObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (2272, 17220)\n            AND "userProvidedUrl" = 'https://nrckids.org/files/CFOC4 pdf- FINAL.pdf';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'undefined'\n            WHERE id in (10295)\n            AND "userProvidedUrl" = 'https://www.healthystartepic.org/wp-content/uploads/2019/04/AStEPPOpioidUseDiscussionGuide.pdf Mothers and Babies: An Intervention to Prevent Postpartum Depression (webinar)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/family-engagement/article/journeys-hope-courage'\n            WHERE id in (2596)\n            AND "userProvidedUrl" = 'Journeys of Hope and Courage | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/school-readiness/article/parent-family-community-engagement-pfce-framework'\n            WHERE id in (2595)\n            AND "userProvidedUrl" = 'Parent, Family, and Community Engagement (PFCE) Framework | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/professional-development/article/practice-based-coaching-pbc https://eclkc.ohs.acf.hhs.gov/publication/practice-based-coaching-pbc-coach-competencies'\n            WHERE id in (779)\n            AND "userProvidedUrl" = 'Practice-Based Coaching (PBC) | ECLKC (hhs.gov)  The Practice-Based Coaching Coach Competencies (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/search/eclkc?q='\n            WHERE id in (556)\n            AND "userProvidedUrl" = 'Search | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://youtu.be/u4ZoJKF_VuA'\n            WHERE id in (2087)\n            AND "userProvidedUrl" = 'Start with why -- how great leaders inspire action | Simon Sinek | TEDxPugetSound - YouTube';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveTemplateResources"\n            SET "userProvidedUrl" = 'https://youtu.be/u4ZoJKF_VuA'\n            WHERE id in (573)\n            AND "userProvidedUrl" = 'Start with why -- how great leaders inspire action | Simon Sinek | TEDxPugetSound - YouTube';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/family-support-well-being/article/taking-care-ourselves-stress-relaxation'\n            WHERE id in (934)\n            AND "userProvidedUrl" = 'Taking Care of Ourselves: Stress and Relaxation | ECLKC (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/practice-based-coaching-pbc-coach-competencies'\n            WHERE id in (782)\n            AND "userProvidedUrl" = 'The Practice-Based Coaching Coach Competencies (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://eclkc.ohs.acf.hhs.gov/publication/transportation-services-checklist'\n            WHERE id in (1365)\n            AND "userProvidedUrl" = 'Transportation Services Checklist (hhs.gov)';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'https://www.federalregister.gov/documents/2019/11/26/2019-25634/head-start-program'\n            WHERE id in (9265)\n            AND "userProvidedUrl" = 'www.federalregister.gov/documents/2019/11/26/2019-25634/head-start-program';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): UPDATE "ObjectiveResources"\n            SET "userProvidedUrl" = 'http://www.teachstone.com'\n            WHERE id in (774, 775, 776)\n            AND "userProvidedUrl" = 'www.teachstone.com';
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): WITH\n      "ActivityReportObjectiveResourcesURLs" AS (\n        SELECT\n          id,\n          (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          "userProvidedUrl",\n          "activityReportObjectiveId",\n          "createdAt",\n          "updatedAt"\n        FROM "ActivityReportObjectiveResources"\n      ),\n      "ActivityReportObjectiveResourcesSource" AS (\n        SELECT\n          ru.id,\n          u.url,\n          ru."userProvidedUrl",\n          ru."activityReportObjectiveId",\n          ru."createdAt",\n          ru."updatedAt"\n        FROM "ActivityReportObjectiveResources" r\n        JOIN "ActivityReportObjectiveResourcesURLs" ru\n        ON r.id = ru.id\n        CROSS JOIN UNNEST(ru.urls) u(url)\n        WHERE r."userProvidedUrl" like '%' || u.url || '%'\n        AND trim(r."userProvidedUrl") != u.url\n        ORDER BY r.id\n      ),\n      "ActivityReportObjectiveResourcesCounts" AS (\n        SELECT\n          id,\n          count(url) cnt\n        FROM "ActivityReportObjectiveResourcesSource"\n        GROUP BY id\n      ),\n      "UpdateActivityReportObjectiveResources" AS (\n        UPDATE "ActivityReportObjectiveResources" "or"\n        SET\n          "userProvidedUrl" = ors.url\n        FROM "ActivityReportObjectiveResourcesSource" ors\n        JOIN "ActivityReportObjectiveResourcesCounts" orc\n        ON ors.id = orc.id\n        WHERE "or".id = ors.id\n        AND orc.cnt = 1\n        RETURNING\n          "or".id "activityReportObjectiveResourceId"\n      ),\n      "NewActivityReportObjectiveResources" AS (\n        INSERT INTO "ActivityReportObjectiveResources" (\n          "userProvidedUrl",\n          "activityReportObjectiveId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          ors.url "userProvidedUrl",\n          ors."activityReportObjectiveId",\n          ors."createdAt",\n          ors."updatedAt"\n        FROM "ActivityReportObjectiveResourcesSource" ors\n        JOIN "ActivityReportObjectiveResourcesCounts" orc\n        ON ors.id = orc.id\n        WHERE orc.cnt != 1\n        RETURNING\n          id "activityReportObjectiveResourceId"\n      ),\n      "DeleteActivityReportObjectiveResources" AS (\n        DELETE FROM "ActivityReportObjectiveResources" "or"\n        USING "ActivityReportObjectiveResourcesCounts" orc\n        WHERE "or".id = "orc".id\n        AND orc.cnt != 1\n        RETURNING\n          "or".id "activityReportObjectiveResourceId"\n      ),\n      "MalformedActivityReportObjectiveResources" AS (\n        SELECT\n          r.id\n        FROM "ActivityReportObjectiveResources" r\n        LEFT JOIN "ActivityReportObjectiveResourcesURLs" ru\n        ON r.id = ru.id\n        WHERE ru.id IS NULL\n      ),\n      "DeleteMalformedActivityReportObjectiveResources" AS (\n        DELETE FROM "ActivityReportObjectiveResources" "or"\n        USING "MalformedActivityReportObjectiveResources" mor\n        WHERE "or".id = "mor".id\n        RETURNING\n          "or".id "activityReportObjectiveResourceId"\n      ),\n      "AffectedActivityReportObjectiveResources" AS (\n        SELECT\n          "activityReportObjectiveResourceId",\n          'updated' "action",\n          'ActivityReportObjectiveResources' "table"\n        FROM "UpdateActivityReportObjectiveResources"\n        UNION\n        SELECT\n          "activityReportObjectiveResourceId",\n          'created' "action",\n          'ActivityReportObjectiveResources' "table"\n        FROM "NewActivityReportObjectiveResources"\n        UNION\n        SELECT\n          "activityReportObjectiveResourceId",\n          'replaced' "action",\n          'ActivityReportObjectiveResources' "table"\n        FROM "DeleteActivityReportObjectiveResources"\n        UNION\n        SELECT\n          "activityReportObjectiveResourceId",\n          'removed' "action",\n          'ActivityReportObjectiveResources' "table"\n        FROM "DeleteMalformedActivityReportObjectiveResources"\n      ),\n      "ActivityReportObjectiveResourcesSync" AS (\n        SELECT\n          aro."objectiveId",\n          aror."userProvidedUrl",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          true "onAR",\n          bool_or(COALESCE(ar."calculatedStatus"::text, '') = 'approved') "onApprovedAR"\n        FROM "ActivityReportObjectiveResources" aror\n        JOIN "AffectedActivityReportObjectiveResources" aaror\n        ON aror.id = aaror."activityReportObjectiveResourceId"\n        AND aaror."action" IN ('updated', 'created')\n        JOIN "ActivityReportObjectives" aro\n        ON aror."activityReportObjectiveId" = aro.id\n        JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        GROUP BY\n          aro."objectiveId",\n          aror."userProvidedUrl"\n      ),\n      "UpdateObjectiveResources" AS (\n        UPDATE "ObjectiveResources" "or"\n        SET\n          "createdAt" = LEAST("or"."createdAt",arors."createdAt"),\n          "updatedAt" = GREATEST("or"."updatedAt",arors."updatedAt"),\n          "onAR" = ("or"."onAR" OR arors."onAR"),\n          "onApprovedAR" = ("or"."onApprovedAR" OR arors."onApprovedAR")\n        FROM "ActivityReportObjectiveResourcesSync" arors\n        WHERE "or"."objectiveId" = arors."objectiveId"\n        AND "or"."userProvidedUrl" = arors."userProvidedUrl"\n        RETURNING\n          id "objectiveResourceId"\n      ),\n      "NewObjectiveResources" AS (\n        INSERT INTO "ObjectiveResources" (\n          "userProvidedUrl",\n          "objectiveId",\n          "createdAt",\n          "updatedAt",\n          "onAR",\n          "onApprovedAR"\n        )\n        SELECT\n          arors."userProvidedUrl",\n          arors."objectiveId",\n          arors."createdAt",\n          arors."updatedAt",\n          arors."onAR",\n          arors."onApprovedAR"\n        FROM  "ActivityReportObjectiveResourcesSync" arors\n        LEFT JOIN "ObjectiveResources" "or"\n        ON "or"."objectiveId" = arors."objectiveId"\n        AND "or"."userProvidedUrl" = arors."userProvidedUrl"\n        WHERE "or".id IS NULL\n        RETURNING\n          id "objectiveResourceId"\n      ),\n      "AffectedObjectiveResources" AS (\n        SELECT\n          "objectiveResourceId",\n          'updated' "action",\n          'ObjectiveResources' "table"\n        FROM "UpdateObjectiveResources"\n        UNION\n        SELECT\n          "objectiveResourceId",\n          'created' "action",\n          'ObjectiveResources' "table"\n        FROM "NewObjectiveResources"\n      ),\n      "ObjectiveResourcesSync" AS (\n        SELECT\n          "o"."objectiveTemplateId",\n          "or"."userProvidedUrl",\n          MIN("or"."createdAt") "createdAt",\n          MAX("or"."updatedAt") "updatedAt"\n        FROM "ObjectiveResources" "or"\n        JOIN "AffectedObjectiveResources" aor\n        ON "or".id = aor."objectiveResourceId"\n        AND aor."action" IN ('updated', 'created')\n        JOIN "Objectives" o\n        ON "or"."objectiveId" = o.id\n        WHERE o."objectiveTemplateId" IS NOT NULL\n        GROUP BY\n          "o"."objectiveTemplateId",\n          "or"."userProvidedUrl"\n      ),\n      "UpdateObjectiveTemplateResources" AS (\n        UPDATE "ObjectiveTemplateResources" "otr"\n        SET\n          "createdAt" = LEAST("otr"."createdAt",ors."createdAt"),\n          "updatedAt" = GREATEST("otr"."updatedAt",ors."updatedAt")\n        FROM "ObjectiveResourcesSync" ors\n        WHERE "otr"."objectiveTemplateId" = ors."objectiveTemplateId"\n        AND "otr"."userProvidedUrl" = ors."userProvidedUrl"\n        RETURNING\n          id "objectiveTemplateResourceId"\n      ),\n      "NewObjectiveTemplateResources" AS (\n        INSERT INTO "ObjectiveTemplateResources" (\n          "userProvidedUrl",\n          "objectiveTemplateId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          ors."userProvidedUrl",\n          ors."objectiveTemplateId",\n          ors."createdAt",\n          ors."updatedAt"\n        FROM  "ObjectiveResourcesSync" ors\n        LEFT JOIN "ObjectiveTemplateResources" "otr"\n        ON "otr"."objectiveTemplateId" = ors."objectiveTemplateId"\n        AND "otr"."userProvidedUrl" = ors."userProvidedUrl"\n        WHERE "otr".id IS NULL\n        RETURNING\n          id "objectiveTemplateResourceId"\n      ),\n      "AffectedObjectiveTemplateResources" AS (\n        SELECT\n          "objectiveTemplateResourceId",\n          'updated' "action",\n          'ObjectiveTemplateResources' "table"\n        FROM "UpdateObjectiveTemplateResources"\n        UNION\n        SELECT\n          "objectiveTemplateResourceId",\n          'created' "action",\n          'ObjectiveTemplateResources' "table"\n        FROM "NewObjectiveTemplateResources"\n      )\n      SELECT\n        "table",\n        "action",\n        count("activityReportObjectiveResourceId")\n      FROM "AffectedActivityReportObjectiveResources"\n      GROUP BY\n        "table",\n        "action"\n      UNION\n      SELECT\n        "table",\n        "action",\n        count("objectiveResourceId")\n      FROM "AffectedObjectiveResources"\n      GROUP BY\n        "table",\n        "action"\n      UNION\n      SELECT\n        "table",\n        "action",\n        count("objectiveTemplateResourceId")\n      FROM "AffectedObjectiveTemplateResources"\n      GROUP BY\n        "table",\n        "action";
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): WITH\n        "ObjectiveResourcesURLs" AS (\n            SELECT\n                id,\n                (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n                "userProvidedUrl",\n                "objectiveId",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n            FROM "ObjectiveResources"\n        ),\n        "ObjectiveResourcesSource" AS (\n            SELECT\n                ru.id,\n                u.url,\n                ru."userProvidedUrl",\n                ru."objectiveId",\n                ru."createdAt",\n                ru."updatedAt",\n                ru."onAR",\n                ru."onApprovedAR"\n            FROM "ObjectiveResources" r\n            JOIN "ObjectiveResourcesURLs" ru\n            ON r.id = ru.id\n            CROSS JOIN UNNEST(ru.urls) u(url)\n            WHERE r."userProvidedUrl" like '%' || u.url || '%'\n            AND trim(r."userProvidedUrl") != u.url\n            ORDER BY r.id\n        ),\n        "ObjectiveResourcesCounts" AS (\n            SELECT\n                id,\n                count(url) cnt\n            FROM "ObjectiveResourcesSource"\n            GROUP BY id\n        ),\n        "UpdateObjectiveResources" AS (\n            UPDATE "ObjectiveResources" "or"\n            SET\n                "userProvidedUrl" = ors.url\n            FROM "ObjectiveResourcesSource" ors\n            JOIN "ObjectiveResourcesCounts" orc\n            ON ors.id = orc.id\n            WHERE "or".id = ors.id\n            AND orc.cnt = 1\n            RETURNING\n              "or".id "objectiveResourceId"\n        ),\n        "NewObjectiveResources" AS (\n            INSERT INTO "ObjectiveResources" (\n                "userProvidedUrl",\n                "objectiveId",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n            )\n            SELECT\n                ors.url "userProvidedUrl",\n                ors."objectiveId",\n                ors."createdAt",\n                ors."updatedAt",\n                ors."onAR",\n                ors."onApprovedAR"\n            FROM "ObjectiveResourcesSource" ors\n            JOIN "ObjectiveResourcesCounts" orc\n            ON ors.id = orc.id\n            WHERE orc.cnt != 1\n            RETURNING\n                id "objectiveResourceId"\n        ),\n        "DeleteObjectiveResources" AS (\n            DELETE FROM "ObjectiveResources" "or"\n            USING "ObjectiveResourcesCounts" orc\n            WHERE "or".id = "orc".id\n            AND orc.cnt != 1\n            RETURNING\n              "or".id "objectiveResourceId"\n        ),\n        "MalformedObjectiveResources" AS (\n            SELECT\n                r.id\n            FROM "ObjectiveResources" r\n            LEFT JOIN "ObjectiveResourcesURLs" ru\n            ON r.id = ru.id\n            WHERE ru.id IS NULL\n        ),\n        "DeleteMalformedObjectiveResources" AS (\n            DELETE FROM "ObjectiveResources" "or"\n            USING "MalformedObjectiveResources" mor\n            WHERE "or".id = "mor".id\n            RETURNING\n              "or".id "objectiveResourceId"\n        ),\n        "AffectedObjectiveResources" AS (\n          SELECT\n            "objectiveResourceId",\n            'updated' "action",\n            'ObjectiveResources' "table"\n          FROM "UpdateObjectiveResources"\n          UNION\n          SELECT\n            "objectiveResourceId",\n            'created' "action",\n            'ObjectiveResources' "table"\n          FROM "NewObjectiveResources"\n          UNION\n          SELECT\n            "objectiveResourceId",\n            'replaced' "action",\n            'ObjectiveResources' "table"\n          FROM "DeleteObjectiveResources"\n          UNION\n          SELECT\n            "objectiveResourceId",\n            'removed' "action",\n            'ObjectiveResources' "table"\n          FROM "DeleteMalformedObjectiveResources"\n        ),\n        "ObjectiveResourcesSync" AS (\n          SELECT\n            "o"."objectiveTemplateId",\n            "or"."userProvidedUrl",\n            MIN("or"."createdAt") "createdAt",\n            MAX("or"."updatedAt") "updatedAt"\n          FROM "ObjectiveResources" "or"\n          JOIN "AffectedObjectiveResources" aor\n          ON "or".id = aor."objectiveResourceId"\n          AND aor."action" IN ('updated', 'created')\n          JOIN "Objectives" o\n          ON "or"."objectiveId" = o.id\n          WHERE o."objectiveTemplateId" IS NOT NULL\n          GROUP BY\n            "o"."objectiveTemplateId",\n            "or"."userProvidedUrl"\n        ),\n        "UpdateObjectiveTemplateResources" AS (\n          UPDATE "ObjectiveTemplateResources" "otr"\n          SET\n            "createdAt" = LEAST("otr"."createdAt",ors."createdAt"),\n            "updatedAt" = GREATEST("otr"."updatedAt",ors."updatedAt")\n          FROM "ObjectiveResourcesSync" ors\n          WHERE "otr"."objectiveTemplateId" = ors."objectiveTemplateId"\n          AND "otr"."userProvidedUrl" = ors."userProvidedUrl"\n          RETURNING\n            id "objectiveTemplateResourceId"\n        ),\n        "NewObjectiveTemplateResources" AS (\n          INSERT INTO "ObjectiveTemplateResources" (\n            "userProvidedUrl",\n            "objectiveTemplateId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            ors."userProvidedUrl",\n            ors."objectiveTemplateId",\n            ors."createdAt",\n            ors."updatedAt"\n          FROM  "ObjectiveResourcesSync" ors\n          LEFT JOIN "ObjectiveTemplateResources" "otr"\n          ON "otr"."objectiveTemplateId" = ors."objectiveTemplateId"\n          AND "otr"."userProvidedUrl" = ors."userProvidedUrl"\n          WHERE "otr".id IS NULL\n          RETURNING\n            id "objectiveTemplateResourceId"\n        ),\n        "AffectedObjectiveTemplateResources" AS (\n          SELECT\n            "objectiveTemplateResourceId",\n            'updated' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "UpdateObjectiveTemplateResources"\n          UNION\n          SELECT\n            "objectiveTemplateResourceId",\n            'created' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "NewObjectiveTemplateResources"\n        )\n        SELECT\n          "table",\n          "action",\n          count("objectiveResourceId")\n        FROM "AffectedObjectiveResources"\n        GROUP BY\n          "table",\n          "action"\n        UNION\n        SELECT\n          "table",\n          "action",\n          count("objectiveTemplateResourceId")\n        FROM "AffectedObjectiveTemplateResources"\n        GROUP BY\n          "table",\n          "action";
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): WITH\n        "ObjectiveTemplateResourcesURLs" AS (\n            SELECT\n                id,\n                (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n                "userProvidedUrl",\n                "objectiveTemplateId",\n                "createdAt",\n                "updatedAt"\n            FROM "ObjectiveTemplateResources"\n        ),\n        "ObjectiveTemplateResourcesSource" AS (\n            SELECT\n                ru.id,\n                u.url,\n                ru."userProvidedUrl",\n                ru."objectiveTemplateId",\n                ru."createdAt",\n                ru."updatedAt"\n            FROM "ObjectiveTemplateResources" r\n            JOIN "ObjectiveTemplateResourcesURLs" ru\n            ON r.id = ru.id\n            CROSS JOIN UNNEST(ru.urls) u(url)\n            WHERE r."userProvidedUrl" like '%' || u.url || '%'\n            AND trim(r."userProvidedUrl") != u.url\n            ORDER BY r.id\n        ),\n        "ObjectiveTemplateResourcesCounts" AS (\n            SELECT\n                id,\n                count(url) cnt\n            FROM "ObjectiveTemplateResourcesSource"\n            GROUP BY id\n        ),\n        "UpdateObjectiveTemplateResources" AS (\n            UPDATE "ObjectiveTemplateResources" "or"\n            SET\n                "userProvidedUrl" = ors.url\n            FROM "ObjectiveTemplateResourcesSource" ors\n            JOIN "ObjectiveTemplateResourcesCounts" orc\n            ON ors.id = orc.id\n            WHERE "or".id = ors.id\n            AND orc.cnt = 1\n            RETURNING\n              "or".id "objectiveTemplateResourceId"\n        ),\n        "NewObjectiveTemplateResources" AS (\n            INSERT INTO "ObjectiveTemplateResources" (\n                "userProvidedUrl",\n                "objectiveTemplateId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                ors.url "userProvidedUrl",\n                ors."objectiveTemplateId",\n                ors."createdAt",\n                ors."updatedAt"\n            FROM "ObjectiveTemplateResourcesSource" ors\n            JOIN "ObjectiveTemplateResourcesCounts" orc\n            ON ors.id = orc.id\n            WHERE orc.cnt != 1\n            RETURNING\n                id "objectiveTemplateResourceId"\n        ),\n        "DeleteObjectiveTemplateResources" AS (\n            DELETE FROM "ObjectiveTemplateResources" "or"\n            USING "ObjectiveTemplateResourcesCounts" orc\n            WHERE "or".id = "orc".id\n            AND orc.cnt != 1\n            RETURNING\n              "or".id "objectiveTemplateResourceId"\n        ),\n        "MalformedObjectiveTemplateResources" AS (\n            SELECT\n                r.id\n            FROM "ObjectiveTemplateResources" r\n            LEFT JOIN "ObjectiveTemplateResourcesURLs" ru\n            ON r.id = ru.id\n            WHERE ru.id IS NULL\n        ),\n        "DeleteMalformedObjectiveTemplateResources" AS (\n            DELETE FROM "ObjectiveTemplateResources" "or"\n            USING "MalformedObjectiveTemplateResources" mor\n            WHERE "or".id = "mor".id\n            RETURNING\n              "or".id "objectiveTemplateResourceId"\n        ),\n        "AffectedObjectiveTemplateResources" AS (\n          SELECT\n            "objectiveTemplateResourceId",\n            'updated' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "UpdateObjectiveTemplateResources"\n          UNION\n          SELECT\n            "objectiveTemplateResourceId",\n            'created' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "NewObjectiveTemplateResources"\n          UNION\n          SELECT\n            "objectiveTemplateResourceId",\n            'replaced' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "DeleteObjectiveTemplateResources"\n          UNION\n          SELECT\n            "objectiveTemplateResourceId",\n            'removed' "action",\n            'ObjectiveTemplateResources' "table"\n          FROM "DeleteMalformedObjectiveTemplateResources"\n        )\n        SELECT\n          "table",\n          "action",\n          count("objectiveTemplateResourceId")\n        FROM "AffectedObjectiveTemplateResources"\n        GROUP BY\n          "table",\n          "action";
Executing (d8509665-9dbc-4f1a-acb1-1da96dfbf39b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230206000000-resources-phase-0: migrated (0.113s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230206000000-resources-phase-1: migrating =======
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): START TRANSACTION;
Connection validated successfully
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230206000000-resources-phase-1.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TABLE IF NOT EXISTS "Resources" ("id"   SERIAL , "url" TEXT NOT NULL, "domain" TEXT NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ActivityReportResources_sourceFields' GROUP BY 1
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TYPE "public"."enum_ActivityReportResources_sourceFields" AS ENUM('nonECLKCResourcesUsed', 'ECLKCResourcesUsed', 'context', 'additionalNotes', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TABLE IF NOT EXISTS "ActivityReportResources" ("id"   SERIAL , "activityReportId" INTEGER NOT NULL REFERENCES "ActivityReports" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_ActivityReportResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_NextStepResources_sourceFields' GROUP BY 1
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TYPE "public"."enum_NextStepResources_sourceFields" AS ENUM('note', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TABLE IF NOT EXISTS "NextStepResources" ("id"   SERIAL , "nextStepId" INTEGER NOT NULL REFERENCES "NextSteps" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_NextStepResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_GoalResources_sourceFields' GROUP BY 1
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TYPE "public"."enum_GoalResources_sourceFields" AS ENUM('name', 'timeframe', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TABLE IF NOT EXISTS "GoalResources" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_GoalResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "onAR" BOOLEAN NOT NULL DEFAULT false, "onApprovedAR" BOOLEAN NOT NULL DEFAULT false, PRIMARY KEY ("id"));
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_GoalTemplateResources_sourceFields' GROUP BY 1
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TYPE "public"."enum_GoalTemplateResources_sourceFields" AS ENUM('name', 'timeframe', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TABLE IF NOT EXISTS "GoalTemplateResources" ("id"   SERIAL , "goalTemplateId" INTEGER NOT NULL REFERENCES "GoalTemplates" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_GoalTemplateResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ActivityReportGoalResources_sourceFields' GROUP BY 1
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TYPE "public"."enum_ActivityReportGoalResources_sourceFields" AS ENUM('name', 'timeframe', 'resource');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TABLE IF NOT EXISTS "ActivityReportGoalResources" ("id"   SERIAL , "activityReportGoalId" INTEGER NOT NULL REFERENCES "ActivityReportGoals" ("id"), "resourceId" INTEGER NOT NULL REFERENCES "Resources" ("id"), "sourceFields" "public"."enum_ActivityReportGoalResources_sourceFields"[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): ALTER TABLE "public"."ObjectiveResources" ADD COLUMN "resourceId" INTEGER REFERENCES "Resources" ("id");
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TYPE "public"."enum_ObjectiveResources_sourceFields" AS ENUM('title', 'resource');ALTER TABLE "public"."ObjectiveResources" ADD COLUMN "sourceFields" "public"."enum_ObjectiveResources_sourceFields"[];
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): ALTER TABLE "public"."ObjectiveTemplateResources" ADD COLUMN "resourceId" INTEGER REFERENCES "Resources" ("id");
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TYPE "public"."enum_ObjectiveTemplateResources_sourceFields" AS ENUM('title', 'resource');ALTER TABLE "public"."ObjectiveTemplateResources" ADD COLUMN "sourceFields" "public"."enum_ObjectiveTemplateResources_sourceFields"[];
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): ALTER TABLE "public"."ActivityReportObjectiveResources" ADD COLUMN "resourceId" INTEGER REFERENCES "Resources" ("id");
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): CREATE TYPE "public"."enum_ActivityReportObjectiveResources_sourceFields" AS ENUM('title', 'ttaProvided', 'resource');ALTER TABLE "public"."ActivityReportObjectiveResources" ADD COLUMN "sourceFields" "public"."enum_ActivityReportObjectiveResources_sourceFields"[];
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "ARResources" AS (\n        SELECT\n            id "activityReportId",\n            "nonECLKCResourcesUsed",\n            "ECLKCResourcesUsed",\n            "createdAt",\n            "updatedAt"\n        FROM "ActivityReports" a\n        WHERE ( a."nonECLKCResourcesUsed" is not null\n               AND  ARRAY_LENGTH(a."nonECLKCResourcesUsed",1) > 0\n               AND nullIf(a."nonECLKCResourcesUsed"[1],'') IS NOT null)\n        OR (a."ECLKCResourcesUsed" is not null\n            AND  ARRAY_LENGTH(a."ECLKCResourcesUsed",1) > 0\n            AND nullIf(a."ECLKCResourcesUsed"[1],'') IS NOT null)\n        order by ID\n      ),\n      "ARNResources" AS (\n        SELECT\n            arr."activityReportId",\n            (regexp_matches(ne.resource,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n            'nonECLKCResourcesUsed' "sourceField",\n            arr."createdAt",\n            arr."updatedAt"\n        FROM "ARResources" arr\n        CROSS JOIN UNNEST(arr."nonECLKCResourcesUsed") AS ne(resource)\n      ),\n      "AREResources" AS (\n        SELECT\n            arr."activityReportId",\n            (regexp_matches(ne.resource,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n            'ECLKCResourcesUsed' "sourceField",\n            arr."createdAt",\n            arr."updatedAt"\n        FROM "ARResources" arr\n        CROSS JOIN UNNEST(arr."ECLKCResourcesUsed") AS ne(resource)\n      ),\n      "ARCResources" AS (\n        SELECT\n          a.id "activityReportId",\n          (regexp_matches(a.context,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'context' "sourceField",\n          a."createdAt",\n          a."updatedAt"\n        FROM "ActivityReports" a\n      ),\n      "ARAResources" AS (\n        SELECT\n          a.id "activityReportId",\n          (regexp_matches(a."additionalNotes",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'additionalNotes' "sourceField",\n          a."createdAt",\n          a."updatedAt"\n        FROM "ActivityReports" a\n      ),\n      "ClusteredARResources" AS (\n        SELECT *\n        FROM "ARNResources"\n        UNION\n        SELECT *\n        FROM "AREResources"\n        UNION\n        SELECT *\n        FROM "ARCResources"\n        UNION\n        SELECT *\n        FROM "ARAResources"\n      ),\n      "AllARResources" AS (\n        SELECT\n          carr."activityReportId",\n          carr."sourceField",\n          (regexp_match(url,'^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          carr."createdAt" "createdAt",\n          carr."updatedAt" "updatedAt"\n        FROM "ClusteredARResources" carr\n        CROSS JOIN UNNEST(carr.urls) u(url)\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aarr."domain",\n          aarr.url,\n          MIN(aarr."createdAt") "createdAt",\n          MAX(aarr."updatedAt") "updatedAt"\n        FROM "AllARResources" aarr\n        GROUP BY\n          aarr."domain",\n          aarr.url\n        ORDER BY\n          MIN(aarr."createdAt")\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      )\n      INSERT INTO "ActivityReportResources" (\n        "activityReportId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        aarr."activityReportId",\n        nr."resourceId",\n        ARRAY_AGG(DISTINCT aarr."sourceField")::"enum_ActivityReportResources_sourceFields"[] "sourceFields",\n        MIN(aarr."createdAt") "createdAt",\n        MAX(aarr."updatedAt") "updatedAt"\n      FROM "AllARResources" aarr\n      JOIN "NewResources" nr\n      ON aarr."domain" = nr."domain"\n      AND aarr.url = nr.url\n      GROUP BY\n        aarr."activityReportId",\n        nr."resourceId"\n      ORDER BY\n        aarr."activityReportId",\n        nr."resourceId",\n        MIN(aarr."createdAt"),\n        MAX(aarr."updatedAt");
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "NextStepsUrls" AS (\n        SELECT\n          ns.id "nextStepId",\n          (regexp_matches(ns.note,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          ns."createdAt",\n          ns."updatedAt"\n        FROM "NextSteps" ns\n      ),\n      "NextStepsUrlDomain" AS (\n        SELECT\n          nsu."nextStepId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          nsu."createdAt",\n          nsu."updatedAt"\n        FROM "NextStepsUrls" nsu\n        CROSS JOIN UNNEST(nsu.urls) u(url)\n      ),\n      "NextStepResources" AS (\n        SELECT\n          nsud."domain",\n          nsud.url,\n          MIN(nsud."createdAt") "createdAt",\n          MAX(nsud."updatedAt") "updatedAt"\n        FROM "NextStepsUrlDomain" nsud\n        GROUP BY\n          nsud."domain",\n          nsud.url\n        ORDER BY\n          MIN(nsud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", nsr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", nsr."updatedAt")\n        FROM "NextStepResources" nsr\n        JOIN "Resources" r2\n        ON nsr."domain" = r2."domain"\n        AND nsr.url = r2.url\n        WHERE nsr."domain" = r."domain"\n        AND nsr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          nsr."domain",\n          nsr.url,\n          nsr."createdAt",\n          nsr."updatedAt"\n        FROM "NextStepResources" nsr\n        LEFT JOIN "Resources" r\n        ON nsr."domain" = r."domain"\n        AND nsr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          nsr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      INSERT INTO "NextStepResources" (\n        "nextStepId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        nsud."nextStepId",\n        ar."resourceId",\n        ARRAY['note']::"enum_NextStepResources_sourceFields"[] "sourceFields",\n        nsud."createdAt",\n        nsud."updatedAt"\n      FROM "NextStepsUrlDomain" nsud\n      JOIN "AffectedResources" ar\n      ON nsud."domain" = ar."domain"\n      AND nsud.url = ar.url\n      ORDER BY\n        nsud."nextStepId",\n        ar."resourceId",\n        nsud."createdAt",\n        nsud."updatedAt";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "GoalUrls" AS (\n        SELECT\n          g.id "goalId",\n          (regexp_matches(g.name,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'name' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "Goals" g\n        UNION\n        SELECT\n          g.id "goalId",\n          (regexp_matches(g."timeframe",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'timeframe' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "Goals" g\n      ),\n      "GoalUrlDomain" AS (\n        SELECT\n          gu."goalId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          gu."sourceField",\n          gu."createdAt",\n          gu."updatedAt"\n        FROM "GoalUrls" gu\n        CROSS JOIN UNNEST(gu.urls) u(url)\n      ),\n      "FoundGoalResources" AS (\n        SELECT\n          gud."goalId",\n          gud."domain",\n          gud.url,\n          ARRAY_AGG(gud."sourceField") "sourceFields",\n          MIN(gud."createdAt") "createdAt",\n          MAX(gud."updatedAt") "updatedAt"\n        FROM "GoalUrlDomain" gud\n        GROUP BY\n          gud."goalId",\n          gud."domain",\n          gud.url\n        ORDER BY\n          MIN(gud."createdAt")\n      ),\n      "FoundResources" AS (\n        SELECT\n          fgr."domain",\n          fgr.url,\n          MIN(fgr."createdAt") "createdAt",\n          MAX(fgr."updatedAt") "updatedAt"\n        FROM "FoundGoalResources" fgr\n        GROUP BY\n          fgr."domain",\n          fgr.url\n        ORDER BY\n          MIN(fgr."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", fr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", fr."updatedAt")\n        FROM "FoundResources" fr\n        JOIN "Resources" r2\n        ON fr."domain" = r2."domain"\n        AND fr.url = r2.url\n        WHERE fr."domain" = r."domain"\n        AND fr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          fr."domain",\n          fr.url,\n          fr."createdAt",\n          fr."updatedAt"\n        FROM "FoundResources" fr\n        LEFT JOIN "Resources" r\n        ON fr."domain" = r."domain"\n        AND fr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          fr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      INSERT INTO "GoalResources" (\n        "goalId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        fgr."goalId",\n        ar."resourceId",\n        fgr."sourceFields"::"enum_GoalResources_sourceFields"[] "sourceFields",\n        fgr."createdAt",\n        fgr."updatedAt"\n      FROM "FoundGoalResources" fgr\n      JOIN "AffectedResources" ar\n      ON fgr."domain" = ar."domain"\n      AND fgr.url = ar.url\n      ORDER BY\n        fgr."goalId",\n        ar."resourceId",\n        fgr."createdAt",\n        fgr."updatedAt";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "GoalTemplateUrls" AS (\n        SELECT\n          g.id "goalTemplateId",\n          (regexp_matches(g."templateName",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'name' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "GoalTemplates" g\n      ),\n      "GoalTemplateUrlDomain" AS (\n        SELECT\n          gu."goalTemplateId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          gu."sourceField",\n          gu."createdAt",\n          gu."updatedAt"\n        FROM "GoalTemplateUrls" gu\n        CROSS JOIN UNNEST(gu.urls) u(url)\n      ),\n      "FoundGoalTemplateResources" AS (\n        SELECT\n          gud."goalTemplateId",\n          gud."domain",\n          gud.url,\n          ARRAY_AGG(gud."sourceField") "sourceFields",\n          MIN(gud."createdAt") "createdAt",\n          MAX(gud."updatedAt") "updatedAt"\n        FROM "GoalTemplateUrlDomain" gud\n        GROUP BY\n          gud."goalTemplateId",\n          gud."domain",\n          gud.url\n        ORDER BY\n          MIN(gud."createdAt")\n      ),\n      "FoundResources" AS (\n        SELECT\n          fgr."domain",\n          fgr.url,\n          MIN(fgr."createdAt") "createdAt",\n          MAX(fgr."updatedAt") "updatedAt"\n        FROM "FoundGoalTemplateResources" fgr\n        GROUP BY\n          fgr."domain",\n          fgr.url\n        ORDER BY\n          MIN(fgr."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", fr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", fr."updatedAt")\n        FROM "FoundResources" fr\n        JOIN "Resources" r2\n        ON fr."domain" = r2."domain"\n        AND fr.url = r2.url\n        WHERE fr."domain" = r."domain"\n        AND fr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          fr."domain",\n          fr.url,\n          fr."createdAt",\n          fr."updatedAt"\n        FROM "FoundResources" fr\n        LEFT JOIN "Resources" r\n        ON fr."domain" = r."domain"\n        AND fr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          fr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      INSERT INTO "GoalTemplateResources" (\n        "goalTemplateId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        fgr."goalTemplateId",\n        ar."resourceId",\n        fgr."sourceFields"::"enum_GoalTemplateResources_sourceFields"[] "sourceFields",\n        fgr."createdAt",\n        fgr."updatedAt"\n      FROM "FoundGoalTemplateResources" fgr\n      JOIN "AffectedResources" ar\n      ON fgr."domain" = ar."domain"\n      AND fgr.url = ar.url\n      ORDER BY\n        fgr."goalTemplateId",\n        ar."resourceId",\n        fgr."createdAt",\n        fgr."updatedAt";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "GoalUrls" AS (\n        SELECT\n          g.id "activityReportGoalId",\n          (regexp_matches(g.name,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'name' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "ActivityReportGoals" g\n        UNION\n        SELECT\n          g.id "activityReportGoalId",\n          (regexp_matches(g."timeframe",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          'timeframe' "sourceField",\n          g."createdAt",\n          g."updatedAt"\n        FROM "ActivityReportGoals" g\n      ),\n      "GoalUrlDomain" AS (\n        SELECT\n          gu."activityReportGoalId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          gu."sourceField",\n          gu."createdAt",\n          gu."updatedAt"\n        FROM "GoalUrls" gu\n        CROSS JOIN UNNEST(gu.urls) u(url)\n      ),\n      "FoundGoalResources" AS (\n        SELECT\n          gud."activityReportGoalId",\n          gud."domain",\n          gud.url,\n          ARRAY_AGG(gud."sourceField") "sourceFields",\n          MIN(gud."createdAt") "createdAt",\n          MAX(gud."updatedAt") "updatedAt"\n        FROM "GoalUrlDomain" gud\n        GROUP BY\n          gud."activityReportGoalId",\n          gud."domain",\n          gud.url\n        ORDER BY\n          MIN(gud."createdAt")\n      ),\n      "FoundResources" AS (\n        SELECT\n          fgr."domain",\n          fgr.url,\n          MIN(fgr."createdAt") "createdAt",\n          MAX(fgr."updatedAt") "updatedAt"\n        FROM "FoundGoalResources" fgr\n        GROUP BY\n          fgr."domain",\n          fgr.url\n        ORDER BY\n          MIN(fgr."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", fr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", fr."updatedAt")\n        FROM "FoundResources" fr\n        JOIN "Resources" r2\n        ON fr."domain" = r2."domain"\n        AND fr.url = r2.url\n        WHERE fr."domain" = r."domain"\n        AND fr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          fr."domain",\n          fr.url,\n          fr."createdAt",\n          fr."updatedAt"\n        FROM "FoundResources" fr\n        LEFT JOIN "Resources" r\n        ON fr."domain" = r."domain"\n        AND fr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          fr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      INSERT INTO "ActivityReportGoalResources" (\n        "activityReportGoalId",\n        "resourceId",\n        "sourceFields",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        fgr."activityReportGoalId",\n        ar."resourceId",\n        fgr."sourceFields"::"enum_ActivityReportGoalResources_sourceFields"[] "sourceFields",\n        fgr."createdAt",\n        fgr."updatedAt"\n      FROM "FoundGoalResources" fgr\n      JOIN "AffectedResources" ar\n      ON fgr."domain" = ar."domain"\n      AND fgr.url = ar.url\n      ORDER BY\n        fgr."activityReportGoalId",\n        ar."resourceId",\n        fgr."createdAt",\n        fgr."updatedAt";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "ObjectiveResourcesURLs" AS (\n        SELECT\n          id "objectiveResourceId",\n          (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          "createdAt",\n          "updatedAt"\n        FROM "ObjectiveResources"\n      ),\n      "ObjectiveResourcesUrlDomain" AS (\n        SELECT\n          oru."objectiveResourceId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          oru."createdAt",\n          oru."updatedAt"\n        FROM "ObjectiveResourcesURLs" oru\n        CROSS JOIN UNNEST(oru.urls) u(url)\n      ),\n      "ObjectiveResourcesResources" AS (\n        SELECT\n          orud."domain",\n          orud.url,\n          MIN(orud."createdAt") "createdAt",\n          MAX(orud."updatedAt") "updatedAt"\n        FROM "ObjectiveResourcesUrlDomain" orud\n        GROUP BY\n          orud."domain",\n          orud.url\n        ORDER BY\n          MIN(orud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", orr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", orr."updatedAt")\n        FROM "ObjectiveResourcesResources" orr\n        JOIN "Resources" r2\n        ON orr."domain" = r2."domain"\n        AND orr.url = r2.url\n        WHERE orr."domain" = r."domain"\n        AND orr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          orr."domain",\n          orr.url,\n          orr."createdAt",\n          orr."updatedAt"\n        FROM "ObjectiveResourcesResources" orr\n        LEFT JOIN "Resources" r\n        ON orr."domain" = r."domain"\n        AND orr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          orr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      UPDATE "ObjectiveResources" "or"\n      SET\n        "resourceId" = ar."resourceId",\n        "sourceFields" = ARRAY['resource']::"enum_ObjectiveResources_sourceFields"[]\n      FROM "ObjectiveResourcesUrlDomain" orud\n      JOIN "AffectedResources" ar\n      ON orud."domain" = ar."domain"\n      AND orud.url = ar.url\n      WHERE "or".id = orud."objectiveResourceId";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "ObjectiveUrls" AS (\n        SELECT\n          o.id "objectiveId",\n          (regexp_matches(o.title,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          o."createdAt",\n          o."updatedAt",\n          o."onAR",\n          o."onApprovedAR"\n        FROM "Objectives" o\n      ),\n      "ObjectiveTitleUrlDomain" AS (\n        SELECT\n          ou."objectiveId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          ou."createdAt",\n          ou."updatedAt",\n          ou."onAR",\n          ou."onApprovedAR",\n          'title' "sourceField"\n        FROM "ObjectiveUrls" ou\n        CROSS JOIN UNNEST(ou.urls) u(url)\n      ),\n      "ObjectiveCurrentUrlDomain" AS (\n        SELECT\n          o."objectiveId",\n          r."domain",\n          r.url,\n          o."createdAt",\n          o."updatedAt",\n          o."onAR",\n          o."onApprovedAR",\n          sf."sourceField"::TEXT "sourceField"\n        FROM "ObjectiveResources" o\n        JOIN "Resources" r\n        ON o."resourceId" = r.id\n        CROSS JOIN UNNEST(o."sourceFields") sf("sourceField")\n      ),\n      "ObjectiveAllUrlDomain" AS (\n        SELECT *\n        FROM "ObjectiveTitleUrlDomain"\n        UNION\n        SELECT *\n        FROM "ObjectiveCurrentUrlDomain"\n      ),\n      "ObjectiveUrlDomain" AS (\n        SELECT\n          oaud."objectiveId",\n          oaud."domain",\n          oaud.url,\n          MIN(oaud."createdAt") "createdAt",\n          MAX(oaud."updatedAt") "updatedAt",\n          BOOL_OR(oaud."onAR") "onAR",\n          BOOL_OR(oaud."onApprovedAR") "onApprovedAR",\n          ARRAY_AGG(DISTINCT oaud."sourceField") "sourceFields",\n          BOOL_OR(oaud."sourceField" = 'title') "isAutoDetected"\n        FROM "ObjectiveAllUrlDomain" oaud\n        GROUP BY\n          oaud."objectiveId",\n          oaud."domain",\n          oaud.url\n      ),\n      "ObjectiveDetectedResources" AS (\n        SELECT\n          oud."domain",\n          oud.url,\n          MIN(oud."createdAt") "createdAt",\n          MAX(oud."updatedAt") "updatedAt"\n        FROM "ObjectiveUrlDomain" oud\n        WHERE NOT('resource' = ANY(oud."sourceFields")\n          AND array_length(oud."sourceFields", 1) = 1)\n        GROUP BY\n          oud."domain",\n          oud.url\n        ORDER BY\n          MIN(oud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", odr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", odr."updatedAt")\n        FROM "ObjectiveDetectedResources" odr\n        WHERE odr."domain" = r."domain"\n        AND odr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          odr."domain",\n          odr.url,\n          odr."createdAt",\n          odr."updatedAt"\n        FROM "ObjectiveDetectedResources" odr\n        LEFT JOIN "Resources" r\n        ON odr."domain" = r."domain"\n        AND odr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          odr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      ),\n      "UpdateObjectiveResources" AS (\n        UPDATE "ObjectiveResources" r\n        SET\n          "resourceId" = ar."resourceId",\n          "createdAt" = LEAST(r."createdAt", oud."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", oud."updatedAt"),\n          "sourceFields" = COALESCE(oud."sourceFields"::"enum_ObjectiveResources_sourceFields"[], r."sourceFields"),\n          "onAR" = (r."onAR" OR oud."onAR"),\n          "onApprovedAR" = (r."onApprovedAR" OR oud."onApprovedAR")\n        FROM "ObjectiveUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        WHERE oud."objectiveId" = r."objectiveId"\n        AND oud.url = r."userProvidedUrl"\n        RETURNING\n          r.id "objectiveResourceId"\n      ),\n      "NewObjectiveResources" AS (\n        INSERT INTO "ObjectiveResources" (\n          "userProvidedUrl",\n          "objectiveId",\n          "createdAt",\n          "updatedAt",\n          "onAR",\n          "onApprovedAR",\n          "resourceId",\n          "sourceFields"\n        )\n        SELECT\n          oud.url "userProvidedUrl",\n          oud."objectiveId",\n          oud."createdAt",\n          oud."updatedAt",\n          oud."onAR",\n          oud."onApprovedAR",\n          ar."resourceId",\n          ARRAY['title']::"enum_ObjectiveResources_sourceFields"[] "sourceFields"\n        FROM "ObjectiveUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        LEFT JOIN "ObjectiveResources" r\n        ON oud."objectiveId" = r."objectiveId"\n        AND oud.url = r."userProvidedUrl"\n        WHERE r.id IS NULL\n        ORDER BY\n          oud."createdAt",\n          ar."resourceId"\n        RETURNING\n          id "objectiveResourceId"\n      ),\n      "AffectedObjectiveResources" AS (\n        SELECT\n          "objectiveResourceId",\n          'updated' "action"\n        FROM "UpdateObjectiveResources"\n        UNION\n        SELECT\n          "objectiveResourceId",\n          'created' "action"\n        FROM "NewObjectiveResources"\n      )\n      SELECT\n        "action",\n        count("objectiveResourceId")\n      FROM "AffectedObjectiveResources"\n      GROUP BY "action";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "ObjectiveTemplateResourcesURLs" AS (\n        SELECT\n          id "objectiveTemplateResourceId",\n          (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          "createdAt",\n          "updatedAt"\n        FROM "ObjectiveTemplateResources"\n      ),\n      "ObjectiveTemplateResourcesUrlDomain" AS (\n        SELECT\n          oru."objectiveTemplateResourceId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          oru."createdAt",\n          oru."updatedAt"\n        FROM "ObjectiveTemplateResourcesURLs" oru\n        CROSS JOIN UNNEST(oru.urls) u(url)\n      ),\n      "ObjectiveTemplateResourcesResources" AS (\n        SELECT\n          orud."domain",\n          orud.url,\n          MIN(orud."createdAt") "createdAt",\n          MAX(orud."updatedAt") "updatedAt"\n        FROM "ObjectiveTemplateResourcesUrlDomain" orud\n        GROUP BY\n          orud."domain",\n          orud.url\n        ORDER BY\n          MIN(orud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", orr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", orr."updatedAt")\n        FROM "ObjectiveTemplateResourcesResources" orr\n        JOIN "Resources" r2\n        ON orr."domain" = r2."domain"\n        AND orr.url = r2.url\n        WHERE orr."domain" = r."domain"\n        AND orr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          orr."domain",\n          orr.url,\n          orr."createdAt",\n          orr."updatedAt"\n        FROM "ObjectiveTemplateResourcesResources" orr\n        LEFT JOIN "Resources" r\n        ON orr."domain" = r."domain"\n        AND orr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          orr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      UPDATE "ObjectiveTemplateResources" "or"\n      SET\n        "resourceId" = ar."resourceId",\n        "sourceFields" = ARRAY['resource']::"enum_ObjectiveTemplateResources_sourceFields"[]\n      FROM "ObjectiveTemplateResourcesUrlDomain" orud\n      JOIN "AffectedResources" ar\n      ON orud."domain" = ar."domain"\n      AND orud.url = ar.url\n      WHERE "or".id = orud."objectiveTemplateResourceId";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "ObjectiveTemplateUrls" AS (\n        SELECT\n          o.id "objectiveTemplateId",\n          (regexp_matches(o."templateTitle",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          o."createdAt",\n          o."updatedAt"\n        FROM "ObjectiveTemplates" o\n      ),\n      "ObjectiveTemplateTitleUrlDomain" AS (\n        SELECT\n          ou."objectiveTemplateId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          ou."createdAt",\n          ou."updatedAt",\n          'title' "sourceField"\n        FROM "ObjectiveTemplateUrls" ou\n        CROSS JOIN UNNEST(ou.urls) u(url)\n      ),\n      "ObjectiveTemplateCurrentUrlDomain" AS (\n        SELECT\n          o."objectiveTemplateId",\n          r."domain",\n          r.url,\n          o."createdAt",\n          o."updatedAt",\n          sf."sourceField"::TEXT "sourceField"\n        FROM "ObjectiveTemplateResources" o\n        JOIN "Resources" r\n        ON o."resourceId" = r.id\n        CROSS JOIN UNNEST(o."sourceFields") sf("sourceField")\n      ),\n      "ObjectiveTemplateAllUrlDomain" AS (\n        SELECT *\n        FROM "ObjectiveTemplateTitleUrlDomain"\n        UNION\n        SELECT *\n        FROM "ObjectiveTemplateCurrentUrlDomain"\n      ),\n      "ObjectiveTemplateUrlDomain" AS (\n        SELECT\n          oaud."objectiveTemplateId",\n          oaud."domain",\n          oaud.url,\n          MIN(oaud."createdAt") "createdAt",\n          MAX(oaud."updatedAt") "updatedAt",\n          ARRAY_AGG(DISTINCT oaud."sourceField") "sourceFields",\n          BOOL_OR(oaud."sourceField" = 'title') "isAutoDetected"\n        FROM "ObjectiveTemplateAllUrlDomain" oaud\n        GROUP BY\n          oaud."objectiveTemplateId",\n          oaud."domain",\n          oaud.url\n      ),\n      "ObjectiveTemplateDetectedResources" AS (\n        SELECT\n          oud."domain",\n          oud.url,\n          MIN(oud."createdAt") "createdAt",\n          MAX(oud."updatedAt") "updatedAt"\n        FROM "ObjectiveTemplateUrlDomain" oud\n        WHERE NOT('resource' = ANY(oud."sourceFields")\n          AND array_length(oud."sourceFields", 1) = 1)\n        GROUP BY\n          oud."domain",\n          oud.url\n        ORDER BY\n          MIN(oud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", odr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", odr."updatedAt")\n        FROM "ObjectiveTemplateDetectedResources" odr\n        WHERE odr."domain" = r."domain"\n        AND odr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          odr."domain",\n          odr.url,\n          odr."createdAt",\n          odr."updatedAt"\n        FROM "ObjectiveTemplateDetectedResources" odr\n        LEFT JOIN "Resources" r\n        ON odr."domain" = r."domain"\n        AND odr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          odr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      ),\n      "UpdateObjectiveTemplateResources" AS (\n        UPDATE "ObjectiveTemplateResources" r\n        SET\n          "resourceId" = ar."resourceId",\n          "createdAt" = LEAST(r."createdAt", oud."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", oud."updatedAt"),\n          "sourceFields" = COALESCE(oud."sourceFields"::"enum_ObjectiveTemplateResources_sourceFields"[], r."sourceFields")\n        FROM "ObjectiveTemplateUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        WHERE oud."objectiveTemplateId" = r."objectiveTemplateId"\n        AND oud.url = r."userProvidedUrl"\n        RETURNING\n          r.id "objectiveTemplateResourceId"\n      ),\n      "NewObjectiveTemplateResources" AS (\n        INSERT INTO "ObjectiveTemplateResources" (\n          "userProvidedUrl",\n          "objectiveTemplateId",\n          "createdAt",\n          "updatedAt",\n          "resourceId",\n          "sourceFields"\n        )\n        SELECT\n          oud.url "userProvidedUrl",\n          oud."objectiveTemplateId",\n          oud."createdAt",\n          oud."updatedAt",\n          ar."resourceId",\n          ARRAY['title']::"enum_ObjectiveTemplateResources_sourceFields"[] "sourceFields"\n        FROM "ObjectiveTemplateUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        LEFT JOIN "ObjectiveTemplateResources" r\n        ON oud."objectiveTemplateId" = r."objectiveTemplateId"\n        AND oud.url = r."userProvidedUrl"\n        WHERE r.id IS NULL\n        ORDER BY\n          oud."createdAt",\n          ar."resourceId"\n        RETURNING\n          id "objectiveTemplateResourceId"\n      ),\n      "AffectedObjectiveTemplateResources" AS (\n        SELECT\n          "objectiveTemplateResourceId",\n          'updated' "action"\n        FROM "UpdateObjectiveTemplateResources"\n        UNION\n        SELECT\n          "objectiveTemplateResourceId",\n          'created' "action"\n        FROM "NewObjectiveTemplateResources"\n      )\n      SELECT\n        "action",\n        count("objectiveTemplateResourceId")\n      FROM "AffectedObjectiveTemplateResources"\n      GROUP BY "action";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "ObjectiveResourcesURLs" AS (\n        SELECT\n          id "objectiveResourceId",\n          (regexp_matches("userProvidedUrl",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          "createdAt",\n          "updatedAt"\n        FROM "ActivityReportObjectiveResources"\n      ),\n      "ObjectiveResourcesUrlDomain" AS (\n        SELECT\n          oru."objectiveResourceId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          oru."createdAt",\n          oru."updatedAt"\n        FROM "ObjectiveResourcesURLs" oru\n        CROSS JOIN UNNEST(oru.urls) u(url)\n      ),\n      "ObjectiveResourcesResources" AS (\n        SELECT\n          orud."domain",\n          orud.url,\n          MIN(orud."createdAt") "createdAt",\n          MAX(orud."updatedAt") "updatedAt"\n        FROM "ObjectiveResourcesUrlDomain" orud\n        GROUP BY\n          orud."domain",\n          orud.url\n        ORDER BY\n          MIN(orud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", orr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", orr."updatedAt")\n        FROM "ObjectiveResourcesResources" orr\n        JOIN "Resources" r2\n        ON orr."domain" = r2."domain"\n        AND orr.url = r2.url\n        WHERE orr."domain" = r."domain"\n        AND orr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          orr."domain",\n          orr.url,\n          orr."createdAt",\n          orr."updatedAt"\n        FROM "ObjectiveResourcesResources" orr\n        LEFT JOIN "Resources" r\n        ON orr."domain" = r."domain"\n        AND orr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          orr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      )\n      UPDATE "ActivityReportObjectiveResources" "or"\n      SET\n        "resourceId" = ar."resourceId",\n        "sourceFields" = ARRAY['resource']::"enum_ActivityReportObjectiveResources_sourceFields"[]\n      FROM "ObjectiveResourcesUrlDomain" orud\n      JOIN "AffectedResources" ar\n      ON orud."domain" = ar."domain"\n      AND orud.url = ar.url\n      WHERE "or".id = orud."objectiveResourceId";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): WITH\n      "ObjectiveTitleUrls" AS (\n        SELECT\n          o.id "activityReportObjectiveId",\n          (regexp_matches(o.title,'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          o."createdAt",\n          o."updatedAt",\n          'title'::"enum_ActivityReportObjectiveResources_sourceFields" "sourceField"\n        FROM "ActivityReportObjectives" o\n      ),\n      "ObjectiveTtaProvidedUrls" AS (\n        SELECT\n          o.id "activityReportObjectiveId",\n          (regexp_matches(o."ttaProvided",'(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?(?:[a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|(?:(?:[0-9]{1,3}\.){3}[0-9]{1,3}))(?:[:](?:[0-9]+))?(?:[\/](?:[-a-zA-Z0-9''@\:%_\+.,~#&\/=()]*[-a-zA-Z0-9@\:%_\+.~#&\/=()])?)?(?:[?](?:[-a-zA-Z0-9@\:%_\+.~#&\/=()]*))*)','g')) urls,\n          o."createdAt",\n          o."updatedAt",\n          'ttaProvided'::"enum_ActivityReportObjectiveResources_sourceFields" "sourceField"\n        FROM "ActivityReportObjectives" o\n      ),\n      "ObjectiveUrls" AS (\n        SELECT *\n        FROM "ObjectiveTitleUrls"\n        UNION\n        SELECT *\n        FROM "ObjectiveTtaProvidedUrls"\n      ),\n      "ObjectiveIncomingUrlDomain" AS (\n        SELECT\n          ou."activityReportObjectiveId",\n          (regexp_match(u.url, '^(?:(?:http(?:s)?|ftp(?:s)?|sftp):\/\/(?:(?:[a-zA-Z0-9._]+)(?:[:](?:[a-zA-Z0-9%._\+~#=]+))?[@])?(?:(?:www\.)?([a-zA-Z0-9%._\+~#=\-]{1,}\.[a-z]{2,6})|((?:[0-9]{1,3}\.){3}[0-9]{1,3})))'))[1] "domain",\n          u.url,\n          ou."createdAt",\n          ou."updatedAt",\n          ou."sourceField"\n        FROM "ObjectiveUrls" ou\n        CROSS JOIN UNNEST(ou.urls) u(url)\n      ),\n      "ObjectiveCurrentUrlDomain" AS (\n        SELECT\n          o."activityReportObjectiveId",\n          r."domain",\n          r.url,\n          o."createdAt",\n          o."updatedAt",\n          sf."sourceField" "sourceField"\n        FROM "ActivityReportObjectiveResources" o\n        JOIN "Resources" r\n        ON o."resourceId" = r.id\n        CROSS JOIN UNNEST(o."sourceFields") sf("sourceField")\n      ),\n      "ObjectiveAllUrlDomain" AS (\n        SELECT *\n        FROM "ObjectiveIncomingUrlDomain"\n        UNION\n        SELECT *\n        FROM "ObjectiveCurrentUrlDomain"\n      ),\n      "ObjectiveUrlDomain" AS (\n        SELECT\n          oaud."activityReportObjectiveId",\n          oaud."domain",\n          oaud.url,\n          MIN(oaud."createdAt") "createdAt",\n          MAX(oaud."updatedAt") "updatedAt",\n          ARRAY_AGG(DISTINCT oaud."sourceField") "sourceFields"\n        FROM "ObjectiveAllUrlDomain" oaud\n        GROUP BY\n          oaud."activityReportObjectiveId",\n          oaud."domain",\n          oaud.url\n      ),\n      "ObjectiveDetectedResources" AS (\n        SELECT\n          oud."domain",\n          oud.url,\n          MIN(oud."createdAt") "createdAt",\n          MAX(oud."updatedAt") "updatedAt"\n        FROM "ObjectiveUrlDomain" oud\n        WHERE NOT('resource'::"enum_ActivityReportObjectiveResources_sourceFields" = ANY(oud."sourceFields")\n          AND array_length(oud."sourceFields", 1) = 1)\n        GROUP BY\n          oud."domain",\n          oud.url\n        ORDER BY\n          MIN(oud."createdAt")\n      ),\n      "UpdateResources" AS (\n        UPDATE "Resources" r\n        SET\n          "createdAt" = LEAST(r."createdAt", odr."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", odr."updatedAt")\n        FROM "ObjectiveDetectedResources" odr\n        WHERE odr."domain" = r."domain"\n        AND odr.url = r.url\n        RETURNING\n          r.id "resourceId",\n          r."domain",\n          r.url\n      ),\n      "NewResources" AS (\n        INSERT INTO "Resources" (\n          "domain",\n          "url",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          odr."domain",\n          odr.url,\n          odr."createdAt",\n          odr."updatedAt"\n        FROM "ObjectiveDetectedResources" odr\n        LEFT JOIN "Resources" r\n        ON odr."domain" = r."domain"\n        AND odr.url = r.url\n        WHERE r.id IS NULL\n        ORDER BY\n          odr."createdAt"\n        RETURNING\n          id "resourceId",\n          "domain",\n          url\n      ),\n      "AffectedResources" AS (\n        SELECT *\n        FROM "UpdateResources"\n        UNION\n        SELECT *\n        FROM "NewResources"\n      ),\n      "UpdateObjectiveResources" AS (\n        UPDATE "ActivityReportObjectiveResources" r\n        SET\n          "resourceId" = ar."resourceId",\n          "createdAt" = LEAST(r."createdAt", oud."createdAt"),\n          "updatedAt" = GREATEST(r."updatedAt", oud."updatedAt"),\n          "sourceFields" = COALESCE(oud."sourceFields"::"enum_ActivityReportObjectiveResources_sourceFields"[], r."sourceFields")\n        FROM "ObjectiveUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        WHERE oud."activityReportObjectiveId" = r."activityReportObjectiveId"\n        AND oud.url = r."userProvidedUrl"\n        AND oud."sourceFields" != r."sourceFields"\n        RETURNING\n          r.id "activityReportObjectiveResourceId"\n      ),\n      "NewObjectiveResources" AS (\n        INSERT INTO "ActivityReportObjectiveResources" (\n          "userProvidedUrl",\n          "activityReportObjectiveId",\n          "createdAt",\n          "updatedAt",\n          "resourceId",\n          "sourceFields"\n        )\n        SELECT\n          oud.url "userProvidedUrl",\n          oud."activityReportObjectiveId",\n          oud."createdAt",\n          oud."updatedAt",\n          ar."resourceId",\n          oud."sourceFields"::"enum_ActivityReportObjectiveResources_sourceFields"[] "sourceFields"\n        FROM "ObjectiveUrlDomain" oud\n        JOIN "AffectedResources" ar\n        ON oud."domain" = ar."domain"\n        AND oud.url = ar.url\n        LEFT JOIN "ActivityReportObjectiveResources" r\n        ON oud."activityReportObjectiveId" = r."activityReportObjectiveId"\n        AND oud.url = r."userProvidedUrl"\n        WHERE r.id IS NULL\n        ORDER BY\n          oud."createdAt",\n          ar."resourceId"\n        RETURNING\n          id "activityReportObjectiveResourceId"\n      ),\n      "AffectedObjectiveResources" AS (\n        SELECT\n          "activityReportObjectiveResourceId",\n          'updated' "action"\n        FROM "UpdateObjectiveResources"\n        UNION\n        SELECT\n          "activityReportObjectiveResourceId",\n          'created' "action"\n        FROM "NewObjectiveResources"\n      )\n      SELECT\n        "action",\n        count("activityReportObjectiveResourceId")\n      FROM "AffectedObjectiveResources"\n      GROUP BY "action";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): ALTER TABLE "public"."ActivityReportObjectiveResources" DROP COLUMN "userProvidedUrl";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): ALTER TABLE "public"."ObjectiveTemplateResources" DROP COLUMN "userProvidedUrl";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): ALTER TABLE "public"."ObjectiveResources" DROP COLUMN "userProvidedUrl";
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "resourceId" SET NOT NULL;ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "resourceId" DROP DEFAULT;ALTER TABLE "ActivityReportObjectiveResources" ALTER COLUMN "resourceId" TYPE INTEGER;
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "resourceId" SET NOT NULL;ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "resourceId" DROP DEFAULT;ALTER TABLE "ObjectiveTemplateResources" ALTER COLUMN "resourceId" TYPE INTEGER;
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): ALTER TABLE "ObjectiveResources" ALTER COLUMN "resourceId" SET NOT NULL;ALTER TABLE "ObjectiveResources" ALTER COLUMN "resourceId" DROP DEFAULT;ALTER TABLE "ObjectiveResources" ALTER COLUMN "resourceId" TYPE INTEGER;
Executing (911831dc-ff2b-4e65-a121-cf20291afb48): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230206000000-resources-phase-1: migrated (0.383s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230208151755-ar-submitted-date: migrating =======
Executing (1cc1a173-cdbe-417f-b740-10fde54f6139): START TRANSACTION;
Connection validated successfully
Executing (default): ALTER TABLE "public"."ActivityReports" ADD COLUMN "submittedDate" DATE;
Connection validated successfully
Executing (default): UPDATE\n      "ActivityReports" ar\n        SET\n            "submittedDate" = s."submittedDate"\n        FROM\n            (\n            SELECT\n            data_id "activityReportId",\n            MIN(dml_timestamp) "firstSubmittedDate",\n            MAX(dml_timestamp) "submittedDate"\n            FROM "ZALActivityReports" za\n            WHERE dml_type = 'UPDATE'\n            AND new_row_data ->> 'submissionStatus' = 'submitted'\n            AND old_row_data ->> 'submissionStatus' != 'submitted'\n            GROUP BY 1\n          ) s\n        WHERE\n            ar."id" = s."activityReportId";
Connection validated successfully
Executing (1cc1a173-cdbe-417f-b740-10fde54f6139): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230208151755-ar-submitted-date: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230209000000-correct_legacy_ttatype: migrating =======
Executing (5d1b6f1a-f5c7-4fb1-a471-5e3209e81bec): START TRANSACTION;
Connection validated successfully
Executing (5d1b6f1a-f5c7-4fb1-a471-5e3209e81bec): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230209000000-correct_legacy_ttatype.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5d1b6f1a-f5c7-4fb1-a471-5e3209e81bec): UPDATE "ActivityReports"\n          SET "ttaType" =\n            CASE "ttaType"\n              WHEN '{"Technical Assistance"}' THEN ARRAY['technical-assistance']\n              WHEN '{"Training"}' THEN ARRAY['training']\n              WHEN '{"Both"}' THEN ARRAY['training','technical-assistance']\n              WHEN '{}' THEN NULL\n              ELSE "ttaType"\n            END\n          WHERE "ttaType" NOT IN ('{training}','{training,technical-assistance}','{technical-assistance}');
Executing (5d1b6f1a-f5c7-4fb1-a471-5e3209e81bec): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230209000000-correct_legacy_ttatype: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230214142150-add-site-alert: migrating =======
Executing (794cf1b1-3d83-4f80-a568-d84c178db968): START TRANSACTION;
Connection validated successfully
Executing (794cf1b1-3d83-4f80-a568-d84c178db968): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230214142150-add-site-alert.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (794cf1b1-3d83-4f80-a568-d84c178db968): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_SiteAlerts_status' GROUP BY 1
Executing (794cf1b1-3d83-4f80-a568-d84c178db968): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_SiteAlerts_variant' GROUP BY 1
Executing (794cf1b1-3d83-4f80-a568-d84c178db968): CREATE TYPE "public"."enum_SiteAlerts_status" AS ENUM('Unpublished', 'Published');
Executing (794cf1b1-3d83-4f80-a568-d84c178db968): CREATE TYPE "public"."enum_SiteAlerts_variant" AS ENUM('info', 'emergency');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (794cf1b1-3d83-4f80-a568-d84c178db968): CREATE TABLE IF NOT EXISTS "SiteAlerts" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "startDate" TIMESTAMP WITH TIME ZONE NOT NULL, "endDate" TIMESTAMP WITH TIME ZONE NOT NULL, "title" TEXT NOT NULL, "message" TEXT NOT NULL, "status" "public"."enum_SiteAlerts_status", "variant" "public"."enum_SiteAlerts_variant", "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (794cf1b1-3d83-4f80-a568-d84c178db968): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230214142150-add-site-alert: migrated (0.065s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230215000000-goal-status-cleanup: migrating =======
Executing (9a6f9a78-c257-4aed-822b-1eaa7cad7a1a): START TRANSACTION;
Connection validated successfully
Executing (9a6f9a78-c257-4aed-822b-1eaa7cad7a1a): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230215000000-goal-status-cleanup.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9a6f9a78-c257-4aed-822b-1eaa7cad7a1a): WITH\n            "GoalFixes" AS (\n              select\n                g.id,\n                'Draft' "status"\n              FROM "Goals" g\n              LEFT JOIN "ActivityReportGoals" arg\n              ON g.id = arg."goalId"\n              LEFT JOIN "ActivityReports" a\n              ON arg."activityReportId" = a.id\n              WHERE NULLIF(g.status,'') IS NULL\n              AND arg.id IS NULL\n              AND g."createdVia" != 'imported'\n              order by g.id\n            )\n          UPDATE "Goals" g\n          SET "status" = gf."status"\n          FROM "GoalFixes" gf\n          WHERE g.id = gf.id;
Executing (9a6f9a78-c257-4aed-822b-1eaa7cad7a1a): WITH\n            "GoalFixes" AS (\n              select\n                g.id,\n                'Not Started' "status"\n              FROM "Goals" g\n              LEFT JOIN "ActivityReportGoals" arg\n              ON g.id = arg."goalId"\n              LEFT JOIN "ActivityReports" a\n              ON arg."activityReportId" = a.id\n              WHERE NULLIF(g.status,'') IS NULL\n              AND arg.id IS NULL\n              AND g."createdVia" = 'imported'\n              order by g.id\n            )\n          UPDATE "Goals" g\n          SET "status" = gf."status"\n          FROM "GoalFixes" gf\n          WHERE g.id = gf.id;
Executing (9a6f9a78-c257-4aed-822b-1eaa7cad7a1a): WITH\n            "GoalFixes" AS (\n              select\n                g.id,\n                (ARRAY_AGG(g2."createdVia"))[1] "createdVia"\n              FROM "Goals" g\n              LEFT JOIN "ActivityReportGoals" arg\n              ON g.id = arg."goalId"\n              LEFT JOIN "ActivityReports" a\n              ON arg."activityReportId" = a.id\n              LEFT JOIN "Goals" g2\n              ON g."goalTemplateId" = g2."goalTemplateId"\n              AND g2."createdVia" IS NOT NULL\n              WHERE g."createdVia" IS NULL\n              AND arg.id IS NOT NULL\n              AND g2.id IS NOT NULL\n              group by 1\n              order by g.id\n            )\n          UPDATE "Goals" g\n          SET "createdVia" = gf."createdVia"\n          FROM "GoalFixes" gf\n          WHERE g.id = gf.id;
Executing (9a6f9a78-c257-4aed-822b-1eaa7cad7a1a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230215000000-goal-status-cleanup: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230216200028-add-rttapa-feature-flag: migrating =======
Executing (98b50614-cf4c-4530-b5d3-34515c4aae5b): START TRANSACTION;
Connection validated successfully
Executing (98b50614-cf4c-4530-b5d3-34515c4aae5b): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230216200028-add-rttapa-feature-flag.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (98b50614-cf4c-4530-b5d3-34515c4aae5b): DO $$ BEGIN\n        ALTER TYPE "enum_Users_flags" ADD VALUE 'rttapa_form';\n      EXCEPTION\n        WHEN duplicate_object THEN null;\n      END $$;
Executing (98b50614-cf4c-4530-b5d3-34515c4aae5b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230216200028-add-rttapa-feature-flag: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230220173627-create-regional-goal-dash-feature-flag: migrating =======
Executing (4b7eb587-6334-42b8-a3e1-da63a1bef531): START TRANSACTION;
Connection validated successfully
Executing (4b7eb587-6334-42b8-a3e1-da63a1bef531): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230220173627-create-regional-goal-dash-feature-flag.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (4b7eb587-6334-42b8-a3e1-da63a1bef531): DO $$ BEGIN\n      ALTER TYPE "enum_Users_flags" ADD VALUE 'regional_goal_dashboard';\n      EXCEPTION\n      WHEN duplicate_object THEN null;\n      END $$;
Executing (4b7eb587-6334-42b8-a3e1-da63a1bef531): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230220173627-create-regional-goal-dash-feature-flag: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230223193406-add-alert-size-variant: migrating =======
Executing (9c1c0fe8-497c-4a0e-a316-494bd2ccb76d): START TRANSACTION;
Connection validated successfully
Executing (9c1c0fe8-497c-4a0e-a316-494bd2ccb76d): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230223193406-add-alert-size-variant.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9c1c0fe8-497c-4a0e-a316-494bd2ccb76d): CREATE TYPE "public"."enum_SiteAlerts_size" AS ENUM('standard', 'slim', 'large');ALTER TABLE "public"."SiteAlerts" ADD COLUMN "size" "public"."enum_SiteAlerts_size" NOT NULL DEFAULT 'standard';
Executing (9c1c0fe8-497c-4a0e-a316-494bd2ccb76d): UPDATE "SiteAlerts" SET "size" = 'large'
Executing (9c1c0fe8-497c-4a0e-a316-494bd2ccb76d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230223193406-add-alert-size-variant: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230301200028-anv-statistics-feature-flag: migrating =======
Executing (5097c38e-a90c-4802-9b63-69ac9c2ab1cf): START TRANSACTION;
Connection validated successfully
Executing (5097c38e-a90c-4802-9b63-69ac9c2ab1cf): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230301200028-anv-statistics-feature-flag.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5097c38e-a90c-4802-9b63-69ac9c2ab1cf): DO $$ BEGIN\n          ALTER TYPE "enum_Users_flags" ADD VALUE 'anv_statistics';\n        EXCEPTION\n          WHEN duplicate_object THEN null;\n        END $$;
Executing (5097c38e-a90c-4802-9b63-69ac9c2ab1cf): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230301200028-anv-statistics-feature-flag: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230307124028-create-and-update-topics: migrating =======
Executing (e18e63e4-de2e-4f77-b3f3-f938b59699de): START TRANSACTION;
Connection validated successfully
Executing (e18e63e4-de2e-4f77-b3f3-f938b59699de): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230307124028-create-and-update-topics.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e18e63e4-de2e-4f77-b3f3-f938b59699de): INSERT INTO "Topics"\n            ("name", "createdAt", "updatedAt")\n            VALUES\n            ('Fatherhood / Male Caregiving', current_timestamp, current_timestamp);
Executing (e18e63e4-de2e-4f77-b3f3-f938b59699de): INSERT INTO "Topics"\n        ("name", "createdAt", "updatedAt")\n        VALUES\n        ('Ongoing Monitoring and Continuous Improvement', current_timestamp, current_timestamp);\n\n        UPDATE "Topics" t1\n        SET\n            "mapsTo" = t2.id,\n            "deletedAt" = current_timestamp\n        FROM "Topics" t2\n        WHERE t1.name = 'Ongoing Monitoring Management System'\n        AND t2.name = 'Ongoing Monitoring and Continuous Improvement'\n        AND t1."deletedAt" IS NULL;
Executing (e18e63e4-de2e-4f77-b3f3-f938b59699de): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230307124028-create-and-update-topics: migrated (0.028s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230315124028-remove-unique-group-name: migrating =======
Executing (20318433-b654-4867-9620-ad26f6a9b11b): START TRANSACTION;
Connection validated successfully
Executing (20318433-b654-4867-9620-ad26f6a9b11b): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230315124028-remove-unique-group-name.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (20318433-b654-4867-9620-ad26f6a9b11b): ALTER TABLE "Groups"\n        DROP CONSTRAINT "Groups_name_key";
Executing (20318433-b654-4867-9620-ad26f6a9b11b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230315124028-remove-unique-group-name: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230321000000-rttapa-pilot-model: migrating =======
Executing (b13b65b2-5954-4645-a21e-7de4a80035c9): START TRANSACTION;
Connection validated successfully
Executing (b13b65b2-5954-4645-a21e-7de4a80035c9): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230321000000-rttapa-pilot-model.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b13b65b2-5954-4645-a21e-7de4a80035c9): CREATE TABLE IF NOT EXISTS "RttapaPilots" ("id"   SERIAL , "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "recipientId" INTEGER NOT NULL REFERENCES "Recipients" ("id"), "regionId" INTEGER NOT NULL REFERENCES "Regions" ("id"), "notes" TEXT, "goals" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "reviewDate" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (b13b65b2-5954-4645-a21e-7de4a80035c9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230321000000-rttapa-pilot-model: migrated (0.050s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230322150923-add-rtr-order-goals: migrating =======
Executing (935131c8-9b6d-4090-9f8d-24cda84e6893): START TRANSACTION;
Connection validated successfully
Executing (935131c8-9b6d-4090-9f8d-24cda84e6893): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230322150923-add-rtr-order-goals.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (935131c8-9b6d-4090-9f8d-24cda84e6893): ALTER TABLE "public"."Goals" ADD COLUMN "rtrOrder" INTEGER DEFAULT 1;
Executing (935131c8-9b6d-4090-9f8d-24cda84e6893): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230322150923-add-rtr-order-goals: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230323000000-fei-template-goal: migrating =======
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): START TRANSACTION;
Connection validated successfully
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230323000000-fei-template-goal.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_GoalTemplateFieldPrompts_fieldType' GROUP BY 1
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): CREATE TYPE "public"."enum_GoalTemplateFieldPrompts_fieldType" AS ENUM('multiselect');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): CREATE TABLE IF NOT EXISTS "GoalTemplateFieldPrompts" ("id"   SERIAL , "goalTemplateId" INTEGER NOT NULL REFERENCES "GoalTemplates" ("id"), "ordinal" INTEGER NOT NULL, "title" TEXT NOT NULL, "prompt" TEXT NOT NULL, "hint" TEXT, "caution" TEXT, "fieldType" "public"."enum_GoalTemplateFieldPrompts_fieldType", "options" TEXT[], "validations" JSON, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): CREATE TABLE IF NOT EXISTS "GoalFieldResponses" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "goalTemplateFieldPromptId" INTEGER NOT NULL REFERENCES "GoalTemplateFieldPrompts" ("id"), "response" TEXT[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "onAR" BOOLEAN NOT NULL, "onApprovedAR" BOOLEAN NOT NULL, PRIMARY KEY ("id"));
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): CREATE TABLE IF NOT EXISTS "ActivityReportGoalFieldResponses" ("id"   SERIAL , "activityReportGoalId" INTEGER NOT NULL REFERENCES "ActivityReportGoals" ("id"), "goalTemplateFieldPromptId" INTEGER NOT NULL REFERENCES "GoalTemplateFieldPrompts" ("id"), "response" TEXT[], "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): INSERT INTO "GoalTemplates" (\n          hash,\n          "templateName",\n          "regionId",\n          "creationMethod",\n          "createdAt",\n          "updatedAt",\n          "lastUsed",\n          "templateNameModifiedAt"\n        ) Values (\n          MD5(TRIM('(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)')),\n          '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)',\n          null,\n          'Curated'::"enum_GoalTemplates_creationMethod",\n          current_timestamp,\n          current_timestamp,\n          NULL,\n          current_timestamp\n        );
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): INSERT INTO "GoalTemplateFieldPrompts" (\n          "goalTemplateId",\n          ordinal,\n          "title",\n          "prompt",\n          "hint",\n          "caution",\n          "fieldType",\n          "options",\n          "validations",\n          "createdAt",\n          "updatedAt"\n        ) Values (\n          (SELECT id FROM "GoalTemplates" WHERE "templateName" = '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)'),\n          1,\n          TRIM('FEI root cause'),\n          TRIM('Select FEI root cause'),\n          'Maximum of 2',\n          'Each recipient should have an FEI root cause. If you''re not sure, please check their Recipient TTA Record and identify it there.',\n          'multiselect',\n          ARRAY['Community Partnerships','Facilities','Family Circumstances','Other ECE Care Options','Workforce'],\n          '{"required":"Select a root cause","rules":[{"name":"maxSelections","value":2,"message":"You can only select 2 options"}]}'::JSON,\n          current_timestamp,\n          current_timestamp\n        );
Executing (14451aee-5f82-4b9c-93d5-a84da7300bc8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230323000000-fei-template-goal: migrated (0.132s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230327203917-impersonation-audit-log: migrating =======
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): START TRANSACTION;
Connection validated successfully
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230327203917-impersonation-audit-log.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): DROP FUNCTION IF EXISTS "ZAFAddAuditingOnTable"(varchar(63));
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): CREATE OR REPLACE FUNCTION "ZAFAddAuditingOnTable"(t_name varchar(63), t_create_audit_table boolean DEFAULT true)\n          RETURNS VOID\n          LANGUAGE plpgsql AS\n        $func$\n        BEGIN\n          RAISE NOTICE 'Adding Auditing on %', t_name;\n\n          -- Only create the AL table when t_create_audit_table is true\n          IF t_create_audit_table THEN\n            PERFORM "ZAFCreateALTable"(t_name);\n          END IF;\n\n          PERFORM "ZAFCreateALFunction"(t_name);\n          PERFORM "ZAFCreateALTrigger"(t_name);\n          PERFORM "ZAFCreateAuditTruncateTable"(t_name);\n          PERFORM "ZAFCreateALNoUpdate"(t_name);\n          PERFORM "ZAFCreateALNoDelete"(t_name);\n          PERFORM "ZAFCreateALNoTruncate"(t_name);\n        END\n        $func$;
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): CREATE OR REPLACE FUNCTION "ZAFCreateALFunction"(t_name varchar(63))\n          RETURNS VOID\n          LANGUAGE plpgsql AS\n        $func$\n        BEGIN\n          EXECUTE format($sql$\n              CREATE OR REPLACE FUNCTION %I ()\n                RETURNS trigger\n                LANGUAGE plpgsql AS\n                $body$\n                DECLARE\n                    CREATED_BY bigint;\n                    IMPERSONATING bigint;\n                    TRANSACTION_ID uuid;\n                    SESSION_SIG TEXT;\n                    DESCRIPTOR_ID int;\n                    UNIQUE_OLD jsonb;\n                    UNIQUE_NEW jsonb;\n                    IS_LOGGABLE boolean;\n                BEGIN\n                    CREATED_BY := COALESCE(NULLIF(current_setting('audit.loggedUser', true),'')::BIGINT, -1);\n                    IMPERSONATING := COALESCE(NULLIF(current_setting('audit.impersonationUserId', true),'')::BIGINT, -1);\n\n                    TRANSACTION_ID := COALESCE(\n                        NULLIF(current_setting('audit.transactionId', true),'')::uuid,\n                        lpad(txid_current()::text,32,'0')::uuid);\n\n                    SESSION_SIG := NULLIF(current_setting('audit.sessionSig', true), '')::TEXT;\n\n                    DESCRIPTOR_ID := "ZAFDescriptorToID"(\n                        NULLIF(current_setting('audit.auditDescriptor', true), '')::TEXT);\n\n                    IF (TG_OP = 'INSERT') THEN\n                        INSERT INTO %I (\n                            data_id,\n                            old_row_data,\n                            new_row_data,\n                            dml_type,\n                            dml_timestamp,\n                            dml_by,\n                            dml_as,\n                            dml_txid,\n                            session_sig,\n                            descriptor_id\n                        )\n                        VALUES(\n                            NEW.id,\n                            null,\n                            to_jsonb(NEW),\n                            'INSERT',\n                            CURRENT_TIMESTAMP,\n                            CREATED_BY,\n                            IMPERSONATING,\n                            TRANSACTION_ID,\n                            SESSION_SIG,\n                            DESCRIPTOR_ID\n                        );\n\n                        RETURN NEW;\n                    ELSIF (TG_OP = 'UPDATE') THEN\n                        SELECT\n                        json_object(array_agg(a."columnName"),array_agg(a.pre_value)) AS pre,\n                        json_object(array_agg(a."columnName"),array_agg(a.post_value)) AS post,\n                        (count(trigerable) - count(NULLIF(trigerable,TRUE)) > 0) AS loggable\n                        INTO\n                        UNIQUE_OLD,\n                        UNIQUE_NEW,\n                        IS_LOGGABLE\n                        FROM (\n                            SELECT\n                            pre.key AS "columnName",\n                            pre.value #>> '{}' AS pre_value,\n                            post.value #>> '{}' AS post_value,\n                            NOT COALESCE(filter."columnName" = filter."columnName",FALSE) as trigerable\n                            FROM jsonb_each(to_jsonb(OLD)) AS pre\n                            INNER JOIN jsonb_each(to_jsonb(NEW)) AS post\n                            ON pre.key = post.key\n                            AND pre.value IS DISTINCT FROM post.value\n                            LEFT JOIN "ZAFilter" filter\n                            ON pre.key = filter."columnName"\n                            and ( filter."tableName" = %L OR filter."tableName" IS NULL)\n                        ) a;\n\n                        IF IS_LOGGABLE THEN\n                        INSERT INTO %I (\n                            data_id,\n                            old_row_data,\n                            new_row_data,\n                            dml_type,\n                            dml_timestamp,\n                            dml_by,\n                            dml_as,\n                            dml_txid,\n                            session_sig,\n                            descriptor_id\n                        )\n                        VALUES(\n                            NEW.id,\n                            UNIQUE_OLD,\n                            UNIQUE_NEW,\n                            'UPDATE',\n                            CURRENT_TIMESTAMP,\n                            CREATED_BY,\n                            IMPERSONATING,\n                            TRANSACTION_ID,\n                            SESSION_SIG,\n                            DESCRIPTOR_ID\n                        );\n                        END IF;\n                        RETURN NEW;\n                    ELSIF (TG_OP = 'DELETE') THEN\n                    INSERT INTO %I (\n                        data_id,\n                        old_row_data,\n                        new_row_data,\n                        dml_type,\n                        dml_timestamp,\n                        dml_by,\n                        dml_as,\n                        dml_txid,\n                        session_sig,\n                        descriptor_id\n                    )\n                    VALUES(\n                        OLD.id,\n                        to_jsonb(OLD),\n                        null,\n                        'DELETE',\n                        CURRENT_TIMESTAMP,\n                        CREATED_BY,\n                        IMPERSONATING,\n                        TRANSACTION_ID,\n                        SESSION_SIG,\n                        DESCRIPTOR_ID\n                    );\n\n                    RETURN OLD;\n                    END IF;\n\n                END;\n                $body$;$sql$,\n              'ZALF' || t_name,\n              'ZAL' || t_name,\n              t_name,\n              'ZAL' || t_name,\n              'ZAL' || t_name);\n        END\n        $func$;
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): CREATE OR REPLACE FUNCTION "ZAFCreateALTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            RAISE NOTICE 'Create Audit Log Table: %','ZAL' || t_name;\n            EXECUTE format($sql$\n                CREATE TABLE IF NOT EXISTS %I (\n                  id BIGSERIAL,\n                  data_id bigint NOT NULL,\n                  dml_type dml_type NOT NULL,\n                  old_row_data jsonb,\n                  new_row_data jsonb,\n                  dml_timestamp timestamp NOT NULL,\n                  dml_by bigint NOT NULL,\n                  dml_as bigint NOT NULL,\n                  dml_txid uuid NOT NULL,\n                  session_sig TEXT NULL,\n                  descriptor_id INT,\n                  PRIMARY KEY (id)\n                  );$sql$,\n                  'ZAL' || t_name);\n          END\n          $func$;
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): CREATE OR REPLACE FUNCTION "ZAFRemoveAuditingOnTable"(t_name varchar(63))\n          RETURNS VOID\n          LANGUAGE plpgsql AS\n        $func$\n        BEGIN\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALT' || t_name,\n              t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALF' || t_name);\n\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALTruncateT' || t_name,\n              t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALTruncateF' || t_name);\n\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALNoTruncateT' || t_name,\n              'ZAL' || t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALNoTruncateF' || t_name);\n\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALNoDeleteT' || t_name,\n              'ZAL' || t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALNoDeleteF' || t_name);\n\n          EXECUTE format($sql$\n              DROP TRIGGER IF EXISTS %I\n                ON %I$sql$,\n              'ZALNoUpdateT' || t_name,\n              'ZAL' || t_name);\n\n          EXECUTE format($sql$\n              DROP FUNCTION IF EXISTS %I()$sql$,\n              'ZALNoUpdateF' || t_name);\n        END\n        $func$;
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): DO $$\n        DECLARE\n          obj record;\n        BEGIN\n          FOR obj IN\n            SELECT table_name as "tableName"\n            FROM information_schema.tables\n            WHERE table_schema='public'\n              AND table_type='BASE TABLE'\n              AND table_name != 'SequelizeMeta'\n              AND table_name != 'RequestErrors'\n              AND table_name NOT LIKE 'ZAL%'\n          LOOP\n            RAISE INFO 'Audit Tables: Update auditing on "%"', obj."tableName";\n\n            -- Remove auditing from table\n            PERFORM "ZAFRemoveAuditingOnTable"(obj."tableName"::text);\n\n            -- Add new dml_as column\n            EXECUTE format($sql$\n              ALTER TABLE %I\n              ADD COLUMN "dml_as" bigint $sql$,\n              'ZAL' || obj."tableName"::text);\n\n            -- Fix type of dml_by - was int, should be bigint\n            EXECUTE format($sql$\n              ALTER TABLE %I\n              ALTER COLUMN "dml_by" TYPE bigint $sql$,\n              'ZAL' || obj."tableName"::text);\n\n            -- Restore auditing on table without recreating the table (hence false arg)\n            PERFORM "ZAFAddAuditingOnTable"(obj."tableName"::text, false);\n\n          END LOOP;\n        END$$;
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (aa07c37f-1d83-4ce1-80fb-a74f8d4e07a8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230327203917-impersonation-audit-log: migrated (1.139s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230328124028-remove-orphan-goals: migrating =======
Executing (cd4e53b6-b2c6-4108-a499-089bd29d6bd6): START TRANSACTION;
Connection validated successfully
Executing (cd4e53b6-b2c6-4108-a499-089bd29d6bd6): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230328124028-remove-orphan-goals.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (cd4e53b6-b2c6-4108-a499-089bd29d6bd6): /*\n        TTAHUB-1130: Delete Orphan Goals\n            This removes any goals created via the Activity Report\n            page that are NOT associated with a report.\n        */\n        -- 1.) Create Orphan GOALS Id's Temp Table.\n        SELECT G."id" AS "goalId"\n        INTO TEMP TEMP_ORPHAN_GOAL_IDS\n        FROM "Goals" G\n        WHERE COALESCE(G."createdVia",\n                      'activityReport') = 'activityReport'\n          AND COALESCE(G."isFromSmartsheetTtaPlan",\n                    FALSE) = FALSE\n          AND G."id" NOT IN\n            (SELECT DISTINCT "goalId"\n              FROM "ActivityReportGoals");\n\n        -- 2.) Create Orphan OBJECTIVE Id's Temp Table.\n        SELECT *\n        INTO TEMP TEMP_ORPHAN_OBJECTIVE_IDS\n        FROM\n          (\n            -- Orphan Objectives linked to orphan Goals.\n            SELECT O."id" AS "objectiveId"\n            FROM "Objectives" O\n            INNER JOIN TEMP_ORPHAN_GOAL_IDS G ON O."goalId" = G."goalId"\n            WHERE O."id" NOT IN\n                (SELECT DISTINCT "objectiveId"\n                  FROM "ActivityReportObjectives")\n            UNION -- Orphan Objectives not linked to Goals.\n          SELECT O."id" AS "objectiveId"\n            FROM "Objectives" O\n            LEFT JOIN "ActivityReportObjectives" ARO ON O.ID = ARO."objectiveId"\n            WHERE ARO.ID IS NULL\n              AND COALESCE(O."createdVia", 'activityReport') = 'activityReport' ) AS TMP;\n\n        -- 3.) Clean Objective Orphan Topics.\n        DROP TABLE IF EXISTS temp_results_count;\n        WITH deletedObjectiveTopics AS (\n        DELETE\n        FROM "ObjectiveTopics"\n        WHERE "objectiveId" IN\n            (SELECT "objectiveId"\n              FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n        RETURNING *)\n        SELECT 'Objective Topics', count(*)\n        INTO TEMP temp_results_count\n        FROM deletedObjectiveTopics;\n\n        -- 4.) Clean Objective Orphan Resources.\n        WITH objectiveResources AS (\n          DELETE\n          FROM "ObjectiveResources"\n          WHERE "objectiveId" IN\n              (SELECT "objectiveId"\n                FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n        RETURNING *)\n        INSERT INTO temp_results_count\n        SELECT 'Objective Resources', count(*)\n        FROM objectiveResources;\n\n        -- 5.) Clean Objective Orphan Files.\n        -- 5a.) Create Temp Table of Files being used by reports or non-orphan Objectives.\n        SELECT *\n        INTO TEMP TEMP_USED_OBJECTIVE_FILES_IDS\n        FROM\n          (\n            SELECT o."fileId"\n            FROM "ObjectiveFiles" o\n            WHERE o."objectiveId" NOT IN\n                (SELECT "objectiveId"\n                  FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n            UNION\n            SELECT DISTINCT AROF."fileId"\n            FROM "ActivityReportObjectiveFiles" AROF\n            UNION\n            SELECT DISTINCT ARF."fileId"\n            FROM "ActivityReportFiles" ARF) AS TMP;\n\n      -- 5b.) Clean Objective Files.\n      WITH objectiveFiless AS (\n          DELETE\n          FROM "ObjectiveFiles"\n          WHERE "objectiveId" IN\n              (SELECT "objectiveId"\n                FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Objective Files', count(*)\n      FROM objectiveFiless;\n\n      -- 5c.) Clean files only used by Orphan Objectives.\n      WITH files AS (\n          DELETE\n          FROM "Files"\n          WHERE "id" NOT IN\n              (SELECT "fileId"\n                FROM TEMP_USED_OBJECTIVE_FILES_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Files', count(*)\n      FROM files;\n\n      -- 6.) Clean Objective Orphan's.\n      WITH objectives AS (\n          DELETE\n          FROM "Objectives"\n          WHERE "id" IN\n              (SELECT "objectiveId"\n                FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Objectives', count(*)\n      FROM objectives;\n\n      -- 7.) Clean Goal Orphan Resources.\n      -- 7a.) Create Temp Table of Resources being used by reports or non-orphan Objectives.\n          SELECT *\n      INTO TEMP TEMP_USED_OBJECTIVE_RESOURCE_IDS\n          FROM\n            (\n              SELECT O."resourceId"\n              FROM "ObjectiveResources" O\n              WHERE O."objectiveId" NOT IN\n                  (SELECT "objectiveId"\n                    FROM TEMP_ORPHAN_OBJECTIVE_IDS)\n              UNION\n              SELECT DISTINCT ARR."resourceId"\n              FROM "ActivityReportResources" ARR\n              UNION\n              SELECT DISTINCT NSR."resourceId"\n              FROM "NextStepResources" NSR\n              UNION\n              SELECT DISTINCT OTR."resourceId"\n              FROM "ObjectiveTemplateResources" OTR\n              UNION\n              SELECT DISTINCT AROR."resourceId"\n              FROM "ActivityReportObjectiveResources" AROR) AS TMP;\n\n      -- 7b.) Clean Objective Resources.\n      WITH goalResources AS (\n          DELETE\n          FROM "GoalResources"\n          WHERE "goalId" IN\n              (SELECT "goalId"\n                FROM TEMP_ORPHAN_GOAL_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Goal Resources', count(*)\n      FROM goalResources;\n\n      -- 7c.) Clean resources only used by Orphan Objectives.\n      WITH resources AS (\n          DELETE\n          FROM "Resources"\n          WHERE "id" NOT IN\n              (SELECT "resourceId"\n                FROM TEMP_USED_OBJECTIVE_RESOURCE_IDS)\n      RETURNING *)\n      INSERT INTO temp_results_count\n      SELECT 'Resources', count(*)\n      FROM resources;\n\n      -- 8.) Clean Goal Orphan's.\n      WITH goals AS (\n            DELETE\n            FROM "Goals"\n            WHERE "id" IN\n                (SELECT "goalId"\n                  FROM TEMP_ORPHAN_GOAL_IDS)\n        RETURNING *)\n        INSERT INTO temp_results_count\n        SELECT 'Goals', count(*)\n        FROM goals;\n\n        -- 9.) DROP temp tables.\n        DROP TABLE TEMP_ORPHAN_GOAL_IDS;\n        DROP TABLE TEMP_ORPHAN_OBJECTIVE_IDS;\n        DROP TABLE TEMP_USED_OBJECTIVE_FILES_IDS;\n        DROP TABLE TEMP_USED_OBJECTIVE_RESOURCE_IDS;\n\n        -- 10.) Select Results.\n        SELECT * FROM temp_results_count;
Executing (cd4e53b6-b2c6-4108-a499-089bd29d6bd6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230328124028-remove-orphan-goals: migrated (0.066s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230330130554-goal-duplicate-cleanup: migrating =======
Executing (d9cc9ca4-f7dc-4bcf-b86e-59d72fd0a155): START TRANSACTION;
Connection validated successfully
Executing (d9cc9ca4-f7dc-4bcf-b86e-59d72fd0a155): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230330130554-goal-duplicate-cleanup.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d9cc9ca4-f7dc-4bcf-b86e-59d72fd0a155): -- Collect Pre Count Stats\n        DROP TABLE IF EXISTS "PreCountStatsByRegion";\n        CREATE TEMP TABLE "PreCountStatsByRegion" AS (\n            SELECT\n                gr."regionId",\n                COUNT(DISTINCT g."id") "GoalsTotal",\n                COUNT(DISTINCT arg."id") "ActivityReportGoalsTotal",\n                COUNT(DISTINCT argr."id") "ActivityReportGoalResourcesTotal",\n                COUNT(DISTINCT oj."id") "ObjectivesTotal",\n                COUNT(DISTINCT ojf."id") "ObjectiveFilesTotal",\n                COUNT(DISTINCT ojr."id") "ObjectiveResourcesTotal",\n                COUNT(DISTINCT ojt."id") "ObjectiveTopicsTotal",\n                COUNT(DISTINCT aro."id") "ActivityReportObjectivesTotal",\n                COUNT(DISTINCT arof."id") "ActivityReportObjectiveFilesTotal",\n                COUNT(DISTINCT aror."id") "ActivityReportObjectiveResourcesTotal",\n                COUNT(DISTINCT arot."id") "ActivityReportObjectiveTopicsTotal"\n            FROM "Grants" gr\n            FULL OUTER JOIN "Goals" g ON gr."id" = g."grantId"\n            FULL OUTER JOIN "ActivityReportGoals" arg ON g."id" = arg."goalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argr ON arg."id" = argr."activityReportGoalId"\n            FULL OUTER JOIN "Objectives" oj ON g."id" = oj."goalId"\n            FULL OUTER JOIN "ObjectiveFiles" ojf ON oj."id" = ojf."objectiveId"\n            FULL OUTER JOIN "ObjectiveResources" ojr ON oj."id" = ojr."objectiveId"\n            FULL OUTER JOIN "ObjectiveTopics" ojt ON oj."id" = ojt."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectives" aro ON oj."id" = aro."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveFiles" arof ON aro."id" = arof."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveResources" aror ON aro."id" = aror."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveTopics" arot ON aro."id" = arot."activityReportObjectiveId"\n            GROUP BY gr."regionId"\n        );\n        INSERT INTO "PreCountStatsByRegion"\n        SELECT\n            -1 "regionId",\n            SUM("GoalsTotal"),\n            SUM("ActivityReportGoalsTotal"),\n            SUM("ActivityReportGoalResourcesTotal"),\n            SUM("ObjectivesTotal"),\n            SUM("ObjectiveFilesTotal"),\n            SUM("ObjectiveResourcesTotal"),\n            SUM("ObjectiveTopicsTotal"),\n            SUM("ActivityReportObjectivesTotal"),\n            SUM("ActivityReportObjectiveFilesTotal"),\n            SUM("ActivityReportObjectiveResourcesTotal"),\n            SUM("ActivityReportObjectiveTopicsTotal")\n        FROM "PreCountStatsByRegion";\n        SELECT * FROM "PreCountStatsByRegion";\n\n        DROP TABLE IF EXISTS "DupGoalsOnARs";\n        CREATE TEMP TABLE "DupGoalsOnARs" AS (\n            SELECT\n            array_remove(ARRAY_AGG(DISTINCT arg."activityReportId"), NULL) "activityReportIds",\n            g."grantId",\n            MD5(TRIM(g.name)) "goalHash",\n            ARRAY_AGG(DISTINCT g.id ORDER BY g.id) "goalIds",\n            array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)) "toRemoveGoals",\n            MIN(g.id) "toUpdateGoal",\n            COUNT(DISTINCT g.id) "goalCnt",\n            g."status" = 'Closed' "statusClosed"\n            FROM "Goals" g\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."goalId" = g.id\n            LEFT JOIN "GoalTemplates" gt\n            ON g."goalTemplateId" = gt.id\n            GROUP BY 2,3,8\n            HAVING ARRAY_LENGTH(array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)), 1) > 0\n            ORDER BY 5 DESC\n        );\n        -- SELECT * FROM "DupGoalsOnARs";\n\n        DROP TABLE IF EXISTS "GoalsToModify";\n        CREATE TEMP TABLE "GoalsToModify" AS (\n            SELECT DISTINCT\n                g2."grantId",\n                TRIM(g.name) "name",\n                dgoa."goalHash",\n                CASE\n                    WHEN 'Closed' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Closed' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Closed'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(g."status"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Not Started'\n                    WHEN 'Draft' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Draft' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Draft'\n                    ELSE COALESCE((ARRAY_AGG(g2."status"))[1], 'Not Started')\n                END "status",\n                (ARRAY_AGG(COALESCE(g2.timeframe, g.timeframe)))[1] timeframe,\n                BOOL_OR(g2."isFromSmartsheetTtaPlan" OR g."isFromSmartsheetTtaPlan") "isFromSmartsheetTtaPlan",\n                MIN(LEAST(g2."createdAt",g."createdAt")) "createdAt",\n                MAX(GREATEST(g2."updatedAt", g."updatedAt")) "updatedAt",\n                g2."closeSuspendReason",\n                g2."closeSuspendContext",\n                MAX(GREATEST(g2."endDate", g."endDate")) "endDate",\n                CASE\n                    WHEN 'Closed' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Closed' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Closed'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Not Started'\n                    WHEN 'Draft' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Draft' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Draft'\n                    ELSE COALESCE((ARRAY_AGG(g2."previousStatus"))[1], 'Not Started')\n                END "previousStatus",\n                MIN(g."goalTemplateId") "goalTemplateId",\n                BOOL_OR(COALESCE(g2."onApprovedAR", FALSE) OR g."onApprovedAR") "onApprovedAR",\n                MIN(LEAST(g2."firstNotStartedAt", g."firstNotStartedAt")) "firstNotStartedAt",\n                MAX(GREATEST(g2."lastNotStartedAt", g."lastNotStartedAt")) "lastNotStartedAt",\n                MIN(LEAST(g2."firstInProgressAt", g."firstInProgressAt")) "firstInProgressAt",\n                MAX(GREATEST(g2."lastInProgressAt", g."lastInProgressAt")) "lastInProgressAt",\n                MIN(LEAST(g2."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt")) "firstCeasedSuspendedAt",\n                MAX(GREATEST(g2."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt")) "lastCeasedSuspendedAt",\n                MIN(LEAST(g2."firstClosedAt", g."firstClosedAt")) "firstClosedAt",\n                MAX(GREATEST(g2."lastClosedAt", g."lastClosedAt")) "lastClosedAt",\n                MIN(LEAST(g2."firstCompletedAt", g."firstCompletedAt")) "firstCompletedAt",\n                MAX(GREATEST(g2."lastCompletedAt", g."lastCompletedAt")) "lastCompletedAt",\n                CASE\n                    WHEN 'imported' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'imported' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'imported'\n                    WHEN 'rtr' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'rtr' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'rtr'\n                    WHEN 'activityReport' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'activityReport' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'activityReport'\n                END "createdVia",\n                CASE\n                    WHEN 'Yes' = ANY(ARRAY_AGG(g."isRttapa"))\n                    OR 'Yes' = ANY(ARRAY_AGG(g2."isRttapa"))\n                    THEN 'Yes'\n                    WHEN 'No' = ANY(ARRAY_AGG(g."isRttapa"))\n                    OR 'No' = ANY(ARRAY_AGG(g2."isRttapa"))\n                    THEN 'No'\n                END "isRttapa",\n                BOOL_OR(COALESCE(g2."onAR", FALSE) OR g."onAR") "onAR",\n                array_remove(ARRAY_AGG(DISTINCT "g".id ORDER by "g".id), MIN("g2".id)) "toRemove",\n                MIN("g2".id) "toUpdate"\n            FROM "Goals" g\n            JOIN "DupGoalsOnARs" dgoa\n            ON g.id = ANY(dgoa."toRemoveGoals")\n            AND g.id != dgoa."toUpdateGoal"\n            JOIN "Goals" g2\n            ON g2.id = dgoa."toUpdateGoal"\n            AND g."grantId" = dgoa."grantId"\n            AND MD5(TRIM(g.name)) = MD5(TRIM(g2.name))\n            GROUP BY 1,2,3,9,10\n        );\n        -- SELECT * FROM "GoalsToModify";\n\n        -- All objectives that are duplicates on goals that are duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnDupGoalsOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnDupGoalsOnARs" AS (\n            SELECT\n                dgoa.*,\n                MD5(TRIM(o.title)) "objectiveHash",\n                o.status = 'Complete' "statusComplete",\n                ARRAY_AGG(o.id ORDER BY o."goalId", o.id) "objectiveIds",\n                array_remove(ARRAY_AGG(o.id ORDER BY o."goalId", o.id),(MIN(o.id) FILTER (WHERE o."goalId" = dgoa."toUpdateGoal"))) "toRemoveObjectives",\n                MIN(o.id) FILTER (WHERE o."goalId" = dgoa."toUpdateGoal") "toUpdateObjective",\n                COUNT(DISTINCT o.id) "objectiveCnt"\n            FROM "Objectives" o\n            JOIN "DupGoalsOnARs" dgoa\n            ON o."goalId" = ANY(dgoa."goalIds")\n            GROUP BY 1,2,3,4,5,6,7,8,9,10\n            HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT o.id), 1) > 1\n            ORDER BY 8 DESC\n        );\n        -- SELECT * FROM "DupObjectivesOnDupGoalsOnARs";\n\n        -- All objectives that are duplicates on goals that are not duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnNonDupGoalsOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnNonDupGoalsOnARs" AS (\n            SELECT DISTINCT\n                array_remove(ARRAY_AGG(DISTINCT aro."activityReportId"), NULL) "activityReportIds",\n                g."grantId",\n                MD5(TRIM(g.name)) "goalHash",\n                ARRAY[g.id] "goalIds",\n                ARRAY[]::int[] "toRemove",\n                g.id "toUpdate",\n                1 "goalCnt",\n                g."status" = 'Closed' "statusClosed",\n                MD5(TRIM(o.title)) "objectiveHash",\n                o.status = 'Complete' "statusComplete",\n                ARRAY_AGG(o.id ORDER BY o.id) "objectiveIds",\n                array_remove(ARRAY_AGG(o.id ORDER BY o.id),MIN(o.id)) "toRemoveObjectives",\n                MIN(o.id) "toUpdateObjective",\n                COUNT(DISTINCT o.id) "objectiveCnt"\n            FROM "Objectives" o\n            LEFT JOIN "ActivityReportObjectives" aro\n            ON aro."objectiveId" = o.id\n            LEFT JOIN "ObjectiveTemplates" ot\n            ON o."objectiveTemplateId" = ot.id\n            JOIN "Goals" g\n            ON o."goalId" = g.id\n            LEFT JOIN "DupObjectivesOnDupGoalsOnARs" doodgoa\n            ON aro."activityReportId" = ANY(doodgoa."activityReportIds")\n            AND g."grantId" = doodgoa."grantId"\n            AND MD5(TRIM(g.name)) = doodgoa."goalHash"\n            AND MD5(TRIM(o.title)) = doodgoa."objectiveHash"\n            AND o.id != ANY(doodgoa."objectiveIds")\n            WHERE doodgoa."grantId" IS NULL \n            GROUP BY 2,3,4,5,6,7,8,9,10\n            HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT o.id), 1) > 1\n            ORDER BY 11 DESC\n        );\n        -- SELECT * FROM "DupObjectivesOnNonDupGoalsOnARs";\n\n        -- All objectives that are duplicates on goals that are (not) duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnARs" AS (\n            SELECT\n            *\n            FROM "DupObjectivesOnDupGoalsOnARs"\n            UNION\n            SELECT\n            *\n            FROM "DupObjectivesOnNonDupGoalsOnARs"\n        );\n        -- SELECT * FROM "DupObjectivesOnARs";\n\n        -- Handle Objectives\n        DROP TABLE IF EXISTS "ObjectivesToModify";\n        CREATE TEMP TABLE "ObjectivesToModify" AS (\n            SELECT DISTINCT\n                dooa."toUpdateGoal" "goalId",\n                TRIM(o."title") "title",\n                dooa."objectiveHash",\n                CASE\n                    WHEN 'Complete' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Complete' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Complete'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(o."status"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Not Started'\n                    ELSE COALESCE((ARRAY_AGG(o2."status"))[1], 'Not Started')\n                END "status",\n                MIN(LEAST("o"."createdAt", "o2"."createdAt")) "createdAt",\n                MAX(GREATEST("o"."updatedAt", "o2"."updatedAt")) "updatedAt",\n                COALESCE(o2."otherEntityId", o."otherEntityId") "otherEntityId",\n                BOOL_OR(COALESCE(o."onApprovedAR", FALSE) OR COALESCE(o2."onApprovedAR", FALSE)) "onApprovedAR",\n                MIN(LEAST("o"."firstNotStartedAt", "o2"."firstNotStartedAt")) "firstNotStartedAt",\n                MAX(GREATEST("o"."lastNotStartedAt", "o2"."lastNotStartedAt")) "lastNotStartedAt",\n                MIN(LEAST("o"."firstInProgressAt", "o2"."firstInProgressAt")) "firstInProgressAt",\n                MAX(GREATEST("o"."lastInProgressAt", "o2"."lastInProgressAt")) "lastInProgressAt",\n                MIN(LEAST("o"."firstCompleteAt", "o2"."firstCompleteAt")) "firstCompleteAt",\n                MAX(GREATEST("o"."lastCompleteAt", "o2"."lastCompleteAt")) "lastCompleteAt",\n                MIN(LEAST("o"."firstSuspendedAt", "o2"."firstSuspendedAt")) "firstSuspendedAt",\n                MAX(GREATEST("o"."lastSuspendedAt", "o2"."lastSuspendedAt")) "lastSuspendedAt",\n                MIN(LEAST(o."rtrOrder", o2."rtrOrder")) "rtrOrder",\n                CASE\n                    WHEN 'rtr' = ANY(ARRAY_AGG(o."createdVia"))\n                    OR 'rtr' = ANY(ARRAY_AGG(o2."createdVia"))\n                    THEN 'rtr'\n                    WHEN 'activityReport' = ANY(ARRAY_AGG(o."createdVia"))\n                    OR 'activityReport' = ANY(ARRAY_AGG(o2."createdVia"))\n                    THEN 'activityReport'\n                    ELSE NULL\n                END "createdVia",\n                BOOL_OR(COALESCE(o."onAR", FALSE) OR COALESCE(o2."onAR", FALSE)) "onAR",\n                ARRAY_AGG(DISTINCT "o".id ORDER by "o".id) "toRemove",\n                MIN("o2".id) "toUpdate"\n            FROM "Objectives" o\n            JOIN "DupObjectivesOnARs" dooa\n            ON o.id = ANY(dooa."toRemoveObjectives")\n            AND o.id != COALESCE(dooa."toUpdateObjective",0)\n            LEFT JOIN "Objectives" o2\n            ON o2.id = dooa."toUpdateObjective"\n            AND o2."goalId" = dooa."toUpdateGoal"\n            GROUP BY 1,2,3,7\n        );\n        -- SELECT * FROM "ObjectivesToModify";\n\n        --somehow there are duplicates in here, so dedupe\n        DROP TABLE IF EXISTS "DeduplicatedObjectivesToModify";\n        CREATE TEMP TABLE "DeduplicatedObjectivesToModify" AS (\n            SELECT DISTINCT ON ("goalId", "objectiveHash")\n                "goalId",\n                TRIM("title") "title",\n                "status",\n                "createdAt",\n                "updatedAt",\n                "otherEntityId",\n                "onApprovedAR",\n                "firstNotStartedAt",\n                "lastNotStartedAt",\n                "firstInProgressAt",\n                "lastInProgressAt",\n                "firstCompleteAt",\n                "lastCompleteAt",\n                "firstSuspendedAt",\n                "lastSuspendedAt",\n                "rtrOrder",\n                "createdVia",\n                "toRemove",\n                "toUpdate",\n                "objectiveHash",\n                "onAR"\n            FROM "ObjectivesToModify"\n            ORDER BY "goalId", "objectiveHash", "createdAt"\n        );\n\n        DROP TABLE IF EXISTS "UniqueObjectivesOnGoalsToBeRemoved";\n        CREATE TEMP TABLE "UniqueObjectivesOnGoalsToBeRemoved" AS (\n            WITH\n                "GoalsToModifyIds" AS (\n                    SELECT\n                        gtm."toUpdate",\n                        tr."toRemove"\n                    FROM "GoalsToModify" gtm\n                    CROSS JOIN UNNEST(gtm."toRemove") tr("toRemove")\n                ),\n                "ObjectivesToModifyIds" AS (\n                    SELECT\n                        dotm."toUpdate",\n                        tr."toRemove"\n                    FROM "DeduplicatedObjectivesToModify" dotm\n                    CROSS JOIN UNNEST(dotm."toRemove") tr("toRemove")\n                )\n            SELECT DISTINCT\n                o.id,\n                o."goalId" "oldGoalId",\n                gtmi."toUpdate" "newGoalId"\n            FROM "Objectives" o\n            JOIN "GoalsToModifyIds" gtmi\n            ON o."goalId" = gtmi."toRemove"\n            LEFT JOIN "ObjectivesToModifyIds" otmi\n            ON o.id = otmi."toRemove"\n            WHERE otmi."toUpdate" IS NULL\n        );\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Shift_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "ShiftObjectives";\n        CREATE TEMP TABLE "ShiftObjectives" AS\n            WITH shift_objectives AS (\n                UPDATE "Objectives" "o"\n                SET\n                    "goalId" = uoogtbr."newGoalId"\n                FROM "UniqueObjectivesOnGoalsToBeRemoved" uoogtbr\n                WHERE "o".id = uoogtbr.id\n                RETURNING\n                "o".id "updated_objective_id",\n                uoogtbr."oldGoalId" "old_goal_id",\n                uoogtbr."newGoalId" "new_goal_id"\n            )\n        SELECT * FROM shift_objectives;\n        -- SELECT * FROM "ShiftObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectives";\n        CREATE TEMP TABLE "InsertObjectives" AS\n        WITH inserted_objectives  AS (\n            INSERT INTO "Objectives"\n            (\n            "goalId",\n            "title",\n            status,\n            "createdAt",\n            "updatedAt",\n            "otherEntityId",\n            "onAR",\n            "onApprovedAR",\n            "firstNotStartedAt",\n            "lastNotStartedAt",\n            "firstInProgressAt",\n            "lastInProgressAt",\n            "firstCompleteAt",\n            "lastCompleteAt",\n            "firstSuspendedAt",\n            "lastSuspendedAt",\n            "rtrOrder",\n            "createdVia"\n            )\n            SELECT\n            "goalId",\n            TRIM("title") "title",\n            status,\n            "createdAt",\n            "updatedAt",\n            "otherEntityId",\n            "onAR",\n            "onApprovedAR",\n            "firstNotStartedAt",\n            "lastNotStartedAt",\n            "firstInProgressAt",\n            "lastInProgressAt",\n            "firstCompleteAt",\n            "lastCompleteAt",\n            "firstSuspendedAt",\n            "lastSuspendedAt",\n            "rtrOrder",\n            "createdVia"::"enum_Objectives_createdVia"\n            FROM "ObjectivesToModify" otm\n            WHERE otm."toUpdate" IS NULL\n            RETURNING\n                id "inserted_objective_id",\n                id "objectiveId",\n                "goalId",\n                MD5(TRIM("title")) "objectiveHash"\n        )\n        SELECT * FROM inserted_objectives;\n        -- SELECT * FROM "InsertObjectives";\n        END;\n\n        -- Update foreign key references in ActivityReportObjectives\n        -- UPDATE "ActivityReportObjectives" aro\n        -- SET "objectiveId" = "InsertObjectives"."inserted_objective_id"\n        -- FROM "InsertObjectives"\n        -- WHERE aro."objectiveId" = "InsertObjectives"."old_objective_id";\n\n        -- somehow there are duplicates in here, so dedupe\n        DROP TABLE IF EXISTS "DeduplicatedInsertObjectives";\n        CREATE TEMP TABLE "DeduplicatedInsertObjectives" AS (\n            SELECT DISTINCT ON ("goalId", "objectiveHash")\n                "objectiveId",\n                "goalId",\n                "objectiveHash"\n            FROM "InsertObjectives"\n            ORDER BY "goalId", "objectiveHash"\n        );\n\n        -- Handle Objectives Metadata tables\n        DROP TABLE IF EXISTS "ObjectivesToModifyMetadata";\n        CREATE TEMP TABLE "ObjectivesToModifyMetadata" AS\n        WITH objectives_to_modify AS (\n            SELECT\n            otm."goalId",\n            otm."title",\n            otm.status,\n            otm."createdAt",\n            otm."updatedAt",\n            otm."otherEntityId",\n            otm."onAR",\n            otm."onApprovedAR",\n            otm."firstNotStartedAt",\n            otm."lastNotStartedAt",\n            otm."firstInProgressAt",\n            otm."lastInProgressAt",\n            otm."firstCompleteAt",\n            otm."lastCompleteAt",\n            otm."firstSuspendedAt",\n            otm."lastSuspendedAt",\n            otm."rtrOrder",\n            otm."createdVia",\n            otm."toRemove",\n            COALESCE(otm."toUpdate", "io"."objectiveId") "toUpdate"\n            FROM "ObjectivesToModify" otm\n            LEFT JOIN "InsertObjectives" "io"\n            ON otm."goalId" = "io"."goalId"\n            AND otm."objectiveHash" = "io"."objectiveHash"\n        )\n        SELECT * FROM objectives_to_modify;\n        -- SELECT * FROM "ObjectivesToModifyMetadata";\n        \n        --Check for Extra Objectives \n\n        -- SELECT "grantId", "goalHash", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(doodgoa)))\n        -- FROM "DupObjectivesOnDupGoalsOnARs" doodgoa\n        -- GROUP BY "grantId", "goalHash", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "grantId", "goalHash", "objectiveHash", COUNT(*) , array_to_json(array_agg(row_to_json(doondgoa)))\n        -- FROM "DupObjectivesOnNonDupGoalsOnARs"doondgoa\n        -- GROUP BY "grantId", "goalHash", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(otm)))\n        -- FROM "ObjectivesToModify" otm\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(io)))\n        -- FROM "InsertObjectives" io\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*)\n        -- FROM "DeduplicatedObjectivesToModify"\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*)\n        -- FROM "DeduplicatedInsertObjectives"\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(otmm)))\n        -- FROM "ObjectivesToModifyMetadata" otmm\n        -- GROUP BY "goalId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT o1."goalId", o1."title", o1."objectiveHash", o2."title", o2."objectiveHash"\n        -- FROM "ObjectivesToModify" o1\n        -- JOIN "ObjectivesToModify" o2\n        -- ON o1."goalId" = o2."goalId"\n        -- AND o1."title" ILIKE o2."title"\n        -- AND o1."objectiveHash" != o2."objectiveHash";\n        \n        -- Validate ObjectiveFiles objectiveId null value\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveFiles" "of"\n        -- JOIN otmm_recast otmm\n        -- ON "of"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveFiles" "of2"\n        -- ON "of2"."objectiveId" = otmm."toUpdate"\n        -- AND "of"."fileId" = "of2"."fileId";\n        \n        -- Handle ObjectiveFiles\n        DROP TABLE IF EXISTS "ObjectiveFilesToModify";\n        CREATE TEMP TABLE "ObjectiveFilesToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "of"."fileId",\n            MIN(LEAST("of"."createdAt", "of2"."createdAt")) "createdAt",\n            MAX(GREATEST("of"."updatedAt", "of2"."updatedAt")) "updatedAt",\n            BOOL_OR("of"."onAR" OR COALESCE("of2"."onAR", FALSE)) "onAR",\n            BOOL_OR("of"."onApprovedAR" OR COALESCE("of2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "of".id ORDER by "of".id) "toRemove" ,\n            (ARRAY_AGG(DISTINCT "of2".id))[1] "toUpdate"\n            FROM "ObjectiveFiles" "of"\n            JOIN otmm_recast otmm\n            ON "of"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveFiles" "of2"\n            ON "of2"."objectiveId" = otmm."toUpdate"\n            AND "of"."fileId" = "of2"."fileId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ObjectiveFilesToModify\n        -- SELECT * FROM "ObjectiveFilesToModify";\n        -- SELECT "objectiveId", "fileId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveFilesToModify" ofmm\n        -- GROUP BY "objectiveId", "fileId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveFiles";\n        CREATE TEMP TABLE "InsertObjectiveFiles" AS\n            WITH objective_files AS ( \n            INSERT INTO "ObjectiveFiles"\n            (\n            "objectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            )\n            SELECT\n            "objectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            FROM "ObjectiveFilesToModify" oftm\n            WHERE oftm."toUpdate" IS NULL and oftm."objectiveId" IS NOT NULL\n            RETURNING\n            id "objectiveFileId",\n            "objectiveId"\n        )\n        SELECT * FROM objective_files;\n        -- SELECT * FROM "InsertObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveFiles";\n        CREATE TEMP TABLE "UpdateObjectiveFiles" AS\n        WITH update_objective_files AS  (\n            UPDATE "ObjectiveFiles" "of"\n            SET\n            "createdAt" = oftm."createdAt",\n            "updatedAt" = oftm."updatedAt",\n            "onAR" = oftm."onAR",\n            "onApprovedAR" = oftm."onApprovedAR"\n            FROM "ObjectiveFilesToModify" oftm\n            WHERE "of".id = oftm."toUpdate"\n            AND (\n                "of"."createdAt" != oftm."createdAt"\n                OR "of"."updatedAt" != oftm."updatedAt"\n                OR "of"."onAR" != oftm."onAR"\n                OR "of"."onApprovedAR" != oftm."onApprovedAR"\n            )\n            RETURNING\n            "of".id "objectiveFileId",\n            "of"."objectiveId"\n        )\n        SELECT * FROM update_objective_files;\n        -- SELECT * FROM "UpdateObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveFiles";\n        CREATE TEMP TABLE "DeleteObjectiveFiles" AS\n        WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveFilesToModify"\n                ),\n            del_objective_files AS (\n            DELETE FROM "ObjectiveFiles" "of"\n            USING otmm_recast oftm\n            WHERE "of".id = to_remove\n            RETURNING\n            "of".id "objectiveFileId",\n            "of"."objectiveId"\n        )\n        SELECT * FROM del_objective_files;\n        -- SELECT * FROM "UpdateObjectiveFiles";\n\n        DROP TABLE IF EXISTS "ObjectiveFileStats";\n        CREATE TEMP TABLE "ObjectiveFileStats" AS (\n            SELECT\n            'ObjectiveFiles' "table",\n            (SELECT COUNT(*) FROM "InsertObjectiveFiles") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectiveFiles") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectiveFiles") "Deletes",\n            (SELECT COUNT(*) FROM "ObjectiveFiles") "post_count"\n        );\n\n        -- Validate ObjectiveResources objectiveId null value\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveResources" "or"\n        -- JOIN otmm_recast otmm\n        -- ON "or"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveResources" "or2"\n        -- ON "or2"."objectiveId" = otmm."toUpdate"\n        -- AND "or"."resourceId" = "or2"."resourceId";\n        \n        -- Handle ObjectiveResources\n\n        DROP TABLE IF EXISTS "ObjectiveResourcesToModify";\n        CREATE TEMP TABLE "ObjectiveResourcesToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "or"."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ObjectiveResources" "orx"\n                CROSS JOIN UNNEST("orx"."sourceFields") sfx("sourceField")\n                WHERE "or"."resourceId" = orx."resourceId"\n                AND (orx."objectiveId" = ANY(ARRAY_AGG("or"."objectiveId"))\n                OR otmm."toUpdate" = orx."objectiveId")\n            ) "sourceFields",\n            MIN(LEAST("or"."createdAt", "or2"."createdAt")) "createdAt",\n            MAX(GREATEST("or"."updatedAt", "or2"."updatedAt")) "updatedAt",\n            BOOL_OR("or"."onAR" OR COALESCE("or2"."onAR", FALSE)) "onAR",\n            BOOL_OR("or"."onApprovedAR" OR COALESCE("or2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "or".id ORDER by "or".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "or2".id))[1] "toUpdate"\n            FROM "ObjectiveResources" "or"\n            JOIN otmm_recast otmm\n            ON "or"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveResources" "or2"\n            ON "or2"."objectiveId" = otmm."toUpdate"\n            AND "or"."resourceId" = "or2"."resourceId"\n            GROUP BY 1,2\n        );\n        -- SELECT * FROM "ObjectiveResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n        \n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveResources";\n        CREATE TEMP TABLE "InsertObjectiveResources" AS\n            WITH  insert_objective_resources AS (\n                INSERT INTO "ObjectiveResources"\n                (\n                "objectiveId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                )\n                SELECT\n                "objectiveId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                FROM "ObjectiveResourcesToModify" ortm\n                WHERE ortm."toUpdate" IS NULL and ortm."objectiveId" IS NOT NULL\n                RETURNING\n                id "objectiveResourceId",\n                "objectiveId"\n            )\n        SELECT * FROM insert_objective_resources;\n        -- SELECT * FROM "InsertObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveResources";\n        CREATE TEMP TABLE "UpdateObjectiveResources" AS\n            WITH update_objective_resources AS (\n                UPDATE "ObjectiveResources" "or"\n                SET\n                "sourceFields" = ortm."sourceFields",\n                "createdAt" = ortm."createdAt",\n                "updatedAt" = ortm."updatedAt",\n                "onAR" = ortm."onAR",\n                "onApprovedAR" = ortm."onApprovedAR"\n                FROM "ObjectiveResourcesToModify" ortm\n                WHERE "or".id = ortm."toUpdate"\n                AND (\n                    "or"."sourceFields" != ortm."sourceFields"\n                    OR "or"."createdAt" != ortm."createdAt"\n                    OR "or"."updatedAt" != ortm."updatedAt"\n                    OR "or"."onAR" != ortm."onAR"\n                    OR "or"."onApprovedAR" != ortm."onApprovedAR"\n                )\n                RETURNING\n                "or".id "objectiveResourceId",\n                "or"."objectiveId"\n            )\n        SELECT * FROM update_objective_resources;\n        -- SELECT * FROM "UpdateObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveResources";\n        CREATE TEMP TABLE "DeleteObjectiveResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveResourcesToModify"\n                ),\n            delete_objective_resources AS\n            (\n                DELETE FROM "ObjectiveResources" "or"\n                USING otmm_recast ortm\n                WHERE "or".id = to_remove\n                RETURNING\n                "or".id "objectiveResourceId",\n                "or"."objectiveId"\n            )\n        SELECT * FROM delete_objective_resources;\n        -- SELECT * FROM "DeleteObjectiveResources";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveResourceStats";\n        CREATE TEMP TABLE "ObjectiveResourceStats" AS\n            (\n                SELECT\n                'ObjectiveResources' "table",\n                (SELECT COUNT(*) FROM "InsertObjectiveResources") "Inserts",\n                (SELECT COUNT(*) FROM "UpdateObjectiveResources") "Updates",\n                (SELECT COUNT(*) FROM "DeleteObjectiveResources") "Deletes",\n                (SELECT COUNT(*) FROM "ObjectiveResources" "or") "post_count"\n            );\n\n        -- Validate ObjectiveTopics objectiveId null values\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveTopics" "ot"\n        -- JOIN  otmm_recast otmm\n        -- ON "ot"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveTopics" "ot2"\n        -- ON "ot2"."objectiveId" = otmm."toUpdate"\n        -- AND "ot"."topicId" = "ot2"."topicId";\n\n        -- Handle ObjectiveTopics\n\n            DROP TABLE IF EXISTS "ObjectiveTopicsToModify";\n            CREATE TEMP TABLE "ObjectiveTopicsToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "ot"."topicId",\n            MIN(LEAST("ot"."createdAt", "ot2"."createdAt")) "createdAt",\n            MAX(GREATEST("ot"."updatedAt", "ot2"."updatedAt")) "updatedAt",\n            BOOL_OR("ot"."onAR" OR COALESCE("ot2"."onAR", FALSE)) "onAR",\n            BOOL_OR("ot"."onApprovedAR" OR COALESCE("ot2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "ot".id ORDER by "ot".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "ot2".id))[1] "toUpdate"\n            FROM "ObjectiveTopics" "ot"\n            JOIN  otmm_recast otmm\n            ON "ot"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveTopics" "ot2"\n            ON "ot2"."objectiveId" = otmm."toUpdate"\n            AND "ot"."topicId" = "ot2"."topicId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ObjectiveTopicsToModify\n        -- SELECT * FROM "ObjectiveTopicsToModify";\n        -- SELECT "topicId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveTopicsToModify" ofmm\n        -- GROUP BY "topicId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveTopics";\n        CREATE TEMP TABLE "InsertObjectiveTopics" AS\n        WITH insert_objective_topics AS (\n            INSERT INTO "ObjectiveTopics"\n            (\n            "objectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            )\n            SELECT\n            "objectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            FROM "ObjectiveTopicsToModify" ottm\n            WHERE ottm."toUpdate" IS NULL AND ottm."objectiveId" IS NOT NULL\n            RETURNING\n            id "objectiveTopicId",\n            "objectiveId"\n        )\n        SELECT * FROM insert_objective_topics;\n        -- SELECT * FROM "InsertObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveTopics";\n        CREATE TEMP TABLE "UpdateObjectiveTopics" AS\n        WITH update_objective_topics AS (\n            UPDATE "ObjectiveTopics" "ot"\n            SET\n            "createdAt" = ottm."createdAt",\n            "updatedAt" = ottm."updatedAt",\n            "onAR" = ottm."onAR",\n            "onApprovedAR" = ottm."onApprovedAR"\n            FROM "ObjectiveTopicsToModify" ottm\n            WHERE "ot".id = ottm."toUpdate"\n            AND (\n                "ot"."createdAt" != ottm."createdAt"\n                OR "ot"."updatedAt" != ottm."updatedAt"\n                OR "ot"."onAR" != ottm."onAR"\n                OR "ot"."onApprovedAR" != ottm."onApprovedAR"\n            )\n            RETURNING\n            "ot".id "objectiveTopicId",\n            "ot"."objectiveId"\n        )\n        SELECT * FROM update_objective_topics;\n        -- SELECT * FROM "UpdateObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveTopics";\n        CREATE TEMP TABLE "DeleteObjectiveTopics" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveTopicsToModify"\n                ),\n            delete_objective_topics AS (\n            DELETE FROM "ObjectiveTopics" "ot"\n            USING otmm_recast ottm\n            WHERE "ot".id = to_remove\n            RETURNING\n            "ot".id "objectiveTopicId",\n            "ot"."objectiveId"\n        )\n        SELECT * FROM delete_objective_topics;\n        -- SELECT * FROM "DeleteObjectiveTopics";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveTopicStats";\n        CREATE TEMP TABLE "ObjectiveTopicStats" AS (\n            SELECT\n            'ObjectiveTopics' "table",\n            (SELECT COUNT(*) FROM "InsertObjectiveTopics") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectiveTopics") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectiveTopics") "Deletes",\n            (SELECT COUNT(*) FROM "ObjectiveTopics" ot) "post_count"\n        );\n        -- Continue Handle Objectives\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectives";\n        CREATE TEMP TABLE "UpdateObjectives" AS\n        WITH update_objectives AS (\n            UPDATE "Objectives" "o"\n            SET\n            "createdAt" = otmm."createdAt",\n            "updatedAt" = otmm."updatedAt",\n            "onAR" = otmm."onAR",\n            "onApprovedAR" = otmm."onApprovedAR",\n            "firstNotStartedAt" = otmm."firstNotStartedAt",\n            "lastNotStartedAt" = otmm."lastNotStartedAt",\n            "firstInProgressAt" = otmm."firstInProgressAt",\n            "lastInProgressAt" = otmm."lastInProgressAt",\n            "firstCompleteAt" = otmm."firstCompleteAt",\n            "lastCompleteAt" = otmm."lastCompleteAt",\n            "firstSuspendedAt" = otmm."firstSuspendedAt",\n            "lastSuspendedAt" = otmm."lastSuspendedAt",\n            "rtrOrder" = otmm."rtrOrder",\n            "createdVia" = otmm."createdVia"::"enum_Objectives_createdVia"\n            FROM "ObjectivesToModifyMetadata" otmm\n            WHERE "o".id = otmm."toUpdate"\n            AND (\n                "o"."createdAt" != otmm."createdAt"\n                OR "o"."updatedAt" != otmm."updatedAt"\n                OR "o"."onAR" != otmm."onAR"\n                OR "o"."onApprovedAR" != otmm."onApprovedAR"\n                OR "o"."firstNotStartedAt" != otmm."firstNotStartedAt"\n                OR "o"."lastNotStartedAt" != otmm."lastNotStartedAt"\n                OR "o"."firstInProgressAt" != otmm."firstInProgressAt"\n                OR "o"."lastInProgressAt" != otmm."lastInProgressAt"\n                OR "o"."firstCompleteAt" != otmm."firstCompleteAt"\n                OR "o"."lastCompleteAt" != otmm."lastCompleteAt"\n                OR "o"."firstSuspendedAt" != otmm."firstSuspendedAt"\n                OR "o"."lastSuspendedAt" != otmm."lastSuspendedAt"\n                OR "o"."rtrOrder" != otmm."rtrOrder"\n                OR "o"."createdVia" != otmm."createdVia"::"enum_Objectives_createdVia"\n            )\n            RETURNING\n            "o".id "updated_objective_id",\n            otmm."toUpdate" "old_objective_id"\n        )\n        SELECT * FROM update_objectives;\n        -- SELECT * FROM "UpdateObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        -- Update foreign key references in ActivityReportObjectives\n        UPDATE "ActivityReportObjectives" aro\n        SET "objectiveId" = "UpdateObjectives"."updated_objective_id"\n        FROM "UpdateObjectives"\n        WHERE aro."objectiveId" = "UpdateObjectives"."old_objective_id";\n        END;\n        \n        -- Handle ActivityReportObjectives\n        DROP TABLE IF EXISTS "ActivityReportObjectivesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectivesToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n                SELECT\n                    otmm."toUpdate" "objectiveId",\n                    aro."activityReportId",\n                    aro.title,\n                    aro.status,\n                    MIN(LEAST(aro."arOrder", aro2."arOrder")) "arOrder",\n                    STRING_AGG(DISTINCT "arox"."ttaProvided", E'\n') "ttaProvided",\n                    MIN(LEAST("aro"."createdAt", "aro2"."createdAt")) "createdAt",\n                    MAX(GREATEST("aro"."updatedAt", "aro2"."updatedAt")) "updatedAt",\n                    ARRAY_AGG(DISTINCT "aro".id ORDER by "aro".id) "toRemove",\n                    (ARRAY_AGG(DISTINCT "aro2".id))[1] "toUpdate"\n                    FROM "ActivityReportObjectives" aro\n                    JOIN  otmm_recast otmm\n                    ON "aro"."objectiveId" = to_remove\n                    LEFT JOIN "ActivityReportObjectives" aro2\n                    ON "aro2"."objectiveId" = otmm."toUpdate"\n                    AND "aro"."activityReportId" = "aro2"."activityReportId"\n                    LEFT JOIN "ActivityReportObjectives" arox\n                        ON "aro"."activityReportId" = arox."activityReportId"\n                        AND (\n                            arox."objectiveId" = "aro"."objectiveId"\n                            OR otmm."toUpdate" = arox."objectiveId"\n                        )\n                    GROUP BY 1,2,3,4\n                    );\n\n        -- Validate Handle ActivityReportObjectivesToModify\n        -- SELECT * FROM "ActivityReportObjectivesToModify";\n        -- SELECT "activityReportId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectivesToModify" ofmm\n        -- GROUP BY "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectives";\n        CREATE TEMP TABLE "InsertActivityReportObjectives" AS\n        WITH insert_activity_report_objectives AS (\n            INSERT INTO "ActivityReportObjectives"\n            (\n            "objectiveId",\n            "activityReportId",\n            title,\n            status,\n            "ttaProvided",\n            "arOrder",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "objectiveId",\n            "activityReportId",\n            TRIM(title) title,\n            status,\n            "ttaProvided",\n            "arOrder",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectivesToModify" oftm\n            WHERE oftm."toUpdate" IS NULL AND oftm."objectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveId",\n            "objectiveId",\n            "activityReportId"\n        )\n        SELECT * FROM insert_activity_report_objectives;\n        -- SELECT * FROM "InsertActivityReportObjectives";\n        END;\n\n        -- Handle ActivityReportObjectives Metadata tables\n        \n        DROP TABLE IF EXISTS "ActivityReportObjectivesToModifyMetadata";\n        CREATE TEMP TABLE "ActivityReportObjectivesToModifyMetadata" AS (\n            SELECT\n            arotm."objectiveId",\n            arotm."activityReportId",\n            arotm.title,\n            arotm.status,\n            arotm."arOrder",\n            arotm."ttaProvided",\n            arotm."createdAt",\n            arotm."updatedAt",\n            arotm."toRemove",\n            COALESCE(arotm."toUpdate", iaro."activityReportObjectiveId") "toUpdate"\n            FROM "ActivityReportObjectivesToModify" arotm\n            LEFT JOIN "InsertActivityReportObjectives" iaro\n            ON arotm."objectiveId" = iaro."objectiveId"\n            AND arotm."activityReportId" = iaro."activityReportId"\n        );\n\n        -- -- Validate Handle ActivityReportObjectivesToModifyMetadata\n        -- SELECT * FROM "ActivityReportObjectivesToModifyMetadata";\n        -- SELECT "objectiveId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectivesToModifyMetadata" ofmm\n        -- GROUP BY "objectiveId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- -- Validate  ActivityReportObjectiveFiles objectiveId null values\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ActivityReportObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ActivityReportObjectiveFiles" arof\n        -- JOIN otmm_recast arotmm\n        -- ON arof."activityReportObjectiveId" = to_remove\n        -- LEFT JOIN "ActivityReportObjectiveFiles" arof2\n        -- ON arof2."activityReportObjectiveId" = arotmm."toUpdate"\n        -- AND arof."fileId" = arof2."fileId";\n\n        -- Handle ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS "ActivityReportObjectiveFilesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveFilesToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModifyMetadata"\n        )\n            SELECT\n            arotmm."toUpdate" "activityReportObjectiveId",\n            arof."fileId",\n            MIN(LEAST("arof"."createdAt", "arof2"."createdAt")) "createdAt",\n            MAX(GREATEST("arof"."updatedAt", "arof2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "arof".id ORDER by "arof".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "arof2".id))[1] "toUpdate"\n            FROM "ActivityReportObjectiveFiles" arof\n            JOIN otmm_recast arotmm\n            ON arof."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveFiles" arof2\n            ON arof2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND arof."fileId" = arof2."fileId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveFilesToModify\n        -- SELECT * FROM "ActivityReportObjectiveFilesToModify";\n        -- SELECT "fileId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveFilesToModify" ofmm\n        -- GROUP BY "fileId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveFiles" AS\n        WITH insert_activity_report_objective_files AS (\n            INSERT INTO "ActivityReportObjectiveFiles"\n            (\n            "activityReportObjectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveFilesToModify" aroftm\n            WHERE aroftm."toUpdate" IS NULL and aroftm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveFileId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_files;\n        -- SELECT * FROM "InsertActivityReportObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveFiles" AS\n        WITH update_activity_report_objective_files AS (\n            UPDATE "ActivityReportObjectiveFiles" "arof"\n            SET\n            "createdAt" = aroftm."createdAt",\n            "updatedAt" = aroftm."updatedAt"\n            FROM "ActivityReportObjectiveFilesToModify" aroftm\n            WHERE "arof".id = aroftm."toUpdate"\n            AND (\n                "arof"."createdAt" != aroftm."createdAt"\n                OR "arof"."updatedAt" != aroftm."updatedAt"\n            )\n            RETURNING\n            "arof".id "activityReportObjectiveFileId",\n            "arof"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_files;\n        -- SELECT * FROM "UpdateActivityReportObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveFiles" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectiveFilesToModify"\n                ),\n        delete_activity_report_objective_files AS (\n            DELETE FROM "ActivityReportObjectiveFiles" "arof"\n            USING otmm_recast aroftm\n            WHERE "arof".id = to_remove\n            RETURNING\n            "arof".id "activityReportObjectiveFileId",\n            "arof"."activityReportObjectiveId"\n        )\n        SELECT * FROM delete_activity_report_objective_files;\n        -- SELECT * FROM "DeleteActivityReportObjectiveFiles";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveFileStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveFileStats" AS (\n            SELECT\n            'ActivityReportObjectiveFiles' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveFiles") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveFiles") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveFiles") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveFiles" arof) "post_count"\n        );\n\n        -- Handle ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS "ActivityReportObjectiveResourcesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveResourcesToModify" AS (\n            WITH arotmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectivesToModifyMetadata"\n                )\n            SELECT\n            arotmm."toUpdate" "activityReportObjectiveId",\n            aror."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ActivityReportObjectiveResources" "arorx"\n                CROSS JOIN UNNEST("arorx"."sourceFields") sfx("sourceField")\n                WHERE "aror"."resourceId" = arorx."resourceId"\n                AND (arorx."activityReportObjectiveId" = ANY(ARRAY_AGG("aror"."activityReportObjectiveId"))\n                OR arotmm."toUpdate" = arorx."activityReportObjectiveId")\n            ) "sourceFields",\n            MIN(LEAST("aror"."createdAt", "aror2"."createdAt")) "createdAt",\n            MAX(GREATEST("aror"."updatedAt", "aror2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "aror".id ORDER by "aror".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "aror2".id))[1] "toUpdate"\n            FROM "ActivityReportObjectiveResources" aror\n            JOIN  arotmm_recast arotmm\n            ON aror."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveResources" aror2\n            ON aror2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND aror."resourceId" = aror2."resourceId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveResourcesToModify\n        -- SELECT * FROM "ActivityReportObjectiveResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveResources";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveResources" AS\n        WITH insert_activity_report_objective_resources AS (\n            INSERT INTO "ActivityReportObjectiveResources"\n            (\n            "activityReportObjectiveId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveResourcesToModify" arortm\n            WHERE arortm."toUpdate" IS NULL and arortm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveResourceId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_resources;\n        -- SELECT * FROM "InsertActivityReportObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveResources";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveResources" AS\n        WITH update_activity_report_objective_resources AS (\n            UPDATE "ActivityReportObjectiveResources" "aror"\n            SET\n            "sourceFields" = arortm."sourceFields",\n            "createdAt" = arortm."createdAt",\n            "updatedAt" = arortm."updatedAt"\n            FROM "ActivityReportObjectiveResourcesToModify" arortm\n            WHERE "aror".id = arortm."toUpdate"\n            AND (\n                "aror"."sourceFields" != arortm."sourceFields"\n                OR "aror"."createdAt" != arortm."createdAt"\n                OR "aror"."updatedAt" != arortm."updatedAt"\n            )\n            RETURNING\n            "aror".id "activityReportObjectiveResourceId",\n            "aror"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_resources;\n        -- SELECT * FROM "UpdateActivityReportObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveResources";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectiveResourcesToModify"\n                ),\n            delete_activity_report_objective_resources AS (\n            DELETE FROM "ActivityReportObjectiveResources" "aror"\n            USING otmm_recast arortm\n            WHERE "aror".id = to_remove\n            RETURNING\n            "aror".id "activityReportObjectiveResourceId",\n            "aror"."activityReportObjectiveId"\n        )\n        SELECT * FROM delete_activity_report_objective_resources;\n        -- SELECT * FROM "DeleteActivityReportObjectiveResources";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveResourceStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveResourceStats" AS (\n            SELECT\n            'ActivityReportObjectiveResources' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveResources") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveResources") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveResources") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveResources" aror) "post_count"\n        );\n\n        -- Handle ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS "ActivityReportObjectiveTopicsToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveTopicsToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModifyMetadata"\n        )\n            SELECT\n                arotmm."toUpdate" "activityReportObjectiveId",\n                arot."topicId",\n                MIN(LEAST("arot"."createdAt", "arot2"."createdAt")) "createdAt",\n                MAX(GREATEST("arot"."updatedAt", "arot2"."updatedAt")) "updatedAt",\n                ARRAY_AGG(DISTINCT "arot".id ORDER by "arot".id) "toRemove",\n                MIN("arot2".id) "toUpdate"\n            FROM "ActivityReportObjectiveTopics" arot\n            JOIN otmm_recast arotmm\n            ON arot."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveTopics" arot2\n            ON arot2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND arot."topicId" = arot2."topicId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveTopicsToModify\n        -- SELECT * FROM "ActivityReportObjectiveTopicsToModify";\n        -- SELECT "topicId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveTopicsToModify" ofmm\n        -- GROUP BY "topicId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveTopics" AS\n        WITH insert_activity_report_objective_topics AS  (\n            INSERT INTO "ActivityReportObjectiveTopics"\n            (\n            "activityReportObjectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveTopicsToModify" arottm\n            WHERE arottm."toUpdate" IS NULL AND arottm."activityReportObjectiveId" IS NOT NULL \n            RETURNING\n            id "activityReportObjectiveTopicId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_topics;\n        -- SELECT * FROM "InsertActivityReportObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveTopics" AS\n        WITH update_activity_report_objective_topics AS (\n            UPDATE "ActivityReportObjectiveTopics" "arot"\n            SET\n            "createdAt" = arottm."createdAt",\n            "updatedAt" = arottm."updatedAt"\n            FROM "ActivityReportObjectiveTopicsToModify" arottm\n            WHERE "arot".id = arottm."toUpdate"\n            AND (\n                "arot"."createdAt" != arottm."createdAt"\n                OR "arot"."updatedAt" != arottm."updatedAt"\n            )\n            RETURNING\n            "arot".id "activityReportObjectiveTopicId",\n            "arot"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_topics;\n        -- SELECT * FROM "UpdateActivityReportObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveTopics" AS\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectiveTopicsToModify"\n            ),\n            delete_activity_report_objective_topics AS (\n                DELETE FROM "ActivityReportObjectiveTopics" "arot"\n                USING otmm_recast arottm\n                WHERE "arot".id = to_remove\n                RETURNING\n                "arot".id "activityReportObjectiveTopicId",\n                "arot"."activityReportObjectiveId"\n            )\n            SELECT * FROM delete_activity_report_objective_topics;\n        -- SELECT * FROM "DeleteActivityReportObjectiveTopics";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveTopicStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveTopicStats" AS (\n            SELECT\n            'ActivityReportObjectiveTopics' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveTopics") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveTopics") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveTopics") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveTopics" arot) "post_count"\n\n        );\n\n        -- Continue Handle ActivityReportObjectives\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectives";\n        CREATE TEMP TABLE "UpdateActivityReportObjectives" AS\n        WITH update_activity_report_objectives AS(\n            UPDATE "ActivityReportObjectives" "aro"\n            SET\n            "arOrder" = arotm."arOrder",\n            "ttaProvided" = arotm."ttaProvided",\n            "createdAt" = arotm."createdAt",\n            "updatedAt" = arotm."updatedAt"\n            FROM "ActivityReportObjectivesToModify" arotm\n            WHERE "aro".id = arotm."toUpdate"\n            AND (\n                "aro"."arOrder" != arotm."arOrder"\n                OR "aro"."ttaProvided" != arotm."ttaProvided"\n                OR "aro"."createdAt" != arotm."createdAt"\n                OR "aro"."updatedAt" != arotm."updatedAt"\n            )\n            RETURNING\n            "aro".id "activityReportObjectiveId",\n            "aro"."objectiveId"\n        )\n        SELECT * FROM update_activity_report_objectives;\n        -- SELECT * FROM "UpdateActivityReportObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectives";\n        CREATE TEMP TABLE "DeleteActivityReportObjectives" AS\n        WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModify"\n        ),\n        -- Delete related rows from ActivityReportObjectiveFiles table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING otmm_recast arotm\n            WHERE arof."activityReportObjectiveId" = to_remove\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" "aro"\n            USING otmm_recast arotm\n            WHERE "aro".id = to_remove\n            RETURNING\n                "aro".id "activityReportObjectiveId",\n                "aro"."objectiveId"\n        )\n        SELECT * FROM deleted_aro;\n        -- SELECT * FROM "DeleteActivityReportObjectives";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveStats" AS (\n            SELECT\n            'ActivityReportObjectives' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectives") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectives") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectives") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectives" aro) "post_count"\n        );\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectives";\n        CREATE TEMP TABLE "DeleteObjectives" AS\n        WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ObjectivesToModify"\n            ),\n        -- Delete related rows from ActivityReportObjectiveFiles table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING "ActivityReportObjectives" aro, otm_recast\n            WHERE aro."objectiveId" = to_remove AND arof."activityReportObjectiveId" = aro.id\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING otm_recast\n            WHERE aro."objectiveId" = to_remove\n            RETURNING aro."objectiveId"\n        ),\n\n        deleted_of AS (\n            DELETE FROM "ObjectiveFiles" of\n            USING otm_recast\n            WHERE of."objectiveId" = to_remove\n            RETURNING of."objectiveId"\n        ),\n        -- Delete rows from Objectives table\n        deleted_o AS (\n            DELETE FROM "Objectives" "o"\n            USING otm_recast\n            WHERE "o".id = to_remove\n            RETURNING\n                "o".id "objectiveId"\n        )\n        SELECT * FROM deleted_o;\n        -- SELECT * FROM "DeleteObjectives";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveStats";\n        CREATE TEMP TABLE "ObjectiveStats" AS (\n            SELECT\n            'Objectives' "table",\n            (SELECT COUNT(*) FROM "InsertObjectives") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectives") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectives") "Deletes",\n            (SELECT COUNT(*) FROM "Objectives" o) "post_count"\n        );\n\n        -- Handle ActivityReportGoals\n        DROP TABLE IF EXISTS "ActivityReportGoalsToModify";\n        CREATE TEMP TABLE "ActivityReportGoalsToModify" AS (\n            SELECT\n            dgoa."toUpdateGoal" "goalId",\n            arg."activityReportId",\n            TRIM(arg.name) "name",\n            arg.status,\n            COALESCE(arg2.timeframe, arg.timeframe) timeframe,\n            arg2."closeSuspendReason",\n            arg2."closeSuspendContext",\n            MAX(GREATEST(arg2."endDate", arg."endDate")) "endDate",\n            CASE\n                WHEN 'Yes' = ANY(ARRAY_AGG(arg."isRttapa"))\n                OR 'Yes' = ANY(ARRAY_AGG(arg2."isRttapa"))\n                THEN 'Yes'\n                WHEN 'No' = ANY(ARRAY_AGG(arg."isRttapa"))\n                OR 'No' = ANY(ARRAY_AGG(arg2."isRttapa"))\n                THEN 'No'\n                ELSE NULL\n            END "isRttapa",\n            BOOL_OR(COALESCE(arg."isActivelyEdited", FALSE) OR COALESCE(arg2."isActivelyEdited", FALSE)) "isActivelyEdited",\n            MIN(LEAST("arg"."createdAt", "arg2"."createdAt")) "createdAt",\n            MAX(GREATEST("arg"."updatedAt", "arg2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "arg".id ORDER by "arg".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "arg2".id))[1] "toUpdate"\n            FROM "ActivityReportGoals" arg\n            JOIN "DupGoalsOnARs" dgoa\n            ON "arg"."goalId" = ANY(dgoa."toRemoveGoals")\n            AND "arg"."goalId" != dgoa."toUpdateGoal"\n            LEFT JOIN "ActivityReportGoals" "arg2"\n            ON "arg2"."goalId" = dgoa."toUpdateGoal"\n            AND "arg"."activityReportId" = "arg2"."activityReportId"\n            GROUP BY 1,2,3,4,5,6,7\n        );\n\n        -- Validate Handle ActivityReportGoalsToModify\n        -- SELECT * FROM "ActivityReportGoalsToModify";\n        -- SELECT "goalId","activityReportId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalsToModify" ofmm\n        -- GROUP BY "goalId", "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoals";\n        CREATE TEMP TABLE "InsertActivityReportGoals" AS\n        WITH insert_activity_report_goals AS (\n            INSERT INTO "ActivityReportGoals"\n            (\n            "goalId",\n            "activityReportId",\n            "name",\n            status,\n            "timeframe",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "endDate",\n            "isRttapa",\n            "isActivelyEdited",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "goalId",\n            "activityReportId",\n            TRIM("name") "name",\n            status,\n            "timeframe",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "endDate",\n            "isRttapa"::"enum_ActivityReportGoals_isRttapa",\n            "isActivelyEdited",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalsToModify" argtm\n            WHERE argtm."toUpdate" IS NULL AND argtm."activityReportId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalId",\n            "goalId",\n            "activityReportId"\n        )\n        SELECT * FROM insert_activity_report_goals;\n        -- SELECT * FROM "InsertActivityReportGoals";\n        END;\n\n        -- Handle ActivityReportGoals Metadata tables\n        DROP TABLE IF EXISTS "ActivityReportGoalsToModifyMetadata";\n        CREATE TEMP TABLE "ActivityReportGoalsToModifyMetadata" AS (\n            SELECT\n            argtm."goalId",\n            argtm."activityReportId",\n            TRIM(argtm.name) "name",\n            argtm.status,\n            argtm."timeframe",\n            argtm."closeSuspendReason",\n            argtm."closeSuspendContext",\n            argtm."endDate",\n            argtm."isRttapa",\n            argtm."isActivelyEdited",\n            argtm."createdAt",\n            argtm."updatedAt",\n        argtm."toRemove",\n            COALESCE(argtm."toUpdate", iarg."activityReportGoalId") "toUpdate"\n            FROM "ActivityReportGoalsToModify" argtm\n            LEFT JOIN "InsertActivityReportGoals" iarg\n            ON argtm."goalId" = iarg."goalId"\n            AND argtm."activityReportId" = iarg."activityReportId"\n        );\n\n        -- Validate Handle ActivityReportGoalsToModifyMetadata\n        -- SELECT * FROM "ActivityReportGoalsToModifyMetadata";\n        -- SELECT "goalId", "activityReportId","toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalsToModifyMetadata" ofmm\n        -- GROUP BY "goalId", "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- Handle ActivityReportGoalResources\n        DROP TABLE IF EXISTS "ActivityReportGoalResourcesToModify";\n        CREATE TEMP TABLE "ActivityReportGoalResourcesToModify" AS (\n          WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ActivityReportGoalsToModifyMetadata"\n            )\n            SELECT\n            argtmm."toUpdate" "activityReportGoalId",\n            argr."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ActivityReportGoalResources" "argrx"\n                CROSS JOIN UNNEST("argrx"."sourceFields") sfx("sourceField")\n                WHERE "argr"."resourceId" = argrx."resourceId"\n                AND (argrx."activityReportGoalId" = ANY(ARRAY_AGG("argr"."activityReportGoalId"))\n                OR argtmm."toUpdate" = argrx."activityReportGoalId")\n            ) "sourceFields",\n            MIN(LEAST("argr"."createdAt", "argr2"."createdAt")) "createdAt",\n            MAX(GREATEST("argr"."updatedAt", "argr2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "argr".id ORDER by "argr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "argr2".id))[1] "toUpdate"\n            FROM "ActivityReportGoalResources" argr\n            JOIN otm_recast argtmm\n            ON argr."activityReportGoalId" = to_remove\n            LEFT JOIN "ActivityReportGoalResources" argr2\n            ON argr2."activityReportGoalId" = argtmm."toUpdate"\n            AND argr."resourceId" = argr2."resourceId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportGoalResourcesToModify\n        -- SELECT * FROM "ActivityReportGoalResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoalResources";\n        CREATE TEMP TABLE "InsertActivityReportGoalResources" AS\n        WITH insert_activity_report_goals_resources AS (\n            INSERT INTO "ActivityReportGoalResources"\n            (\n            "activityReportGoalId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportGoalId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalResourcesToModify" argrtm\n            WHERE argrtm."toUpdate" IS NULL AND argrtm."activityReportGoalId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalResourceId",\n            "activityReportGoalId"\n        )\n        SELECT * FROM insert_activity_report_goals_resources;\n        -- SELECT * FROM "InsertActivityReportGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoalResources";\n        CREATE TEMP TABLE "UpdateActivityReportGoalResources" AS\n        WITH update_activity_report_goals_resources AS  (\n            UPDATE "ActivityReportGoalResources" "argr"\n            SET\n            "sourceFields" = argrtm."sourceFields",\n            "createdAt" = argrtm."createdAt",\n            "updatedAt" = argrtm."updatedAt"\n            FROM "ActivityReportGoalResourcesToModify" argrtm\n            WHERE "argr".id = argrtm."toUpdate"\n            AND (\n                "argr"."sourceFields" != argrtm."sourceFields"\n                OR "argr"."createdAt" != argrtm."createdAt"\n                OR "argr"."updatedAt" != argrtm."updatedAt"\n            )\n            RETURNING\n            "argr".id "activityReportGoalResourceId",\n            "argr"."activityReportGoalId"\n        )\n        SELECT * FROM update_activity_report_goals_resources;\n        -- SELECT * FROM "UpdateActivityReportGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoalResources";\n        CREATE TEMP TABLE "DeleteActivityReportGoalResources" AS\n        WITH delete_activity_report_goals_resources AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalResourcesToModify"\n                )\n            DELETE FROM "ActivityReportGoalResources" "argr"\n            USING otmm_recast argrtm\n            WHERE "argr".id = to_remove\n            RETURNING\n            "argr".id "activityReportGoalResourceId",\n            "argr"."activityReportGoalId"\n        )\n        SELECT * FROM delete_activity_report_goals_resources;\n        -- SELECT * FROM "DeleteActivityReportGoalResources";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalResourceStats";\n        CREATE TEMP TABLE "ActivityReportGoalResourceStats" AS (\n            SELECT\n            'ActivityReportGoalResources' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoalResources") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoalResources") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoalResources") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoalResources" argr) "post_count"\n        );\n\n        -- Continue Handle ActivityReportGoals\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoals";\n        CREATE TEMP TABLE "UpdateActivityReportGoals" AS\n        WITH update_activity_report_goals AS (\n            UPDATE "ActivityReportGoals" "arg"\n            SET\n            "timeframe" = argtm."timeframe",\n            "endDate" = argtm."endDate",\n            "isRttapa" = argtm."isRttapa"::"enum_ActivityReportGoals_isRttapa",\n            "isActivelyEdited" = argtm."isActivelyEdited",\n            "createdAt" = argtm."createdAt",\n            "updatedAt" = argtm."updatedAt"\n            FROM "ActivityReportGoalsToModify" argtm\n            WHERE "arg".id = argtm."toUpdate"\n            AND (\n              "arg"."timeframe" != argtm."timeframe"\n              OR "arg"."endDate" != argtm."endDate"\n              OR "arg"."isRttapa" != argtm."isRttapa"::"enum_ActivityReportGoals_isRttapa"\n              OR "arg"."isActivelyEdited" != argtm."isActivelyEdited"\n              OR "arg"."createdAt" != argtm."createdAt"\n              OR "arg"."updatedAt" != argtm."updatedAt"\n            )\n            RETURNING\n            "arg".id "activityReportGoalId",\n            "arg"."goalId"\n        )SELECT * FROM update_activity_report_goals;\n        -- SELECT * FROM "UpdateActivityReportGoals";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoals";\n        CREATE TEMP TABLE "DeleteActivityReportGoals" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalsToModify"\n                ),\n            delete_activity_report_goals AS  (\n            DELETE FROM "ActivityReportGoals" "arg"\n            USING otmm_recast argtm\n            WHERE "arg".id = to_remove\n            RETURNING\n            "arg".id "activityReportGoalId",\n            "arg"."goalId"\n        )\n        SELECT * FROM delete_activity_report_goals;\n        -- SELECT * FROM "DeleteActivityReportGoals";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalStats";\n        CREATE TEMP TABLE "ActivityReportGoalStats" AS (\n            SELECT\n            'ActivityReportGoals' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoals") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoals") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoals") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoals" ar) "post_count"\n\n        );\n        -- Continue Handle Goals\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_Goals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateGoals";\n        CREATE TEMP TABLE "UpdateGoals" AS\n        WITH update_goals AS (\n            UPDATE "Goals" "g"\n            SET\n            "status" = gtm."status",\n            "timeframe" = gtm."timeframe",\n            "isFromSmartsheetTtaPlan" = gtm."isFromSmartsheetTtaPlan",\n            "createdAt" = gtm."createdAt",\n            "updatedAt" = gtm."updatedAt",\n            "endDate" = gtm."endDate",\n            "previousStatus" = gtm."previousStatus",\n            "goalTemplateId" = gtm."goalTemplateId",\n            "onAR" = gtm."onAR",\n            "onApprovedAR" = gtm."onApprovedAR",\n            "firstNotStartedAt" = gtm."firstNotStartedAt",\n            "lastNotStartedAt" = gtm."lastNotStartedAt",\n            "firstInProgressAt" = gtm."firstInProgressAt",\n            "lastInProgressAt" = gtm."lastInProgressAt",\n            "firstCeasedSuspendedAt" = gtm."firstCeasedSuspendedAt",\n            "lastCeasedSuspendedAt" = gtm."lastCeasedSuspendedAt",\n            "firstClosedAt" = gtm."firstClosedAt",\n            "lastClosedAt" = gtm."lastClosedAt",\n            "firstCompletedAt" = gtm."firstCompletedAt",\n            "lastCompletedAt" = gtm."lastCompletedAt",\n            "isRttapa" = gtm."isRttapa"::"enum_Goals_isRttapa",\n            "createdVia" = gtm."createdVia"::"enum_Goals_createdVia"\n            FROM "GoalsToModify" gtm\n            WHERE "g".id = gtm."toUpdate"\n            AND (\n              "g"."status" != gtm."status"\n              OR "g"."timeframe" != gtm."timeframe"\n              OR "g"."isFromSmartsheetTtaPlan" != gtm."isFromSmartsheetTtaPlan"\n              OR "g"."createdAt" != gtm."createdAt"\n              OR "g"."updatedAt" != gtm."updatedAt"\n              OR "g"."endDate" != gtm."endDate"\n              OR "g"."previousStatus" != gtm."previousStatus"\n              OR "g"."goalTemplateId" != gtm."goalTemplateId"\n              OR "g"."onAR" != gtm."onAR"\n              OR "g"."onApprovedAR" != gtm."onApprovedAR"\n              OR "g"."firstNotStartedAt" != gtm."firstNotStartedAt"\n              OR "g"."lastNotStartedAt" != gtm."lastNotStartedAt"\n              OR "g"."firstInProgressAt" != gtm."firstInProgressAt"\n              OR "g"."lastInProgressAt" != gtm."lastInProgressAt"\n              OR "g"."firstCeasedSuspendedAt" != gtm."firstCeasedSuspendedAt"\n              OR "g"."lastCeasedSuspendedAt" != gtm."lastCeasedSuspendedAt"\n              OR "g"."firstClosedAt" != gtm."firstClosedAt"\n              OR "g"."lastClosedAt" != gtm."lastClosedAt"\n              OR "g"."firstCompletedAt" != gtm."firstCompletedAt"\n              OR "g"."lastCompletedAt" != gtm."lastCompletedAt"\n              OR "g"."isRttapa" != gtm."isRttapa"::"enum_Goals_isRttapa"\n              OR "g"."createdVia" != gtm."createdVia"::"enum_Goals_createdVia"\n            )\n            RETURNING\n            "g".id "goalId"\n        )\n        SELECT * FROM update_goals;\n        -- SELECT * FROM "UpdateGoals";\n        END;\n\n        -- Validate Handle GoalsToModify\n        -- SELECT * FROM "Goals";\n        -- SELECT *, COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "Goals" ofmm\n        -- GROUP BY "id"\n        -- HAVING COUNT(*) > 1;\n\n        -- DROP TABLE IF EXISTS "ViolatingDeleteGoals";\n        -- CREATE TEMP TABLE "ViolatingDeleteGoals" AS\n        -- WITH gtm_recast AS (\n        -- SELECT *,\n        --     UNNEST("toRemove") to_remove\n        -- FROM "GoalsToModify"\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ActivityReportObjectiveFiles table\n        -- violated_arof AS (\n        --     SELECT 'ActivityReportObjectiveFiles' as table_name, \n        --         arof.id as primary_key,\n        --         arof."activityReportObjectiveId" as foreign_key, \n        --         o.id as objective_id, \n        --         array_to_json(array_agg(row_to_json(om))) as raw_objective,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal\n        --     FROM "ActivityReportObjectiveFiles" arof\n        --     LEFT JOIN "ActivityReportObjectives" aro ON arof."activityReportObjectiveId" = aro.id\n        --     LEFT JOIN "Objectives" o ON aro."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     LEFT JOIN "Objectives" om ON om.id = o.id\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY arof.id, arof."activityReportObjectiveId", o.id\n        -- ),\n\n        -- -- Identify rows violating foreign key constraints in ActivityReportObjectives table\n        -- violated_aro AS (\n        --     SELECT 'ActivityReportObjectives' as table_name, \n        --         aro.id as primary_key, \n        --         aro."objectiveId" as foreign_key, \n        --         to_remove as goal_id, \n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal, \n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ActivityReportObjectives" aro\n        --     LEFT JOIN "Objectives" o ON aro."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY aro.id, aro."objectiveId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ObjectiveFiles table\n        -- violated_of AS (\n        --     SELECT 'ObjectiveFiles' as table_name, \n        --         of.id as primary_key, \n        --         of."objectiveId" as foreign_key, \n        --         to_remove as goal_id, \n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal, \n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ObjectiveFiles" of\n        --     LEFT JOIN "Objectives" o ON of."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY of.id, of."objectiveId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in Objectives table\n        -- violated_o AS (\n        --     SELECT 'Objectives' as table_name, \n        --         o.id as primary_key,\n        --         o."goalId" as foreign_key, \n        --         to_remove as goal_id, \n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "Objectives" o\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY o.id, o."goalId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ActivityReportGoals table\n        -- violated_arg AS (\n        --     SELECT 'ActivityReportGoals' as table_name, \n        --         arg.id as primary_key,\n        --         arg."goalId" as foreign_key, \n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal, \n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ActivityReportGoals" arg\n        --     LEFT JOIN "Objectives" o ON o."goalId" = arg."goalId"\n        --     LEFT JOIN gtm_recast ON arg."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY arg.id, arg."goalId", to_remove\n        -- )\n\n        -- -- Display rows violating foreign key constraints\n        -- SELECT * FROM violated_arof\n        -- UNION ALL\n        -- SELECT * FROM violated_aro\n        -- UNION ALL\n        -- SELECT * FROM violated_of\n        -- UNION ALL\n        -- SELECT * FROM violated_o\n        -- UNION ALL\n        -- SELECT * FROM violated_arg;\n        -- SELECT * FROM "ViolatingDeleteGoals";\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_Goals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteGoals";\n        CREATE TEMP TABLE "DeleteGoals" AS\n        WITH gtm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n          FROM "GoalsToModify"\n          ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING "Objectives" o, gtm_recast, "ActivityReportObjectives" aro\n            WHERE o."goalId" = to_remove AND aro."objectiveId" = o.id AND arof."activityReportObjectiveId" = aro.id\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "Objectives" o, gtm_recast\n            WHERE o."goalId" = to_remove AND aro."objectiveId" = o.id\n            RETURNING aro."objectiveId"\n        ),\n        -- Delete related rows from ObjectiveFiles table\n        deleted_of AS (\n            DELETE FROM "ObjectiveFiles" of\n            USING "Objectives" o, gtm_recast\n            WHERE o."goalId" = to_remove AND of."objectiveId" = o.id\n            RETURNING of."objectiveId"\n        ),\n        -- Delete related rows from Objectives table\n        deleted_o AS (\n            DELETE FROM "Objectives" o\n            USING gtm_recast\n            WHERE o."goalId" = to_remove\n            RETURNING o."goalId"\n        ),\n        -- Delete related rows from ActivityReportGoals table\n        deleted_arg AS (\n            DELETE FROM "ActivityReportGoals" arg\n            USING gtm_recast\n            WHERE arg."goalId" = to_remove\n            RETURNING arg."goalId"\n        ),\n        -- Delete rows from Goals table\n        deleted_g AS (\n            DELETE FROM "Goals" "g"\n            USING gtm_recast\n            WHERE "g".id = to_remove\n            RETURNING\n                "g".id "goalId"\n        )\n\n        -- Display deleted rows from Goals table\n        SELECT * FROM deleted_g;\n        -- SELECT * FROM "DeleteGoals";\n        END;\n\n        -- Stats\n\n        DROP TABLE IF EXISTS "GoalStats";\n        CREATE TEMP TABLE "GoalStats" AS (\n            SELECT\n            'Goals' "table",\n            0 "Inserts",\n            (SELECT COUNT(*) FROM "UpdateGoals") "Updates",\n            (SELECT COUNT(*) FROM "DeleteGoals") "Deletes",\n            (SELECT COUNT(*) FROM "Goals" g) "post_count"\n        );\n        \n        DROP TABLE IF EXISTS "PostCountStatsByRegion";\n        CREATE TEMP TABLE "PostCountStatsByRegion" AS (\n            SELECT\n                gr."regionId",\n                COUNT(DISTINCT g."id") "GoalsTotal",\n                COUNT(DISTINCT arg."id") "ActivityReportGoalsTotal",\n                COUNT(DISTINCT argr."id") "ActivityReportGoalResourcesTotal",\n                COUNT(DISTINCT oj."id") "ObjectivesTotal",\n                COUNT(DISTINCT ojf."id") "ObjectiveFilesTotal",\n                COUNT(DISTINCT ojr."id") "ObjectiveResourcesTotal",\n                COUNT(DISTINCT ojt."id") "ObjectiveTopicsTotal",\n                COUNT(DISTINCT aro."id") "ActivityReportObjectivesTotal",\n                COUNT(DISTINCT arof."id") "ActivityReportObjectiveFilesTotal",\n                COUNT(DISTINCT aror."id") "ActivityReportObjectiveResourcesTotal",\n                COUNT(DISTINCT arot."id") "ActivityReportObjectiveTopicsTotal"\n            FROM "Grants" gr\n            FULL OUTER JOIN "Goals" g ON gr."id" = g."grantId"\n            FULL OUTER JOIN "ActivityReportGoals" arg ON g."id" = arg."goalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argr ON arg."id" = argr."activityReportGoalId"\n            FULL OUTER JOIN "Objectives" oj ON g."id" = oj."goalId"\n            FULL OUTER JOIN "ObjectiveFiles" ojf ON oj."id" = ojf."objectiveId"\n            FULL OUTER JOIN "ObjectiveResources" ojr ON oj."id" = ojr."objectiveId"\n            FULL OUTER JOIN "ObjectiveTopics" ojt ON oj."id" = ojt."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectives" aro ON oj."id" = aro."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveFiles" arof ON aro."id" = arof."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveResources" aror ON aro."id" = aror."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveTopics" arot ON aro."id" = arot."activityReportObjectiveId"\n            GROUP BY gr."regionId"\n        );\n        INSERT INTO "PostCountStatsByRegion"\n        SELECT\n            -1 "regionId",\n            SUM("GoalsTotal"),\n            SUM("ActivityReportGoalsTotal"),\n            SUM("ActivityReportGoalResourcesTotal"),\n            SUM("ObjectivesTotal"),\n            SUM("ObjectiveFilesTotal"),\n            SUM("ObjectiveResourcesTotal"),\n            SUM("ObjectiveTopicsTotal"),\n            SUM("ActivityReportObjectivesTotal"),\n            SUM("ActivityReportObjectiveFilesTotal"),\n            SUM("ActivityReportObjectiveResourcesTotal"),\n            SUM("ActivityReportObjectiveTopicsTotal")\n        FROM "PostCountStatsByRegion";\n        SELECT * FROM "PostCountStatsByRegion";\n        \n        WITH "RegionDiffs" AS (\n            SELECT\n                pre."regionId",\n                pre."GoalsTotal" - post."GoalsTotal" AS "GoalsTotalDiff",\n                pre."ActivityReportGoalsTotal" - post."ActivityReportGoalsTotal" AS "ActivityReportGoalsTotalDiff",\n                pre."ActivityReportGoalResourcesTotal" - post."ActivityReportGoalResourcesTotal" AS "ActivityReportGoalResourcesTotalDiff",\n                pre."ObjectivesTotal" - post."ObjectivesTotal" AS "ObjectivesTotalDiff",\n                pre."ObjectiveFilesTotal" - post."ObjectiveFilesTotal" AS "ObjectiveFilesTotalDiff",\n                pre."ObjectiveResourcesTotal" - post."ObjectiveResourcesTotal" AS "ObjectiveResourcesTotalDiff",\n                pre."ObjectiveTopicsTotal" - post."ObjectiveTopicsTotal" AS "ObjectiveTopicsTotalDiff",\n                pre."ActivityReportObjectivesTotal" - post."ActivityReportObjectivesTotal" AS "ActivityReportObjectivesTotalDiff",\n                pre."ActivityReportObjectiveFilesTotal" - post."ActivityReportObjectiveFilesTotal" AS "ActivityReportObjectiveFilesTotalDiff",\n                pre."ActivityReportObjectiveResourcesTotal" - post."ActivityReportObjectiveResourcesTotal" AS "ActivityReportObjectiveResourcesTotalDiff",\n                pre."ActivityReportObjectiveTopicsTotal" - post."ActivityReportObjectiveTopicsTotal" AS "ActivityReportObjectiveTopicsTotalDiff"\n                \n            FROM "PreCountStatsByRegion" pre\n            JOIN "PostCountStatsByRegion" post ON pre."regionId" = post."regionId"\n        )\n        SELECT * FROM "RegionDiffs";\n        \n        WITH "CollectStats" AS (\n            SELECT 1 id, *,\n                (SELECT SUM("GoalsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "GoalStats"\n            UNION\n            SELECT 2 id, *,\n                (SELECT SUM("ActivityReportGoalsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalStats"\n            UNION\n            SELECT 3 id, *,\n                (SELECT SUM("ActivityReportGoalResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalResourceStats"\n            UNION\n            SELECT 4 id, *,\n                (SELECT SUM("ObjectivesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveStats"\n            UNION\n            SELECT 5 id, *,\n                (SELECT SUM("ObjectiveFilesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveFileStats"\n            UNION\n            SELECT 6 id, *,\n                (SELECT SUM("ObjectiveResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveResourceStats"\n            UNION\n            SELECT 7 id, *,\n                (SELECT SUM("ObjectiveTopicsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveTopicStats"\n            UNION\n            SELECT 8 id, *,\n                (SELECT SUM("ActivityReportObjectivesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveStats"\n            UNION\n            SELECT 9 id, *,\n                (SELECT SUM("ActivityReportObjectiveFilesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveFileStats"\n            UNION\n            SELECT 10 id, *,\n                (SELECT SUM("ActivityReportObjectiveResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveResourceStats"\n            UNION\n            SELECT 11 id, *,\n                (SELECT SUM("ActivityReportObjectiveTopicsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveTopicStats"\n        )\n        SELECT *, \n            pre_count - post_count AS diff,\n            post_count - (pre_count - "Deletes" + "Inserts") AS adjusted_diff\n\n        FROM "CollectStats"\n        ORDER BY id;\n        DROP TABLE IF EXISTS  "PreCountStatsByRegion" ;
Executing (d9cc9ca4-f7dc-4bcf-b86e-59d72fd0a155): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230330130554-goal-duplicate-cleanup: migrated (0.255s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230403203917-add-deleted-to-grants-recipients: migrating =======
Executing (882b1637-4825-429f-a984-1a5cab9fb19e): START TRANSACTION;
Connection validated successfully
Executing (882b1637-4825-429f-a984-1a5cab9fb19e): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230403203917-add-deleted-to-grants-recipients.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (882b1637-4825-429f-a984-1a5cab9fb19e): ALTER TABLE "public"."Recipients" ADD COLUMN "deleted" BOOLEAN DEFAULT false;
Executing (882b1637-4825-429f-a984-1a5cab9fb19e): ALTER TABLE "public"."Grants" ADD COLUMN "deleted" BOOLEAN DEFAULT false;
Executing (882b1637-4825-429f-a984-1a5cab9fb19e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230403203917-add-deleted-to-grants-recipients: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230408000001-rewrite_to_use_current_topics: migrating =======
Executing (787dff31-ed58-4be9-9948-4b0b6e8bd80e): START TRANSACTION;
Connection validated successfully
Executing (787dff31-ed58-4be9-9948-4b0b6e8bd80e): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230408000001-rewrite_to_use_current_topics.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (787dff31-ed58-4be9-9948-4b0b6e8bd80e): DROP TABLE IF EXISTS renamed_topics;\n        CREATE TEMP TABLE renamed_topics AS\n        SELECT DISTINCT\n          lt.id legacy_tid,\n          lt."mapsTo" current_tid,\n          lt.name legacy_name,\n          ct.name current_name\n        FROM "Topics" lt\n        JOIN "Topics" ct\n          ON lt."mapsTo" = ct.id\n        WHERE lt.name IN ('Teaching Practices / Teacher-Child Interactions', 'Child Assessment, Development, Screening')\n        ;\n\n        DROP TABLE IF EXISTS updated_legacy_ars;\n        CREATE TEMP TABLE updated_legacy_ars AS\n        WITH updater AS (\n          UPDATE "ActivityReports"\n          SET imported = JSONB_SET(\n            imported,\n            ARRAY['topics'],\n            TO_JSONB(REPLACE(imported->>'topics', legacy_name, current_name))\n            )\n          FROM renamed_topics\n          WHERE imported->>'topics' like '%' || legacy_name  || '%'\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        -- Because the updates only update on the first match but multiple changes may\n        -- be needed for each line, the following logic must be executed once per\n        -- topic replacement beyond the first.\n        WITH additional_round AS (\n        UPDATE "ActivityReports"\n        SET imported = JSONB_SET(\n          imported,\n          ARRAY['topics'],\n          TO_JSONB(REPLACE(imported->>'topics', legacy_name, current_name))\n          )\n        FROM renamed_topics\n        WHERE imported->>'topics' like '%' || legacy_name  || '%'\n        RETURNING\n          id updated_id,\n          legacy_tid\n        )\n        INSERT INTO updated_legacy_ars\n        SELECT * FROM additional_round\n        ;\n\n        DROP TABLE IF EXISTS updated_activity_reports;\n        CREATE TEMP TABLE updated_activity_reports AS\n        WITH updater AS (\n          WITH renames AS (\n            SELECT DISTINCT\n              legacy_name,\n              current_name\n            FROM renamed_topics\n          )\n          UPDATE "ActivityReports"\n          SET topics = ARRAY_REPLACE(topics, legacy_name, current_name)\n          FROM renames\n          WHERE legacy_name = ANY(topics)\n          RETURNING\n            id updated_id,\n            legacy_name\n        ) SELECT * FROM updater\n        ;\n\n        /* We don't actually need to make any of these changes\n        DROP TABLE IF EXISTS updated_objective_topics;\n        CREATE TEMP TABLE updated_objective_topics AS\n        WITH updater AS (\n          UPDATE "ObjectiveTopics"\n          SET "topicId" = current_tid\n          FROM renamed_topics\n          WHERE "topicId" = legacy_tid\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        DROP TABLE IF EXISTS updated_ar_objective_topics;\n        CREATE TEMP TABLE updated_ar_objective_topics AS\n        WITH updater AS (\n          UPDATE "ActivityReportObjectiveTopics"\n          SET "topicId" = current_tid\n          FROM renamed_topics\n          WHERE "topicId" = legacy_tid\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        DROP TABLE IF EXISTS updated_objective_template_topics;\n        CREATE TEMP TABLE updated_objective_template_topics AS\n        WITH updater AS (\n          UPDATE "ObjectiveTemplateTopics"\n          SET "topicId" = current_tid\n          FROM renamed_topics\n          WHERE "topicId" = legacy_tid\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        DROP TABLE IF EXISTS updated_role_topics;\n        CREATE TEMP TABLE updated_role_topics AS\n        WITH updater AS (\n          UPDATE "RoleTopics"\n          SET "topicId" = current_tid\n          FROM renamed_topics\n          WHERE "topicId" = legacy_tid\n          RETURNING\n            id updated_id,\n            legacy_tid\n        ) SELECT * FROM updater\n        ;\n\n        SELECT 'updated_objective_topics' tablename, COUNT(*) updates\n        FROM updated_objective_topics\n        UNION\n        SELECT 'updated_ar_objective_topics', COUNT(*)\n        FROM updated_ar_objective_topics\n        UNION\n        SELECT 'updated_objective_template_topics', COUNT(*)\n        FROM updated_objective_template_topics\n        UNION\n        SELECT 'updated_role_topics', COUNT(*)\n        FROM updated_role_topics\n        UNION\n        SELECT 'updated_activity_reports', COUNT(*)\n        FROM updated_activity_reports\n        UNION\n        SELECT 'updated_legacy_ars', COUNT(*)\n        FROM updated_activity_reports\n        ;\n        */
Executing (787dff31-ed58-4be9-9948-4b0b6e8bd80e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230408000001-rewrite_to_use_current_topics: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230420193406-add-grant-inactivation: migrating =======
Executing (94135429-9802-4f5f-9e00-56a4d3895e8e): START TRANSACTION;
Connection validated successfully
Executing (94135429-9802-4f5f-9e00-56a4d3895e8e): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230420193406-add-grant-inactivation.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (94135429-9802-4f5f-9e00-56a4d3895e8e): ALTER TABLE "public"."Grants" ADD COLUMN "inactivationDate" TIMESTAMP WITH TIME ZONE;
Executing (94135429-9802-4f5f-9e00-56a4d3895e8e): CREATE TYPE "public"."enum_Grants_inactivationReason" AS ENUM('Replaced', 'Terminated', 'Relinquished', 'Unknown');ALTER TABLE "public"."Grants" ADD COLUMN "inactivationReason" "public"."enum_Grants_inactivationReason";
Executing (94135429-9802-4f5f-9e00-56a4d3895e8e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230420193406-add-grant-inactivation: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230424000000-correct-model-db-misalignment: migrating =======
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): START TRANSACTION;
Connection validated successfully
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230424000000-correct-model-db-misalignment.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): CREATE OR REPLACE FUNCTION "ZAFCreateALTable"(t_name varchar(63))\n            RETURNS VOID\n            LANGUAGE plpgsql AS\n          $func$\n          BEGIN\n            RAISE NOTICE 'Create Audit Log Table: %','ZAL' || t_name;\n            EXECUTE format($sql$\n                CREATE TABLE IF NOT EXISTS %I (\n                  id BIGSERIAL,\n                  data_id bigint NOT NULL,\n                  dml_type dml_type NOT NULL,\n                  old_row_data jsonb,\n                  new_row_data jsonb,\n                  dml_timestamp timestamp with time zone NOT NULL,\n                  dml_by bigint NOT NULL,\n                  dml_as bigint NOT NULL,\n                  dml_txid uuid NOT NULL,\n                  session_sig TEXT NULL,\n                  descriptor_id INT,\n                  PRIMARY KEY (id)\n                  );$sql$,\n                  'ZAL' || t_name);\n          END\n          $func$;
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): DO $$\n        DECLARE\n          obj record;\n        BEGIN\n          PERFORM "ZAFSetTriggerState"(null, null, null, 'DISABLE');\n\n          FOR obj IN\n            SELECT table_name as "tableName"\n            FROM information_schema.tables\n            WHERE table_schema='public'\n              AND table_type='BASE TABLE'\n              AND table_name != 'SequelizeMeta'\n              AND table_name != 'RequestErrors'\n              AND table_name LIKE 'ZAL%'\n              AND table_name NOT LIKE 'ZALDDL'\n          LOOP\n            RAISE INFO 'Audit Tables: Update audit table on "%"', obj."tableName";\n\n            -- Fix type of dml_by - was int, should be bigint\n            EXECUTE format($sql$\n              ALTER TABLE %I\n              ALTER COLUMN "dml_timestamp" TYPE timestamp with time zone $sql$,\n              obj."tableName"::text);\n\n          END LOOP;\n\n          PERFORM "ZAFSetTriggerState"(null, null, null, 'ENABLE');\n        END$$;
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): ALTER TABLE "ActivityReportGoals" ALTER COLUMN "endDate" DROP NOT NULL;ALTER TABLE "ActivityReportGoals" ALTER COLUMN "endDate" SET DEFAULT NULL;ALTER TABLE "ActivityReportGoals" ALTER COLUMN "endDate" TYPE DATE;
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTemplateRoles');
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): SELECT "ZAFRemoveAuditingOnTable"('DisconnectedGoals');
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): DROP TABLE IF EXISTS "ZALObjectiveTemplateRoles";
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): DROP TABLE IF EXISTS "ZALDisconnectedGoals";
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): DROP TABLE IF EXISTS "ObjectiveTemplateRoles";
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): DROP TABLE IF EXISTS "DisconnectedGoals";
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): DROP TABLE IF EXISTS "ZALTopicGoals";
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): DROP TABLE IF EXISTS "ZALGrantGoals";
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (6375e736-fa00-4108-9f3d-73dcb66fc73f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230424000000-correct-model-db-misalignment: migrated (0.652s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230425094028-resource-title: migrating =======
Executing (0b21c2d9-2b24-4220-9560-c52cec700745): START TRANSACTION;
Connection validated successfully
Executing (0b21c2d9-2b24-4220-9560-c52cec700745): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230425094028-resource-title.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0b21c2d9-2b24-4220-9560-c52cec700745): ALTER TABLE "public"."Resources" ADD COLUMN "title" TEXT DEFAULT NULL;
Executing (0b21c2d9-2b24-4220-9560-c52cec700745): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230425094028-resource-title: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230505125903-goal-source: migrating =======
Executing (0118c464-2b1a-494a-9958-42a4a09d92a2): START TRANSACTION;
Connection validated successfully
Executing (0118c464-2b1a-494a-9958-42a4a09d92a2): SELECT\n          set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n          set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n          set_config('audit.sessionSig', '/app/src/migrations/20230505125903-goal-source.js', TRUE) as "sessionSig",\n          set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0118c464-2b1a-494a-9958-42a4a09d92a2): CREATE TYPE "public"."enum_Goals_source" AS ENUM('Federal monitoring issues, including CLASS and RANs', 'RTTAPA development', 'Recipient request', 'Regional office priority', 'Training event');ALTER TABLE "public"."Goals" ADD COLUMN "source" "public"."enum_Goals_source";
Executing (0118c464-2b1a-494a-9958-42a4a09d92a2): CREATE TYPE "public"."enum_ActivityReportGoals_source" AS ENUM('Federal monitoring issues, including CLASS and RANs', 'RTTAPA development', 'Recipient request', 'Regional office priority', 'Training event');ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "source" "public"."enum_ActivityReportGoals_source";
Executing (0118c464-2b1a-494a-9958-42a4a09d92a2): DO $$ BEGIN\n        ALTER TYPE "enum_Users_flags" ADD VALUE 'goal_source';\n      EXCEPTION\n        WHEN duplicate_object THEN null;\n      END $$;
Executing (0118c464-2b1a-494a-9958-42a4a09d92a2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230505125903-goal-source: migrated (0.046s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230510202629-remove-manager-and-created-notes-from-approved-reports: migrating =======
Executing (9c16ec65-aaf9-4b9a-b436-caa08cc9ea78): START TRANSACTION;
Connection validated successfully
Executing (9c16ec65-aaf9-4b9a-b436-caa08cc9ea78): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230510202629-remove-manager-and-created-notes-from-approved-reports.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (9c16ec65-aaf9-4b9a-b436-caa08cc9ea78): -- set the additional notes to empty string\n      UPDATE "ActivityReports" SET "additionalNotes" = '' WHERE "calculatedStatus" = 'approved';\n\n       -- set the manager notes to empty string\n      UPDATE "ActivityReportApprovers" SET "note" = '' WHERE "activityReportId" IN (\n        SELECT "id" FROM "ActivityReports" WHERE "calculatedStatus" = 'approved'\n      );
Executing (9c16ec65-aaf9-4b9a-b436-caa08cc9ea78): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230510202629-remove-manager-and-created-notes-from-approved-reports: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230515000000-add-foreign-key-indices: migrating =======
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): START TRANSACTION;
Connection validated successfully
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "activity_report_goals_goal_id" ON "ActivityReportGoals" ("goalId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "activity_report_collaborators_activity_report_id" ON "ActivityReportCollaborators" ("activityReportId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "activity_report_objectives_activity_report_id_objective_id" ON "ActivityReportObjectives" ("activityReportId", "objectiveId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "activity_report_objectives_objective_id" ON "ActivityReportObjectives" ("objectiveId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "activity_report_objective_files_file_id" ON "ActivityReportObjectiveFiles" ("fileId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objectives_goal_id" ON "Objectives" ("goalId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objectives_objective_template_id" ON "Objectives" ("objectiveTemplateId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objective_files_objective_id_file_id" ON "ObjectiveFiles" ("objectiveId", "fileId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objective_files_file_id" ON "ObjectiveFiles" ("fileId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objective_resources_objective_id" ON "ObjectiveResources" ("objectiveId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objective_topics_objective_id" ON "ObjectiveTopics" ("objectiveId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objective_template_files_objective_template_id_file_id" ON "ObjectiveTemplateFiles" ("objectiveTemplateId", "fileId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objective_template_files_file_id" ON "ObjectiveTemplateFiles" ("fileId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objective_template_resources_objective_template_id" ON "ObjectiveTemplateResources" ("objectiveTemplateId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "objective_template_topics_objective_template_id" ON "ObjectiveTemplateTopics" ("objectiveTemplateId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "goals_grant_id" ON "Goals" ("grantId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "goals_goal_template_id" ON "Goals" ("goalTemplateId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "goal_template_objective_templates_goal_template_id_objective_template_id" ON "GoalTemplateObjectiveTemplates" ("goalTemplateId", "objectiveTemplateId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "goal_template_objective_templates_objective_template_id" ON "GoalTemplateObjectiveTemplates" ("objectiveTemplateId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "group_grants_group_id_grant_id" ON "GroupGrants" ("groupId", "grantId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "group_grants_grant_id" ON "GroupGrants" ("grantId")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "activity_reports_start_date" ON "ActivityReports" ("startDate")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "activity_reports_updated_at" ON "ActivityReports" ("updatedAt")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "activity_reports_approved_at" ON "ActivityReports" ("approvedAt")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "activity_reports_created_at" ON "ActivityReports" ("createdAt")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): CREATE INDEX "goals_created_at" ON "Goals" ("createdAt")
Executing (1c893ee0-2756-4fc1-b3ee-2f8274895fc3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230515000000-add-foreign-key-indices: migrated (0.151s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230515094028-training-reports: migrating =======
Executing (ab0ee303-cb7a-4996-9330-b808ce2fa906): START TRANSACTION;
Connection validated successfully
Executing (ab0ee303-cb7a-4996-9330-b808ce2fa906): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230515094028-training-reports.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ab0ee303-cb7a-4996-9330-b808ce2fa906): DO $$ BEGIN\n        ALTER TYPE "enum_Users_flags" ADD VALUE 'training_reports';\n        EXCEPTION\n        WHEN duplicate_object THEN null;\n        END $$;
Executing (default): INSERT INTO "Scopes" ("id","name","description") VALUES (7,'READ_WRITE_TRAINING_REPORTS','Can view and create/edit training reports in the region'),(8,'READ_TRAINING_REPORTS','Can view training reports in the region') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (ab0ee303-cb7a-4996-9330-b808ce2fa906): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230515094028-training-reports: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230516155334-event-and-session-report: migrating =======
Executing (5767c14e-2574-45dd-a212-3c682a1a0488): START TRANSACTION;
Connection validated successfully
Executing (5767c14e-2574-45dd-a212-3c682a1a0488): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230516155334-event-and-session-report.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5767c14e-2574-45dd-a212-3c682a1a0488): CREATE TABLE IF NOT EXISTS "EventReportPilots" (\n          id SERIAL PRIMARY KEY,\n          "ownerId" INTEGER NOT NULL,\n          "pocId" INTEGER NULL,\n          "collaboratorIds" INTEGER[] NOT NULL,\n          "regionId" INTEGER NOT NULL,\n          "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          data JSONB NOT NULL\n        );
Executing (5767c14e-2574-45dd-a212-3c682a1a0488): CREATE TABLE IF NOT EXISTS "SessionReportPilots" (\n          id SERIAL PRIMARY KEY,\n          "eventId" INTEGER NOT NULL,\n          data JSONB NOT NULL,\n          "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY ("eventId") REFERENCES "EventReportPilots" (id)\n        );
Executing (5767c14e-2574-45dd-a212-3c682a1a0488): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230516155334-event-and-session-report: migrated (0.079s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230519174017-add-unique-group-name: migrating =======
Executing (c11cf801-0fca-4eed-938f-e7461a735e2d): START TRANSACTION;
Connection validated successfully
Executing (c11cf801-0fca-4eed-938f-e7461a735e2d): SELECT\n              set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n              set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n              set_config('audit.sessionSig', '/app/src/migrations/20230519174017-add-unique-group-name.js', TRUE) as "sessionSig",\n              set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c11cf801-0fca-4eed-938f-e7461a735e2d): -- append the id to all groups that don't have distinct names\n        UPDATE "Groups" SET "name" = "name" || "id" WHERE "name" IN (\n            SELECT "name" FROM "Groups" GROUP BY ("name") HAVING COUNT(id) > 1\n        );\n        \n        -- add unique constraint\n        ALTER TABLE "Groups"\n        ADD CONSTRAINT "Groups_name_key" UNIQUE (name);
Executing (c11cf801-0fca-4eed-938f-e7461a735e2d): ALTER TABLE "public"."Groups" ADD COLUMN "isPublic" BOOLEAN;
Executing (c11cf801-0fca-4eed-938f-e7461a735e2d): UPDATE "Groups"\n        SET "isPublic" = false;
Executing (c11cf801-0fca-4eed-938f-e7461a735e2d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230519174017-add-unique-group-name: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230601204020-add-tr-report-collab-permission: migrating =======
Executing (e06c4732-f546-422b-af8c-6cbeb047cf1a): START TRANSACTION;
Connection validated successfully
Executing (e06c4732-f546-422b-af8c-6cbeb047cf1a): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230601204020-add-tr-report-collab-permission.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): INSERT INTO "Scopes" ("id","name","description") VALUES (9,'COLLABORATOR_TRAINING_REPORTS','Can collaborate on training reports in the region') ON CONFLICT DO NOTHING;
Connection validated successfully
Executing (e06c4732-f546-422b-af8c-6cbeb047cf1a): ALTER TABLE "public"."EventReportPilots" ADD COLUMN "imported" JSONB;
Executing (e06c4732-f546-422b-af8c-6cbeb047cf1a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230601204020-add-tr-report-collab-permission: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230602174017-add-resource-metadata-column: migrating =======
Executing (1a967a6b-5770-4c4a-82fa-9ae6fa0230e1): START TRANSACTION;
Connection validated successfully
Executing (1a967a6b-5770-4c4a-82fa-9ae6fa0230e1): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230602174017-add-resource-metadata-column.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1a967a6b-5770-4c4a-82fa-9ae6fa0230e1): ALTER TABLE "public"."Resources" ADD COLUMN "metadata" JSONB;
Executing (1a967a6b-5770-4c4a-82fa-9ae6fa0230e1): ALTER TABLE "public"."Resources" ADD COLUMN "metadataUpdatedAt" TIMESTAMP WITH TIME ZONE;
Executing (1a967a6b-5770-4c4a-82fa-9ae6fa0230e1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230602174017-add-resource-metadata-column: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230614144017-program-personnel: migrating =======
Executing (711681ad-d404-40e7-b225-66f6bf27cf36): START TRANSACTION;
Connection validated successfully
Executing (711681ad-d404-40e7-b225-66f6bf27cf36): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230614144017-program-personnel.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "ProgramPersonnel" ("id"   SERIAL , "grantId" INTEGER NOT NULL, "programId" INTEGER NOT NULL, "role" VARCHAR(255) NOT NULL, "active" BOOLEAN NOT NULL, "prefix" VARCHAR(255), "firstName" VARCHAR(255), "lastName" VARCHAR(255), "suffix" VARCHAR(255), "title" VARCHAR(255), "email" VARCHAR(255), "effectiveDate" TIMESTAMP WITH TIME ZONE, "originalPersonnelId" INTEGER, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (711681ad-d404-40e7-b225-66f6bf27cf36): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230614144017-program-personnel: migrated (0.050s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230614164742-create-session-report-pilot-files: migrating =======
Executing (92664730-196b-40d6-8756-988f26f3b7b9): START TRANSACTION;
Connection validated successfully
Executing (92664730-196b-40d6-8756-988f26f3b7b9): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230614164742-create-session-report-pilot-files.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (92664730-196b-40d6-8756-988f26f3b7b9): CREATE TABLE IF NOT EXISTS "SessionReportPilotFiles" ("id"   SERIAL , "sessionReportPilotId" INTEGER NOT NULL REFERENCES "SessionReportPilots" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (92664730-196b-40d6-8756-988f26f3b7b9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230614164742-create-session-report-pilot-files: migrated (0.042s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230615000000-add-maintenance-logs: migrating =======
Executing (95028aee-b893-48a5-af13-8acbfade8111): START TRANSACTION;
Connection validated successfully
Executing (95028aee-b893-48a5-af13-8acbfade8111): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230615000000-add-maintenance-logs.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (95028aee-b893-48a5-af13-8acbfade8111): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_MaintenanceLogs_category' GROUP BY 1
Executing (95028aee-b893-48a5-af13-8acbfade8111): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_MaintenanceLogs_type' GROUP BY 1
Executing (95028aee-b893-48a5-af13-8acbfade8111): CREATE TYPE "public"."enum_MaintenanceLogs_category" AS ENUM('DB', 'MAINTENANCE', 'IMPORT');
Executing (95028aee-b893-48a5-af13-8acbfade8111): CREATE TYPE "public"."enum_MaintenanceLogs_type" AS ENUM('VACUUM ANALYZE', 'REINDEX', 'VACUUM TABLES', 'REINDEX TABLES', 'DAILY DB MAINTENANCE', 'CLEAR MAINTENANCE LOGS', 'IMPORT_DOWNLOAD', 'IMPORT_PROCESS');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (95028aee-b893-48a5-af13-8acbfade8111): CREATE TABLE IF NOT EXISTS "MaintenanceLogs" ("id"   BIGSERIAL , "category" "public"."enum_MaintenanceLogs_category" NOT NULL, "type" "public"."enum_MaintenanceLogs_type" NOT NULL, "data" JSON NOT NULL, "isSuccessful" BOOLEAN, "triggeredById" BIGINT REFERENCES "MaintenanceLogs" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (95028aee-b893-48a5-af13-8acbfade8111): SELECT "ZAFRemoveAuditingOnTable"('MaintenanceLogs');
Executing (95028aee-b893-48a5-af13-8acbfade8111): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230615000000-add-maintenance-logs: migrated (0.077s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230629000000-fix-some-column-issues: migrating =======
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): START TRANSACTION;
Connection validated successfully
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230629000000-fix-some-column-issues.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): SELECT table_name, column_name, data_type, is_nullable\n        FROM information_schema.columns\n        WHERE table_schema = 'public'\n        AND table_name like 'ZAL%'\n        AND column_name = 'dml_as'\n        AND is_nullable = 'YES'\n        ORDER BY table_name, ordinal_position;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityRecipients"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityRecipients"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportApprovers"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportApprovers"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportCollaborators"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportCollaborators"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportGoalFieldResponses"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportGoalFieldResponses"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportGoalResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportGoalResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportGoals"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportGoals"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportObjectiveFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportObjectiveFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportObjectiveResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportObjectiveResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportObjectiveTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportObjectiveTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportObjectives"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportObjectives"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReportResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReportResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALActivityReports"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALActivityReports"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALCollaboratorRoles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALCollaboratorRoles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGoalFieldResponses"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalFieldResponses"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGoalResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGoalTemplateFieldPrompts"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalTemplateFieldPrompts"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGoalTemplateObjectiveTemplates"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalTemplateObjectiveTemplates"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGoalTemplateResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalTemplateResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGoalTemplates"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoalTemplates"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGoals"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGoals"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGrants"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGrants"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGroupGrants"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGroupGrants"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALGroups"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALGroups"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALMailerLogs"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALMailerLogs"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALNextStepResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALNextStepResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALNextSteps"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALNextSteps"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALObjectiveFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALObjectiveResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALObjectiveTemplateFiles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTemplateFiles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALObjectiveTemplateResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTemplateResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALObjectiveTemplateTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTemplateTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALObjectiveTemplates"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTemplates"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALObjectiveTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectiveTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALObjectives"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALObjectives"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALOtherEntities"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALOtherEntities"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALPermissions"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALPermissions"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALPrograms"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALPrograms"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALRecipients"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRecipients"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALRegions"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRegions"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALResources"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALResources"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALRoleTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRoleTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALRoles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRoles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALRttapaPilots"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALRttapaPilots"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALScopes"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALScopes"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALSiteAlerts"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALSiteAlerts"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALTopics"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALTopics"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALUserRoles"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUserRoles"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALUserSettingOverrides"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUserSettingOverrides"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALUserSettings"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUserSettings"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALUserValidationStatus"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUserValidationStatus"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALUsers"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALUsers"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALZADescriptor"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALZADescriptor"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): UPDATE "ZALZAFilter"\n        SET dml_as = dml_by\n        WHERE dml_as IS NULL;\n        ALTER TABLE "ZALZAFilter"\n        ALTER COLUMN "dml_as" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): ALTER TABLE "ActivityReports"\n        ALTER COLUMN "regionId" SET NOT NULL;\n        ALTER TABLE "CollaboratorRoles"\n        ALTER COLUMN "roleId" SET NOT NULL;\n        ALTER TABLE "Groups"\n        ALTER COLUMN "name" SET NOT NULL;\n        ALTER TABLE "Recipients"\n        ALTER COLUMN "name" SET NOT NULL;\n        ALTER TABLE "UserValidationStatus"\n        ALTER COLUMN "token" SET NOT NULL;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): ALTER TYPE "enum_GoalTemplateResources_sourceFields"\n        RENAME TO "enum_GoalTemplateResources_sourceFields_OLD";\n\n        CREATE TYPE "enum_GoalTemplateResources_sourceFields" AS ENUM (\n          'name',\n          'resource'\n        );\n\n        ALTER TABLE "GoalTemplateResources"\n        RENAME COLUMN "sourceFields" TO "old_sourceFields";\n\n        ALTER TABLE "GoalTemplateResources"\n        ADD COLUMN "sourceFields" "enum_GoalTemplateResources_sourceFields"[];\n\n        UPDATE "GoalTemplateResources"\n        SET "sourceFields" = ARRAY(SELECT UNNEST("old_sourceFields")::TEXT::"enum_GoalTemplateResources_sourceFields");\n\n\n        ALTER TABLE "GoalTemplateResources"\n        DROP COLUMN "old_sourceFields";\n\n        DROP TYPE IF EXISTS "enum_GoalTemplateResources_sourceFields_OLD"
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): ALTER TABLE "ActivityReportGoals"\n        ALTER COLUMN "isActivelyEdited" SET DEFAULT false;\n        ALTER TABLE "Goals"\n        ALTER COLUMN "onApprovedAR" SET DEFAULT false;\n        ALTER TABLE "Objectives"\n        ALTER COLUMN "onApprovedAR" SET DEFAULT false;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): ALTER TABLE "ActivityReports"\n        ALTER COLUMN "version" SET DEFAULT 2;
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (95b8cbdb-b8bb-48f4-9470-b6212a10660a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230629000000-fix-some-column-issues: migrated (0.690s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230629144637-add-national-centers: migrating =======
Executing (39dad135-54e1-426a-b5f2-523b9562808f): START TRANSACTION;
Connection validated successfully
Executing (39dad135-54e1-426a-b5f2-523b9562808f): SELECT\n            set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n            set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n            set_config('audit.sessionSig', '/app/src/migrations/20230629144637-add-national-centers.js', TRUE) as "sessionSig",\n            set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (39dad135-54e1-426a-b5f2-523b9562808f): CREATE TABLE IF NOT EXISTS "NationalCenters" ("id"   BIGSERIAL , "name" TEXT NOT NULL UNIQUE, "mapsTo" INTEGER REFERENCES "NationalCenters" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (39dad135-54e1-426a-b5f2-523b9562808f): INSERT INTO "NationalCenters" ("name","createdAt","updatedAt") VALUES ('DTL','2025-03-28 23:18:54.598 +00:00','2025-03-28 23:18:54.598 +00:00'),('HBHS','2025-03-28 23:18:54.598 +00:00','2025-03-28 23:18:54.598 +00:00'),('PFCE','2025-03-28 23:18:54.598 +00:00','2025-03-28 23:18:54.598 +00:00'),('PFMO','2025-03-28 23:18:54.598 +00:00','2025-03-28 23:18:54.598 +00:00');
Executing (39dad135-54e1-426a-b5f2-523b9562808f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230629144637-add-national-centers: migrated (0.063s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230717144637-add-grantee-name: migrating =======
Executing (2d15b0c3-b10a-4cee-8cb6-2b32cd31f3c7): START TRANSACTION;
Connection validated successfully
Executing (2d15b0c3-b10a-4cee-8cb6-2b32cd31f3c7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230717144637-add-grantee-name.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2d15b0c3-b10a-4cee-8cb6-2b32cd31f3c7): ALTER TABLE "public"."Grants" ADD COLUMN "granteeName" VARCHAR(255);
Executing (2d15b0c3-b10a-4cee-8cb6-2b32cd31f3c7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230717144637-add-grantee-name: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230720183058-alter-poc-col: migrating =======
Executing (783373d7-bd7d-4998-ad4e-0cdc80b45c4a): START TRANSACTION;
Connection validated successfully
Executing (783373d7-bd7d-4998-ad4e-0cdc80b45c4a): SELECT\n                set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n                set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n                set_config('audit.sessionSig', '/app/src/migrations/20230720183058-alter-poc-col.js', TRUE) as "sessionSig",\n                set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (783373d7-bd7d-4998-ad4e-0cdc80b45c4a): ALTER TABLE "public"."EventReportPilots" DROP COLUMN "pocId";
Executing (783373d7-bd7d-4998-ad4e-0cdc80b45c4a): ALTER TABLE "public"."EventReportPilots" ADD COLUMN "pocIds" INTEGER[];
Executing (783373d7-bd7d-4998-ad4e-0cdc80b45c4a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230720183058-alter-poc-col: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230724141234-update-tr-collaborator-scope-name: migrating =======
Executing (22b3d312-69f5-43d9-a918-ae6243e6ef96): START TRANSACTION;
Connection validated successfully
Executing (22b3d312-69f5-43d9-a918-ae6243e6ef96): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230724141234-update-tr-collaborator-scope-name.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (22b3d312-69f5-43d9-a918-ae6243e6ef96): UPDATE "Scopes" \n        SET "name" = 'POC_TRAINING_REPORTS', "description" = 'Can create training reports in the region' \n      WHERE "id" = 9;
Executing (22b3d312-69f5-43d9-a918-ae6243e6ef96): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230724141234-update-tr-collaborator-scope-name: migrated (0.059s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230803093912-update-goal-on-approved-ar-value: migrating =======
Executing (4c492d61-6118-42eb-8aaa-60deac5d9105): START TRANSACTION;
Connection validated successfully
Executing (4c492d61-6118-42eb-8aaa-60deac5d9105): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230803093912-update-goal-on-approved-ar-value.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (4c492d61-6118-42eb-8aaa-60deac5d9105): UPDATE "Goals"\n        SET "onApprovedAR" = NOT "onApprovedAR"\n        WHERE "id" IN (\n        SELECT\n            g.id\n        FROM "Goals" g\n        JOIN "ActivityReportGoals" ar\n        ON g.id = ar."goalId"\n        JOIN "ActivityReports" a\n        ON ar."activityReportId" = a.id\n        group by 1\n        having g."onApprovedAR" != ('approved' = ANY (array_agg(DISTINCT a."calculatedStatus"::text)))\n      )
Executing (4c492d61-6118-42eb-8aaa-60deac5d9105): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230803093912-update-goal-on-approved-ar-value: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230822192328-internal-goal-duplicate-cleanup: migrating =======
Executing (82e2025d-a478-489f-a0d2-4bccc946c7c7): START TRANSACTION;
Connection validated successfully
Executing (82e2025d-a478-489f-a0d2-4bccc946c7c7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (82e2025d-a478-489f-a0d2-4bccc946c7c7): DROP TABLE IF EXISTS "PreCountStatsByRegion";\n        CREATE TEMP TABLE "PreCountStatsByRegion" AS (\n            SELECT\n                gr."regionId",\n                COUNT(DISTINCT g."id") "GoalsTotal",\n                COUNT(DISTINCT grr."id") "GoalResourcesTotal",\n                COUNT(DISTINCT gfr."id") "GoalFieldResponsesTotal",\n                COUNT(DISTINCT arg."id") "ActivityReportGoalsTotal",\n                COUNT(DISTINCT argr."id") "ActivityReportGoalResourcesTotal",\n                COUNT(DISTINCT argfr."id") "ActivityReportGoalFieldResponsesTotal",\n                COUNT(DISTINCT oj."id") "ObjectivesTotal",\n                COUNT(DISTINCT ojf."id") "ObjectiveFilesTotal",\n                COUNT(DISTINCT ojr."id") "ObjectiveResourcesTotal",\n                COUNT(DISTINCT ojt."id") "ObjectiveTopicsTotal",\n                COUNT(DISTINCT aro."id") "ActivityReportObjectivesTotal",\n                COUNT(DISTINCT arof."id") "ActivityReportObjectiveFilesTotal",\n                COUNT(DISTINCT aror."id") "ActivityReportObjectiveResourcesTotal",\n                COUNT(DISTINCT arot."id") "ActivityReportObjectiveTopicsTotal"\n            FROM "Grants" gr\n            FULL OUTER JOIN "Goals" g ON gr."id" = g."grantId"\n            FULL OUTER JOIN "GoalResources" grr ON g."id" = grr."goalId"\n            FULL OUTER JOIN "GoalFieldResponses" gfr ON g."id" = gfr."goalId"\n            FULL OUTER JOIN "ActivityReportGoals" arg ON g."id" = arg."goalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argr ON arg."id" = argr."activityReportGoalId"\n            FULL OUTER JOIN "ActivityReportGoalFieldResponses" argfr ON arg."id" = argfr."activityReportGoalId"\n            FULL OUTER JOIN "Objectives" oj ON g."id" = oj."goalId"\n            FULL OUTER JOIN "ObjectiveFiles" ojf ON oj."id" = ojf."objectiveId"\n            FULL OUTER JOIN "ObjectiveResources" ojr ON oj."id" = ojr."objectiveId"\n            FULL OUTER JOIN "ObjectiveTopics" ojt ON oj."id" = ojt."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectives" aro ON oj."id" = aro."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveFiles" arof ON aro."id" = arof."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveResources" aror ON aro."id" = aror."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveTopics" arot ON aro."id" = arot."activityReportObjectiveId"\n            GROUP BY gr."regionId"\n        );\n        INSERT INTO "PreCountStatsByRegion"\n        SELECT\n            -1 "regionId",\n            SUM("GoalsTotal"),\n            SUM("GoalResourcesTotal"),\n            SUM("GoalFieldResponsesTotal"),\n            SUM("ActivityReportGoalsTotal"),\n            SUM("ActivityReportGoalResourcesTotal"),\n            SUM("ActivityReportGoalFieldResponsesTotal"),\n            SUM("ObjectivesTotal"),\n            SUM("ObjectiveFilesTotal"),\n            SUM("ObjectiveResourcesTotal"),\n            SUM("ObjectiveTopicsTotal"),\n            SUM("ActivityReportObjectivesTotal"),\n            SUM("ActivityReportObjectiveFilesTotal"),\n            SUM("ActivityReportObjectiveResourcesTotal"),\n            SUM("ActivityReportObjectiveTopicsTotal")\n        FROM "PreCountStatsByRegion";\n        SELECT * FROM "PreCountStatsByRegion";\n\n        DROP TABLE IF EXISTS "AllSmashedGoals";\n        CREATE TEMP TABLE "AllSmashedGoals" AS (\n            SELECT\n                g.id "goalId",\n                REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(\n                REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(\n                        LOWER(g.name),\n                        'grantee(s?)', 'recipient\1', 'gi'),\n                        '\bDLLs?\b', 'dual language learners', 'gi'),\n                        '\bEHS?\b', 'early head start', 'gi'),\n                        '\bELOF?\b', 'head start early learning outcomes framework', 'gi'),\n                        '\bFEI?\b', 'full enrollment initiative', 'gi'),\n                        '\bHS\b', 'head start', 'gi'),\n                        '\bHSELOF\b', 'head start early learning outcomes framework', 'gi'),\n                        '\bOHS\b', 'office of head start', 'gi'),\n                        '\bPBC\b', 'practice based coaching', 'gi'),\n                        '\bPD\b', 'professional development', 'gi'),\n                        '\bSR\b', 'school readiness', 'gi'),\n                        '\bDLL(s?)\b', 'recipient\1', 'gi'),\n                        '[^a-z0-9]', '', 'gi'),\n                        '[ \t\r\n]', '', 'gi') "smashedName",\n                TRIM(g.name) "cleanName"\n            FROM "Goals" g\n        );\n        SELECT * FROM "AllSmashedGoals";\n\n        DROP TABLE IF EXISTS "SmashedGoals";\n        CREATE TEMP TABLE "SmashedGoals" AS (\n            SELECT\n                asg1."goalId",\n                asg1."smashedName",\n                REGEXP_REPLACE((ARRAY_AGG(asg2."cleanName" ORDER BY asg2."goalId" DESC))[1], '^\s+|\s+$', '', 'g') "cleanName"\n            FROM "AllSmashedGoals" asg1\n            LEFT JOIN "AllSmashedGoals" asg2\n            ON MD5(asg1."smashedName") = MD5(asg2."smashedName")\n            GROUP BY 1,2\n        );\n        SELECT * FROM "SmashedGoals";\n\n        DROP TABLE IF EXISTS "DupGoalsOnARs";\n        CREATE TEMP TABLE "DupGoalsOnARs" AS (\n            SELECT\n            array_remove(ARRAY_AGG(DISTINCT arg."activityReportId"), NULL) "activityReportIds",\n            g."grantId",\n            MD5(TRIM(sg."smashedName")) "goalHash",\n            ARRAY_AGG(DISTINCT g.id ORDER BY g.id) "goalIds",\n            array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)) "toRemoveGoals",\n            MIN(g.id) "toUpdateGoal",\n            COUNT(DISTINCT g.id) "goalCnt",\n            g."status" = 'Closed' "statusClosed"\n            FROM "Goals" g\n            JOIN "SmashedGoals" sg\n            ON g.id = sg."goalId"\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."goalId" = g.id\n            LEFT JOIN "GoalTemplates" gt\n            ON g."goalTemplateId" = gt.id\n            GROUP BY 2,3,8\n            HAVING ARRAY_LENGTH(array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)), 1) > 0\n            ORDER BY 5 DESC\n        );\n        SELECT * FROM "DupGoalsOnARs";\n\n        DROP TABLE IF EXISTS "AdjacentGoals";\n        CREATE TEMP TABLE "AdjacentGoals" AS (\n            SELECT\n            array_remove(ARRAY_AGG(DISTINCT arg."activityReportId"), NULL) "activityReportIds",\n            g."grantId",\n            MD5(TRIM(sg."smashedName")) "goalHash",\n            ARRAY_AGG(DISTINCT g.id ORDER BY g.id) "goalIds",\n            array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)) "toRemoveGoals",\n            MIN(g.id) "toUpdateGoal",\n            COUNT(DISTINCT g.id) "goalCnt",\n            g."status" = 'Closed' "statusClosed"\n            FROM "Goals" g\n            LEFT JOIN ("DupGoalsOnARs"\n                CROSS JOIN UNNEST("DupGoalsOnARs"."goalIds") u("goalId")\n                ) dgoa\n            ON g.id = dgoa."goalId"\n            JOIN "SmashedGoals" sg\n            ON g.id = sg."goalId"\n            AND MD5(g.name) != MD5(sg."cleanName")\n            LEFT JOIN "ActivityReportGoals" arg\n            ON arg."goalId" = g.id\n            LEFT JOIN "GoalTemplates" gt\n            ON g."goalTemplateId" = gt.id\n            WHERE dgoa."goalId" IS NULL\n            GROUP BY 2,3,8\n            HAVING ARRAY_LENGTH(array_remove(ARRAY_AGG(DISTINCT g.id ORDER BY g.id),MIN(g.id)), 1) = 0\n            ORDER BY 5 DESC\n        );\n        SELECT * FROM "AdjacentGoals";\n\n        DROP TABLE IF EXISTS "GoalsToModify";\n        CREATE TEMP TABLE "GoalsToModify" AS (\n            SELECT DISTINCT\n                g2."grantId",\n                TRIM(g."cleanName") "name",\n                dgoa."goalHash",\n                CASE\n                    WHEN 'Closed' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Closed' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Closed'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(g."status"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Not Started'\n                    WHEN 'Draft' = ANY(ARRAY_AGG(g."status"))\n                    OR 'Draft' = ANY(ARRAY_AGG(g2."status"))\n                    THEN 'Draft'\n                    ELSE COALESCE((ARRAY_AGG(g2."status"))[1], 'Not Started')\n                END "status",\n                (ARRAY_AGG(COALESCE(g2.timeframe, g.timeframe)))[1] timeframe,\n                BOOL_OR(g2."isFromSmartsheetTtaPlan" OR g."isFromSmartsheetTtaPlan") "isFromSmartsheetTtaPlan",\n                MIN(LEAST(g2."createdAt",g."createdAt")) "createdAt",\n                MAX(GREATEST(g2."updatedAt", g."updatedAt")) "updatedAt",\n                g2."closeSuspendReason",\n                g2."closeSuspendContext",\n                MAX(GREATEST(g2."endDate", g."endDate")) "endDate",\n                CASE\n                    WHEN 'Closed' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Closed' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Closed'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Not Started'\n                    WHEN 'Draft' = ANY(ARRAY_AGG(g."previousStatus"))\n                    OR 'Draft' = ANY(ARRAY_AGG(g2."previousStatus"))\n                    THEN 'Draft'\n                    ELSE COALESCE((ARRAY_AGG(g2."previousStatus"))[1], 'Not Started')\n                END "previousStatus",\n                MIN(g."goalTemplateId") "goalTemplateId",\n                BOOL_OR(COALESCE(g2."onApprovedAR", FALSE) OR g."onApprovedAR") "onApprovedAR",\n                MIN(LEAST(g2."firstNotStartedAt", g."firstNotStartedAt")) "firstNotStartedAt",\n                MAX(GREATEST(g2."lastNotStartedAt", g."lastNotStartedAt")) "lastNotStartedAt",\n                MIN(LEAST(g2."firstInProgressAt", g."firstInProgressAt")) "firstInProgressAt",\n                MAX(GREATEST(g2."lastInProgressAt", g."lastInProgressAt")) "lastInProgressAt",\n                MIN(LEAST(g2."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt")) "firstCeasedSuspendedAt",\n                MAX(GREATEST(g2."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt")) "lastCeasedSuspendedAt",\n                MIN(LEAST(g2."firstClosedAt", g."firstClosedAt")) "firstClosedAt",\n                MAX(GREATEST(g2."lastClosedAt", g."lastClosedAt")) "lastClosedAt",\n                MIN(LEAST(g2."firstCompletedAt", g."firstCompletedAt")) "firstCompletedAt",\n                MAX(GREATEST(g2."lastCompletedAt", g."lastCompletedAt")) "lastCompletedAt",\n                CASE\n                    WHEN 'imported' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'imported' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'imported'\n                    WHEN 'rtr' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'rtr' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'rtr'\n                    WHEN 'activityReport' = ANY(ARRAY_AGG(g."createdVia"))\n                    OR 'activityReport' = ANY(ARRAY_AGG(g2."createdVia"))\n                    THEN 'activityReport'\n                END "createdVia",\n                CASE\n                    WHEN 'Yes' = ANY(ARRAY_AGG(g."isRttapa"))\n                    OR 'Yes' = ANY(ARRAY_AGG(g2."isRttapa"))\n                    THEN 'Yes'\n                    WHEN 'No' = ANY(ARRAY_AGG(g."isRttapa"))\n                    OR 'No' = ANY(ARRAY_AGG(g2."isRttapa"))\n                    THEN 'No'\n                END "isRttapa",\n                BOOL_OR(COALESCE(g2."onAR", FALSE) OR g."onAR") "onAR",\n                array_remove(ARRAY_AGG(DISTINCT "g".id ORDER by "g".id), MIN("g2".id)) "toRemove",\n                MIN("g2".id) "toUpdate"\n            FROM ("Goals"\n                JOIN "SmashedGoals" sg\n                ON "Goals".id = sg."goalId"\n            ) g\n            JOIN "DupGoalsOnARs" dgoa\n            ON g.id = ANY(dgoa."toRemoveGoals")\n            AND g.id != dgoa."toUpdateGoal"\n            JOIN ("Goals"\n                JOIN "SmashedGoals" sg\n                ON "Goals".id = sg."goalId"\n            ) g2\n            ON g2.id = dgoa."toUpdateGoal"\n            AND g."grantId" = dgoa."grantId"\n            AND MD5(TRIM(g."smashedName")) = MD5(TRIM(g2."smashedName"))\n            GROUP BY 1,2,3,9,10\n        );\n        SELECT * FROM "GoalsToModify";\n\n        -- Handle GoalResources\n\n        DROP TABLE IF EXISTS "GoalResourcesToModify";\n        CREATE TEMP TABLE "GoalResourcesToModify" AS (\n            WITH gtmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "GoalsToModify"\n                )\n            SELECT\n            gtmm."toUpdate" "goalId",\n            "gr"."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "GoalResources" "grx"\n                CROSS JOIN UNNEST("grx"."sourceFields") sfx("sourceField")\n                WHERE "gr"."resourceId" = grx."resourceId"\n                AND (grx."goalId" = ANY(ARRAY_AGG("gr"."goalId"))\n                OR gtmm."toUpdate" = grx."goalId")\n            ) "sourceFields",\n            MIN(LEAST("gr"."createdAt", "gr2"."createdAt")) "createdAt",\n            MAX(GREATEST("gr"."updatedAt", "gr2"."updatedAt")) "updatedAt",\n            BOOL_OR("gr"."onAR" OR COALESCE("gr2"."onAR", FALSE)) "onAR",\n            BOOL_OR("gr"."onApprovedAR" OR COALESCE("gr2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "gr".id ORDER by "gr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "gr2".id))[1] "toUpdate"\n            FROM "GoalResources" "gr"\n            JOIN gtmm_recast gtmm\n            ON "gr"."goalId" = to_remove\n            LEFT JOIN "GoalResources" "gr2"\n            ON "gr2"."goalId" = gtmm."toUpdate"\n            AND "gr"."resourceId" = "gr2"."resourceId"\n            GROUP BY 1,2\n        );\n        SELECT * FROM "GoalResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(gfmm)))\n        -- FROM "GoalResourcesToModify" gfmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_GoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertGoalResources";\n        CREATE TEMP TABLE "InsertGoalResources" AS\n            WITH  insert_goal_resources AS (\n                INSERT INTO "GoalResources"\n                (\n                "goalId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                )\n                SELECT\n                "goalId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                FROM "GoalResourcesToModify" grtm\n                WHERE grtm."toUpdate" IS NULL and grtm."goalId" IS NOT NULL\n                RETURNING\n                id "goalResourceId",\n                "goalId"\n            )\n        SELECT * FROM insert_goal_resources;\n        SELECT * FROM "InsertGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_GoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateGoalResources";\n        CREATE TEMP TABLE "UpdateGoalResources" AS\n            WITH update_goal_resources AS (\n                UPDATE "GoalResources" "gr"\n                SET\n                "sourceFields" = grtm."sourceFields",\n                "createdAt" = grtm."createdAt",\n                "updatedAt" = grtm."updatedAt",\n                "onAR" = grtm."onAR",\n                "onApprovedAR" = grtm."onApprovedAR"\n                FROM "GoalResourcesToModify" grtm\n                WHERE "gr".id = grtm."toUpdate"\n                AND (\n                    "gr"."sourceFields" != grtm."sourceFields"\n                    OR "gr"."createdAt" != grtm."createdAt"\n                    OR "gr"."updatedAt" != grtm."updatedAt"\n                    OR "gr"."onAR" != grtm."onAR"\n                    OR "gr"."onApprovedAR" != grtm."onApprovedAR"\n                )\n                RETURNING\n                "gr".id "goalResourceId",\n                "gr"."goalId"\n            )\n        SELECT * FROM update_goal_resources;\n        SELECT * FROM "UpdateGoalResources";\n        END;\n\n        -- Handle GoalFieldResponses\n\n        DROP TABLE IF EXISTS "GoalFieldResponsesToModify";\n        CREATE TEMP TABLE "GoalFieldResponsesToModify" AS (\n            WITH gtmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "GoalsToModify"\n                )\n            SELECT\n            gtmm."toUpdate" "goalId",\n            "gfr"."goalTemplateFieldPromptId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."response")\n                FROM "GoalFieldResponses" "gfrx"\n                CROSS JOIN UNNEST("gfrx"."response") sfx("response")\n                WHERE "gfr"."goalTemplateFieldPromptId" = gfrx."goalTemplateFieldPromptId"\n                AND (gfrx."goalId" = ANY(ARRAY_AGG("gfr"."goalId"))\n                OR gtmm."toUpdate" = gfrx."goalId")\n            ) "response",\n            MIN(LEAST("gfr"."createdAt", "gfr2"."createdAt")) "createdAt",\n            MAX(GREATEST("gfr"."updatedAt", "gfr2"."updatedAt")) "updatedAt",\n            BOOL_OR("gfr"."onAR" OR COALESCE("gfr2"."onAR", FALSE)) "onAR",\n            BOOL_OR("gfr"."onApprovedAR" OR COALESCE("gfr2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "gfr".id ORDER by "gfr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "gfr2".id))[1] "toUpdate"\n            FROM "GoalFieldResponses" "gfr"\n            JOIN gtmm_recast gtmm\n            ON "gfr"."goalId" = to_remove\n            LEFT JOIN "GoalFieldResponses" "gfr2"\n            ON "gfr2"."goalId" = gtmm."toUpdate"\n            AND "gfr"."goalTemplateFieldPromptId" = "gfr2"."goalTemplateFieldPromptId"\n            GROUP BY 1,2\n        );\n        SELECT * FROM "GoalFieldResponsesToModify";\n        -- SELECT "goalTemplateFieldPromptId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "GoalFieldResponsesToModify" ofmm\n        -- GROUP BY "goalTemplateFieldPromptId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_GoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertGoalFieldResponses";\n        CREATE TEMP TABLE "InsertGoalFieldResponses" AS\n            WITH  insert_goal_field_responses AS (\n                INSERT INTO "GoalFieldResponses"\n                (\n                "goalId",\n                "goalTemplateFieldPromptId",\n                "response",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                )\n                SELECT\n                "goalId",\n                "goalTemplateFieldPromptId",\n                "response",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                FROM "GoalFieldResponsesToModify" gfrtm\n                WHERE gfrtm."toUpdate" IS NULL and gfrtm."goalId" IS NOT NULL\n                RETURNING\n                id "goalFieldResponseId",\n                "goalId"\n            )\n        SELECT * FROM insert_goal_field_responses;\n        SELECT * FROM "InsertGoalFieldResponses";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_GoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateGoalFieldResponses";\n        CREATE TEMP TABLE "UpdateGoalFieldResponses" AS\n            WITH update_goal_field_responses AS (\n                UPDATE "GoalFieldResponses" "gfr"\n                SET\n                "response" = gfrtm."response",\n                "createdAt" = gfrtm."createdAt",\n                "updatedAt" = gfrtm."updatedAt",\n                "onAR" = gfrtm."onAR",\n                "onApprovedAR" = gfrtm."onApprovedAR"\n                FROM "GoalFieldResponsesToModify" gfrtm\n                WHERE "gfr".id = gfrtm."toUpdate"\n                AND (\n                    "gfr"."response" != gfrtm."response"\n                    OR "gfr"."createdAt" != gfrtm."createdAt"\n                    OR "gfr"."updatedAt" != gfrtm."updatedAt"\n                    OR "gfr"."onAR" != gfrtm."onAR"\n                    OR "gfr"."onApprovedAR" != gfrtm."onApprovedAR"\n                )\n                RETURNING\n                "gfr".id "goalFieldResponseId",\n                "gfr"."goalId"\n            )\n        SELECT * FROM update_goal_field_responses;\n        SELECT * FROM "UpdateGoalFieldResponses";\n        END;\n\n\n        DROP TABLE IF EXISTS "AllSmashedObjectives";\n        CREATE TEMP TABLE "AllSmashedObjectives" AS (\n            SELECT\n                o.id "objectiveId",\n                REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(\n                REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(\n                        LOWER(o.title),\n                        'grantee(s?)', 'recipient\1', 'gi'),\n                        '\bDLLs?\b', 'dual language learners', 'gi'),\n                        '\bEHS?\b', 'early head start', 'gi'),\n                        '\bELOF?\b', 'head start early learning outcomes framework', 'gi'),\n                        '\bFEI?\b', 'full enrollment initiative', 'gi'),\n                        '\bHS\b', 'head start', 'gi'),\n                        '\bHSELOF\b', 'head start early learning outcomes framework', 'gi'),\n                        '\bOHS\b', 'office of head start', 'gi'),\n                        '\bPBC\b', 'practice based coaching', 'gi'),\n                        '\bPD\b', 'professional development', 'gi'),\n                        '\bSR\b', 'school readiness', 'gi'),\n                        '\bDLLs?\b', 'recipient\1', 'gi'),\n                        '[^a-z0-9]', '', 'gi'),\n                        '[ \t\r\n]', '', 'gi') "smashedTitle",\n                TRIM(o.title) "cleanTitle"\n            FROM "Objectives" o\n        );\n        SELECT * FROM "AllSmashedObjectives";\n\n        DROP TABLE IF EXISTS "SmashedObjectives";\n        CREATE TEMP TABLE "SmashedObjectives" AS (\n            SELECT\n                aso1."objectiveId",\n                aso1."smashedTitle",\n                REGEXP_REPLACE((ARRAY_AGG(aso2."cleanTitle" ORDER BY aso2."objectiveId" DESC))[1], '^\s+|\s+$', '', 'g') "cleanTitle"\n            FROM "AllSmashedObjectives" aso1\n            LEFT JOIN "AllSmashedObjectives" aso2\n            ON MD5(aso1."smashedTitle") = MD5(aso2."smashedTitle")\n            GROUP BY 1,2\n        );\n        SELECT * FROM "SmashedObjectives";\n\n        -- All objectives that are duplicates on goals that are duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnDupGoalsOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnDupGoalsOnARs" AS (\n            SELECT\n                dgoa.*,\n                MD5(TRIM(o."smashedTitle")) "objectiveHash",\n                o.status = 'Complete' "statusComplete",\n                ARRAY_AGG(o.id ORDER BY o."goalId", o.id) "objectiveIds",\n                array_remove(ARRAY_AGG(o.id ORDER BY o."goalId", o.id),(MIN(o.id) FILTER (WHERE o."goalId" = dgoa."toUpdateGoal"))) "toRemoveObjectives",\n                MIN(o.id) FILTER (WHERE o."goalId" = dgoa."toUpdateGoal") "toUpdateObjective",\n                COUNT(DISTINCT o.id) "objectiveCnt"\n            FROM ("Objectives"\n                JOIN "SmashedObjectives" sg\n                ON "Objectives".id = sg."objectiveId"\n            ) o\n            JOIN "DupGoalsOnARs" dgoa\n            ON o."goalId" = ANY(dgoa."goalIds")\n            GROUP BY 1,2,3,4,5,6,7,8,9,10\n            HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT o.id), 1) > 1\n            ORDER BY 8 DESC\n        );\n        SELECT * FROM "DupObjectivesOnDupGoalsOnARs";\n\n        -- All objectives that are duplicates on goals that are not duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnNonDupGoalsOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnNonDupGoalsOnARs" AS (\n            SELECT DISTINCT\n                array_remove(ARRAY_AGG(DISTINCT aro."activityReportId"), NULL) "activityReportIds",\n                g."grantId",\n                MD5(TRIM(g."smashedName")) "goalHash",\n                ARRAY[g.id] "goalIds",\n                ARRAY[]::int[] "toRemove",\n                g.id "toUpdate",\n                1 "goalCnt",\n                g."status" = 'Closed' "statusClosed",\n                MD5(TRIM(o."smashedTitle")) "objectiveHash",\n                o.status = 'Complete' "statusComplete",\n                ARRAY_AGG(o.id ORDER BY o.id) "objectiveIds",\n                array_remove(ARRAY_AGG(o.id ORDER BY o.id),MIN(o.id)) "toRemoveObjectives",\n                MIN(o.id) "toUpdateObjective",\n                COUNT(DISTINCT o.id) "objectiveCnt"\n            FROM ("Objectives"\n                JOIN "SmashedObjectives" sg\n                ON "Objectives".id = sg."objectiveId"\n            ) o\n            LEFT JOIN "ActivityReportObjectives" aro\n            ON aro."objectiveId" = o.id\n            LEFT JOIN "ObjectiveTemplates" ot\n            ON o."objectiveTemplateId" = ot.id\n            JOIN ("Goals"\n                JOIN "SmashedGoals" sg\n                ON "Goals".id = sg."goalId"\n            ) g\n            ON o."goalId" = g.id\n            LEFT JOIN "DupObjectivesOnDupGoalsOnARs" doodgoa\n            ON aro."activityReportId" = ANY(doodgoa."activityReportIds")\n            AND g."grantId" = doodgoa."grantId"\n            AND MD5(TRIM(g."smashedName")) = doodgoa."goalHash"\n            AND MD5(TRIM(o."smashedTitle")) = doodgoa."objectiveHash"\n            AND o.id != ANY(doodgoa."objectiveIds")\n            WHERE doodgoa."grantId" IS NULL\n            GROUP BY 2,3,4,5,6,7,8,9,10\n            HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT o.id), 1) > 1\n            ORDER BY 11 DESC\n        );\n        SELECT * FROM "DupObjectivesOnNonDupGoalsOnARs";\n\n        -- All objectives that are duplicates on goals that are (not) duplicates on the same AR\n        DROP TABLE IF EXISTS "DupObjectivesOnARs";\n        CREATE TEMP TABLE "DupObjectivesOnARs" AS (\n            SELECT\n            *\n            FROM "DupObjectivesOnDupGoalsOnARs"\n            UNION\n            SELECT\n            *\n            FROM "DupObjectivesOnNonDupGoalsOnARs"\n        );\n        SELECT * FROM "DupObjectivesOnARs";\n\n        -- Handle Objectives\n        DROP TABLE IF EXISTS "ObjectivesToModify";\n        CREATE TEMP TABLE "ObjectivesToModify" AS (\n            SELECT DISTINCT\n                dooa."toUpdateGoal" "goalId",\n                TRIM(o."cleanTitle") "title",\n                dooa."objectiveHash",\n                CASE\n                    WHEN 'Complete' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Complete' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Complete'\n                    WHEN 'Suspended' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Suspended' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Suspended'\n                    WHEN 'In Progress' = ANY(ARRAY_AGG(o."status"))\n                    OR 'In Progress' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'In Progress'\n                    WHEN 'Not Started' = ANY(ARRAY_AGG(o."status"))\n                    OR 'Not Started' = ANY(ARRAY_AGG(o2."status"))\n                    THEN 'Not Started'\n                    ELSE COALESCE((ARRAY_AGG(o2."status"))[1], 'Not Started')\n                END "status",\n                MIN(LEAST("o"."createdAt", "o2"."createdAt")) "createdAt",\n                MAX(GREATEST("o"."updatedAt", "o2"."updatedAt")) "updatedAt",\n                COALESCE(o2."otherEntityId", o."otherEntityId") "otherEntityId",\n                BOOL_OR(COALESCE(o."onApprovedAR", FALSE) OR COALESCE(o2."onApprovedAR", FALSE)) "onApprovedAR",\n                MIN(LEAST("o"."firstNotStartedAt", "o2"."firstNotStartedAt")) "firstNotStartedAt",\n                MAX(GREATEST("o"."lastNotStartedAt", "o2"."lastNotStartedAt")) "lastNotStartedAt",\n                MIN(LEAST("o"."firstInProgressAt", "o2"."firstInProgressAt")) "firstInProgressAt",\n                MAX(GREATEST("o"."lastInProgressAt", "o2"."lastInProgressAt")) "lastInProgressAt",\n                MIN(LEAST("o"."firstCompleteAt", "o2"."firstCompleteAt")) "firstCompleteAt",\n                MAX(GREATEST("o"."lastCompleteAt", "o2"."lastCompleteAt")) "lastCompleteAt",\n                MIN(LEAST("o"."firstSuspendedAt", "o2"."firstSuspendedAt")) "firstSuspendedAt",\n                MAX(GREATEST("o"."lastSuspendedAt", "o2"."lastSuspendedAt")) "lastSuspendedAt",\n                MIN(LEAST(o."rtrOrder", o2."rtrOrder")) "rtrOrder",\n                CASE\n                    WHEN 'rtr' = ANY(ARRAY_AGG(o."createdVia"))\n                    OR 'rtr' = ANY(ARRAY_AGG(o2."createdVia"))\n                    THEN 'rtr'\n                    WHEN 'activityReport' = ANY(ARRAY_AGG(o."createdVia"))\n                    OR 'activityReport' = ANY(ARRAY_AGG(o2."createdVia"))\n                    THEN 'activityReport'\n                    ELSE NULL\n                END "createdVia",\n                BOOL_OR(COALESCE(o."onAR", FALSE) OR COALESCE(o2."onAR", FALSE)) "onAR",\n                ARRAY_AGG(DISTINCT "o".id ORDER by "o".id) "toRemove",\n                MIN("o2".id) "toUpdate"\n            FROM ("Objectives"\n                JOIN "SmashedObjectives" so\n                ON "Objectives".id = so."objectiveId"\n            ) o\n            JOIN "DupObjectivesOnARs" dooa\n            ON o.id = ANY(dooa."toRemoveObjectives")\n            AND o.id != COALESCE(dooa."toUpdateObjective",0)\n            LEFT JOIN "Objectives" o2\n            ON o2.id = dooa."toUpdateObjective"\n            AND o2."goalId" = dooa."toUpdateGoal"\n            GROUP BY 1,2,3,7\n        );\n        SELECT * FROM "ObjectivesToModify";\n\n        --somehow there are duplicates in here, so dedupe\n        DROP TABLE IF EXISTS "DeduplicatedObjectivesToModify";\n        CREATE TEMP TABLE "DeduplicatedObjectivesToModify" AS (\n            SELECT DISTINCT ON ("goalId", "objectiveHash")\n                "goalId",\n                TRIM("title") "title",\n                "status",\n                "createdAt",\n                "updatedAt",\n                "otherEntityId",\n                "onApprovedAR",\n                "firstNotStartedAt",\n                "lastNotStartedAt",\n                "firstInProgressAt",\n                "lastInProgressAt",\n                "firstCompleteAt",\n                "lastCompleteAt",\n                "firstSuspendedAt",\n                "lastSuspendedAt",\n                "rtrOrder",\n                "createdVia",\n                "toRemove",\n                "toUpdate",\n                "objectiveHash",\n                "onAR"\n            FROM "ObjectivesToModify"\n            ORDER BY "goalId", "objectiveHash", "createdAt"\n        );\n\n        DROP TABLE IF EXISTS "UniqueObjectivesOnGoalsToBeRemoved";\n        CREATE TEMP TABLE "UniqueObjectivesOnGoalsToBeRemoved" AS (\n            WITH\n                "GoalsToModifyIds" AS (\n                    SELECT\n                        gtm."toUpdate",\n                        tr."toRemove"\n                    FROM "GoalsToModify" gtm\n                    CROSS JOIN UNNEST(gtm."toRemove") tr("toRemove")\n                ),\n                "ObjectivesToModifyIds" AS (\n                    SELECT\n                        dotm."toUpdate",\n                        tr."toRemove"\n                    FROM "DeduplicatedObjectivesToModify" dotm\n                    CROSS JOIN UNNEST(dotm."toRemove") tr("toRemove")\n                )\n            SELECT DISTINCT\n                o.id,\n                o."goalId" "oldGoalId",\n                gtmi."toUpdate" "newGoalId"\n            FROM "Objectives" o\n            JOIN "GoalsToModifyIds" gtmi\n            ON o."goalId" = gtmi."toRemove"\n            LEFT JOIN "ObjectivesToModifyIds" otmi\n            ON o.id = otmi."toRemove"\n            WHERE otmi."toUpdate" IS NULL\n        );\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Shift_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "ShiftObjectives";\n        CREATE TEMP TABLE "ShiftObjectives" AS\n            WITH shift_objectives AS (\n                UPDATE "Objectives" "o"\n                SET\n                    "goalId" = uoogtbr."newGoalId"\n                FROM "UniqueObjectivesOnGoalsToBeRemoved" uoogtbr\n                WHERE "o".id = uoogtbr.id\n                RETURNING\n                "o".id "updated_objective_id",\n                uoogtbr."oldGoalId" "old_goal_id",\n                uoogtbr."newGoalId" "new_goal_id"\n            )\n        SELECT * FROM shift_objectives;\n        SELECT * FROM "ShiftObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectives";\n        CREATE TEMP TABLE "InsertObjectives" AS\n        WITH inserted_objectives  AS (\n            INSERT INTO "Objectives"\n            (\n            "goalId",\n            "title",\n            status,\n            "createdAt",\n            "updatedAt",\n            "otherEntityId",\n            "onAR",\n            "onApprovedAR",\n            "firstNotStartedAt",\n            "lastNotStartedAt",\n            "firstInProgressAt",\n            "lastInProgressAt",\n            "firstCompleteAt",\n            "lastCompleteAt",\n            "firstSuspendedAt",\n            "lastSuspendedAt",\n            "rtrOrder",\n            "createdVia"\n            )\n            SELECT\n            "goalId",\n            TRIM("title") "title",\n            status,\n            "createdAt",\n            "updatedAt",\n            "otherEntityId",\n            "onAR",\n            "onApprovedAR",\n            "firstNotStartedAt",\n            "lastNotStartedAt",\n            "firstInProgressAt",\n            "lastInProgressAt",\n            "firstCompleteAt",\n            "lastCompleteAt",\n            "firstSuspendedAt",\n            "lastSuspendedAt",\n            "rtrOrder",\n            "createdVia"::"enum_Objectives_createdVia"\n            FROM "ObjectivesToModify" otm\n            WHERE otm."toUpdate" IS NULL\n            RETURNING\n                id "inserted_objective_id",\n                id "objectiveId",\n                "goalId",\n                MD5(TRIM("title")) "objectiveHash"\n        )\n        SELECT * FROM inserted_objectives;\n        SELECT * FROM "InsertObjectives";\n        END;\n\n        -- Update foreign key references in ActivityReportObjectives\n        -- UPDATE "ActivityReportObjectives" aro\n        -- SET "objectiveId" = "InsertObjectives"."inserted_objective_id"\n        -- FROM "InsertObjectives"\n        -- WHERE aro."objectiveId" = "InsertObjectives"."old_objective_id";\n\n        -- somehow there are duplicates in here, so dedupe\n        DROP TABLE IF EXISTS "DeduplicatedInsertObjectives";\n        CREATE TEMP TABLE "DeduplicatedInsertObjectives" AS (\n            SELECT DISTINCT ON ("goalId", "objectiveHash")\n                "objectiveId",\n                "goalId",\n                "objectiveHash"\n            FROM "InsertObjectives"\n            ORDER BY "goalId", "objectiveHash"\n        );\n\n        -- Handle Objectives Metadata tables\n        DROP TABLE IF EXISTS "ObjectivesToModifyMetadata";\n        CREATE TEMP TABLE "ObjectivesToModifyMetadata" AS\n        WITH objectives_to_modify AS (\n            SELECT\n            otm."goalId",\n            otm."title",\n            otm.status,\n            otm."createdAt",\n            otm."updatedAt",\n            otm."otherEntityId",\n            otm."onAR",\n            otm."onApprovedAR",\n            otm."firstNotStartedAt",\n            otm."lastNotStartedAt",\n            otm."firstInProgressAt",\n            otm."lastInProgressAt",\n            otm."firstCompleteAt",\n            otm."lastCompleteAt",\n            otm."firstSuspendedAt",\n            otm."lastSuspendedAt",\n            otm."rtrOrder",\n            otm."createdVia",\n            otm."toRemove",\n            COALESCE(otm."toUpdate", "io"."objectiveId") "toUpdate"\n            FROM "ObjectivesToModify" otm\n            LEFT JOIN "InsertObjectives" "io"\n            ON otm."goalId" = "io"."goalId"\n            AND otm."objectiveHash" = "io"."objectiveHash"\n        )\n        SELECT * FROM objectives_to_modify;\n        SELECT * FROM "ObjectivesToModifyMetadata";\n\n        --Check for Extra Objectives\n\n        -- SELECT "grantId", "goalHash", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(doodgoa)))\n        -- FROM "DupObjectivesOnDupGoalsOnARs" doodgoa\n        -- GROUP BY "grantId", "goalHash", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "grantId", "goalHash", "objectiveHash", COUNT(*) , array_to_json(array_agg(row_to_json(doondgoa)))\n        -- FROM "DupObjectivesOnNonDupGoalsOnARs"doondgoa\n        -- GROUP BY "grantId", "goalHash", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(otm)))\n        -- FROM "ObjectivesToModify" otm\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*), array_to_json(array_agg(row_to_json(io)))\n        -- FROM "InsertObjectives" io\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*)\n        -- FROM "DeduplicatedObjectivesToModify"\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "objectiveHash", COUNT(*)\n        -- FROM "DeduplicatedInsertObjectives"\n        -- GROUP BY "goalId", "objectiveHash"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT "goalId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(otmm)))\n        -- FROM "ObjectivesToModifyMetadata" otmm\n        -- GROUP BY "goalId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- SELECT o1."goalId", o1."title", o1."objectiveHash", o2."title", o2."objectiveHash"\n        -- FROM "ObjectivesToModify" o1\n        -- JOIN "ObjectivesToModify" o2\n        -- ON o1."goalId" = o2."goalId"\n        -- AND o1."title" ILIKE o2."title"\n        -- AND o1."objectiveHash" != o2."objectiveHash";\n\n        -- Validate ObjectiveFiles objectiveId null value\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveFiles" "of"\n        -- JOIN otmm_recast otmm\n        -- ON "of"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveFiles" "of2"\n        -- ON "of2"."objectiveId" = otmm."toUpdate"\n        -- AND "of"."fileId" = "of2"."fileId";\n\n        -- Handle ObjectiveFiles\n        DROP TABLE IF EXISTS "ObjectiveFilesToModify";\n        CREATE TEMP TABLE "ObjectiveFilesToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "of"."fileId",\n            MIN(LEAST("of"."createdAt", "of2"."createdAt")) "createdAt",\n            MAX(GREATEST("of"."updatedAt", "of2"."updatedAt")) "updatedAt",\n            BOOL_OR("of"."onAR" OR COALESCE("of2"."onAR", FALSE)) "onAR",\n            BOOL_OR("of"."onApprovedAR" OR COALESCE("of2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "of".id ORDER by "of".id) "toRemove" ,\n            (ARRAY_AGG(DISTINCT "of2".id))[1] "toUpdate"\n            FROM "ObjectiveFiles" "of"\n            JOIN otmm_recast otmm\n            ON "of"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveFiles" "of2"\n            ON "of2"."objectiveId" = otmm."toUpdate"\n            AND "of"."fileId" = "of2"."fileId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ObjectiveFilesToModify\n        SELECT * FROM "ObjectiveFilesToModify";\n        -- SELECT "objectiveId", "fileId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveFilesToModify" ofmm\n        -- GROUP BY "objectiveId", "fileId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveFiles";\n        CREATE TEMP TABLE "InsertObjectiveFiles" AS\n            WITH objective_files AS (\n            INSERT INTO "ObjectiveFiles"\n            (\n            "objectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            )\n            SELECT\n            "objectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            FROM "ObjectiveFilesToModify" oftm\n            WHERE oftm."toUpdate" IS NULL and oftm."objectiveId" IS NOT NULL\n            RETURNING\n            id "objectiveFileId",\n            "objectiveId"\n        )\n        SELECT * FROM objective_files;\n        SELECT * FROM "InsertObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveFiles";\n        CREATE TEMP TABLE "UpdateObjectiveFiles" AS\n        WITH update_objective_files AS  (\n            UPDATE "ObjectiveFiles" "of"\n            SET\n            "createdAt" = oftm."createdAt",\n            "updatedAt" = oftm."updatedAt",\n            "onAR" = oftm."onAR",\n            "onApprovedAR" = oftm."onApprovedAR"\n            FROM "ObjectiveFilesToModify" oftm\n            WHERE "of".id = oftm."toUpdate"\n            AND (\n                "of"."createdAt" != oftm."createdAt"\n                OR "of"."updatedAt" != oftm."updatedAt"\n                OR "of"."onAR" != oftm."onAR"\n                OR "of"."onApprovedAR" != oftm."onApprovedAR"\n            )\n            RETURNING\n            "of".id "objectiveFileId",\n            "of"."objectiveId"\n        )\n        SELECT * FROM update_objective_files;\n        SELECT * FROM "UpdateObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveFiles";\n        CREATE TEMP TABLE "DeleteObjectiveFiles" AS\n        WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveFilesToModify"\n                ),\n            del_objective_files AS (\n            DELETE FROM "ObjectiveFiles" "of"\n            USING otmm_recast oftm\n            WHERE "of".id = to_remove\n            RETURNING\n            "of".id "objectiveFileId",\n            "of"."objectiveId"\n        )\n        SELECT * FROM del_objective_files;\n        SELECT * FROM "UpdateObjectiveFiles";\n\n        DROP TABLE IF EXISTS "ObjectiveFileStats";\n        CREATE TEMP TABLE "ObjectiveFileStats" AS (\n            SELECT\n            'ObjectiveFiles' "table",\n            (SELECT COUNT(*) FROM "InsertObjectiveFiles") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectiveFiles") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectiveFiles") "Deletes",\n            (SELECT COUNT(*) FROM "ObjectiveFiles") "post_count"\n        );\n\n        -- Validate ObjectiveResources objectiveId null value\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveResources" "or"\n        -- JOIN otmm_recast otmm\n        -- ON "or"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveResources" "or2"\n        -- ON "or2"."objectiveId" = otmm."toUpdate"\n        -- AND "or"."resourceId" = "or2"."resourceId";\n\n        -- Handle ObjectiveResources\n\n        DROP TABLE IF EXISTS "ObjectiveResourcesToModify";\n        CREATE TEMP TABLE "ObjectiveResourcesToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "or"."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ObjectiveResources" "orx"\n                CROSS JOIN UNNEST("orx"."sourceFields") sfx("sourceField")\n                WHERE "or"."resourceId" = orx."resourceId"\n                AND (orx."objectiveId" = ANY(ARRAY_AGG("or"."objectiveId"))\n                OR otmm."toUpdate" = orx."objectiveId")\n            ) "sourceFields",\n            MIN(LEAST("or"."createdAt", "or2"."createdAt")) "createdAt",\n            MAX(GREATEST("or"."updatedAt", "or2"."updatedAt")) "updatedAt",\n            BOOL_OR("or"."onAR" OR COALESCE("or2"."onAR", FALSE)) "onAR",\n            BOOL_OR("or"."onApprovedAR" OR COALESCE("or2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "or".id ORDER by "or".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "or2".id))[1] "toUpdate"\n            FROM "ObjectiveResources" "or"\n            JOIN otmm_recast otmm\n            ON "or"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveResources" "or2"\n            ON "or2"."objectiveId" = otmm."toUpdate"\n            AND "or"."resourceId" = "or2"."resourceId"\n            GROUP BY 1,2\n        );\n        SELECT * FROM "ObjectiveResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveResources";\n        CREATE TEMP TABLE "InsertObjectiveResources" AS\n            WITH  insert_objective_resources AS (\n                INSERT INTO "ObjectiveResources"\n                (\n                "objectiveId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                )\n                SELECT\n                "objectiveId",\n                "resourceId",\n                "sourceFields",\n                "createdAt",\n                "updatedAt",\n                "onAR",\n                "onApprovedAR"\n                FROM "ObjectiveResourcesToModify" ortm\n                WHERE ortm."toUpdate" IS NULL and ortm."objectiveId" IS NOT NULL\n                RETURNING\n                id "objectiveResourceId",\n                "objectiveId"\n            )\n        SELECT * FROM insert_objective_resources;\n        SELECT * FROM "InsertObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveResources";\n        CREATE TEMP TABLE "UpdateObjectiveResources" AS\n            WITH update_objective_resources AS (\n                UPDATE "ObjectiveResources" "or"\n                SET\n                "sourceFields" = ortm."sourceFields",\n                "createdAt" = ortm."createdAt",\n                "updatedAt" = ortm."updatedAt",\n                "onAR" = ortm."onAR",\n                "onApprovedAR" = ortm."onApprovedAR"\n                FROM "ObjectiveResourcesToModify" ortm\n                WHERE "or".id = ortm."toUpdate"\n                AND (\n                    "or"."sourceFields" != ortm."sourceFields"\n                    OR "or"."createdAt" != ortm."createdAt"\n                    OR "or"."updatedAt" != ortm."updatedAt"\n                    OR "or"."onAR" != ortm."onAR"\n                    OR "or"."onApprovedAR" != ortm."onApprovedAR"\n                )\n                RETURNING\n                "or".id "objectiveResourceId",\n                "or"."objectiveId"\n            )\n        SELECT * FROM update_objective_resources;\n        SELECT * FROM "UpdateObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveResources";\n        CREATE TEMP TABLE "DeleteObjectiveResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveResourcesToModify"\n                ),\n            delete_objective_resources AS\n            (\n                DELETE FROM "ObjectiveResources" "or"\n                USING otmm_recast ortm\n                WHERE "or".id = to_remove\n                RETURNING\n                "or".id "objectiveResourceId",\n                "or"."objectiveId"\n            )\n        SELECT * FROM delete_objective_resources;\n        SELECT * FROM "DeleteObjectiveResources";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveResourceStats";\n        CREATE TEMP TABLE "ObjectiveResourceStats" AS\n            (\n                SELECT\n                'ObjectiveResources' "table",\n                (SELECT COUNT(*) FROM "InsertObjectiveResources") "Inserts",\n                (SELECT COUNT(*) FROM "UpdateObjectiveResources") "Updates",\n                (SELECT COUNT(*) FROM "DeleteObjectiveResources") "Deletes",\n                (SELECT COUNT(*) FROM "ObjectiveResources" "or") "post_count"\n            );\n\n        -- Validate ObjectiveTopics objectiveId null values\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ObjectiveTopics" "ot"\n        -- JOIN  otmm_recast otmm\n        -- ON "ot"."objectiveId" = to_remove\n        -- LEFT JOIN "ObjectiveTopics" "ot2"\n        -- ON "ot2"."objectiveId" = otmm."toUpdate"\n        -- AND "ot"."topicId" = "ot2"."topicId";\n\n        -- Handle ObjectiveTopics\n\n            DROP TABLE IF EXISTS "ObjectiveTopicsToModify";\n            CREATE TEMP TABLE "ObjectiveTopicsToModify" AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n            SELECT\n            otmm."toUpdate" "objectiveId",\n            "ot"."topicId",\n            MIN(LEAST("ot"."createdAt", "ot2"."createdAt")) "createdAt",\n            MAX(GREATEST("ot"."updatedAt", "ot2"."updatedAt")) "updatedAt",\n            BOOL_OR("ot"."onAR" OR COALESCE("ot2"."onAR", FALSE)) "onAR",\n            BOOL_OR("ot"."onApprovedAR" OR COALESCE("ot2"."onApprovedAR", FALSE)) "onApprovedAR",\n            ARRAY_AGG(DISTINCT "ot".id ORDER by "ot".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "ot2".id))[1] "toUpdate"\n            FROM "ObjectiveTopics" "ot"\n            JOIN  otmm_recast otmm\n            ON "ot"."objectiveId" = to_remove\n            LEFT JOIN "ObjectiveTopics" "ot2"\n            ON "ot2"."objectiveId" = otmm."toUpdate"\n            AND "ot"."topicId" = "ot2"."topicId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ObjectiveTopicsToModify\n        SELECT * FROM "ObjectiveTopicsToModify";\n        -- SELECT "topicId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ObjectiveTopicsToModify" ofmm\n        -- GROUP BY "topicId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertObjectiveTopics";\n        CREATE TEMP TABLE "InsertObjectiveTopics" AS\n        WITH insert_objective_topics AS (\n            INSERT INTO "ObjectiveTopics"\n            (\n            "objectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            )\n            SELECT\n            "objectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt",\n            "onAR",\n            "onApprovedAR"\n            FROM "ObjectiveTopicsToModify" ottm\n            WHERE ottm."toUpdate" IS NULL AND ottm."objectiveId" IS NOT NULL\n            RETURNING\n            id "objectiveTopicId",\n            "objectiveId"\n        )\n        SELECT * FROM insert_objective_topics;\n        SELECT * FROM "InsertObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectiveTopics";\n        CREATE TEMP TABLE "UpdateObjectiveTopics" AS\n        WITH update_objective_topics AS (\n            UPDATE "ObjectiveTopics" "ot"\n            SET\n            "createdAt" = ottm."createdAt",\n            "updatedAt" = ottm."updatedAt",\n            "onAR" = ottm."onAR",\n            "onApprovedAR" = ottm."onApprovedAR"\n            FROM "ObjectiveTopicsToModify" ottm\n            WHERE "ot".id = ottm."toUpdate"\n            AND (\n                "ot"."createdAt" != ottm."createdAt"\n                OR "ot"."updatedAt" != ottm."updatedAt"\n                OR "ot"."onAR" != ottm."onAR"\n                OR "ot"."onApprovedAR" != ottm."onApprovedAR"\n            )\n            RETURNING\n            "ot".id "objectiveTopicId",\n            "ot"."objectiveId"\n        )\n        SELECT * FROM update_objective_topics;\n        SELECT * FROM "UpdateObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectiveTopics";\n        CREATE TEMP TABLE "DeleteObjectiveTopics" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ObjectiveTopicsToModify"\n                ),\n            delete_objective_topics AS (\n            DELETE FROM "ObjectiveTopics" "ot"\n            USING otmm_recast ottm\n            WHERE "ot".id = to_remove\n            RETURNING\n            "ot".id "objectiveTopicId",\n            "ot"."objectiveId"\n        )\n        SELECT * FROM delete_objective_topics;\n        SELECT * FROM "DeleteObjectiveTopics";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveTopicStats";\n        CREATE TEMP TABLE "ObjectiveTopicStats" AS (\n            SELECT\n            'ObjectiveTopics' "table",\n            (SELECT COUNT(*) FROM "InsertObjectiveTopics") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectiveTopics") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectiveTopics") "Deletes",\n            (SELECT COUNT(*) FROM "ObjectiveTopics" ot) "post_count"\n        );\n        -- Continue Handle Objectives\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateObjectives";\n        CREATE TEMP TABLE "UpdateObjectives" AS\n        WITH update_objectives AS (\n            UPDATE "Objectives" "o"\n            SET\n            "createdAt" = otmm."createdAt",\n            "updatedAt" = otmm."updatedAt",\n            "onAR" = otmm."onAR",\n            "onApprovedAR" = otmm."onApprovedAR",\n            "firstNotStartedAt" = otmm."firstNotStartedAt",\n            "lastNotStartedAt" = otmm."lastNotStartedAt",\n            "firstInProgressAt" = otmm."firstInProgressAt",\n            "lastInProgressAt" = otmm."lastInProgressAt",\n            "firstCompleteAt" = otmm."firstCompleteAt",\n            "lastCompleteAt" = otmm."lastCompleteAt",\n            "firstSuspendedAt" = otmm."firstSuspendedAt",\n            "lastSuspendedAt" = otmm."lastSuspendedAt",\n            "rtrOrder" = otmm."rtrOrder",\n            "createdVia" = otmm."createdVia"::"enum_Objectives_createdVia"\n            FROM "ObjectivesToModifyMetadata" otmm\n            WHERE "o".id = otmm."toUpdate"\n            AND (\n                "o"."createdAt" != otmm."createdAt"\n                OR "o"."updatedAt" != otmm."updatedAt"\n                OR "o"."onAR" != otmm."onAR"\n                OR "o"."onApprovedAR" != otmm."onApprovedAR"\n                OR "o"."firstNotStartedAt" != otmm."firstNotStartedAt"\n                OR "o"."lastNotStartedAt" != otmm."lastNotStartedAt"\n                OR "o"."firstInProgressAt" != otmm."firstInProgressAt"\n                OR "o"."lastInProgressAt" != otmm."lastInProgressAt"\n                OR "o"."firstCompleteAt" != otmm."firstCompleteAt"\n                OR "o"."lastCompleteAt" != otmm."lastCompleteAt"\n                OR "o"."firstSuspendedAt" != otmm."firstSuspendedAt"\n                OR "o"."lastSuspendedAt" != otmm."lastSuspendedAt"\n                OR "o"."rtrOrder" != otmm."rtrOrder"\n                OR "o"."createdVia" != otmm."createdVia"::"enum_Objectives_createdVia"\n            )\n            RETURNING\n            "o".id "updated_objective_id",\n            otmm."toUpdate" "old_objective_id"\n        )\n        SELECT * FROM update_objectives;\n        SELECT * FROM "UpdateObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        -- Update foreign key references in ActivityReportObjectives\n        UPDATE "ActivityReportObjectives" aro\n        SET "objectiveId" = "UpdateObjectives"."updated_objective_id"\n        FROM "UpdateObjectives"\n        WHERE aro."objectiveId" = "UpdateObjectives"."old_objective_id";\n        END;\n\n        -- Handle ActivityReportObjectives\n        DROP TABLE IF EXISTS "ActivityReportObjectivesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectivesToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n                FROM "ObjectivesToModifyMetadata"\n                )\n                SELECT\n                    otmm."toUpdate" "objectiveId",\n                    aro."activityReportId",\n                    aro.title,\n                    aro.status,\n                    MIN(LEAST(aro."arOrder", aro2."arOrder")) "arOrder",\n                    STRING_AGG(DISTINCT "arox"."ttaProvided", E'\n') "ttaProvided",\n                    MIN(LEAST("aro"."createdAt", "aro2"."createdAt")) "createdAt",\n                    MAX(GREATEST("aro"."updatedAt", "aro2"."updatedAt")) "updatedAt",\n                    ARRAY_AGG(DISTINCT "aro".id ORDER by "aro".id) "toRemove",\n                    (ARRAY_AGG(DISTINCT "aro2".id))[1] "toUpdate"\n                    FROM "ActivityReportObjectives" aro\n                    JOIN  otmm_recast otmm\n                    ON "aro"."objectiveId" = to_remove\n                    LEFT JOIN "ActivityReportObjectives" aro2\n                    ON "aro2"."objectiveId" = otmm."toUpdate"\n                    AND "aro"."activityReportId" = "aro2"."activityReportId"\n                    LEFT JOIN "ActivityReportObjectives" arox\n                        ON "aro"."activityReportId" = arox."activityReportId"\n                        AND (\n                            arox."objectiveId" = "aro"."objectiveId"\n                            OR otmm."toUpdate" = arox."objectiveId"\n                        )\n                    GROUP BY 1,2,3,4\n                    );\n\n        -- Validate Handle ActivityReportObjectivesToModify\n        SELECT * FROM "ActivityReportObjectivesToModify";\n        -- SELECT "activityReportId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectivesToModify" ofmm\n        -- GROUP BY "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectives";\n        CREATE TEMP TABLE "InsertActivityReportObjectives" AS\n        WITH insert_activity_report_objectives AS (\n            INSERT INTO "ActivityReportObjectives"\n            (\n            "objectiveId",\n            "activityReportId",\n            title,\n            status,\n            "ttaProvided",\n            "arOrder",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "objectiveId",\n            "activityReportId",\n            TRIM(title) title,\n            status,\n            "ttaProvided",\n            "arOrder",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectivesToModify" oftm\n            WHERE oftm."toUpdate" IS NULL AND oftm."objectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveId",\n            "objectiveId",\n            "activityReportId"\n        )\n        SELECT * FROM insert_activity_report_objectives;\n        SELECT * FROM "InsertActivityReportObjectives";\n        END;\n\n        -- Handle ActivityReportObjectives Metadata tables\n\n        DROP TABLE IF EXISTS "ActivityReportObjectivesToModifyMetadata";\n        CREATE TEMP TABLE "ActivityReportObjectivesToModifyMetadata" AS (\n            SELECT\n            arotm."objectiveId",\n            arotm."activityReportId",\n            arotm.title,\n            arotm.status,\n            arotm."arOrder",\n            arotm."ttaProvided",\n            arotm."createdAt",\n            arotm."updatedAt",\n            arotm."toRemove",\n            COALESCE(arotm."toUpdate", iaro."activityReportObjectiveId") "toUpdate"\n            FROM "ActivityReportObjectivesToModify" arotm\n            LEFT JOIN "InsertActivityReportObjectives" iaro\n            ON arotm."objectiveId" = iaro."objectiveId"\n            AND arotm."activityReportId" = iaro."activityReportId"\n        );\n\n        -- -- Validate Handle ActivityReportObjectivesToModifyMetadata\n        SELECT * FROM "ActivityReportObjectivesToModifyMetadata";\n        -- SELECT "objectiveId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectivesToModifyMetadata" ofmm\n        -- GROUP BY "objectiveId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- -- Validate  ActivityReportObjectiveFiles objectiveId null values\n\n        -- WITH otmm_recast AS (\n        --     SELECT *,\n        --         UNNEST("toRemove") to_remove\n        --     FROM "ActivityReportObjectivesToModifyMetadata"\n        -- )\n        -- SELECT *\n        -- FROM "ActivityReportObjectiveFiles" arof\n        -- JOIN otmm_recast arotmm\n        -- ON arof."activityReportObjectiveId" = to_remove\n        -- LEFT JOIN "ActivityReportObjectiveFiles" arof2\n        -- ON arof2."activityReportObjectiveId" = arotmm."toUpdate"\n        -- AND arof."fileId" = arof2."fileId";\n\n        -- Handle ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS "ActivityReportObjectiveFilesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveFilesToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModifyMetadata"\n        )\n            SELECT\n            arotmm."toUpdate" "activityReportObjectiveId",\n            arof."fileId",\n            MIN(LEAST("arof"."createdAt", "arof2"."createdAt")) "createdAt",\n            MAX(GREATEST("arof"."updatedAt", "arof2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "arof".id ORDER by "arof".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "arof2".id))[1] "toUpdate"\n            FROM "ActivityReportObjectiveFiles" arof\n            JOIN otmm_recast arotmm\n            ON arof."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveFiles" arof2\n            ON arof2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND arof."fileId" = arof2."fileId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveFilesToModify\n        SELECT * FROM "ActivityReportObjectiveFilesToModify";\n        -- SELECT "fileId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveFilesToModify" ofmm\n        -- GROUP BY "fileId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveFiles" AS\n        WITH insert_activity_report_objective_files AS (\n            INSERT INTO "ActivityReportObjectiveFiles"\n            (\n            "activityReportObjectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "fileId",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveFilesToModify" aroftm\n            WHERE aroftm."toUpdate" IS NULL and aroftm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveFileId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_files;\n        SELECT * FROM "InsertActivityReportObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveFiles" AS\n        WITH update_activity_report_objective_files AS (\n            UPDATE "ActivityReportObjectiveFiles" "arof"\n            SET\n            "createdAt" = aroftm."createdAt",\n            "updatedAt" = aroftm."updatedAt"\n            FROM "ActivityReportObjectiveFilesToModify" aroftm\n            WHERE "arof".id = aroftm."toUpdate"\n            AND (\n                "arof"."createdAt" != aroftm."createdAt"\n                OR "arof"."updatedAt" != aroftm."updatedAt"\n            )\n            RETURNING\n            "arof".id "activityReportObjectiveFileId",\n            "arof"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_files;\n        SELECT * FROM "UpdateActivityReportObjectiveFiles";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveFiles', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveFiles";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveFiles" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectiveFilesToModify"\n                ),\n        delete_activity_report_objective_files AS (\n            DELETE FROM "ActivityReportObjectiveFiles" "arof"\n            USING otmm_recast aroftm\n            WHERE "arof".id = to_remove\n            RETURNING\n            "arof".id "activityReportObjectiveFileId",\n            "arof"."activityReportObjectiveId"\n        )\n        SELECT * FROM delete_activity_report_objective_files;\n        SELECT * FROM "DeleteActivityReportObjectiveFiles";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveFileStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveFileStats" AS (\n            SELECT\n            'ActivityReportObjectiveFiles' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveFiles") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveFiles") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveFiles") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveFiles" arof) "post_count"\n        );\n\n        -- Handle ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS "ActivityReportObjectiveResourcesToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveResourcesToModify" AS (\n            WITH arotmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectivesToModifyMetadata"\n                )\n            SELECT\n            arotmm."toUpdate" "activityReportObjectiveId",\n            aror."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ActivityReportObjectiveResources" "arorx"\n                CROSS JOIN UNNEST("arorx"."sourceFields") sfx("sourceField")\n                WHERE "aror"."resourceId" = arorx."resourceId"\n                AND (arorx."activityReportObjectiveId" = ANY(ARRAY_AGG("aror"."activityReportObjectiveId"))\n                OR arotmm."toUpdate" = arorx."activityReportObjectiveId")\n            ) "sourceFields",\n            MIN(LEAST("aror"."createdAt", "aror2"."createdAt")) "createdAt",\n            MAX(GREATEST("aror"."updatedAt", "aror2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "aror".id ORDER by "aror".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "aror2".id))[1] "toUpdate"\n            FROM "ActivityReportObjectiveResources" aror\n            JOIN  arotmm_recast arotmm\n            ON aror."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveResources" aror2\n            ON aror2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND aror."resourceId" = aror2."resourceId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveResourcesToModify\n        SELECT * FROM "ActivityReportObjectiveResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveResources";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveResources" AS\n        WITH insert_activity_report_objective_resources AS (\n            INSERT INTO "ActivityReportObjectiveResources"\n            (\n            "activityReportObjectiveId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveResourcesToModify" arortm\n            WHERE arortm."toUpdate" IS NULL and arortm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveResourceId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_resources;\n        SELECT * FROM "InsertActivityReportObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveResources";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveResources" AS\n        WITH update_activity_report_objective_resources AS (\n            UPDATE "ActivityReportObjectiveResources" "aror"\n            SET\n            "sourceFields" = arortm."sourceFields",\n            "createdAt" = arortm."createdAt",\n            "updatedAt" = arortm."updatedAt"\n            FROM "ActivityReportObjectiveResourcesToModify" arortm\n            WHERE "aror".id = arortm."toUpdate"\n            AND (\n                "aror"."sourceFields" != arortm."sourceFields"\n                OR "aror"."createdAt" != arortm."createdAt"\n                OR "aror"."updatedAt" != arortm."updatedAt"\n            )\n            RETURNING\n            "aror".id "activityReportObjectiveResourceId",\n            "aror"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_resources;\n        SELECT * FROM "UpdateActivityReportObjectiveResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveResources";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportObjectiveResourcesToModify"\n                ),\n            delete_activity_report_objective_resources AS (\n            DELETE FROM "ActivityReportObjectiveResources" "aror"\n            USING otmm_recast arortm\n            WHERE "aror".id = to_remove\n            RETURNING\n            "aror".id "activityReportObjectiveResourceId",\n            "aror"."activityReportObjectiveId"\n        )\n        SELECT * FROM delete_activity_report_objective_resources;\n        SELECT * FROM "DeleteActivityReportObjectiveResources";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveResourceStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveResourceStats" AS (\n            SELECT\n            'ActivityReportObjectiveResources' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveResources") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveResources") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveResources") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveResources" aror) "post_count"\n        );\n\n        -- Handle ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS "ActivityReportObjectiveTopicsToModify";\n        CREATE TEMP TABLE "ActivityReportObjectiveTopicsToModify" AS (\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModifyMetadata"\n        )\n            SELECT\n                arotmm."toUpdate" "activityReportObjectiveId",\n                arot."topicId",\n                MIN(LEAST("arot"."createdAt", "arot2"."createdAt")) "createdAt",\n                MAX(GREATEST("arot"."updatedAt", "arot2"."updatedAt")) "updatedAt",\n                ARRAY_AGG(DISTINCT "arot".id ORDER by "arot".id) "toRemove",\n                MIN("arot2".id) "toUpdate"\n            FROM "ActivityReportObjectiveTopics" arot\n            JOIN otmm_recast arotmm\n            ON arot."activityReportObjectiveId" = to_remove\n            LEFT JOIN "ActivityReportObjectiveTopics" arot2\n            ON arot2."activityReportObjectiveId" = arotmm."toUpdate"\n            AND arot."topicId" = arot2."topicId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportObjectiveTopicsToModify\n        SELECT * FROM "ActivityReportObjectiveTopicsToModify";\n        -- SELECT "topicId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportObjectiveTopicsToModify" ofmm\n        -- GROUP BY "topicId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "InsertActivityReportObjectiveTopics" AS\n        WITH insert_activity_report_objective_topics AS  (\n            INSERT INTO "ActivityReportObjectiveTopics"\n            (\n            "activityReportObjectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportObjectiveId",\n            "topicId",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportObjectiveTopicsToModify" arottm\n            WHERE arottm."toUpdate" IS NULL AND arottm."activityReportObjectiveId" IS NOT NULL\n            RETURNING\n            id "activityReportObjectiveTopicId",\n            "activityReportObjectiveId"\n        )\n        SELECT * FROM insert_activity_report_objective_topics;\n        SELECT * FROM "InsertActivityReportObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "UpdateActivityReportObjectiveTopics" AS\n        WITH update_activity_report_objective_topics AS (\n            UPDATE "ActivityReportObjectiveTopics" "arot"\n            SET\n            "createdAt" = arottm."createdAt",\n            "updatedAt" = arottm."updatedAt"\n            FROM "ActivityReportObjectiveTopicsToModify" arottm\n            WHERE "arot".id = arottm."toUpdate"\n            AND (\n                "arot"."createdAt" != arottm."createdAt"\n                OR "arot"."updatedAt" != arottm."updatedAt"\n            )\n            RETURNING\n            "arot".id "activityReportObjectiveTopicId",\n            "arot"."activityReportObjectiveId"\n        )\n        SELECT * FROM update_activity_report_objective_topics;\n        SELECT * FROM "UpdateActivityReportObjectiveTopics";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectiveTopics', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectiveTopics";\n        CREATE TEMP TABLE "DeleteActivityReportObjectiveTopics" AS\n            WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectiveTopicsToModify"\n            ),\n            delete_activity_report_objective_topics AS (\n                DELETE FROM "ActivityReportObjectiveTopics" "arot"\n                USING otmm_recast arottm\n                WHERE "arot".id = to_remove\n                RETURNING\n                "arot".id "activityReportObjectiveTopicId",\n                "arot"."activityReportObjectiveId"\n            )\n            SELECT * FROM delete_activity_report_objective_topics;\n        SELECT * FROM "DeleteActivityReportObjectiveTopics";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveTopicStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveTopicStats" AS (\n            SELECT\n            'ActivityReportObjectiveTopics' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectiveTopics") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectiveTopics") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectiveTopics") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectiveTopics" arot) "post_count"\n\n        );\n\n        -- Continue Handle ActivityReportObjectives\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportObjectives";\n        CREATE TEMP TABLE "UpdateActivityReportObjectives" AS\n        WITH update_activity_report_objectives AS(\n            UPDATE "ActivityReportObjectives" "aro"\n            SET\n            "arOrder" = arotm."arOrder",\n            "ttaProvided" = arotm."ttaProvided",\n            "createdAt" = arotm."createdAt",\n            "updatedAt" = arotm."updatedAt"\n            FROM "ActivityReportObjectivesToModify" arotm\n            WHERE "aro".id = arotm."toUpdate"\n            AND (\n                "aro"."arOrder" != arotm."arOrder"\n                OR "aro"."ttaProvided" != arotm."ttaProvided"\n                OR "aro"."createdAt" != arotm."createdAt"\n                OR "aro"."updatedAt" != arotm."updatedAt"\n            )\n            RETURNING\n            "aro".id "activityReportObjectiveId",\n            "aro"."objectiveId"\n        )\n        SELECT * FROM update_activity_report_objectives;\n        SELECT * FROM "UpdateActivityReportObjectives";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportObjectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportObjectives";\n        CREATE TEMP TABLE "DeleteActivityReportObjectives" AS\n        WITH otmm_recast AS (\n            SELECT *,\n                UNNEST("toRemove") to_remove\n            FROM "ActivityReportObjectivesToModify"\n        ),\n        -- Delete related rows from ActivityReportObjectiveFiles table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING otmm_recast arotm\n            WHERE arof."activityReportObjectiveId" = to_remove\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" "aro"\n            USING otmm_recast arotm\n            WHERE "aro".id = to_remove\n            RETURNING\n                "aro".id "activityReportObjectiveId",\n                "aro"."objectiveId"\n        )\n        SELECT * FROM deleted_aro;\n        SELECT * FROM "DeleteActivityReportObjectives";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportObjectiveStats";\n        CREATE TEMP TABLE "ActivityReportObjectiveStats" AS (\n            SELECT\n            'ActivityReportObjectives' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportObjectives") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportObjectives") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportObjectives") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportObjectives" aro) "post_count"\n        );\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_Objectives', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteObjectives";\n        CREATE TEMP TABLE "DeleteObjectives" AS\n        WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ObjectivesToModify"\n            ),\n        -- Delete related rows from ActivityReportObjectiveFiles table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING "ActivityReportObjectives" aro, otm_recast\n            WHERE aro."objectiveId" = to_remove AND arof."activityReportObjectiveId" = aro.id\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING otm_recast\n            WHERE aro."objectiveId" = to_remove\n            RETURNING aro."objectiveId"\n        ),\n\n        deleted_of AS (\n            DELETE FROM "ObjectiveFiles" of\n            USING otm_recast\n            WHERE of."objectiveId" = to_remove\n            RETURNING of."objectiveId"\n        ),\n        -- Delete rows from Objectives table\n        deleted_o AS (\n            DELETE FROM "Objectives" "o"\n            USING otm_recast\n            WHERE "o".id = to_remove\n            RETURNING\n                "o".id "objectiveId"\n        )\n        SELECT * FROM deleted_o;\n        SELECT * FROM "DeleteObjectives";\n        END;\n\n        DROP TABLE IF EXISTS "ObjectiveStats";\n        CREATE TEMP TABLE "ObjectiveStats" AS (\n            SELECT\n            'Objectives' "table",\n            (SELECT COUNT(*) FROM "InsertObjectives") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateObjectives") "Updates",\n            (SELECT COUNT(*) FROM "DeleteObjectives") "Deletes",\n            (SELECT COUNT(*) FROM "Objectives" o) "post_count"\n        );\n\n        -- Handle ActivityReportGoals\n        DROP TABLE IF EXISTS "ActivityReportGoalsToModify";\n        CREATE TEMP TABLE "ActivityReportGoalsToModify" AS (\n            SELECT\n            dgoa."toUpdateGoal" "goalId",\n            arg."activityReportId",\n            TRIM(arg.name) "name",\n            arg.status,\n            COALESCE(arg2.timeframe, arg.timeframe) timeframe,\n            arg2."closeSuspendReason",\n            arg2."closeSuspendContext",\n            MAX(GREATEST(arg2."endDate", arg."endDate")) "endDate",\n            CASE\n                WHEN 'Yes' = ANY(ARRAY_AGG(arg."isRttapa"))\n                OR 'Yes' = ANY(ARRAY_AGG(arg2."isRttapa"))\n                THEN 'Yes'\n                WHEN 'No' = ANY(ARRAY_AGG(arg."isRttapa"))\n                OR 'No' = ANY(ARRAY_AGG(arg2."isRttapa"))\n                THEN 'No'\n                ELSE NULL\n            END "isRttapa",\n            BOOL_OR(COALESCE(arg."isActivelyEdited", FALSE) OR COALESCE(arg2."isActivelyEdited", FALSE)) "isActivelyEdited",\n            MIN(LEAST("arg"."createdAt", "arg2"."createdAt")) "createdAt",\n            MAX(GREATEST("arg"."updatedAt", "arg2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "arg".id ORDER by "arg".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "arg2".id))[1] "toUpdate"\n            FROM "ActivityReportGoals" arg\n            JOIN "DupGoalsOnARs" dgoa\n            ON "arg"."goalId" = ANY(dgoa."toRemoveGoals")\n            AND "arg"."goalId" != dgoa."toUpdateGoal"\n            LEFT JOIN "ActivityReportGoals" "arg2"\n            ON "arg2"."goalId" = dgoa."toUpdateGoal"\n            AND "arg"."activityReportId" = "arg2"."activityReportId"\n            GROUP BY 1,2,3,4,5,6,7\n        );\n\n        -- Validate Handle ActivityReportGoalsToModify\n        SELECT * FROM "ActivityReportGoalsToModify";\n        -- SELECT "goalId","activityReportId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalsToModify" ofmm\n        -- GROUP BY "goalId", "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoals";\n        CREATE TEMP TABLE "InsertActivityReportGoals" AS\n        WITH insert_activity_report_goals AS (\n            INSERT INTO "ActivityReportGoals"\n            (\n            "goalId",\n            "activityReportId",\n            "name",\n            status,\n            "timeframe",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "endDate",\n            "isRttapa",\n            "isActivelyEdited",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "goalId",\n            "activityReportId",\n            TRIM("name") "name",\n            status,\n            "timeframe",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "endDate",\n            "isRttapa"::"enum_ActivityReportGoals_isRttapa",\n            "isActivelyEdited",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalsToModify" argtm\n            WHERE argtm."toUpdate" IS NULL AND argtm."activityReportId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalId",\n            "goalId",\n            "activityReportId"\n        )\n        SELECT * FROM insert_activity_report_goals;\n        SELECT * FROM "InsertActivityReportGoals";\n        END;\n\n        -- Handle ActivityReportGoals Metadata tables\n        DROP TABLE IF EXISTS "ActivityReportGoalsToModifyMetadata";\n        CREATE TEMP TABLE "ActivityReportGoalsToModifyMetadata" AS (\n            SELECT\n            argtm."goalId",\n            argtm."activityReportId",\n            TRIM(argtm.name) "name",\n            argtm.status,\n            argtm."timeframe",\n            argtm."closeSuspendReason",\n            argtm."closeSuspendContext",\n            argtm."endDate",\n            argtm."isRttapa",\n            argtm."isActivelyEdited",\n            argtm."createdAt",\n            argtm."updatedAt",\n        argtm."toRemove",\n            COALESCE(argtm."toUpdate", iarg."activityReportGoalId") "toUpdate"\n            FROM "ActivityReportGoalsToModify" argtm\n            LEFT JOIN "InsertActivityReportGoals" iarg\n            ON argtm."goalId" = iarg."goalId"\n            AND argtm."activityReportId" = iarg."activityReportId"\n        );\n\n        -- Validate Handle ActivityReportGoalsToModifyMetadata\n        SELECT * FROM "ActivityReportGoalsToModifyMetadata";\n        -- SELECT "goalId", "activityReportId","toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalsToModifyMetadata" ofmm\n        -- GROUP BY "goalId", "activityReportId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        -- Handle ActivityReportGoalFieldResponses\n        DROP TABLE IF EXISTS "ActivityReportGoalFieldResponsesToModify";\n        CREATE TEMP TABLE "ActivityReportGoalFieldResponsesToModify" AS (\n          WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ActivityReportGoalsToModifyMetadata"\n            )\n            SELECT\n            argtmm."toUpdate" "activityReportGoalId",\n            argfr."goalTemplateFieldPromptId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."response")\n                FROM "ActivityReportGoalFieldResponses" "argfrx"\n                CROSS JOIN UNNEST("argfrx"."response") sfx("response")\n                WHERE "argfr"."goalTemplateFieldPromptId" = argfrx."goalTemplateFieldPromptId"\n                AND (argfrx."activityReportGoalId" = ANY(ARRAY_AGG("argfr"."activityReportGoalId"))\n                OR argtmm."toUpdate" = argfrx."activityReportGoalId")\n            ) "response",\n            MIN(LEAST("argfr"."createdAt", "argfr2"."createdAt")) "createdAt",\n            MAX(GREATEST("argfr"."updatedAt", "argfr2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "argfr".id ORDER by "argfr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "argfr2".id))[1] "toUpdate"\n            FROM "ActivityReportGoalFieldResponses" argfr\n            JOIN otm_recast argtmm\n            ON argfr."activityReportGoalId" = to_remove\n            LEFT JOIN "ActivityReportGoalFieldResponses" argfr2\n            ON argfr2."activityReportGoalId" = argtmm."toUpdate"\n            AND argfr."goalTemplateFieldPromptId" = argfr2."goalTemplateFieldPromptId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportGoalFieldResponsesToModify\n        SELECT * FROM "ActivityReportGoalFieldResponsesToModify";\n        -- SELECT "goalTemplateFieldPromptId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalFieldResponsesToModify" ofmm\n        -- GROUP BY "goalTemplateFieldPromptId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoalFieldResponses";\n        CREATE TEMP TABLE "InsertActivityReportGoalFieldResponses" AS\n        WITH insert_activity_report_goals_field_responses AS (\n            INSERT INTO "ActivityReportGoalFieldResponses"\n            (\n            "activityReportGoalId",\n            "goalTemplateFieldPromptId",\n            "response",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportGoalId",\n            "goalTemplateFieldPromptId",\n            "response",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalFieldResponsesToModify" argrtm\n            WHERE argrtm."toUpdate" IS NULL AND argrtm."activityReportGoalId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalResourceId",\n            "activityReportGoalId"\n        )\n        SELECT * FROM insert_activity_report_goals_field_responses;\n        SELECT * FROM "InsertActivityReportGoalFieldResponses";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoalFieldResponses";\n        CREATE TEMP TABLE "UpdateActivityReportGoalFieldResponses" AS\n        WITH update_activity_report_goals_field_responses AS  (\n            UPDATE "ActivityReportGoalFieldResponses" "argfr"\n            SET\n            "response" = argfrtm."response",\n            "createdAt" = argfrtm."createdAt",\n            "updatedAt" = argfrtm."updatedAt"\n            FROM "ActivityReportGoalFieldResponsesToModify" argfrtm\n            WHERE "argfr".id = argfrtm."toUpdate"\n            AND (\n                "argfr"."response" != argfrtm."response"\n                OR "argfr"."createdAt" != argfrtm."createdAt"\n                OR "argfr"."updatedAt" != argfrtm."updatedAt"\n            )\n            RETURNING\n            "argfr".id "activityReportGoalFieldResponseId",\n            "argfr"."activityReportGoalId"\n        )\n        SELECT * FROM update_activity_report_goals_field_responses;\n        SELECT * FROM "UpdateActivityReportGoalFieldResponses";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoalFieldResponses";\n        CREATE TEMP TABLE "DeleteActivityReportGoalFieldResponses" AS\n        WITH delete_activity_report_goals_field_responses AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalFieldResponsesToModify"\n                )\n            DELETE FROM "ActivityReportGoalFieldResponses" "argfr"\n            USING otmm_recast argrtm\n            WHERE "argfr".id = to_remove\n            RETURNING\n            "argfr".id "activityReportGoalFieldResponseId",\n            "argfr"."activityReportGoalId"\n        )\n        SELECT * FROM delete_activity_report_goals_field_responses;\n        SELECT * FROM "DeleteActivityReportGoalFieldResponses";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalFieldResponsesStats";\n        CREATE TEMP TABLE "ActivityReportGoalFieldResponsesStats" AS (\n            SELECT\n            'ActivityReportGoalFieldResponses' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoalFieldResponses") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoalFieldResponses") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoalFieldResponses") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoalFieldResponses" argfr) "post_count"\n        );\n\n        -- Handle ActivityReportGoalResources\n        DROP TABLE IF EXISTS "ActivityReportGoalResourcesToModify";\n        CREATE TEMP TABLE "ActivityReportGoalResourcesToModify" AS (\n          WITH otm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n            FROM "ActivityReportGoalsToModifyMetadata"\n            )\n            SELECT\n            argtmm."toUpdate" "activityReportGoalId",\n            argr."resourceId",\n            (\n                SELECT ARRAY_AGG(DISTINCT sfx."sourceField")\n                FROM "ActivityReportGoalResources" "argrx"\n                CROSS JOIN UNNEST("argrx"."sourceFields") sfx("sourceField")\n                WHERE "argr"."resourceId" = argrx."resourceId"\n                AND (argrx."activityReportGoalId" = ANY(ARRAY_AGG("argr"."activityReportGoalId"))\n                OR argtmm."toUpdate" = argrx."activityReportGoalId")\n            ) "sourceFields",\n            MIN(LEAST("argr"."createdAt", "argr2"."createdAt")) "createdAt",\n            MAX(GREATEST("argr"."updatedAt", "argr2"."updatedAt")) "updatedAt",\n            ARRAY_AGG(DISTINCT "argr".id ORDER by "argr".id) "toRemove",\n            (ARRAY_AGG(DISTINCT "argr2".id))[1] "toUpdate"\n            FROM "ActivityReportGoalResources" argr\n            JOIN otm_recast argtmm\n            ON argr."activityReportGoalId" = to_remove\n            LEFT JOIN "ActivityReportGoalResources" argr2\n            ON argr2."activityReportGoalId" = argtmm."toUpdate"\n            AND argr."resourceId" = argr2."resourceId"\n            GROUP BY 1,2\n        );\n\n        -- Validate Handle ActivityReportGoalResourcesToModify\n        SELECT * FROM "ActivityReportGoalResourcesToModify";\n        -- SELECT "resourceId", "toRemove", "toUpdate", COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "ActivityReportGoalResourcesToModify" ofmm\n        -- GROUP BY "resourceId", "toRemove", "toUpdate"\n        -- HAVING COUNT(*) > 1;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Insert_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "InsertActivityReportGoalResources";\n        CREATE TEMP TABLE "InsertActivityReportGoalResources" AS\n        WITH insert_activity_report_goals_resources AS (\n            INSERT INTO "ActivityReportGoalResources"\n            (\n            "activityReportGoalId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            )\n            SELECT\n            "activityReportGoalId",\n            "resourceId",\n            "sourceFields",\n            "createdAt",\n            "updatedAt"\n            FROM "ActivityReportGoalResourcesToModify" argrtm\n            WHERE argrtm."toUpdate" IS NULL AND argrtm."activityReportGoalId" IS NOT NULL\n            RETURNING\n            id "activityReportGoalResourceId",\n            "activityReportGoalId"\n        )\n        SELECT * FROM insert_activity_report_goals_resources;\n        SELECT * FROM "InsertActivityReportGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoalResources";\n        CREATE TEMP TABLE "UpdateActivityReportGoalResources" AS\n        WITH update_activity_report_goals_resources AS  (\n            UPDATE "ActivityReportGoalResources" "argr"\n            SET\n            "sourceFields" = argrtm."sourceFields",\n            "createdAt" = argrtm."createdAt",\n            "updatedAt" = argrtm."updatedAt"\n            FROM "ActivityReportGoalResourcesToModify" argrtm\n            WHERE "argr".id = argrtm."toUpdate"\n            AND (\n                "argr"."sourceFields" != argrtm."sourceFields"\n                OR "argr"."createdAt" != argrtm."createdAt"\n                OR "argr"."updatedAt" != argrtm."updatedAt"\n            )\n            RETURNING\n            "argr".id "activityReportGoalResourceId",\n            "argr"."activityReportGoalId"\n        )\n        SELECT * FROM update_activity_report_goals_resources;\n        SELECT * FROM "UpdateActivityReportGoalResources";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoalResources";\n        CREATE TEMP TABLE "DeleteActivityReportGoalResources" AS\n        WITH delete_activity_report_goals_resources AS (\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalResourcesToModify"\n                )\n            DELETE FROM "ActivityReportGoalResources" "argr"\n            USING otmm_recast argrtm\n            WHERE "argr".id = to_remove\n            RETURNING\n            "argr".id "activityReportGoalResourceId",\n            "argr"."activityReportGoalId"\n        )\n        SELECT * FROM delete_activity_report_goals_resources;\n        SELECT * FROM "DeleteActivityReportGoalResources";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalResourceStats";\n        CREATE TEMP TABLE "ActivityReportGoalResourceStats" AS (\n            SELECT\n            'ActivityReportGoalResources' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoalResources") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoalResources") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoalResources") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoalResources" argr) "post_count"\n        );\n\n        -- Continue Handle ActivityReportGoals\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateActivityReportGoals";\n        CREATE TEMP TABLE "UpdateActivityReportGoals" AS\n        WITH update_activity_report_goals AS (\n            UPDATE "ActivityReportGoals" "arg"\n            SET\n            "timeframe" = argtm."timeframe",\n            "endDate" = argtm."endDate",\n            "isRttapa" = argtm."isRttapa"::"enum_ActivityReportGoals_isRttapa",\n            "isActivelyEdited" = argtm."isActivelyEdited",\n            "createdAt" = argtm."createdAt",\n            "updatedAt" = argtm."updatedAt"\n            FROM "ActivityReportGoalsToModify" argtm\n            WHERE "arg".id = argtm."toUpdate"\n            AND (\n              "arg"."timeframe" != argtm."timeframe"\n              OR "arg"."endDate" != argtm."endDate"\n              OR "arg"."isRttapa" != argtm."isRttapa"::"enum_ActivityReportGoals_isRttapa"\n              OR "arg"."isActivelyEdited" != argtm."isActivelyEdited"\n              OR "arg"."createdAt" != argtm."createdAt"\n              OR "arg"."updatedAt" != argtm."updatedAt"\n            )\n            RETURNING\n            "arg".id "activityReportGoalId",\n            "arg"."goalId"\n        )SELECT * FROM update_activity_report_goals;\n        SELECT * FROM "UpdateActivityReportGoals";\n        END;\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_ActivityReportGoals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteActivityReportGoals";\n        CREATE TEMP TABLE "DeleteActivityReportGoals" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "ActivityReportGoalsToModify"\n                ),\n            delete_activity_report_goals AS  (\n            DELETE FROM "ActivityReportGoals" "arg"\n            USING otmm_recast argtm\n            WHERE "arg".id = to_remove\n            RETURNING\n            "arg".id "activityReportGoalId",\n            "arg"."goalId"\n        )\n        SELECT * FROM delete_activity_report_goals;\n        SELECT * FROM "DeleteActivityReportGoals";\n        END;\n\n        DROP TABLE IF EXISTS "ActivityReportGoalStats";\n        CREATE TEMP TABLE "ActivityReportGoalStats" AS (\n            SELECT\n            'ActivityReportGoals' "table",\n            (SELECT COUNT(*) FROM "InsertActivityReportGoals") "Inserts",\n            (SELECT COUNT(*) FROM "UpdateActivityReportGoals") "Updates",\n            (SELECT COUNT(*) FROM "DeleteActivityReportGoals") "Deletes",\n            (SELECT COUNT(*) FROM "ActivityReportGoals" ar) "post_count"\n\n        );\n\n\n\n        -- Continue Handle GoalResources\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_GoalResources', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteGoalResources";\n        CREATE TEMP TABLE "DeleteGoalResources" AS\n            WITH otmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "GoalResourcesToModify"\n                ),\n            delete_goal_resources AS\n            (\n                DELETE FROM "GoalResources" "gr"\n                USING otmm_recast ortm\n                WHERE "gr".id = to_remove\n                RETURNING\n                "gr".id "goalResourceId",\n                "gr"."goalId"\n            )\n        SELECT * FROM delete_goal_resources;\n        SELECT * FROM "DeleteGoalResources";\n        END;\n\n        DROP TABLE IF EXISTS "GoalResourceStats";\n        CREATE TEMP TABLE "GoalResourceStats" AS\n            (\n                SELECT\n                'GoalResources' "table",\n                (SELECT COUNT(*) FROM "InsertGoalResources") "Inserts",\n                (SELECT COUNT(*) FROM "UpdateGoalResources") "Updates",\n                (SELECT COUNT(*) FROM "DeleteGoalResources") "Deletes",\n                (SELECT COUNT(*) FROM "GoalResources" "gr") "post_count"\n            );\n\n\n        -- Continue Handle GoalFieldResponses\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_GoalFieldResponses', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteGoalFieldResponses";\n        CREATE TEMP TABLE "DeleteGoalFieldResponses" AS\n            WITH gtmm_recast AS (\n                SELECT *,\n                    UNNEST("toRemove") to_remove\n                FROM "GoalFieldResponsesToModify"\n                ),\n            delete_goal_field_responses AS\n            (\n                DELETE FROM "GoalFieldResponses" "gfr"\n                USING gtmm_recast grtm\n                WHERE "gfr".id = to_remove\n                RETURNING\n                "gfr".id "goalResourceId",\n                "gfr"."goalId"\n            )\n        SELECT * FROM delete_goal_field_responses;\n        SELECT * FROM "DeleteGoalFieldResponses";\n        END;\n\n        DROP TABLE IF EXISTS "GoalFieldResponseStats";\n        CREATE TEMP TABLE "GoalFieldResponseStats" AS\n            (\n                SELECT\n                'GoalFieldResponses' "table",\n                (SELECT COUNT(*) FROM "InsertGoalFieldResponses") "Inserts",\n                (SELECT COUNT(*) FROM "UpdateGoalFieldResponses") "Updates",\n                (SELECT COUNT(*) FROM "DeleteGoalFieldResponses") "Deletes",\n                (SELECT COUNT(*) FROM "GoalFieldResponses" "gfr") "post_count"\n            );\n\n        -- Continue Handle Goals\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Update_Goals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "UpdateGoals";\n        CREATE TEMP TABLE "UpdateGoals" AS\n        WITH update_goals AS (\n            UPDATE "Goals" "g"\n            SET\n            "name" = gtm."name",\n            "status" = gtm."status",\n            "timeframe" = gtm."timeframe",\n            "isFromSmartsheetTtaPlan" = gtm."isFromSmartsheetTtaPlan",\n            "createdAt" = gtm."createdAt",\n            "updatedAt" = gtm."updatedAt",\n            "endDate" = gtm."endDate",\n            "previousStatus" = gtm."previousStatus",\n            "goalTemplateId" = gtm."goalTemplateId",\n            "onAR" = gtm."onAR",\n            "onApprovedAR" = gtm."onApprovedAR",\n            "firstNotStartedAt" = gtm."firstNotStartedAt",\n            "lastNotStartedAt" = gtm."lastNotStartedAt",\n            "firstInProgressAt" = gtm."firstInProgressAt",\n            "lastInProgressAt" = gtm."lastInProgressAt",\n            "firstCeasedSuspendedAt" = gtm."firstCeasedSuspendedAt",\n            "lastCeasedSuspendedAt" = gtm."lastCeasedSuspendedAt",\n            "firstClosedAt" = gtm."firstClosedAt",\n            "lastClosedAt" = gtm."lastClosedAt",\n            "firstCompletedAt" = gtm."firstCompletedAt",\n            "lastCompletedAt" = gtm."lastCompletedAt",\n            "isRttapa" = gtm."isRttapa"::"enum_Goals_isRttapa",\n            "createdVia" = gtm."createdVia"::"enum_Goals_createdVia"\n            FROM "GoalsToModify" gtm\n            WHERE "g".id = gtm."toUpdate"\n            AND (\n              "g"."status" != gtm."status"\n              OR "g"."timeframe" != gtm."timeframe"\n              OR "g"."isFromSmartsheetTtaPlan" != gtm."isFromSmartsheetTtaPlan"\n              OR "g"."createdAt" != gtm."createdAt"\n              OR "g"."updatedAt" != gtm."updatedAt"\n              OR "g"."endDate" != gtm."endDate"\n              OR "g"."previousStatus" != gtm."previousStatus"\n              OR "g"."goalTemplateId" != gtm."goalTemplateId"\n              OR "g"."onAR" != gtm."onAR"\n              OR "g"."onApprovedAR" != gtm."onApprovedAR"\n              OR "g"."firstNotStartedAt" != gtm."firstNotStartedAt"\n              OR "g"."lastNotStartedAt" != gtm."lastNotStartedAt"\n              OR "g"."firstInProgressAt" != gtm."firstInProgressAt"\n              OR "g"."lastInProgressAt" != gtm."lastInProgressAt"\n              OR "g"."firstCeasedSuspendedAt" != gtm."firstCeasedSuspendedAt"\n              OR "g"."lastCeasedSuspendedAt" != gtm."lastCeasedSuspendedAt"\n              OR "g"."firstClosedAt" != gtm."firstClosedAt"\n              OR "g"."lastClosedAt" != gtm."lastClosedAt"\n              OR "g"."firstCompletedAt" != gtm."firstCompletedAt"\n              OR "g"."lastCompletedAt" != gtm."lastCompletedAt"\n              OR "g"."isRttapa" != gtm."isRttapa"::"enum_Goals_isRttapa"\n              OR "g"."createdVia" != gtm."createdVia"::"enum_Goals_createdVia"\n            )\n            RETURNING\n            "g".id "goalId"\n        )\n        SELECT * FROM update_goals;\n        SELECT * FROM "UpdateGoals";\n        END;\n\n        -- Validate Handle GoalsToModify\n        -- SELECT * FROM "Goals";\n        -- SELECT *, COUNT(*), array_to_json(array_agg(row_to_json(ofmm)))\n        -- FROM "Goals" ofmm\n        -- GROUP BY "id"\n        -- HAVING COUNT(*) > 1;\n\n        -- DROP TABLE IF EXISTS "ViolatingDeleteGoals";\n        -- CREATE TEMP TABLE "ViolatingDeleteGoals" AS\n        -- WITH gtm_recast AS (\n        -- SELECT *,\n        --     UNNEST("toRemove") to_remove\n        -- FROM "GoalsToModify"\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ActivityReportObjectiveFiles table\n        -- violated_arof AS (\n        --     SELECT 'ActivityReportObjectiveFiles' as table_name,\n        --         arof.id as primary_key,\n        --         arof."activityReportObjectiveId" as foreign_key,\n        --         o.id as objective_id,\n        --         array_to_json(array_agg(row_to_json(om))) as raw_objective,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal\n        --     FROM "ActivityReportObjectiveFiles" arof\n        --     LEFT JOIN "ActivityReportObjectives" aro ON arof."activityReportObjectiveId" = aro.id\n        --     LEFT JOIN "Objectives" o ON aro."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     LEFT JOIN "Objectives" om ON om.id = o.id\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY arof.id, arof."activityReportObjectiveId", o.id\n        -- ),\n\n        -- -- Identify rows violating foreign key constraints in ActivityReportObjectives table\n        -- violated_aro AS (\n        --     SELECT 'ActivityReportObjectives' as table_name,\n        --         aro.id as primary_key,\n        --         aro."objectiveId" as foreign_key,\n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ActivityReportObjectives" aro\n        --     LEFT JOIN "Objectives" o ON aro."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY aro.id, aro."objectiveId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ObjectiveFiles table\n        -- violated_of AS (\n        --     SELECT 'ObjectiveFiles' as table_name,\n        --         of.id as primary_key,\n        --         of."objectiveId" as foreign_key,\n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ObjectiveFiles" of\n        --     LEFT JOIN "Objectives" o ON of."objectiveId" = o.id\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY of.id, of."objectiveId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in Objectives table\n        -- violated_o AS (\n        --     SELECT 'Objectives' as table_name,\n        --         o.id as primary_key,\n        --         o."goalId" as foreign_key,\n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "Objectives" o\n        --     LEFT JOIN gtm_recast ON o."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY o.id, o."goalId", to_remove\n        -- ),\n        -- -- Identify rows violating foreign key constraints in ActivityReportGoals table\n        -- violated_arg AS (\n        --     SELECT 'ActivityReportGoals' as table_name,\n        --         arg.id as primary_key,\n        --         arg."goalId" as foreign_key,\n        --         to_remove as goal_id,\n        --         array_to_json(array_agg(row_to_json(ofmm))) as raw_goal,\n        --         array_to_json(array_agg(row_to_json(o))) as raw_objective\n        --     FROM "ActivityReportGoals" arg\n        --     LEFT JOIN "Objectives" o ON o."goalId" = arg."goalId"\n        --     LEFT JOIN gtm_recast ON arg."goalId" = to_remove\n        --     LEFT JOIN "Goals" ofmm ON ofmm.id = to_remove\n        --     WHERE to_remove IS NOT NULL\n        --     GROUP BY arg.id, arg."goalId", to_remove\n        -- )\n\n        -- -- Display rows violating foreign key constraints\n        -- SELECT * FROM violated_arof\n        -- UNION ALL\n        -- SELECT * FROM violated_aro\n        -- UNION ALL\n        -- SELECT * FROM violated_of\n        -- UNION ALL\n        -- SELECT * FROM violated_o\n        -- UNION ALL\n        -- SELECT * FROM violated_arg;\n        -- SELECT * FROM "ViolatingDeleteGoals";\n\n        BEGIN;\n        SELECT set_config('audit.auditDescriptor', 'dup_goals_Delete_Goals', TRUE) as "auditDescriptor";\n        DROP TABLE IF EXISTS "DeleteGoals";\n        CREATE TEMP TABLE "DeleteGoals" AS\n        WITH gtm_recast AS (\n          SELECT *,\n            UNNEST("toRemove") to_remove\n          FROM "GoalsToModify"\n          ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_arof AS (\n            DELETE FROM "ActivityReportObjectiveFiles" arof\n            USING "Objectives" o, gtm_recast, "ActivityReportObjectives" aro\n            WHERE o."goalId" = to_remove AND aro."objectiveId" = o.id AND arof."activityReportObjectiveId" = aro.id\n            RETURNING arof."activityReportObjectiveId"\n        ),\n        -- Delete related rows from ActivityReportObjectives table\n        deleted_aro AS (\n            DELETE FROM "ActivityReportObjectives" aro\n            USING "Objectives" o, gtm_recast\n            WHERE o."goalId" = to_remove AND aro."objectiveId" = o.id\n            RETURNING aro."objectiveId"\n        ),\n        -- Delete related rows from ObjectiveFiles table\n        deleted_of AS (\n            DELETE FROM "ObjectiveFiles" of\n            USING "Objectives" o, gtm_recast\n            WHERE o."goalId" = to_remove AND of."objectiveId" = o.id\n            RETURNING of."objectiveId"\n        ),\n        -- Delete related rows from Objectives table\n        deleted_o AS (\n            DELETE FROM "Objectives" o\n            USING gtm_recast\n            WHERE o."goalId" = to_remove\n            RETURNING o."goalId"\n        ),\n        -- Delete related rows from ActivityReportGoals table\n        deleted_arg AS (\n            DELETE FROM "ActivityReportGoals" arg\n            USING gtm_recast\n            WHERE arg."goalId" = to_remove\n            RETURNING arg."goalId"\n        ),\n        -- Delete rows from Goals table\n        deleted_g AS (\n            DELETE FROM "Goals" "g"\n            USING gtm_recast\n            WHERE "g".id = to_remove\n            RETURNING\n                "g".id "goalId"\n        )\n\n        -- Display deleted rows from Goals table\n        SELECT * FROM deleted_g;\n        SELECT * FROM "DeleteGoals";\n        END;\n\n        -- Stats\n\n        DROP TABLE IF EXISTS "GoalStats";\n        CREATE TEMP TABLE "GoalStats" AS (\n            SELECT\n            'Goals' "table",\n            0 "Inserts",\n            (SELECT COUNT(*) FROM "UpdateGoals") "Updates",\n            (SELECT COUNT(*) FROM "DeleteGoals") "Deletes",\n            (SELECT COUNT(*) FROM "Goals" g) "post_count"\n        );\n\n        DROP TABLE IF EXISTS "PostCountStatsByRegion";\n        CREATE TEMP TABLE "PostCountStatsByRegion" AS (\n            SELECT\n                gr."regionId",\n                COUNT(DISTINCT g."id") "GoalsTotal",\n                COUNT(DISTINCT grr."id") "GoalResourcesTotal",\n                COUNT(DISTINCT gfr."id") "GoalFieldResponsesTotal",\n                COUNT(DISTINCT arg."id") "ActivityReportGoalsTotal",\n                COUNT(DISTINCT argr."id") "ActivityReportGoalResourcesTotal",\n                COUNT(DISTINCT argfr."id") "ActivityReportGoalFieldResponsesTotal",\n                COUNT(DISTINCT oj."id") "ObjectivesTotal",\n                COUNT(DISTINCT ojf."id") "ObjectiveFilesTotal",\n                COUNT(DISTINCT ojr."id") "ObjectiveResourcesTotal",\n                COUNT(DISTINCT ojt."id") "ObjectiveTopicsTotal",\n                COUNT(DISTINCT aro."id") "ActivityReportObjectivesTotal",\n                COUNT(DISTINCT arof."id") "ActivityReportObjectiveFilesTotal",\n                COUNT(DISTINCT aror."id") "ActivityReportObjectiveResourcesTotal",\n                COUNT(DISTINCT arot."id") "ActivityReportObjectiveTopicsTotal"\n            FROM "Grants" gr\n            FULL OUTER JOIN "Goals" g ON gr."id" = g."grantId"\n            FULL OUTER JOIN "GoalResources" grr ON g."id" = grr."goalId"\n            FULL OUTER JOIN "GoalFieldResponses" gfr ON g."id" = gfr."goalId"\n            FULL OUTER JOIN "ActivityReportGoals" arg ON g."id" = arg."goalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argr ON arg."id" = argr."activityReportGoalId"\n            FULL OUTER JOIN "ActivityReportGoalResources" argfr ON arg."id" = argfr."activityReportGoalId"\n            FULL OUTER JOIN "Objectives" oj ON g."id" = oj."goalId"\n            FULL OUTER JOIN "ObjectiveFiles" ojf ON oj."id" = ojf."objectiveId"\n            FULL OUTER JOIN "ObjectiveResources" ojr ON oj."id" = ojr."objectiveId"\n            FULL OUTER JOIN "ObjectiveTopics" ojt ON oj."id" = ojt."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectives" aro ON oj."id" = aro."objectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveFiles" arof ON aro."id" = arof."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveResources" aror ON aro."id" = aror."activityReportObjectiveId"\n            FULL OUTER JOIN "ActivityReportObjectiveTopics" arot ON aro."id" = arot."activityReportObjectiveId"\n            GROUP BY gr."regionId"\n        );\n        INSERT INTO "PostCountStatsByRegion"\n        SELECT\n            -1 "regionId",\n            SUM("GoalsTotal"),\n            SUM("GoalResourcesTotal"),\n            SUM("GoalFieldResponsesTotal"),\n            SUM("ActivityReportGoalsTotal"),\n            SUM("ActivityReportGoalResourcesTotal"),\n            SUM("ActivityReportGoalFieldResponsesTotal"),\n            SUM("ObjectivesTotal"),\n            SUM("ObjectiveFilesTotal"),\n            SUM("ObjectiveResourcesTotal"),\n            SUM("ObjectiveTopicsTotal"),\n            SUM("ActivityReportObjectivesTotal"),\n            SUM("ActivityReportObjectiveFilesTotal"),\n            SUM("ActivityReportObjectiveResourcesTotal"),\n            SUM("ActivityReportObjectiveTopicsTotal")\n        FROM "PostCountStatsByRegion";\n        SELECT * FROM "PostCountStatsByRegion";\n\n        WITH "RegionDiffs" AS (\n            SELECT\n                pre."regionId",\n                pre."GoalsTotal" - post."GoalsTotal" AS "GoalsTotalDiff",\n                pre."GoalResourcesTotal" - post."GoalResourcesTotal" AS "GoalResourcesTotalDiff",\n                pre."GoalFieldResponsesTotal" - post."GoalFieldResponsesTotal" AS "GoalFieldResponsesTotalDiff",\n                pre."ActivityReportGoalsTotal" - post."ActivityReportGoalsTotal" AS "ActivityReportGoalsTotalDiff",\n                pre."ActivityReportGoalResourcesTotal" - post."ActivityReportGoalResourcesTotal" AS "ActivityReportGoalResourcesTotalDiff",\n                pre."ActivityReportGoalFieldResponsesTotal" - post."ActivityReportGoalFieldResponsesTotal" AS "ActivityReportGoalFieldResponsesTotalDiff",\n                pre."ObjectivesTotal" - post."ObjectivesTotal" AS "ObjectivesTotalDiff",\n                pre."ObjectiveFilesTotal" - post."ObjectiveFilesTotal" AS "ObjectiveFilesTotalDiff",\n                pre."ObjectiveResourcesTotal" - post."ObjectiveResourcesTotal" AS "ObjectiveResourcesTotalDiff",\n                pre."ObjectiveTopicsTotal" - post."ObjectiveTopicsTotal" AS "ObjectiveTopicsTotalDiff",\n                pre."ActivityReportObjectivesTotal" - post."ActivityReportObjectivesTotal" AS "ActivityReportObjectivesTotalDiff",\n                pre."ActivityReportObjectiveFilesTotal" - post."ActivityReportObjectiveFilesTotal" AS "ActivityReportObjectiveFilesTotalDiff",\n                pre."ActivityReportObjectiveResourcesTotal" - post."ActivityReportObjectiveResourcesTotal" AS "ActivityReportObjectiveResourcesTotalDiff",\n                pre."ActivityReportObjectiveTopicsTotal" - post."ActivityReportObjectiveTopicsTotal" AS "ActivityReportObjectiveTopicsTotalDiff"\n\n            FROM "PreCountStatsByRegion" pre\n            JOIN "PostCountStatsByRegion" post ON pre."regionId" = post."regionId"\n        )\n        SELECT * FROM "RegionDiffs";\n\n        WITH "CollectStats" AS (\n            SELECT 1 id, *,\n                (SELECT SUM("GoalsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "GoalStats"\n            UNION\n            SELECT 2 id, *,\n                (SELECT SUM("GoalResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "GoalResourceStats"\n            UNION\n            SELECT 3 id, *,\n                (SELECT SUM("GoalFieldResponsesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "GoalFieldResponseStats"\n            UNION\n            SELECT 4 id, *,\n                (SELECT SUM("ActivityReportGoalsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalStats"\n            UNION\n            SELECT 5 id, *,\n                (SELECT SUM("ActivityReportGoalResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalResourceStats"\n            UNION\n            SELECT 6 id, *,\n                (SELECT SUM("ActivityReportGoalFieldResponsesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportGoalFieldResponsesStats"\n            UNION\n            SELECT 7 id, *,\n                (SELECT SUM("ObjectivesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveStats"\n            UNION\n            SELECT 8 id, *,\n                (SELECT SUM("ObjectiveFilesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveFileStats"\n            UNION\n            SELECT 9 id, *,\n                (SELECT SUM("ObjectiveResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveResourceStats"\n            UNION\n            SELECT 10 id, *,\n                (SELECT SUM("ObjectiveTopicsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ObjectiveTopicStats"\n            UNION\n            SELECT 11 id, *,\n                (SELECT SUM("ActivityReportObjectivesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveStats"\n            UNION\n            SELECT 12 id, *,\n                (SELECT SUM("ActivityReportObjectiveFilesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveFileStats"\n            UNION\n            SELECT 13 id, *,\n                (SELECT SUM("ActivityReportObjectiveResourcesTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveResourceStats"\n            UNION\n            SELECT 14 id, *,\n                (SELECT SUM("ActivityReportObjectiveTopicsTotal") FROM "PreCountStatsByRegion" WHERE "regionId" = -1) AS pre_count\n            FROM "ActivityReportObjectiveTopicStats"\n        )\n        SELECT *,\n            pre_count - post_count AS diff,\n            post_count - (pre_count - "Deletes" + "Inserts") AS adjusted_diff\n\n        FROM "CollectStats"\n        ORDER BY id;\n        DROP TABLE IF EXISTS  "PreCountStatsByRegion" ;
Executing (82e2025d-a478-489f-a0d2-4bccc946c7c7): WITH\n          "xZALGoals" AS ( SELECT 'Goals' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALGoals" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js' AND dml_by = -1),\n          "xZALGoalResources" AS ( SELECT 'GoalResources' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALGoalResources" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js' AND dml_by = -1),\n          "xZALGoalFieldResponses" AS ( SELECT 'GoalFieldResponses' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALGoalFieldResponses" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js' AND dml_by = -1),\n          "xZALActivityReportGoals" AS ( SELECT 'ActivityReportGoals' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportGoals" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportGoalResources" AS ( SELECT 'ActivityReportGoalResources' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportGoalResources" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportGoalFieldResponses" AS ( SELECT 'ActivityReportGoalFieldResponses' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportGoalFieldResponses" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALObjectives" AS ( SELECT 'Objectives' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALObjectives" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALObjectiveFiles" AS ( SELECT 'ObjectiveFiles' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALObjectiveFiles" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALObjectiveResources" AS ( SELECT 'ObjectiveResources' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALObjectiveResources" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALObjectiveTopics" AS ( SELECT 'ObjectiveTopics' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALObjectiveTopics" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportObjectives" AS ( SELECT 'ActivityReportObjectives' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportObjectives" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportObjectiveFiles" AS ( SELECT 'ActivityReportObjectiveFiles' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportObjectiveFiles" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportObjectiveResources" AS ( SELECT 'ActivityReportObjectiveResources' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportObjectiveResources" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          "xZALActivityReportObjectiveTopics" AS ( SELECT 'ActivityReportObjectiveTopics' AS "table", id, data_id, dml_type, old_row_data, new_row_data, dml_timestamp, dml_by, dml_as, dml_txid, session_sig, descriptor_id FROM "ZALActivityReportObjectiveTopics" z WHERE session_sig = '/app/src/migrations/20230822192328-internal-goal-duplicate-cleanup.js'  AND dml_by = -1),\n          logs AS (\n            SELECT * FROM "xZALGoals" UNION\n            SELECT * FROM "xZALGoalResources" UNION\n            SELECT * FROM "xZALGoalFieldResponses" UNION\n            SELECT * FROM "xZALActivityReportGoals" UNION\n            SELECT * FROM "xZALActivityReportGoalResources" UNION\n            SELECT * FROM "xZALActivityReportGoalFieldResponses" UNION\n            SELECT * FROM "xZALObjectives" UNION\n            SELECT * FROM "xZALObjectiveFiles" UNION\n            SELECT * FROM "xZALObjectiveResources" UNION\n            SELECT * FROM "xZALObjectiveTopics" UNION\n            SELECT * FROM "xZALActivityReportObjectives" UNION\n            SELECT * FROM "xZALActivityReportObjectiveFiles" UNION\n            SELECT * FROM "xZALActivityReportObjectiveResources" UNION\n            SELECT * FROM "xZALActivityReportObjectiveTopics"\n          )\n          SELECT "descriptor", ARRAY_AGG(DISTINCT "table") "tables"\n          FROM "logs" z\n          JOIN "ZADescriptor" zd\n          ON z.descriptor_id = zd.id\n          GROUP BY 1\n          HAVING COUNT(DISTINCT "table") > 1\n          ORDER BY 1,2;
Executing (82e2025d-a478-489f-a0d2-4bccc946c7c7): DELETE\n          FROM "GoalFieldResponses"\n          WHERE "goalId" = 54671;\n\n          DELETE\n          FROM "ActivityReportGoalFieldResponses" argfr\n          USING "ActivityReportGoals" arg\n          WHERE argfr."activityReportGoalId" = arg.id\n          AND arg."goalId" = 54671;
Executing (82e2025d-a478-489f-a0d2-4bccc946c7c7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230822192328-internal-goal-duplicate-cleanup: migrated (0.454s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230830161929-rename-child-incidents-reason: migrating =======
Executing (7766bb71-43c2-4b46-9d82-302497ab6d11): START TRANSACTION;
Connection validated successfully
Executing (7766bb71-43c2-4b46-9d82-302497ab6d11): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230830161929-rename-child-incidents-reason.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7766bb71-43c2-4b46-9d82-302497ab6d11): UPDATE "ActivityReports"\n        SET "reason" = ARRAY_REPLACE("reason", 'Child Incidents', 'Child Incident')\n        WHERE "reason" @> '{"Child Incidents"}';
Executing (7766bb71-43c2-4b46-9d82-302497ab6d11): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230830161929-rename-child-incidents-reason: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230831191430-program-personnel-cleanup: migrating =======
Executing (135ca4b4-f841-4a57-ae7f-824e66cad18d): START TRANSACTION;
Connection validated successfully
Executing (135ca4b4-f841-4a57-ae7f-824e66cad18d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230831191430-program-personnel-cleanup.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (135ca4b4-f841-4a57-ae7f-824e66cad18d): /* 1. Create a temp table of dedupe. */\n         DROP TABLE IF EXISTS "ProgramPersonnelToKeep";\n         CREATE TEMP TABLE "ProgramPersonnelToKeep" AS (\n            SELECT\n                min(id) id,\n                "programId",\n                "grantId",\n                "firstName",\n                "lastName",\n                "role",\n                "email",\n                (ARRAY_AGG(prefix order by id desc))[1] prefix,\n                (ARRAY_AGG("suffix" order by id desc))[1] "suffix",\n                (ARRAY_AGG("title" order by id desc))[1] "title",\n                MIN("createdAt") "createdAt",\n                MAX("updatedAt") "updatedAt"\n                 FROM "ProgramPersonnel"\n                 GROUP BY\n                 "firstName",\n                 "lastName",\n                 "role",\n                 "grantId",\n                 "programId",\n                 "email" -- We want entries on email change.\n         );
Executing (135ca4b4-f841-4a57-ae7f-824e66cad18d): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (135ca4b4-f841-4a57-ae7f-824e66cad18d): /* 3. Truncate botht the ZALProgramPersonnel and ProgramPersonnel tables. */\n         TRUNCATE TABLE "ZALProgramPersonnel";\n         TRUNCATE TABLE "ProgramPersonnel";
Executing (135ca4b4-f841-4a57-ae7f-824e66cad18d): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (135ca4b4-f841-4a57-ae7f-824e66cad18d): ALTER TABLE "public"."ProgramPersonnel" ADD COLUMN "mapsTo" INTEGER REFERENCES "ProgramPersonnel" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (135ca4b4-f841-4a57-ae7f-824e66cad18d): /* 5a. Drop old column */\n      ALTER TABLE "ProgramPersonnel"\n      DROP COLUMN "originalPersonnelId";\n\n      /* 6. Insert the deduped records in order of id. */\n      INSERT INTO "ProgramPersonnel" (\n         "firstName",\n         "lastName",\n         "email",\n         "role",\n         "grantId",\n         "programId",\n         "prefix",\n         "suffix",\n         "title",\n         "createdAt",\n         "updatedAt",\n         "active"\n      )\n      SELECT\n        "firstName",\n        "lastName",\n        "email",\n        "role",\n        "grantId",\n        "programId",\n        "prefix",\n        "suffix",\n        "title",\n        "createdAt",\n        "updatedAt",\n        false\n        FROM "ProgramPersonnelToKeep"\n        ORDER BY id ASC;\n\n      /* 7. Set active and mapsTo values. */\n      WITH\n        distinct_pp AS (\n            SELECT\n                min("id") AS "id",\n                "firstName",\n                "lastName",\n                "email",\n                "role",\n                "grantId",\n                "programId"\n            FROM "ProgramPersonnel"\n            GROUP BY 2,3,4,5,6,7\n        ),\n        active_pp AS (\n            SELECT\n                "role",\n                "grantId",\n                "programId",\n                max(id) "activeId"\n            FROM distinct_pp\n            GROUP BY 1,2,3\n        ),\n        set_active_pp AS (\n        UPDATE "ProgramPersonnel" pp\n        SET "active" = true,\n            "mapsTo" = null\n        FROM active_pp app\n        WHERE app."activeId" = pp.id\n        RETURNING\n            pp.id,\n            'latest' "type"\n        ),\n        set_inactive_pp AS (\n        UPDATE "ProgramPersonnel" pp\n        SET "active" = false,\n            "mapsTo" = app."activeId"\n        FROM active_pp app\n        WHERE app."activeId" != pp.id\n        AND app."role" = pp."role"\n        AND app."grantId" = pp."grantId"\n        AND app."programId" = pp."programId"\n        RETURNING\n            pp.id,\n            'not latest' "type"\n        ),\n        results AS (\n            SELECT *\n            FROM set_active_pp\n            UNION\n            SELECT *\n            FROM set_inactive_pp\n        )\n        SELECT *\n        FROM results;
Executing (135ca4b4-f841-4a57-ae7f-824e66cad18d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230831191430-program-personnel-cleanup: migrated (0.429s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230905194816-add-deleted-at-to-goals-and-objectives: migrating =======
Executing (7c1317d6-b73c-436a-bcb5-72a6ccc8211a): START TRANSACTION;
Connection validated successfully
Executing (7c1317d6-b73c-436a-bcb5-72a6ccc8211a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230905194816-add-deleted-at-to-goals-and-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7c1317d6-b73c-436a-bcb5-72a6ccc8211a): ALTER TABLE "public"."Objectives" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (7c1317d6-b73c-436a-bcb5-72a6ccc8211a): ALTER TABLE "public"."Goals" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (7c1317d6-b73c-436a-bcb5-72a6ccc8211a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230905194816-add-deleted-at-to-goals-and-objectives: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230908140816-fix-fei-goals: migrating =======
Executing (2cf219c2-d844-43a3-a256-a08b34d486d3): START TRANSACTION;
Connection validated successfully
Executing (2cf219c2-d844-43a3-a256-a08b34d486d3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230908140816-fix-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2cf219c2-d844-43a3-a256-a08b34d486d3): -- Update goal templates for fei.\n        UPDATE "Goals"\n            SET\n            "goalTemplateId" = 19017\n        WHERE "id" IN (52248, 52251, 52249, 52250, 55244, 55172, 55908, 55420, 55421, 56033, 50565, 50613, 50612, 50343, 50614);
Executing (2cf219c2-d844-43a3-a256-a08b34d486d3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230908140816-fix-fei-goals: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230908155325-fix-fei-root-causes: migrating =======
Executing (e86c8936-b92a-4fa4-8c6b-e7e8b5c4bf8c): START TRANSACTION;
Connection validated successfully
Executing (e86c8936-b92a-4fa4-8c6b-e7e8b5c4bf8c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230908155325-fix-fei-root-causes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e86c8936-b92a-4fa4-8c6b-e7e8b5c4bf8c): -- Update workforce root causes for fei.\n        with ids as (\n            SELECT\n            argfr.id\n            FROM "Grants" gr\n            JOIN "Goals" goal\n                ON gr.id = goal."grantId"\n            JOIN "ActivityReportGoals" arg\n                ON goal."id" = arg."goalId"\n            JOIN "ActivityReportGoalFieldResponses" argfr\n                ON arg.id = argfr."activityReportGoalId"\n            WHERE "number" IN ('06CH011554', '06CH011558', '06CH010965', '06CH010720', '06HP000120', '06HP000296', '06CH011143'))\n            UPDATE "ActivityReportGoalFieldResponses"\n                SET "response" = '{Workforce}'\n            WHERE "id" IN (SELECT "id" FROM "ids");\n\n            with ids as (\n                SELECT\n                gfr.id\n                FROM "Grants" gr\n                JOIN "Goals" goal\n                    ON gr.id = goal."grantId"\n                JOIN "GoalFieldResponses" gfr\n                    ON goal.id = gfr."goalId"\n                WHERE "number" IN ('06CH011554', '06CH011558', '06CH010965', '06CH010720', '06HP000120', '06HP000296', '06CH011143'))\n                UPDATE "GoalFieldResponses"\n                    SET "response" = '{Workforce}'\n                WHERE "id" IN (SELECT "id" FROM "ids");\n\n            -- Update workforce, transportation root causes for fei.\n            with ids as (\n                SELECT\n                argfr.id\n                FROM "Grants" gr\n                JOIN "Goals" goal\n                    ON gr.id = goal."grantId"\n                JOIN "ActivityReportGoals" arg\n                    ON goal."id" = arg."goalId"\n                JOIN "ActivityReportGoalFieldResponses" argfr\n                    ON arg.id = argfr."activityReportGoalId"\n                WHERE "number" IN ('06CH011469', '06CH011503', '06CH011919'))\n                UPDATE "ActivityReportGoalFieldResponses"\n                    SET "response" = '{Workforce, Transportation}'\n                WHERE "id" IN (SELECT "id" FROM "ids");\n\n                with ids as (\n                    SELECT\n                    gfr.id\n                    FROM "Grants" gr\n                    JOIN "Goals" goal\n                        ON gr.id = goal."grantId"\n                    JOIN "GoalFieldResponses" gfr\n                        ON goal.id = gfr."goalId"\n                         WHERE "number" IN ('06CH011469', '06CH011503', '06CH011919'))\n                    UPDATE "GoalFieldResponses"\n                        SET "response" = '{Workforce, Transportation}'\n                    WHERE "id" IN (SELECT "id" FROM "ids");\n\n                -- Update workforce, facilities root causes for fei.\n                with ids as (\n                    SELECT\n                    argfr.id\n                    FROM "Grants" gr\n                    JOIN "Goals" goal\n                        ON gr.id = goal."grantId"\n                    JOIN "ActivityReportGoals" arg\n                        ON goal."id" = arg."goalId"\n                    JOIN "ActivityReportGoalFieldResponses" argfr\n                        ON arg.id = argfr."activityReportGoalId"\n                    WHERE "number" IN ('06CH010885', '06CH010663', '06HP000249', '06CH011990', '06HP000184', '06CH011272'))\n                    UPDATE "ActivityReportGoalFieldResponses"\n                        SET "response" = '{Workforce, Facilities}'\n                    WHERE "id" IN (SELECT "id" FROM "ids");\n\n                    with ids as (\n                        SELECT\n                        gfr.id\n                        FROM "Grants" gr\n                        JOIN "Goals" goal\n                            ON gr.id = goal."grantId"\n                        JOIN "GoalFieldResponses" gfr\n                            ON goal.id = gfr."goalId"\n                            WHERE "number" IN ('06CH010885', '06CH010663', '06HP000249', '06CH011990', '06HP000184', '06CH011272'))\n                        UPDATE "GoalFieldResponses"\n                                SET "response" = '{Workforce, Facilities}'\n                        WHERE "id" IN (SELECT "id" FROM "ids");\n\n                    -- Update Other ECE Options root causes for fei.\n                    with ids as (\n                        SELECT\n                        argfr.id\n                        FROM "Grants" gr\n                        JOIN "Goals" goal\n                            ON gr.id = goal."grantId"\n                        JOIN "ActivityReportGoals" arg\n                            ON goal."id" = arg."goalId"\n                        JOIN "ActivityReportGoalFieldResponses" argfr\n                            ON arg.id = argfr."activityReportGoalId"\n                        WHERE "number" IN ('06CH010745', '06HP000265', '06HP000473'))\n                        UPDATE "ActivityReportGoalFieldResponses"\n                            SET "response" = '{Other ECE Options}'\n                        WHERE "id" IN (SELECT "id" FROM "ids");\n\n                        with ids as (\n                            SELECT\n                            gfr.id\n                            FROM "Grants" gr\n                            JOIN "Goals" goal\n                                ON gr.id = goal."grantId"\n                            JOIN "GoalFieldResponses" gfr\n                                ON goal.id = gfr."goalId"\n                                WHERE "number" IN ('06CH010745', '06HP000265', '06HP000473'))\n                            UPDATE "GoalFieldResponses"\n                                    SET "response" = '{Other ECE Options}'\n                            WHERE "id" IN (SELECT "id" FROM "ids");\n\n                        -- Update Workforce, Other ECE Options root causes for fei.\n                        with ids as (\n                            SELECT\n                            argfr.id\n                            FROM "Grants" gr\n                            JOIN "Goals" goal\n                                ON gr.id = goal."grantId"\n                            JOIN "ActivityReportGoals" arg\n                                ON goal."id" = arg."goalId"\n                            JOIN "ActivityReportGoalFieldResponses" argfr\n                                ON arg.id = argfr."activityReportGoalId"\n                            WHERE "number" IN ('06CH011414'))\n                            UPDATE "ActivityReportGoalFieldResponses"\n                                SET "response" = '{Workforce, Other ECE Options}'\n                            WHERE "id" IN (SELECT "id" FROM "ids");\n\n                            with ids as (\n                                SELECT\n                                gfr.id\n                                FROM "Grants" gr\n                                JOIN "Goals" goal\n                                    ON gr.id = goal."grantId"\n                                JOIN "GoalFieldResponses" gfr\n                                    ON goal.id = gfr."goalId"\n                                    WHERE "number" IN ('06CH011414'))\n                                UPDATE "GoalFieldResponses"\n                                        SET "response" = '{Workforce, Other ECE Options}'\n                                WHERE "id" IN (SELECT "id" FROM "ids");
Executing (e86c8936-b92a-4fa4-8c6b-e7e8b5c4bf8c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230908155325-fix-fei-root-causes: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230920131223-fix-other-ece-fei-root-cause: migrating =======
Executing (54c8a2e4-a9b2-49ab-9f6f-e5c01cdb5fce): START TRANSACTION;
Connection validated successfully
Executing (54c8a2e4-a9b2-49ab-9f6f-e5c01cdb5fce): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230920131223-fix-other-ece-fei-root-cause.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (54c8a2e4-a9b2-49ab-9f6f-e5c01cdb5fce): -- Update Other ECE Care Options root causes for fei.\n        with ids as (\n            SELECT\n            argfr.id\n            FROM "Grants" gr\n            JOIN "Goals" goal\n                ON gr.id = goal."grantId"\n            JOIN "ActivityReportGoals" arg\n                ON goal."id" = arg."goalId"\n            JOIN "ActivityReportGoalFieldResponses" argfr\n                ON arg.id = argfr."activityReportGoalId"\n            WHERE "number" IN ('06CH010745', '06HP000265', '06HP000473'))\n            UPDATE "ActivityReportGoalFieldResponses"\n                SET "response" = '{Other ECE Care Options}'\n            WHERE "id" IN (SELECT "id" FROM "ids");\n\n            with ids as (\n                SELECT\n                gfr.id\n                FROM "Grants" gr\n                JOIN "Goals" goal\n                    ON gr.id = goal."grantId"\n                JOIN "GoalFieldResponses" gfr\n                    ON goal.id = gfr."goalId"\n                    WHERE "number" IN ('06CH010745', '06HP000265', '06HP000473'))\n                UPDATE "GoalFieldResponses"\n                        SET "response" = '{Other ECE Care Options}'\n                WHERE "id" IN (SELECT "id" FROM "ids");\n\n            -- Update Workforce, Other ECE Care Options root causes for fei.\n            with ids as (\n                SELECT\n                argfr.id\n                FROM "Grants" gr\n                JOIN "Goals" goal\n                    ON gr.id = goal."grantId"\n                JOIN "ActivityReportGoals" arg\n                    ON goal."id" = arg."goalId"\n                JOIN "ActivityReportGoalFieldResponses" argfr\n                    ON arg.id = argfr."activityReportGoalId"\n                WHERE "number" IN ('06CH011414'))\n                UPDATE "ActivityReportGoalFieldResponses"\n                    SET "response" = '{Workforce, Other ECE Care Options}'\n                WHERE "id" IN (SELECT "id" FROM "ids");\n\n                with ids as (\n                    SELECT\n                    gfr.id\n                    FROM "Grants" gr\n                    JOIN "Goals" goal\n                        ON gr.id = goal."grantId"\n                    JOIN "GoalFieldResponses" gfr\n                        ON goal.id = gfr."goalId"\n                        WHERE "number" IN ('06CH011414'))\n                    UPDATE "GoalFieldResponses"\n                            SET "response" = '{Workforce, Other ECE Care Options}'\n                    WHERE "id" IN (SELECT "id" FROM "ids");
Executing (54c8a2e4-a9b2-49ab-9f6f-e5c01cdb5fce): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230920131223-fix-other-ece-fei-root-cause: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230921154701-add-suspend-objective-reasons: migrating =======
Executing (19c7a07a-9c63-4a8f-94ee-4707d1c6481b): START TRANSACTION;
Connection validated successfully
Executing (19c7a07a-9c63-4a8f-94ee-4707d1c6481b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230921154701-add-suspend-objective-reasons.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (19c7a07a-9c63-4a8f-94ee-4707d1c6481b): CREATE TYPE "public"."enum_Objectives_suspendReason" AS ENUM('Key staff turnover / vacancies', 'Recipient request', 'Recipient is not responding', 'Regional Office request');ALTER TABLE "public"."Objectives" ADD COLUMN "suspendReason" "public"."enum_Objectives_suspendReason";
Executing (19c7a07a-9c63-4a8f-94ee-4707d1c6481b): ALTER TABLE "public"."Objectives" ADD COLUMN "suspendContext" TEXT;
Executing (19c7a07a-9c63-4a8f-94ee-4707d1c6481b): CREATE TYPE "public"."enum_ActivityReportObjectives_suspendReason" AS ENUM('Key staff turnover / vacancies', 'Recipient request', 'Recipient is not responding', 'Regional Office request');ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "suspendReason" "public"."enum_ActivityReportObjectives_suspendReason";
Executing (19c7a07a-9c63-4a8f-94ee-4707d1c6481b): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "suspendContext" TEXT;
Executing (19c7a07a-9c63-4a8f-94ee-4707d1c6481b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230921154701-add-suspend-objective-reasons: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230921192740-remove_national_center_ars: migrating =======
Executing (3a40e0f9-9fec-4819-b0b7-39ab91db18b9): START TRANSACTION;
Connection validated successfully
Executing (3a40e0f9-9fec-4819-b0b7-39ab91db18b9): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230921192740-remove_national_center_ars.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3a40e0f9-9fec-4819-b0b7-39ab91db18b9): ---------------------------------------------------\n        -- NOTE:\n        -- Files and Resources are most properly managed by\n        -- maintenance jobs, so this and similar migrations\n        -- won't delete them directly. Deleting the link\n        -- records will give the maintenance job the info\n        -- it needs to perform its housekeeping.\n        ---------------------------------------------------\n        -------- Deleting unwanted ARs --------\n        -- Create the AR deletion list\n        -- Remove AR link records: -------------\n        -- ActivityRecipients\n        -- ActivityReportApprovers\n        -- ActivityReportCollaborators\n        -- ActivityReportFiles (no need to remove Files)\n        -- ActivityReportResources (no need to remove Resources)\n\n        -- Create the NextSteps deletion list\n        -- Remove NextSteps link records: -------------\n        -- NextStepResources\n        -- remove NextSteps -------------\n\n        -- Create the ARO deletion list\n        -- Remove ARO link records: -------------\n        -- ActivityReportObjectiveFiles\n        -- ActivityReportObjectiveResources\n        -- ActivityReportObjectiveTopics\n        -- remove AROs -------------------\n\n        -- Create the orphaned Objective deletion list\n        -- Remove Objective link records: -------------\n        -- ObjectiveFiles\n        -- ObjectiveResources\n        -- ObjectiveTopics\n        -- remove Objectives -------------\n\n        -- Create the ARG deletion list\n        -- Remove ARG link records: -------------\n        -- ActivityReportGoalFieldResponses\n        -- ActivityReportGoalResources\n        -- remove ARGs -------------------\n\n        -- Create the orphaned Goal deletions list\n        -- ( check if isFromSmartsheetTtaPlan, isRttapa)\n        -- Remove Goal link records: -------------\n        -- GoalFieldResponses\n        -- GoalResources\n        -- remove Goals ------------------\n\n        -- Create the orphaned ObjectiveTemplate deletion list\n        -- Remove ObjectiveTemplate link records: -------------\n        -- ObjectiveTemplateFiles\n        -- ObjectiveTemplateResources\n        -- ObjectiveTemplateTopics\n\n        -- Create the orphaned GoalTemplate deletion list\n        -- Remove GoalTemplate link records: -------------\n        -- GoalTemplateObjectiveTemplates\n        -- Remove ObjectiveTemplates --------\n        -- Remove GoalTemplates -------------\n\n        -- Remove ARs -----------------------\n\n        -------------------------------------------------------------------------------------------------------------------\n        -------- Deleting unwanted ARs --------\n        -- Create the AR deletion list\n        DROP TABLE IF EXISTS ars_to_delete;\n        CREATE TEMP TABLE ars_to_delete\n        AS\n        SELECT id arid\n        FROM "ActivityReports"\n        WHERE id IN (9030, 9119, 9131, 9175, 9204, 9271, 9282, 9290, 9295, 9297, 9326, 9341, 9489, 21462, 21463, 21464, 21507, 21535, 21555, 21563, 21564, 21592, 21631, 21682, 24578, 24633, 24637, 24701, 24732, 24761, 24764, 24765, 24767, 24785, 24790, 24797, 24799, 24800, 24803, 24816, 24840, 24861, 24879, 24889, 24903, 24953, 26246, 26248, 26249, 26252, 26367, 26368, 26390, 26393, 26406, 26421, 26432, 26443, 26911, 29455, 29837, 29957, 30081, 30088, 30089, 30090, 30338, 30391, 30429, 30481, 30504, 30562, 30890)\n        AND "regionId" = 2\n        ;\n\n        -- Remove AR link records: -------------\n        DROP TABLE IF EXISTS deleted_activityrecipients;\n        CREATE TEMP TABLE deleted_activityrecipients AS\n        WITH deletes AS (\n          DELETE FROM "ActivityRecipients"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportapprovers AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportApprovers"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportcollaborators AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportCollaborators"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportfiles AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportFiles"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportResources"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n\n\n\n        -- Create the NextSteps deletion list\n        DROP TABLE IF EXISTS nextsteps_to_delete;\n        CREATE TEMP TABLE nextsteps_to_delete\n        AS\n        SELECT\n          id nsid\n        FROM "NextSteps"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove NextSteps link records: -------------\n        CREATE TEMP TABLE deleted_nextstepresources AS\n        WITH deletes AS (\n          DELETE FROM "NextStepResources"\n          USING nextsteps_to_delete\n          WHERE "nextStepId" = nsid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove NextSteps -------------\n        CREATE TEMP TABLE deleted_nextsteps AS\n        WITH deletes AS (\n          DELETE FROM "NextSteps"\n          USING nextsteps_to_delete\n          WHERE id = nsid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n\n        -- Create the ARO deletion list\n        DROP TABLE IF EXISTS aros_to_delete;\n        CREATE TEMP TABLE aros_to_delete\n        AS\n        SELECT\n          id aroid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove ARO link records: -------------\n        CREATE TEMP TABLE deleted_activityreportobjectivefiles AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveFiles"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportobjectiveresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveResources"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportobjectivetopics AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveTopics"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- remove AROs -------------------\n        CREATE TEMP TABLE deleted_aros AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectives"\n          USING aros_to_delete\n          WHERE id = aroid\n          RETURNING\n          id,\n          "objectiveId" oid\n        )\n        SELECT id, oid FROM deletes\n        ;\n\n        -- Create the orphaned Objective deletion list\n        CREATE TEMP TABLE objectives_to_delete\n        AS\n        SELECT DISTINCT oid\n        FROM deleted_aros\n        EXCEPT\n        SELECT DISTINCT "objectiveId"\n        FROM "ActivityReportObjectives"\n        ;\n        -- Remove Objective link records: -------------\n        CREATE TEMP TABLE deleted_objectivefiles AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveFiles"\n          USING objectives_to_delete\n          WHERE "objectiveId" = oid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_objectiveresources AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveResources"\n          USING objectives_to_delete\n          WHERE "objectiveId" = oid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_objectivetopics AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTopics"\n          USING objectives_to_delete\n          WHERE "objectiveId" = oid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- remove Objectives -------------------\n        CREATE TEMP TABLE deleted_objectives AS\n        WITH deletes AS (\n          DELETE FROM "Objectives"\n          USING objectives_to_delete\n          WHERE id = oid\n          RETURNING\n          id,\n          "goalId" gid,\n          "objectiveTemplateId" otid\n        )\n        SELECT id, gid, otid FROM deletes\n        ;\n\n        -- Create the ARG deletion list\n        DROP TABLE IF EXISTS args_to_delete;\n        CREATE TEMP TABLE args_to_delete\n        AS\n        SELECT DISTINCT\n          id argid,\n          "goalId" gid\n        FROM "ActivityReportGoals"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove ARG link records: -------------\n        CREATE TEMP TABLE deleted_activityreportgoalfieldresponses AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoalFieldResponses"\n          USING args_to_delete\n          WHERE "activityReportGoalId" = argid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_activityreportgoalresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoalResources"\n          USING args_to_delete\n          WHERE "activityReportGoalId" = argid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove ARGs -------------------\n        CREATE TEMP TABLE deleted_args AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoals"\n          USING args_to_delete\n          WHERE id = argid\n          RETURNING\n          id,\n          "goalId" gid\n        )\n        SELECT id, gid FROM deletes\n        ;\n\n        -- Create the orphaned Goal deletions list\n        CREATE TEMP TABLE goals_to_delete\n        AS\n        SELECT DISTINCT gid\n        FROM deleted_args dargs\n        JOIN "Goals" g\n          ON gid = g.id\n        WHERE g."isRttapa" != 'Yes'\n          AND g."isFromSmartsheetTtaPlan" != TRUE\n        EXCEPT \n        SELECT gid\n        FROM (\n          SELECT DISTINCT "goalId" gid\n          FROM "ActivityReportGoals"\n          UNION\n          SELECT DISTINCT "goalId" gid\n          FROM "Objectives"\n        ) keepers\n        ;\n        -- Remove Goal link records: -------------\n        CREATE TEMP TABLE deleted_goalfieldresponses AS\n        WITH deletes AS (\n          DELETE FROM "GoalFieldResponses"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_goalresources AS\n        WITH deletes AS (\n          DELETE FROM "GoalResources"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove Goals -------------------\n        CREATE TEMP TABLE deleted_goals AS\n        WITH deletes AS (\n          DELETE FROM "Goals"\n          USING goals_to_delete\n          WHERE id = gid\n          RETURNING\n          id,\n          "goalTemplateId" gtid\n        )\n        SELECT id, gtid FROM deletes\n        ;\n\n        -- Create the orphaned ObjectiveTemplate deletion list\n        CREATE TEMP TABLE ots_to_delete\n        AS\n        SELECT DISTINCT otid\n        FROM deleted_objectives\n        EXCEPT\n        SELECT DISTINCT "objectiveTemplateId"\n        FROM "Objectives"\n        ;\n        -- Remove ObjectiveTemplate link records: -------------\n        CREATE TEMP TABLE deleted_objectivetemplatefiles AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplateFiles"\n          USING ots_to_delete\n          WHERE "objectiveTemplateId" = otid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_objectivetemplateresources AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplateResources"\n          USING ots_to_delete\n          WHERE "objectiveTemplateId" = otid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        CREATE TEMP TABLE deleted_objectivetemplatetopics AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplateTopics"\n          USING ots_to_delete\n          WHERE "objectiveTemplateId" = otid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n        -- Create the orphaned GoalTemplate deletion list\n        CREATE TEMP TABLE gts_to_delete\n        AS\n        SELECT DISTINCT gtid\n        FROM deleted_goals\n        EXCEPT\n        SELECT DISTINCT "goalTemplateId"\n        FROM "Goals"\n        ;\n        -- Remove GoalTemplate link records: -------------\n        CREATE TEMP TABLE deleted_goaltemplateobjectivetemplates AS\n        WITH unified_deletes AS (\n          SELECT DISTINCT id gtotid\n          FROM "GoalTemplateObjectiveTemplates"\n          JOIN ots_to_delete\n            ON otid = "objectiveTemplateId"\n          UNION\n          SELECT DISTINCT id gtotid\n          FROM "GoalTemplateObjectiveTemplates"\n          JOIN gts_to_delete\n            ON gtid = "goalTemplateId"\n        ),\n        deletes AS (\n          DELETE FROM "GoalTemplateObjectiveTemplates"\n          USING unified_deletes\n          WHERE id = gtotid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- Remove ObjectiveTemplates --------\n        CREATE TEMP TABLE deleted_objectivetemplates AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplates"\n          USING ots_to_delete\n          WHERE id = otid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- Remove GoalTemplates -------------\n        CREATE TEMP TABLE deleted_goaltemplates AS\n        WITH deletes AS (\n          DELETE FROM "GoalTemplates"\n          USING gts_to_delete\n          WHERE id = gtid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n        -- Remove ARs -------------\n        CREATE TEMP TABLE deleted_ars AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReports"\n          USING ars_to_delete\n          WHERE id = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n\n        -- Stats ----------------------------\n        SELECT 1,'ars_to_delete', count(*) FROM ars_to_delete\n        UNION\n        SELECT 2,'deleted_activityreportapprovers', count(*) FROM deleted_activityreportapprovers\n        UNION\n        SELECT 3,'deleted_activityreportcollaborators', count(*) FROM deleted_activityreportcollaborators\n        UNION\n        SELECT 4,'deleted_activityreportfiles', count(*) FROM deleted_activityreportfiles\n        UNION\n        SELECT 5,'deleted_activityreportresources', count(*) FROM deleted_activityreportresources\n        UNION\n        SELECT 6,'nextsteps_to_delete', count(*) FROM nextsteps_to_delete\n        UNION\n        SELECT 7,'deleted_nextstepresources', count(*) FROM deleted_nextstepresources\n        UNION\n        SELECT 8,'deleted_nextsteps', count(*) FROM deleted_nextsteps\n        UNION\n        SELECT 9,'aros_to_delete', count(*) FROM aros_to_delete\n        UNION\n        SELECT 10,'deleted_activityreportobjectivefiles', count(*) FROM deleted_activityreportobjectivefiles\n        UNION\n        SELECT 11,'deleted_activityreportobjectiveresources', count(*) FROM deleted_activityreportobjectiveresources\n        UNION\n        SELECT 12,'deleted_activityreportobjectivetopics', count(*) FROM deleted_activityreportobjectivetopics\n        UNION\n        SELECT 13,'deleted_aros', count(*) FROM deleted_aros\n        UNION\n        SELECT 14,'objectives_to_delete', count(*) FROM objectives_to_delete\n        UNION\n        SELECT 15,'deleted_objectivefiles', count(*) FROM deleted_objectivefiles\n        UNION\n        SELECT 16,'deleted_objectiveresources', count(*) FROM deleted_objectiveresources\n        UNION\n        SELECT 17,'deleted_objectivetopics', count(*) FROM deleted_objectivetopics\n        UNION\n        SELECT 18,'deleted_objectives', count(*) FROM deleted_objectives\n        UNION\n        SELECT 19,'args_to_delete', count(*) FROM args_to_delete\n        UNION\n        SELECT 20,'deleted_activityreportgoalfieldresponses', count(*) FROM deleted_activityreportgoalfieldresponses\n        UNION\n        SELECT 21,'deleted_activityreportgoalresources', count(*) FROM deleted_activityreportgoalresources\n        UNION\n        SELECT 22,'deleted_args', count(*) FROM deleted_args\n        UNION\n        SELECT 23,'goals_to_delete', count(*) FROM goals_to_delete\n        UNION\n        SELECT 24,'deleted_goalfieldresponses', count(*) FROM deleted_goalfieldresponses\n        UNION\n        SELECT 25,'deleted_goalresources', count(*) FROM deleted_goalresources\n        UNION\n        SELECT 26,'deleted_goals', count(*) FROM deleted_goals\n        UNION\n        SELECT 27,'ots_to_delete', count(*) FROM ots_to_delete\n        UNION\n        SELECT 28,'deleted_objectivetemplatefiles', count(*) FROM deleted_objectivetemplatefiles\n        UNION\n        SELECT 29,'deleted_objectivetemplateresources', count(*) FROM deleted_objectivetemplateresources\n        UNION\n        SELECT 30,'deleted_objectivetemplatetopics', count(*) FROM deleted_objectivetemplatetopics\n        UNION\n        SELECT 31,'gts_to_delete', count(*) FROM gts_to_delete\n        UNION\n        SELECT 32,'deleted_goaltemplateobjectivetemplates', count(*) FROM deleted_goaltemplateobjectivetemplates\n        UNION\n        SELECT 33,'deleted_objectivetemplates', count(*) FROM deleted_objectivetemplates\n        UNION\n        SELECT 34,'deleted_goaltemplates', count(*) FROM deleted_goaltemplates\n        UNION\n        SELECT 35,'deleted_ars', count(*) FROM deleted_ars\n        ORDER BY 1\n        ;
Executing (3a40e0f9-9fec-4819-b0b7-39ab91db18b9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230921192740-remove_national_center_ars: migrated (0.070s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230927154903-update-class-goal: migrating =======
Executing (6a84fe65-a6ed-4ea6-82d5-b62b1016c154): START TRANSACTION;
Connection validated successfully
Executing (6a84fe65-a6ed-4ea6-82d5-b62b1016c154): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230927154903-update-class-goal.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6a84fe65-a6ed-4ea6-82d5-b62b1016c154): -- update goal text for class goal\n        UPDATE "Goals"\n          SET\n            "name" = '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)',\n            "goalTemplateId" = 18172\n          WHERE "name" = '(PILOT) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)';\n\n      -- update activity report goals\n        UPDATE "ActivityReportGoals"\n          SET\n            "name" = '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)'\n          WHERE "name" = '(PILOT) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)';\n      \n      -- set existing template to curated\n      -- this will ensure the template always appears selectable (and read-only) in the UI\n        UPDATE "GoalTemplates"\n          SET\n            "creationMethod" = 'Curated'::"enum_GoalTemplates_creationMethod",\n            "templateName" = '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)',\n            "hash" = MD5(TRIM('(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)'))\n          WHERE "id" = 18172;
Executing (6a84fe65-a6ed-4ea6-82d5-b62b1016c154): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230927154903-update-class-goal: migrated (0.017s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20230929205404-update-fei-root-cause-validations: migrating =======
Executing (590fd1ca-d2df-42d0-b700-68746cbb0aaa): START TRANSACTION;
Connection validated successfully
Executing (590fd1ca-d2df-42d0-b700-68746cbb0aaa): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20230929205404-update-fei-root-cause-validations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (590fd1ca-d2df-42d0-b700-68746cbb0aaa): UPDATE "GoalTemplateFieldPrompts"\n        SET "validations" = '{"required":"Select a root cause","rules":[{"name":"maxSelections","value":2,"message":"You can only select 2 options"},{"name":"minSelections","value":1,"message":"You must select at least one options"}]}'\n      WHERE "title" = 'FEI root cause'
Executing (590fd1ca-d2df-42d0-b700-68746cbb0aaa): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20230929205404-update-fei-root-cause-validations: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231017230000-merge-pseudo-fei-goals: migrating =======
Executing (f2b2644d-f454-401e-a038-6c914501112c): START TRANSACTION;
Connection validated successfully
Executing (f2b2644d-f454-401e-a038-6c914501112c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231017230000-merge-pseudo-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f2b2644d-f454-401e-a038-6c914501112c): -- Merging goals to a new template\n      -- There are some goals that are being merged into goals\n      -- that are already on the correct template, and some\n      -- goals that need to become the FEI goal\n\n      -- PROCESS:\n      -- Create goal_merges listing target goals and templates\n      -- Create template_merges listing which templates from donor templates need to merge to target templates\n      -- NOTE: currently skipping goal template merge steps because there are no goal templates to merge\n      -- Correct any goals that are their own merge target by updating to match their new templates\n      -- Create objective_merges for objectives that match on donor and target goals\n      -- Update the target objectives record history fields from the donor objectives\n      -- Merge objective topics\n      -- Merge objective resources\n      -- Merge objective files\n      -- Delete duplicate objective topics\n      -- Delete duplicate objective resources\n      -- Delete duplicate objective files\n      -- Relink non-goalmerge Objectives\n      -- Update the target goals record history fields from the donor goals\n      -- Relink non-duplicate ARGs\n      -- Delete duplicate ARGs\n      -- Delete donor goals\n\n      -- Update goal templates for fei.\n      DROP TABLE IF EXISTS goal_merges;\n      CREATE TEMP TABLE goal_merges\n      AS\n      WITH goalmap AS (\n        SELECT -- starting with the 2023 set\n          '01CH011564' grnum,\n          54340 donor_gid,\n          50741 target_gid\n        UNION SELECT '01CH011820', 52284, 50952\n        UNION SELECT '01CH011820', 52416, 50952\n        UNION SELECT '01CH011482', 54341, 52420\n        UNION SELECT '01CH011496', 54342, 51164\n        UNION SELECT '01CH010695', 54343, 51171\n        UNION SELECT '01CH011183', 52285, 50953\n        UNION SELECT '01CH010718', 54344, 51165\n        UNION SELECT '01CH011941', 52286, 50954\n        UNION SELECT '01CH011875', 54345, 51166\n        UNION SELECT '01CH011404', 52287, 50955\n        UNION SELECT '01CH011404', 54360, 50955\n        UNION SELECT '01CH012151', 54351, 54325\n        UNION SELECT '01CH010716', 52288, 50956\n        UNION SELECT '01CH011664', 52289, 50957\n        UNION SELECT '01CH010781', 52290, 50958\n        UNION SELECT '01CH010741', 52291, 50959\n        UNION SELECT '01CH011513', 54346, 51168\n        UNION SELECT '01CH012160', 52292, 50960\n        UNION SELECT '01CH011913', 52293, 52223\n        UNION SELECT '01CH010930', 52295, 50705\n        UNION SELECT '01CH010602', 52296, 50961\n        UNION SELECT '01CH011668', 54347, 51169\n        UNION SELECT '01CH012124', 54348, 51170\n        UNION SELECT '05CH011505', 55653, 55649\n        UNION SELECT '05CH010709', 55651, 55648\n        UNION SELECT '05CH010775', 52460, 52453\n        UNION SELECT '05CH011904', 52461, 52454\n        UNION SELECT '05CH012183', 52462, 52455\n        UNION SELECT '05CH011796', 55655, 54275\n        UNION SELECT '05CH011188', 54308, 54774\n        UNION SELECT '05CH010694', 55650, 55647\n        UNION SELECT '05CH010926', 52319, 50605\n        UNION SELECT '05CH011114', 52318, 50606\n        UNION SELECT '05CH011731', 52317, 50607\n        UNION SELECT '05CH011253', 52463, 52456\n        UNION SELECT '05CH011463', 51508, 52451\n        UNION SELECT '05CH011463', 51654, 52451\n        UNION SELECT '05CH011463', 54307, 52451\n        UNION SELECT '05CH011851', 54316, 55215\n        UNION SELECT '05CH011779', 55654, 53116\n        UNION SELECT '05CH010568', 54002, 51599\n        UNION SELECT '05CH012264', 54767, 56632\n        UNION SELECT '05CH011144', 51892, 51811\n        UNION SELECT '10CH012116', 53611, 53390\n        UNION SELECT '01CH011357', 54349, 54349 -- continuing with the 2093 set\n        UNION SELECT '01CH011073', 54350, 54350\n        UNION SELECT '01CH011423', 54215, 54215\n        UNION SELECT '01CH011874', 52294, 52294\n        UNION SELECT '04CH011857', 55635, 55635\n        UNION SELECT '04CH011025', 56022, 56022\n        UNION SELECT '05CH012028', 55115, 55115\n        UNION SELECT '05CH012316', 56047, 56047\n        UNION SELECT '05CH011333', 54317, 54317\n      ),\n      target_template AS (SELECT 19017 fei_gtid),\n      existing_fei_goals AS (\n        SELECT\n          COALESCE(g.id,target_gid) gid,\n          target_gid,\n          grnum\n        FROM goalmap gm\n        CROSS JOIN target_template tt\n        JOIN "Grants" gr\n          ON grnum = gr.number\n        LEFT JOIN "Goals" g\n          ON g."grantId" = gr.id\n          AND g."goalTemplateId" = tt.fei_gtid\n      )\n      SELECT\n        grnum,\n        donor_gid,\n        target_gid,\n        fei_gtid target_gtid\n      FROM goalmap\n      CROSS JOIN target_template\n      ;\n\n      -- This returns empty on the current dataset because none of the\n      -- pseudo-FEI goals have templates. This seems wrong, but it is\n      -- the state of the data right now.\n      DROP TABLE IF EXISTS template_merges;\n      CREATE TEMP TABLE template_merges\n      AS\n      SELECT DISTINCT\n        g."goalTemplateId" donor_gtid,\n        target_gtid\n      FROM goal_merges gm\n      JOIN "Goals" g\n        ON gm.donor_gid = g.id\n      WHERE g."goalTemplateId" IS NOT NULL\n      ;\n\n      -- When template_merges is empty, then goal template merging logic\n      -- will never be engaged. So, instead of implementing that all now\n      -- we can save a lot of time by just confirming that it can be skipped\n      -- for now. This will error out the transaction if there are any\n      -- goal templates on the donor goals\n      WITH template_merges_count AS (SELECT COUNT(*) cnt FROM template_merges)\n      SELECT\n        1/\n        (LEAST(cnt, 1) - 1)\n      FROM template_merges_count\n      ;\n\n\n      -- Update pseudo FEI goals to be valid FEI goals\n      DROP TABLE IF EXISTS corrected_goals;\n      CREATE TEMP TABLE corrected_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          name = gt."templateName",\n          "goalTemplateId" = gm.target_gtid\n        FROM goal_merges gm\n        JOIN "GoalTemplates" gt\n          ON gm.target_gtid = gt.id\n        WHERE donor_gid = target_gid\n          AND target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Create objective_merges for objectives that match on donor and target goals\n      DROP TABLE IF EXISTS objective_merges;\n      CREATE TEMP TABLE objective_merges\n      AS\n      SELECT\n        donor_obj.id donor_oid,\n        target_obj.id target_oid\n      FROM goal_merges gm\n      JOIN "Objectives" donor_obj\n        ON gm.donor_gid = donor_obj."goalId"\n      JOIN "Objectives" target_obj\n        ON gm.target_gid = target_obj."goalId"\n        AND donor_obj.title = target_obj.title\n      WHERE donor_obj.id != target_obj.id\n      ;\n\n      -- Update the merge target objectives\n      DROP TABLE IF EXISTS updated_target_objectives;\n      CREATE TEMP TABLE updated_target_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" AS o\n        SET\n          "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n          "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n          "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n          "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n          "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n          "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n        FROM objective_merges om\n        JOIN "Objectives" d_o\n          ON om.donor_oid = d_o.id\n        WHERE om.target_oid = o.id\n        RETURNING\n          o.id oid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      \n      -- Merge objective topics\n      DROP TABLE IF EXISTS relinked_objective_topics;\n      CREATE TEMP TABLE relinked_objective_topics\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "topicId" tid\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.donor_oid = ot."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "topicId"\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.target_oid = ot."objectiveId"\n        )\n        UPDATE "ObjectiveTopics" AS ot\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE ot."topicId" = u.tid\n          AND ot."objectiveId" = u.donor_oid\n        RETURNING\n          id otid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Merge objective resources\n      DROP TABLE IF EXISTS relinked_objective_resources;\n      CREATE TEMP TABLE relinked_objective_resources\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "resourceId" rid\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.donor_oid = o_r."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "resourceId"\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.target_oid = o_r."objectiveId"\n        )\n        UPDATE "ObjectiveResources" AS o_r\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE o_r."resourceId" = u.rid\n          AND o_r."objectiveId" = u.donor_oid\n        RETURNING\n          id orid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Merge objective files\n      DROP TABLE IF EXISTS relinked_objective_files;\n      CREATE TEMP TABLE relinked_objective_files\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "fileId" fid\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.donor_oid = of."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "fileId"\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.target_oid = of."objectiveId"\n        )\n        UPDATE "ObjectiveFiles" AS of\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE of."fileId" = u.fid\n          AND of."objectiveId" = u.donor_oid\n        RETURNING\n          id ofid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective topics\n      DROP TABLE IF EXISTS deleted_objective_topics;\n      CREATE TEMP TABLE deleted_objective_topics\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveTopics"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id otid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective resources\n      DROP TABLE IF EXISTS deleted_objective_resources;\n      CREATE TEMP TABLE deleted_objective_resources\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveResources"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id orid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective files\n      CREATE TEMP TABLE deleted_objective_files\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveFiles"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ofid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Link objectives on merged goals to the FEI goals\n      DROP TABLE IF EXISTS relinked_objectives;\n      CREATE TEMP TABLE relinked_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives"\n        SET "goalId" = target_gid\n        FROM goal_merges\n        WHERE "goalId" = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          id oid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target goals\n      DROP TABLE IF EXISTS updated_target_goals;\n      CREATE TEMP TABLE updated_target_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          "updatedAt" = GREATEST(dg."updatedAt", g."updatedAt"),\n          "firstNotStartedAt" = LEAST(dg."firstNotStartedAt", g."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(dg."lastNotStartedAt", g."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(dg."firstInProgressAt", g."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(dg."lastInProgressAt", g."lastInProgressAt"),\n          "firstCeasedSuspendedAt" = LEAST(dg."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt"),\n          "lastCeasedSuspendedAt" = GREATEST(dg."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt"),\n          "firstClosedAt" = LEAST(dg."firstClosedAt", g."firstClosedAt"),\n          "lastClosedAt" = GREATEST(dg."lastClosedAt", g."lastClosedAt")\n        FROM goal_merges gm\n        JOIN "Goals" dg\n          ON gm.donor_gid = dg.id\n        WHERE gm.target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- relink non-duplicate ARGs\n      DROP TABLE IF EXISTS relinked_args;\n      CREATE TEMP TABLE relinked_args\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            "activityReportId" arid,\n            "goalId" gid\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.donor_gid = arg."goalId"\n          EXCEPT\n          SELECT\n            "activityReportId",\n            "goalId"\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.target_gid = arg."goalId"\n        )\n        UPDATE "ActivityReportGoals" AS arg\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.gid = gm.donor_gid\n        WHERE arg."goalId" = u.gid\n          AND arg."activityReportId" = u.arid\n        RETURNING\n          id argid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id argid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Delete donor goals\n      DROP TABLE IF EXISTS deleted_goals;\n      CREATE TEMP TABLE deleted_goals\n      AS\n      WITH updater AS (\n        DELETE FROM "Goals"\n        USING goal_merges\n        WHERE id = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          target_gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      SELECT\n        1 op_order,\n        'corrected_goals' operation,\n        COUNT(*) cnt\n      FROM corrected_goals\n      UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n      UNION SELECT 3,'relinked_objective_topics', COUNT(*) FROM relinked_objective_topics\n      UNION SELECT 4,'relinked_objective_resources', COUNT(*) FROM relinked_objective_resources\n      UNION SELECT 5,'relinked_objective_files', COUNT(*) FROM relinked_objective_files\n      UNION SELECT 6,'deleted_objective_topics', COUNT(*) FROM deleted_objective_topics\n      UNION SELECT 7,'deleted_objective_resources', COUNT(*) FROM deleted_objective_resources\n      UNION SELECT 8,'deleted_objective_files', COUNT(*) FROM deleted_objective_files\n      UNION SELECT 9,'relinked_objectives', COUNT(*) FROM relinked_objectives\n      UNION SELECT 10,'updated_target_goals', COUNT(*) FROM updated_target_goals\n      UNION SELECT 11,'relinked_args', COUNT(*) FROM relinked_args\n      UNION SELECT 12,'deleted_args', COUNT(*) FROM deleted_args\n      UNION SELECT 13,'deleted_goals', COUNT(*) FROM deleted_goals\n      ORDER BY 1\n      ;
Executing (f2b2644d-f454-401e-a038-6c914501112c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231017230000-merge-pseudo-fei-goals: migrated (0.042s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231017230001-fei-goal-status-changes: migrating =======
Executing (d0c9a2fc-54f2-4cdc-9417-c29f24b62757): START TRANSACTION;
Connection validated successfully
Executing (d0c9a2fc-54f2-4cdc-9417-c29f24b62757): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231017230001-fei-goal-status-changes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d0c9a2fc-54f2-4cdc-9417-c29f24b62757): -- fixing the desired goal status\n      DROP TABLE IF EXISTS status_update_goals;\n      CREATE TEMP TABLE status_update_goals\n      AS\n      WITH goalset AS (\n        SELECT * FROM (\n          VALUES -- sorted and deduped\n          (50605), (50606), (50607), (50705), (50741), (50952), (50953), (50954), (50955), (50956),\n          (50957), (50958), (50959), (50960), (50961), (51164), (51165), (51166), (51168), (51169),\n          (51170), (51171), (51599), (51811), (52223), (52294), (52420), (52451), (52453), (52454),\n          (52455), (52456), (53116), (53390), (54215), (54275), (54317), (54325), (54349), (54350),\n          (54774), (55115), (55215), (55635), (55647), (55648), (55649), (56022), (56047), (56632)\n        ) AS data(gid)\n      )\n      SELECT\n        gid,\n        BOOL_OR(ar.id IS NOT NULL) on_approved_ar\n      FROM goalset g\n      LEFT JOIN "Objectives" o\n        ON o."goalId" = g.gid\n      LEFT JOIN "ActivityReportObjectives" aro\n        ON aro."objectiveId" = o.id\n      LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        AND "calculatedStatus" = 'approved'\n      GROUP BY 1\n      ;\n\n      DROP TABLE IF EXISTS updated_to_not_started;\n      CREATE TEMP TABLE updated_to_not_started\n      AS\n      WITH updater AS (\n        UPDATE "Goals"\n        SET\n          status = 'Not Started',\n          "updatedAt" = NOW()\n        FROM status_update_goals\n        WHERE id = gid\n          AND on_approved_ar = FALSE\n          AND status != 'Not Started'\n        RETURNING\n          id\n      ) SELECT * FROM updater\n      ;\n      DROP TABLE IF EXISTS updated_to_in_progress;\n      CREATE TEMP TABLE updated_to_in_progress\n      AS\n      WITH updater AS (\n        UPDATE "Goals"\n        SET\n          status = 'In Progress',\n          "updatedAt" = NOW()\n        FROM status_update_goals\n        WHERE id = gid\n          AND on_approved_ar\n          AND status != 'In Progress'\n        RETURNING\n          id\n      ) SELECT * FROM updater\n      ;\n      \n      SELECT 'updated_to_in_progress' operation, COUNT(*) cnt FROM updated_to_in_progress\n      UNION\n      SELECT 'updated_to_not_started' operation, COUNT(*) cnt FROM updated_to_not_started\n      ;
Executing (d0c9a2fc-54f2-4cdc-9417-c29f24b62757): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231017230001-fei-goal-status-changes: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231019233102-cleanup-ongoing-monitoring-topic: migrating =======
Executing (652c895b-44a9-44ad-94b3-d7c28a8a81e4): START TRANSACTION;
Connection validated successfully
Executing (652c895b-44a9-44ad-94b3-d7c28a8a81e4): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231019233102-cleanup-ongoing-monitoring-topic.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (652c895b-44a9-44ad-94b3-d7c28a8a81e4): -- Update activity report topics.\n      UPDATE "ActivityReports"\n      SET\n          topics = array_replace(topics, 'Ongoing Monitoring Management System', 'Ongoing Monitoring and Continuous Improvement')\n        WHERE topics @> ARRAY['Ongoing Monitoring Management System']::varchar[];\n\n        -- Update "ActivityReportObjectiveTopics" table.\n        UPDATE "ActivityReportObjectiveTopics"\n        SET "topicId" = 130\n        WHERE "topicId" = 127;\n\n        -- Update "ObjectiveTemplateTopics" table.\n        UPDATE "ObjectiveTemplateTopics"\n        SET "topicId" = 130\n        WHERE "topicId" = 127;\n\n        -- Update "ObjectiveTopics" table.\n        UPDATE "ObjectiveTopics"\n        SET "topicId" = 130\n        WHERE "topicId" = 127;\n\n        -- Update "RoleTopics" table.\n        UPDATE "RoleTopics"\n        SET "topicId" = 130\n        WHERE "topicId" = 127;
Executing (652c895b-44a9-44ad-94b3-d7c28a8a81e4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231019233102-cleanup-ongoing-monitoring-topic: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231020133942-account-for-merge-goals: migrating =======
Executing (ecad8bcb-7d50-442e-b17f-3a62399acb46): START TRANSACTION;
Connection validated successfully
Executing (ecad8bcb-7d50-442e-b17f-3a62399acb46): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231020133942-account-for-merge-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ecad8bcb-7d50-442e-b17f-3a62399acb46): ALTER TABLE "public"."Goals" ADD COLUMN "mapsToParentGoalId" INTEGER REFERENCES "Goals" ("id");
Executing (ecad8bcb-7d50-442e-b17f-3a62399acb46): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231020133942-account-for-merge-goals: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231023153206-merge_goals_feature_flag: migrating =======
Executing (c1bb7986-2dc0-484b-bfab-327459735814): START TRANSACTION;
Connection validated successfully
Executing (c1bb7986-2dc0-484b-bfab-327459735814): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231023153206-merge_goals_feature_flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c1bb7986-2dc0-484b-bfab-327459735814): DO $$ BEGIN\n          ALTER TYPE "enum_Users_flags" ADD VALUE 'merge_goals';\n        EXCEPTION\n          WHEN duplicate_object THEN null;\n        END $$;
Executing (c1bb7986-2dc0-484b-bfab-327459735814): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231023153206-merge_goals_feature_flag: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231023204415-enhance-email-enum: migrating =======
Executing (15e678fd-d70a-4bc0-bfbb-1cc201b441e9): START TRANSACTION;
Connection validated successfully
Executing (15e678fd-d70a-4bc0-bfbb-1cc201b441e9): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231023204415-enhance-email-enum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'collaboratorAssigned';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'changesRequested';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'approverAssigned';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'reportApproved';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'collaboratorDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'changesRequestedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'approverAssignedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'reportApprovedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'recipientReportApproved';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'recipientReportApprovedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportCollaboratorAdded';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportSessionCreated';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportEventCompleted';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportTaskDueNotifications';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportEventImported';
Connection validated successfully
Executing (15e678fd-d70a-4bc0-bfbb-1cc201b441e9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231023204415-enhance-email-enum: migrated (0.407s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231025135316-add-to-created-via-enum: migrating =======
Executing (7928d37f-d022-4f6a-9b57-9e612a380882): START TRANSACTION;
Connection validated successfully
Executing (7928d37f-d022-4f6a-9b57-9e612a380882): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231025135316-add-to-created-via-enum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7928d37f-d022-4f6a-9b57-9e612a380882): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'imported';
Executing (7928d37f-d022-4f6a-9b57-9e612a380882): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'activityReport';
Executing (7928d37f-d022-4f6a-9b57-9e612a380882): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'rtr';
Executing (7928d37f-d022-4f6a-9b57-9e612a380882): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'merge';
Executing (7928d37f-d022-4f6a-9b57-9e612a380882): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'admin';
Executing (7928d37f-d022-4f6a-9b57-9e612a380882): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Executing (7928d37f-d022-4f6a-9b57-9e612a380882): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231025135316-add-to-created-via-enum: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231027150000-remove-test-fei-goals: migrating =======
Executing (246b5e98-1393-4f2d-a1f7-5fc4aa7759cd): START TRANSACTION;
Connection validated successfully
Executing (246b5e98-1393-4f2d-a1f7-5fc4aa7759cd): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231027150000-remove-test-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (246b5e98-1393-4f2d-a1f7-5fc4aa7759cd): -- Some test FEI goals were created for region 6 grants that weren't supposed to have them\n\n      -- PROCESS:\n      -- Mark objectives deletedAt\n      -- Mark goals deletedAt\n\n      CREATE TEMP TABLE goals_for_deletion\n      AS\n      SELECT * FROM (\n        VALUES -- sorted and deduped\n        (51072),\n        (51322),\n        (51326),\n        (51327),\n        (51330),\n        (51331)\n      ) AS data(gid)\n      ;\n\n      UPDATE "Objectives"\n      SET "deletedAt" = NOW()\n      FROM goals_for_deletion\n      WHERE "goalId" = gid\n      ;\n\n      UPDATE "Goals"\n      SET "deletedAt" = NOW()\n      FROM goals_for_deletion\n      WHERE id = gid\n      ;
Executing (246b5e98-1393-4f2d-a1f7-5fc4aa7759cd): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231027150000-remove-test-fei-goals: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231027153820-cleanup-target-populations: migrating =======
Executing (5dbb6db7-ea2e-4dfc-92a9-ef18d1147a81): START TRANSACTION;
Connection validated successfully
Executing (5dbb6db7-ea2e-4dfc-92a9-ef18d1147a81): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231027153820-cleanup-target-populations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5dbb6db7-ea2e-4dfc-92a9-ef18d1147a81): -- Update AR 'Preschool (ages 3-5)'.\n        UPDATE "ActivityReports"\n        SET\n            "targetPopulations" = array_replace("targetPopulations", 'Preschool (ages 3-5)', 'Preschool Children (ages 3-5)')\n          WHERE "targetPopulations" @> ARRAY['Preschool (ages 3-5)']::varchar[];\n\n        -- Update AR 'Pregnant Women'.\n        UPDATE "ActivityReports"\n          SET\n          "targetPopulations" = array_replace("targetPopulations", 'Pregnant Women', 'Pregnant Women / Pregnant Persons')\n            WHERE "targetPopulations" @> ARRAY['Pregnant Women']::varchar[];\n\n       -- Cleanup JSON 'Target Populations' for TR (create proper array).\n       WITH "goodTgt" as (\n        SELECT\n          erp.id,\n          ARRAY_AGG(DISTINCT erptp.tp) "targetPopulations"\n        FROM "EventReportPilots" erp\n        CROSS JOIN LATERAL (\n          SELECT\n          UNNEST(\n            CASE\n              WHEN value::text like '%' || chr(92) || chr(92) || 'n' || '%'\n              THEN STRING_TO_ARRAY(trim(value::text,'"'), chr(92) || 'n') -- Char(10) is a new line.\n              ELSE ARRAY[trim(value::TEXT,'"')]::TEXT[]\n            END\n            ) tp\n          FROM jsonb_array_elements(erp.data -> 'targetPopulations') WITH ORDINALITY\n        ) erptp\n        GROUP BY 1\n        ORDER BY 1\n      )\n      UPDATE "EventReportPilots" e\n      SET data = JSONB_SET(\n                  data,\n                  ARRAY['targetPopulations'],\n                  TO_JSONB(gt."targetPopulations")\n                  )\n      FROM "goodTgt" gt\n      WHERE e."id" = gt."id";\n\n      -- Cleanup JSON 'Reasons' for TR (create proper array).\n      WITH "goodTgt" as (\n      SELECT erp.id, ARRAY_AGG(erpr.r) AS good\n      FROM "EventReportPilots" erp\n      CROSS JOIN UNNEST(STRING_TO_ARRAY(TRIM(REPLACE(data ->> 'reasons', '", "', ' '),'["] '), chr(92) || 'n')) erpr(r)\n      GROUP BY 1\n      ORDER BY 1\n      )\n      UPDATE "EventReportPilots" e\n      SET data = JSONB_SET(\n                  data,\n                  ARRAY['reasons'],\n                  TO_JSONB(gt.good)\n                  )\n      FROM "goodTgt" gt\n      WHERE e."id" = gt."id";\n\n       -- Update JSON array property 'targetPopulations' for TR 'Preschool (ages 3-5)'.\n        UPDATE "EventReportPilots"\n            SET data = (\n          SELECT JSONB_SET(\n                  data,\n                  '{targetPopulations}',\n                  (\n            SELECT jsonb_agg(\n              CASE\n              WHEN value::text = '"Preschool (ages 3-5)"' THEN '"Preschool Children (ages 3-5)"'::jsonb\n              ELSE value\n              END\n            )\n            FROM jsonb_array_elements(data->'targetPopulations') AS value\n            )::jsonb\n                  ))\n        WHERE data->'targetPopulations' @> '["Preschool (ages 3-5)"]'::jsonb;\n\n        -- Update JSON array property 'targetPopulations' for TR 'Pregnant Women/Pregnant People'.\n        UPDATE "EventReportPilots"\n            SET data = (\n          SELECT JSONB_SET(\n                  data,\n                  '{targetPopulations}',\n                  (\n            SELECT jsonb_agg(\n              CASE\n              WHEN value::text = '"Pregnant Women/Pregnant People"' OR value::text = '"Pregnant Women"' THEN '"Pregnant Women / Pregnant Persons"'::jsonb\n              ELSE value\n              END\n            )\n            FROM jsonb_array_elements(data->'targetPopulations') AS value\n            )::jsonb\n                  ))\n        WHERE data->'targetPopulations' @> '["Pregnant Women/Pregnant People"]'::jsonb;\n\n        -- Remove all duplicates from JSON array property 'targetPopulations' for TR.\n        UPDATE "EventReportPilots"\n            SET data = (\n          SELECT JSONB_SET(\n                  data,\n                  '{targetPopulations}',\n                  (\n            SELECT jsonb_agg(DISTINCT value)\n            FROM jsonb_array_elements(data->'targetPopulations') AS value\n            )::jsonb\n                  ))\n        WHERE data->'targetPopulations' IS NOT NULL;
Executing (5dbb6db7-ea2e-4dfc-92a9-ef18d1147a81): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231027153820-cleanup-target-populations: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231030150724-sim_score_cache: migrating =======
Executing (2888f1ae-5c90-4253-9721-26f9c0afb5a6): START TRANSACTION;
Connection validated successfully
Executing (2888f1ae-5c90-4253-9721-26f9c0afb5a6): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231030150724-sim_score_cache.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "SimScoreGoalCaches" ("id"   SERIAL , "recipient_id" INTEGER NOT NULL REFERENCES "Recipients" ("id"), "goal1" INTEGER NOT NULL REFERENCES "Goals" ("id"), "goal2" INTEGER NOT NULL REFERENCES "Goals" ("id"), "score" DECIMAL(3,1) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (2888f1ae-5c90-4253-9721-26f9c0afb5a6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231030150724-sim_score_cache: migrated (0.053s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231106162320-add-communication-log-feature-flag: migrating =======
Executing (b4182811-b1d1-4f48-9d6a-0c13c5b788fd): START TRANSACTION;
Connection validated successfully
Executing (b4182811-b1d1-4f48-9d6a-0c13c5b788fd): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231106162320-add-communication-log-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (b4182811-b1d1-4f48-9d6a-0c13c5b788fd): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231106162320-add-communication-log-feature-flag: migrated (0.035s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231106205014-create-communication-log: migrating =======
Executing (8eca9787-bf43-44d2-a755-c21a9dd5bc0d): START TRANSACTION;
Connection validated successfully
Executing (8eca9787-bf43-44d2-a755-c21a9dd5bc0d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231106205014-create-communication-log.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "CommunicationLogs" ("id"   SERIAL , "recipientId" INTEGER NOT NULL REFERENCES "Recipients" ("id"), "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "data" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Connection validated successfully
Executing (8eca9787-bf43-44d2-a755-c21a9dd5bc0d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231106205014-create-communication-log: migrated (0.048s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231109190406-additional-changes-for-merge-goals: migrating =======
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): START TRANSACTION;
Connection validated successfully
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231109190406-additional-changes-for-merge-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'imported';
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'activityReport';
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'rtr';
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'merge';
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'admin';
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): ALTER TABLE "public"."Objectives" ADD COLUMN "mapsToParentObjectiveId" INTEGER REFERENCES "Objectives" ("id");
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "originalObjectiveId" INTEGER REFERENCES "Objectives" ("id");
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): ALTER TABLE "public"."ActivityReportGoals" ADD COLUMN "originalGoalId" INTEGER REFERENCES "Goals" ("id");
Executing (0e44c28a-9573-4c44-a78a-717e9f75f9ac): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231109190406-additional-changes-for-merge-goals: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231115000000-revise-reason: migrating =======
Executing (511cbeee-3963-4125-a833-0452c55fb94d): START TRANSACTION;
Connection validated successfully
Executing (511cbeee-3963-4125-a833-0452c55fb94d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231115000000-revise-reason.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (511cbeee-3963-4125-a833-0452c55fb94d): UPDATE "ActivityReports"\n  SET "reason" = array_replace("reason", 'Planning/Coordination (also TTA Plan Agreement)', 'Planning/Coordination')\n  WHERE "reason" @> ARRAY['Planning/Coordination (also TTA Plan Agreement)']::VARCHAR[];
Executing (511cbeee-3963-4125-a833-0452c55fb94d): UPDATE "EventReportPilots"\n  SET\n    "data" = (\n      SELECT\n        JSONB_SET(\n          "data",\n          '{reasons}',\n          (\n            SELECT\n              jsonb_agg(\n                CASE\n                  WHEN value::text = '"Planning/Coordination (also TTA Plan Agreement)"'\n                    THEN '"Planning/Coordination"'::jsonb\n                  ELSE value\n                END\n              )\n            FROM jsonb_array_elements("data" -> 'reasons') AS value\n          )::jsonb\n        )\n    )\n  WHERE "data" -> 'reasons' @> '["Planning/Coordination (also TTA Plan Agreement)"]'::jsonb;
Executing (511cbeee-3963-4125-a833-0452c55fb94d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231115000000-revise-reason: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231115200114-ActivityReportGoalFieldResponse-incedint: migrating =======
Executing (ea43ad56-c63b-4631-9eb9-00d814aa7ff3): START TRANSACTION;
Connection validated successfully
Executing (ea43ad56-c63b-4631-9eb9-00d814aa7ff3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231115200114-ActivityReportGoalFieldResponse-incedint.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ea43ad56-c63b-4631-9eb9-00d814aa7ff3): WITH\n          incidents AS (\n            SELECT\n              dml_txid,\n              dml_by,\n              dml_type,\n              COUNT(*),\n              MIN(dml_timestamp),\n              MAX(dml_timestamp)\n            FROM "ZALActivityReportGoalFieldResponses" zargfr\n            GROUP BY 1,2,3\n            HAVING COUNT(*) > 400\n            ORDER BY 5 DESC\n          ),\n          responses AS (\n            SELECT\n              arg."activityReportId",\n              g.id "goalId",\n              argfr.id "activityReportGoalFieldResponseId",\n              argfr.response current_response,\n              gfr.response goal_response,\n              (\n                SELECT ARRAY_AGG(field_responses.response)\n                FROM jsonb_array_elements_text(((ARRAY_AGG(zargfr.new_row_data ->> 'response' order by zargfr.id DESC))[1])::JSONB) field_responses(response)\n              ) last_valid_response\n            FROM "ActivityReportGoalFieldResponses" argfr\n            JOIN "ActivityReportGoals" arg\n            ON argfr."activityReportGoalId" = arg.id\n            JOIN "ActivityReports" a\n            ON arg."activityReportId" = a.id\n            JOIN "Goals" g\n            ON arg."goalId" = g.id\n            JOIN "GoalFieldResponses" gfr\n            ON g.id = gfr."goalId"\n            JOIN "ZALActivityReportGoalFieldResponses" zargfr\n            ON argfr.id = zargfr.data_id\n            LEFT JOIN incidents i\n            ON zargfr.dml_txid = i.dml_txid\n            AND zargfr.dml_type = i.dml_type\n            where argfr.response != gfr.response\n            AND i.count IS NULL\n            GROUP BY 1,2,3,4,5\n          )\n          UPDATE "ActivityReportGoalFieldResponses" argfr\n          SET\n            response = COALESCE(r.last_valid_response, r.goal_response, ARRAY[]::text[])\n          FROM responses r\n          WHERE argfr."id" = r."activityReportGoalFieldResponseId"\n          AND r.current_response != COALESCE(r.last_valid_response, ARRAY[]::text[]);
Executing (ea43ad56-c63b-4631-9eb9-00d814aa7ff3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231115200114-ActivityReportGoalFieldResponse-incedint: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231117144817-add-communication-log-file: migrating =======
Executing (67334a1b-8f34-44f4-baf3-078f06b368d5): START TRANSACTION;
Connection validated successfully
Executing (67334a1b-8f34-44f4-baf3-078f06b368d5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231117144817-add-communication-log-file.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (67334a1b-8f34-44f4-baf3-078f06b368d5): CREATE TABLE IF NOT EXISTS "CommunicationLogFiles" ("id"   SERIAL , "communicationLogId" INTEGER NOT NULL REFERENCES "CommunicationLogs" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (67334a1b-8f34-44f4-baf3-078f06b368d5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231117144817-add-communication-log-file: migrated (0.039s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231117192507-restructure-national-centers: migrating =======
Executing (6f72f6a4-444a-4f2b-ab3f-32b4429fa5d6): START TRANSACTION;
Connection validated successfully
Executing (6f72f6a4-444a-4f2b-ab3f-32b4429fa5d6): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231117192507-restructure-national-centers.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6f72f6a4-444a-4f2b-ab3f-32b4429fa5d6): -- Change national centers id to type INT.\n      ALTER TABLE "NationalCenters"\n      ALTER COLUMN "id" TYPE INT;\n\n      -- Delete all data from table "NationalCenters".\n        DELETE FROM "NationalCenters";\n\n      -- Insert default national centers 'DTL','HBHS', 'PFCE', 'PFMO' into table "NationalCenters".\n      INSERT INTO "NationalCenters" ("id", "name", "createdAt", "updatedAt")\n      VALUES\n        (1, 'DTL', NOW(), NOW()),\n        (2, 'HBHS', NOW(), NOW()),\n        (3, 'PFCE', NOW(), NOW()),\n        (4, 'PFMO', NOW(), NOW());
Executing (6f72f6a4-444a-4f2b-ab3f-32b4429fa5d6): CREATE TABLE IF NOT EXISTS "NationalCenterUsers" ("id"   SERIAL , "nationalCenterId" INTEGER NOT NULL REFERENCES "NationalCenters" ("id"), "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (6f72f6a4-444a-4f2b-ab3f-32b4429fa5d6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231117192507-restructure-national-centers: migrated (0.058s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231121151442-add-feature-flag-monitoring: migrating =======
Executing (426097df-9c3d-4622-b8c5-feaf11102bc7): START TRANSACTION;
Connection validated successfully
Executing (426097df-9c3d-4622-b8c5-feaf11102bc7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231121151442-add-feature-flag-monitoring.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (426097df-9c3d-4622-b8c5-feaf11102bc7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231121151442-add-feature-flag-monitoring: migrated (0.044s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231123111823-create-session-supporting-attachments: migrating =======
Executing (f128d173-6cae-4c2d-ad33-e5a801b6b960): START TRANSACTION;
Connection validated successfully
Executing (f128d173-6cae-4c2d-ad33-e5a801b6b960): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231123111823-create-session-supporting-attachments.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f128d173-6cae-4c2d-ad33-e5a801b6b960): CREATE TABLE IF NOT EXISTS "SessionReportPilotSupportingAttachments" ("id"   SERIAL , "sessionReportPilotId" INTEGER NOT NULL REFERENCES "SessionReportPilots" ("id"), "fileId" INTEGER NOT NULL REFERENCES "Files" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (f128d173-6cae-4c2d-ad33-e5a801b6b960): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231123111823-create-session-supporting-attachments: migrated (0.042s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231206210453-update-flags-for-user: migrating =======
Executing (d6d993aa-37a6-4eda-91f9-e541a47ab865): START TRANSACTION;
Connection validated successfully
Executing (d6d993aa-37a6-4eda-91f9-e541a47ab865): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231206210453-update-flags-for-user.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d6d993aa-37a6-4eda-91f9-e541a47ab865): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'training_reports'\n          );
Executing (d6d993aa-37a6-4eda-91f9-e541a47ab865): UPDATE "Users" SET "flags" = array_remove(flags, 'training_reports')\n        WHERE 'training_reports' = ANY(flags);
Executing (d6d993aa-37a6-4eda-91f9-e541a47ab865): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'resources_dashboard',\n'rttapa_form',\n'anv_statistics',\n'regional_goal_dashboard',\n'goal_source',\n'merge_goals',\n'communication_log',\n'monitoring'\n  );
Executing (d6d993aa-37a6-4eda-91f9-e541a47ab865): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (d6d993aa-37a6-4eda-91f9-e541a47ab865): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231206210453-update-flags-for-user: migrated (0.041s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231207000000-revise-reason-again: migrating =======
Executing (833c2386-0677-4368-a6d1-d135a6581d19): START TRANSACTION;
Connection validated successfully
Executing (833c2386-0677-4368-a6d1-d135a6581d19): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231207000000-revise-reason-again.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (833c2386-0677-4368-a6d1-d135a6581d19): UPDATE "ActivityReports"\n  SET "reason" = array_replace("reason", 'Planning/Coordination (also TTA Plan Agreement)', 'Planning/Coordination')\n  WHERE "reason" @> ARRAY['Planning/Coordination (also TTA Plan Agreement)']::VARCHAR[];
Executing (833c2386-0677-4368-a6d1-d135a6581d19): UPDATE "EventReportPilots"\n  SET\n    "data" = (\n      SELECT\n        JSONB_SET(\n          "data",\n          '{reasons}',\n          (\n            SELECT\n              jsonb_agg(\n                CASE\n                  WHEN value::text = '"Planning/Coordination (also TTA Plan Agreement)"'\n                    THEN '"Planning/Coordination"'::jsonb\n                  ELSE value\n                END\n              )\n            FROM jsonb_array_elements("data" -> 'reasons') AS value\n          )::jsonb\n        )\n    )\n  WHERE "data" -> 'reasons' @> '["Planning/Coordination (also TTA Plan Agreement)"]'::jsonb;
Executing (833c2386-0677-4368-a6d1-d135a6581d19): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231207000000-revise-reason-again: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231212160911-collect-close-reasons-objective: migrating =======
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): START TRANSACTION;
Connection validated successfully
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231212160911-collect-close-reasons-objective.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Objectives' AND c.table_schema = 'public'
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TABLE "Objectives" RENAME COLUMN "suspendReason" TO "closeSuspendReason";
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Duplicate goal';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Key staff turnover / vacancies';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Recipient is not responding';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Recipient request';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'Regional Office request';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_Objectives_suspendReason" ADD VALUE IF NOT EXISTS 'TTA complete';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Objectives' AND c.table_schema = 'public'
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TABLE "Objectives" RENAME COLUMN "suspendContext" TO "closeSuspendContext";
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReportObjectives' AND c.table_schema = 'public'
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TABLE "ActivityReportObjectives" RENAME COLUMN "suspendReason" TO "closeSuspendReason";
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Duplicate goal';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Key staff turnover / vacancies';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Recipient is not responding';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Recipient request';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'Regional Office request';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TYPE "enum_ActivityReportObjectives_suspendReason" ADD VALUE IF NOT EXISTS 'TTA complete';
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ActivityReportObjectives' AND c.table_schema = 'public'
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): ALTER TABLE "ActivityReportObjectives" RENAME COLUMN "suspendContext" TO "closeSuspendContext";
Executing (8d4cc81a-a3b5-4a84-8912-af888db098f3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231212160911-collect-close-reasons-objective: migrated (0.080s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231213210654-goalusers: migrating =======
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): START TRANSACTION;
Connection validated successfully
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231213210654-goalusers.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): CREATE TABLE IF NOT EXISTS "ValidFor" ("id"   SERIAL , "name" TEXT NOT NULL, "isReport" BOOLEAN NOT NULL DEFAULT false, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, "mapsTo" INTEGER DEFAULT NULL REFERENCES "ValidFor" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id"));
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): ALTER TABLE "ValidFor"\n          ADD CONSTRAINT "ValidFor_option_unique" UNIQUE ("name");
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): INSERT INTO "ValidFor"\n        ("name", "isReport", "createdAt", "updatedAt")\n        VALUES\n        (\n          'Goals',\n          false,\n          current_timestamp,\n          current_timestamp\n        );
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): CREATE TABLE IF NOT EXISTS "CollaboratorTypes" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "validForId" INTEGER NOT NULL REFERENCES "ValidFor" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "propagateOnMerge" BOOLEAN NOT NULL DEFAULT true, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, "mapsTo" INTEGER DEFAULT NULL REFERENCES "CollaboratorTypes" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id"));
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): ALTER TABLE "CollaboratorTypes"\n          ADD CONSTRAINT "CollaboratorTypes_name_validForId_unique" UNIQUE ("name", "validForId");
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): INSERT INTO "CollaboratorTypes"\n        ("name", "validForId", "propagateOnMerge", "createdAt", "updatedAt")\n        SELECT\n          t.name,\n          vf.id,\n          t.name NOT LIKE 'Merge%',\n          current_timestamp,\n          current_timestamp\n        FROM "ValidFor" vf\n        CROSS JOIN UNNEST(ARRAY[\n          'Creator',\n'Editor',\n'Linker',\n'Utilizer',\n'Merge-Creator',\n'Merge-Deprecator'\n        ]) t(name)\n        WHERE vf.name = 'Goals'\n       ;
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): CREATE TABLE IF NOT EXISTS "GoalCollaborators" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "collaboratorTypeId" INTEGER NOT NULL REFERENCES "CollaboratorTypes" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "linkBack" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, PRIMARY KEY ("id"));
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): CREATE UNIQUE INDEX "GoalCollaborators_goalId_userId_collaboratorTypeId_idx"\n          ON "GoalCollaborators"\n          ("goalId", "userId", "collaboratorTypeId");
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): ALTER TABLE "GoalCollaborators"\n          ADD CONSTRAINT "GoalCollaborators_goalId_userId_collaboratorTypeId_unique"\n          UNIQUE USING INDEX "GoalCollaborators_goalId_userId_collaboratorTypeId_idx";
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          data_id "goalId",\n          dml_as "userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALGoals" zg\n        JOIN "Goals" g\n        ON zg.data_id = g.id\n        LEFT JOIN "Goals" g2\n        ON g.id = g2."mapsToParentGoalId"\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'INSERT'\n        AND new_row_data -> 'name' IS NOT NULL\n        AND g2.id IS NULL\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Creator'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          g.id "goalId",\n          (ARRAY_AGG(ar."userId" ORDER BY ar.id ASC))[1] "userId",\n          MIN(ar."createdAt") "createdAt",\n          MIN(ar."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "Goals" g\n        LEFT JOIN "ZALGoals" zg\n        ON g.id = zg.data_id\n        LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        WHERE (zg.id IS NULL\n        OR (zg.dml_as IN (-1, 0)\n          AND zg.dml_type = 'INSERT'))\n        AND g."createdVia" IN ('activityReport')\n        GROUP BY 1\n        HAVING (ARRAY_AGG(ar."userId" ORDER BY ar.id ASC))[1] IS NOT NULL\n        AND MIN(ar."createdAt") IS NOT NULL\n        ORDER BY 1\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Creator'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          data_id "goalId",\n          dml_as "userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALGoals" zg\n        JOIN "Goals" g\n        ON zg.data_id = g.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'UPDATE'\n        AND new_row_data -> 'name' IS NOT NULL\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Editor'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n       SELECT\n        "goalId",\n        "userId",\n        MIN("createdAt") "createdAt",\n        MAX("updatedAt") "updatedAt",\n        jsonb_build_object('activityReportIds', ARRAY_AGG(DISTINCT ar."activityReportId")) "linkBack"\n      FROM (\n        SELECT\n        arg."goalId" "goalId",\n        zarg.dml_as "userId",\n        MIN(arg."createdAt") "createdAt",\n        MAX(arg."createdAt") "updatedAt",\n          ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n        FROM "ZALActivityReportGoals" zarg\n        LEFT JOIN "ZALActivityReportGoals" zargd\n        ON zarg.data_id = zargd.data_id\n        AND zarg.id < zargd.id\n        AND zarg.dml_type = 'INSERT'\n        AND zargd.dml_type = 'DELETE'\n        JOIN "ActivityReportGoals" arg\n        ON zarg.data_id = arg.id\n        WHERE zargd.id IS NULL\n        AND zarg.dml_type = 'INSERT'\n        AND zarg.dml_as NOT IN (-1, 0)\n        GROUP BY 1,2\n        UNION\n        SELECT\n        arg."goalId",\n        ar."userId",\n        MIN(arg."createdAt") "createdAt",\n        MAX(arg."createdAt") "updatedAt",\n          ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n        FROM "ActivityReportGoals" arg\n        JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        LEFT JOIN "ZALActivityReportGoals" zarg\n        ON arg.id = zarg.data_id\n        AND zarg.dml_type = 'INSERT'\n        AND zarg.dml_as NOT IN (-1, 0)\n        WHERE zarg.id IS NULL\n        GROUP BY 1,2\n      ) x\n      CROSS JOIN UNNEST("activityReportIds") ar("activityReportId")\n      GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Linker'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          "goalId",\n          "userId",\n          MIN("createdAt") "createdAt",\n          MAX("updatedAt") "updatedAt",\n            jsonb_build_object('activityReportIds', ARRAY_AGG(DISTINCT ar."activityReportId")) "linkBack"\n        FROM (\n          SELECT\n          arg."goalId",\n          arc."userId",\n          MIN(ar."approvedAt") "createdAt",\n          MAX(ar."approvedAt") "updatedAt",\n              ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n          FROM "ActivityReports" ar\n          JOIN "ActivityReportGoals" arg\n          ON arg."activityReportId" = ar.id\n          JOIN "ActivityReportCollaborators" arc\n          ON arc."activityReportId" = ar.id\n          WHERE ar."approvedAt" IS NOT NULL\n          GROUP BY 1,2\n          UNION\n          SELECT\n          arg."goalId",\n          ar."userId",\n          MIN(ar."approvedAt") "createdAt",\n          MAX(ar."approvedAt") "updatedAt",\n              ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n          FROM "ActivityReports" ar\n          JOIN "ActivityReportGoals" arg\n          ON arg."activityReportId" = ar.id\n          LEFT JOIN "ActivityReportCollaborators" arc\n          ON arc."activityReportId" = ar.id\n          AND ar."userId" = arc."userId"\n          WHERE ar."approvedAt" IS NOT NULL\n          AND arc.id IS NULL\n          GROUP BY 1,2\n        ) x\n        CROSS JOIN UNNEST("activityReportIds") ar("activityReportId")\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Utilizer'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        SELECT\n          data_id "goalId",\n          dml_as "userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALGoals" zg\n        JOIN "Goals" g\n        ON zg.data_id = g.id\n        JOIN "Goals" g2\n        ON g.id = g2."mapsToParentGoalId"\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'INSERT'\n        AND new_row_data -> 'name' IS NOT NULL\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Merge-Creator'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): DROP TABLE IF EXISTS needed_collaborators;\n      CREATE TEMP TABLE needed_collaborators\n      AS\n      WITH source_data AS (\n        \n        select\n          data_id "goalId",\n          dml_as "userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALGoals" zg\n        JOIN "Goals" g\n        ON zg.data_id = g.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'UPDATE'\n        AND new_row_data -> 'name' IS NOT NULL\n        and new_row_data ->> 'mapsToParentGoalId' IS NOT null\n        GROUP BY 1,2\n        \n      ),\n      collaborator_type AS (\n        SELECT\n          ct.id "collaboratorTypeId"\n        FROM "CollaboratorTypes" ct\n        JOIN "ValidFor" vf\n        ON ct."validForId" = vf.id\n        WHERE ct.name = 'Merge-Deprecator'\n        AND vf.name = 'Goals'\n      )\n      SELECT\n        sd."goalId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_create;\n      CREATE TEMP TABLE tmp_collaborators_to_create\n      AS\n      SELECT\n        nc."goalId",\n        nc."userId",\n        nc."collaboratorTypeId",\n        nc."linkBack",\n        nc."createdAt",\n        nc."updatedAt"\n      FROM needed_collaborators nc\n      LEFT JOIN "GoalCollaborators" gc\n      ON gc."goalId" = nc."goalId"\n      AND gc."userId" = nc."userId"\n      AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      WHERE gc.id IS NULL\n      ;\n\n      DROP TABLE IF EXISTS tmp_collaborators_to_update;\n      CREATE TEMP TABLE tmp_collaborators_to_update\n      AS\n      SELECT\n        gc.id "id",\n        LEAST(gc."createdAt", nc."createdAt") "createdAt",\n        GREATEST(gc."updatedAt", nc."updatedAt") "updatedAt",\n        (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT gc."linkBack"\n              UNION\n              SELECT nc."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        ) "linkBack"\n      FROM "GoalCollaborators" gc\n      JOIN needed_collaborators nc\n        ON gc."goalId" = nc."goalId"\n        AND gc."userId" = nc."userId"\n        AND gc."collaboratorTypeId" = nc."collaboratorTypeId"\n      ;\n\n      INSERT INTO "GoalCollaborators"\n      (\n        "goalId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT \n        ctc."goalId",\n        ctc."userId",\n        ctc."collaboratorTypeId",\n        ctc."linkBack",\n        ctc."createdAt",\n        ctc."updatedAt"\n      FROM tmp_collaborators_to_create ctc;\n\n      UPDATE "GoalCollaborators" gc\n      SET\n        "createdAt" = ctu."createdAt",\n        "updatedAt" = ctu."updatedAt",\n        "linkBack" = ctu."linkBack"\n      FROM tmp_collaborators_to_update ctu\n      WHERE gc.id = ctu.id;
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): WITH\n          clusters as (\n            select\n              g."mapsToParentGoalId" "goalId",\n              gc."userId",\n              gc."collaboratorTypeId",\n              gc."linkBack",\n              gc."createdAt",\n              gc."updatedAt",\n              gc."goalId" "originalGoalId",\n              (g.name = pg.name) "isChosen"\n            FROM "GoalCollaborators" gc\n            JOIN "CollaboratorTypes" ct\n            ON gc."collaboratorTypeId" = ct.id\n            JOIN "Goals" g\n            ON gc."goalId" = g.id\n            JOIN "Goals" pg\n            ON g."mapsToParentGoalId" = pg.id\n            WHERE g."mapsToParentGoalId" IS NOT NULL\n            AND ct.name NOT IN ('Merge-Creator', 'Merge-Deprecator')\n          ),\n          unrolled as (\n            SELECT\n              c."goalId",\n              c."userId",\n              c."collaboratorTypeId",\n              je.key,\n              JSONB_AGG(DISTINCT v.value ORDER BY v.value) "values",\n              MIN(c."createdAt") "createdAt",\n              MAX(c."updatedAt") "updatedAt"\n            FROM clusters c\n            CROSS JOIN jsonb_each(c."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) v(value)\n            where c."linkBack" is not null\n            group by 1,2,3,4\n          ),\n          rerolled as (\n            SELECT\n              u."goalId",\n              u."userId",\n              u."collaboratorTypeId",\n              JSONB_OBJECT_AGG(u.key,u.values) "linkBack",\n              MIN(u."createdAt") "createdAt",\n              MAX(u."updatedAt") "updatedAt"\n            FROM unrolled u\n            group by 1,2,3\n          ),\n          rolled as (\n            SELECT\n              c."goalId",\n              c."userId",\n              ct2.id "collaboratorTypeId",\n              null::JSONB "linkBack",\n              MIN(c."createdAt") "createdAt",\n              MAX(c."updatedAt") "updatedAt"\n            FROM clusters c\n            JOIN "CollaboratorTypes" ct\n            ON c."collaboratorTypeId" = ct.id\n            JOIN "CollaboratorTypes" ct2\n            ON ct."validForId" = ct2."validForId"\n            AND ((c."isChosen" IS NOT TRUE\n              AND ct."name" = 'Creator'\n              AND ct2."name" = 'Editor')\n              OR ct.id = ct2.id)\n            WHERE c."linkBack" IS null\n            GROUP BY 1,2,3\n          ),\n          mapped_collaborators AS (\n            SELECT\n              *\n            FROM rerolled\n            UNION\n            SELECT\n              *\n            FROM rolled\n          )\n          INSERT INTO "GoalCollaborators"\n          (\n            "goalId",\n            "userId",\n            "collaboratorTypeId",\n            "linkBack",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            "goalId",\n            "userId",\n            "collaboratorTypeId",\n            "linkBack",\n            "createdAt",\n            "updatedAt"\n          FROM mapped_collaborators;
Executing (024893e2-52d6-49d0-80e4-118b1214ea21): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231213210654-goalusers: migrated (0.257s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231213210654-objectiveusers: migrating =======
Executing (8759904e-27b2-405e-b796-86388e3fe629): START TRANSACTION;
Connection validated successfully
Executing (8759904e-27b2-405e-b796-86388e3fe629): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231213210654-objectiveusers.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8759904e-27b2-405e-b796-86388e3fe629): INSERT INTO "ValidFor"\n        ("name", "isReport", "createdAt", "updatedAt")\n        VALUES\n        (\n          'Objectives',\n          false,\n          current_timestamp,\n          current_timestamp\n        );
Executing (8759904e-27b2-405e-b796-86388e3fe629): INSERT INTO "CollaboratorTypes"\n        ("name", "validForId", "propagateOnMerge", "createdAt", "updatedAt")\n        SELECT\n          t.name,\n          vf.id,\n          t.name NOT LIKE 'Merge%',\n          current_timestamp,\n          current_timestamp\n        FROM "ValidFor" vf\n        CROSS JOIN UNNEST(ARRAY[\n          'Creator',\n'Editor',\n'Linker',\n'Utilizer',\n'Merge-Creator',\n'Merge-Deprecator'\n        ]) t(name)\n        WHERE vf.name = 'Objectives'\n       ;
Executing (8759904e-27b2-405e-b796-86388e3fe629): CREATE TABLE IF NOT EXISTS "ObjectiveCollaborators" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "collaboratorTypeId" INTEGER NOT NULL REFERENCES "CollaboratorTypes" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "linkBack" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, PRIMARY KEY ("id"));
Executing (8759904e-27b2-405e-b796-86388e3fe629): ALTER TABLE "ObjectiveCollaborators"\n          ADD CONSTRAINT "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_unique" UNIQUE ("objectiveId", "userId", "collaboratorTypeId");
Executing (8759904e-27b2-405e-b796-86388e3fe629): WITH\n        source_data AS (\n          \n        SELECT\n          data_id "objectiveId",\n          dml_as "userId",\n          MIN(o."createdAt") "createdAt",\n          MIN(o."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALObjectives" zo\n        LEFT JOIN "Users" u\n        ON zo.dml_as = u.id\n        JOIN "Objectives" o\n        ON zo.data_id = o.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'INSERT'\n        AND new_row_data -> 'title' IS NOT NULL\n        GROUP BY 1,2\n        ORDER BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Creator'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (8759904e-27b2-405e-b796-86388e3fe629): WITH\n        source_data AS (\n          \n        SELECT\n          o.id "objectiveId",\n          (ARRAY_AGG(ar."userId" ORDER BY ar.id ASC))[1] "userId",\n          MIN(ar."createdAt") "createdAt",\n          MIN(ar."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "Objectives" o\n        LEFT JOIN "ZALObjectives" zo\n        ON o.id = zo.data_id\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        WHERE (zo.id IS NULL\n        OR (zo.dml_as IN (-1, 0)\n          AND zo.dml_type = 'INSERT'))\n        AND o."createdVia" IN ('activityReport')\n        GROUP BY 1\n        HAVING (ARRAY_AGG(ar."userId" ORDER BY ar.id ASC))[1] IS NOT NULL\n        AND MIN(ar."createdAt") IS NOT NULL\n        ORDER BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Creator'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (8759904e-27b2-405e-b796-86388e3fe629): WITH\n        source_data AS (\n          \n        SELECT\n          data_id "objectiveId",\n          dml_as "userId",\n          MIN(o."createdAt") "createdAt",\n          MIN(o."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALObjectives" zo\n        LEFT JOIN "Users" u\n        ON zo.dml_as = u.id\n        JOIN "Objectives" o\n        ON zo.data_id = o.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'UPDATE'\n        AND new_row_data -> 'title' IS NOT NULL\n        GROUP BY 1,2\n        ORDER BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Editor'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (8759904e-27b2-405e-b796-86388e3fe629): WITH\n        source_data AS (\n          \n       SELECT\n        "objectiveId",\n        "userId",\n        MIN("createdAt") "createdAt",\n        MAX("updatedAt") "updatedAt",\n        jsonb_build_object('activityReportIds', ARRAY_AGG(DISTINCT ar."activityReportId")) "linkBack"\n      FROM (\n        SELECT\n        arg."objectiveId" "objectiveId",\n        zarg.dml_as "userId",\n        MIN(arg."createdAt") "createdAt",\n        MAX(arg."createdAt") "updatedAt",\n          ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n        FROM "ZALActivityReportObjectives" zarg\n        LEFT JOIN "ZALActivityReportObjectives" zargd\n        ON zarg.data_id = zargd.data_id\n        AND zarg.id < zargd.id\n        AND zarg.dml_type = 'INSERT'\n        AND zargd.dml_type = 'DELETE'\n        JOIN "ActivityReportObjectives" arg\n        ON zarg.data_id = arg.id\n        WHERE zargd.id IS NULL\n        AND zarg.dml_type = 'INSERT'\n        AND zarg.dml_as NOT IN (-1, 0)\n        GROUP BY 1,2\n        UNION\n        SELECT\n        arg."objectiveId",\n        ar."userId",\n        MIN(arg."createdAt") "createdAt",\n        MAX(arg."createdAt") "updatedAt",\n          ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n        FROM "ActivityReportObjectives" arg\n        JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        LEFT JOIN "ZALActivityReportObjectives" zarg\n        ON arg.id = zarg.data_id\n        AND zarg.dml_type = 'INSERT'\n        WHERE zarg.id IS NULL\n        GROUP BY 1,2\n      ) x\n      CROSS JOIN UNNEST("activityReportIds") ar("activityReportId")\n      GROUP BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Linker'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (8759904e-27b2-405e-b796-86388e3fe629): WITH\n        source_data AS (\n          \n        SELECT\n          "objectiveId",\n          "userId",\n          MIN("createdAt") "createdAt",\n          MAX("updatedAt") "updatedAt",\n            jsonb_build_object('activityReportIds', ARRAY_AGG(DISTINCT ar."activityReportId")) "linkBack"\n        FROM (\n          SELECT\n          arg."objectiveId",\n          arc."userId",\n          MIN(ar."approvedAt") "createdAt",\n          MAX(ar."approvedAt") "updatedAt",\n              ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n          FROM "ActivityReports" ar\n          JOIN "ActivityReportObjectives" arg\n          ON arg."activityReportId" = ar.id\n          JOIN "ActivityReportCollaborators" arc\n          ON arc."activityReportId" = ar.id\n          WHERE ar."approvedAt" IS NOT NULL\n          GROUP BY 1,2\n          UNION\n          SELECT\n          arg."objectiveId",\n          ar."userId",\n          MIN(ar."approvedAt") "createdAt",\n          MAX(ar."approvedAt") "updatedAt",\n              ARRAY_AGG(DISTINCT arg."activityReportId") "activityReportIds"\n          FROM "ActivityReports" ar\n          JOIN "ActivityReportObjectives" arg\n          ON arg."activityReportId" = ar.id\n          LEFT JOIN "ActivityReportCollaborators" arc\n          ON arc."activityReportId" = ar.id\n          AND ar."userId" = arc."userId"\n          WHERE ar."approvedAt" IS NOT NULL\n          AND arc.id IS NULL\n          GROUP BY 1,2\n        ) x\n        CROSS JOIN UNNEST("activityReportIds") ar("activityReportId")\n        GROUP BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Utilizer'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (8759904e-27b2-405e-b796-86388e3fe629): WITH\n        source_data AS (\n          \n        select\n          data_id "objectiveId",\n          dml_as "userId",\n          MIN(o."createdAt") "createdAt",\n          MIN(o."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALObjectives" zo\n        JOIN "Objectives" o\n        ON zo.data_id = o.id\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'UPDATE'\n        AND new_row_data -> 'title' IS NOT NULL\n        and new_row_data ->> 'mapsToParentObjectiveId' IS NOT null\n        GROUP BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Merge-Deprecator'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (8759904e-27b2-405e-b796-86388e3fe629): WITH\n        source_data AS (\n          \n        SELECT\n          data_id "objectiveId",\n          dml_as "userId",\n          MIN(o."createdAt") "createdAt",\n          MIN(o."createdAt") "updatedAt",\n          null::JSONB "linkBack"\n        FROM "ZALObjectives" zo\n        JOIN "Objectives" o\n        ON zo.data_id = o.id\n        JOIN "Objectives" o2\n        ON o.id = o2."mapsToParentObjectiveId"\n        WHERE dml_as NOT IN (-1, 0) -- default and migration files\n        AND dml_type = 'INSERT'\n        AND new_row_data -> 'title' IS NOT NULL\n        GROUP BY 1,2\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Merge-Creator'\n          AND vf.name = 'Objectives'\n        )\n      INSERT INTO "ObjectiveCollaborators"\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."objectiveId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "objectiveCollaboratorId",\n        "objectiveId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (8759904e-27b2-405e-b796-86388e3fe629): WITH\n          clusters as (\n            select\n              o."mapsToParentObjectiveId" "objectiveId",\n              oc."userId",\n              oc."collaboratorTypeId",\n              oc."linkBack",\n              oc."createdAt",\n              oc."updatedAt",\n              oc."objectiveId" "originalObjectiveId",\n              (o.title = po.title) "isChosen"\n            FROM "ObjectiveCollaborators" oc\n            JOIN "CollaboratorTypes" ct\n            ON oc."collaboratorTypeId" = ct.id\n            JOIN "Objectives" o\n            ON oc."objectiveId" = o.id\n            JOIN "Objectives" po\n            ON o."mapsToParentObjectiveId" = po.id\n            WHERE o."mapsToParentObjectiveId" IS NOT NULL\n            AND ct.name NOT IN ('Merge-Creator', 'Merge-Deprecator')\n          ),\n          unrolled as (\n            SELECT\n              c."objectiveId",\n              c."userId",\n              c."collaboratorTypeId",\n              je.key,\n              JSONB_AGG(DISTINCT v.value ORDER BY v.value) "values",\n              MIN(c."createdAt") "createdAt",\n              MAX(c."updatedAt") "updatedAt"\n            FROM clusters c\n            CROSS JOIN jsonb_each(c."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) v(value)\n            where c."linkBack" is not null\n            group by 1,2,3,4\n          ),\n          rerolled as (\n            SELECT\n              u."objectiveId",\n              u."userId",\n              u."collaboratorTypeId",\n              JSONB_OBJECT_AGG(u.key,u.values) "linkBack",\n              MIN(u."createdAt") "createdAt",\n              MAX(u."updatedAt") "updatedAt"\n            FROM unrolled u\n            group by 1,2,3\n          ),\n          rolled as (\n            SELECT\n              c."objectiveId",\n              c."userId",\n              ct2.id "collaboratorTypeId",\n              null::JSONB "linkBack",\n              MIN(c."createdAt") "createdAt",\n              MAX(c."updatedAt") "updatedAt"\n            FROM clusters c\n            JOIN "CollaboratorTypes" ct\n            ON c."collaboratorTypeId" = ct.id\n            JOIN "CollaboratorTypes" ct2\n            ON ct."validForId" = ct2."validForId"\n            AND ((c."isChosen" IS NOT TRUE\n              AND ct."name" = 'Creator'\n              AND ct2."name" = 'Editor')\n              OR ct.id = ct2.id)\n            WHERE c."linkBack" IS null\n            GROUP BY 1,2,3\n          ),\n          mapped_collaborators AS (\n            SELECT\n              *\n            FROM rerolled\n            UNION\n            SELECT\n              *\n            FROM rolled\n          )\n          INSERT INTO "ObjectiveCollaborators"\n          (\n            "objectiveId",\n            "userId",\n            "collaboratorTypeId",\n            "linkBack",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            "objectiveId",\n            "userId",\n            "collaboratorTypeId",\n            "linkBack",\n            "createdAt",\n            "updatedAt"\n          FROM mapped_collaborators\n          ON CONFLICT\n          (\n          "objectiveId",\n          "userId",\n          "collaboratorTypeId"\n          )\n          DO UPDATE SET\n          "updatedAt" = EXCLUDED."updatedAt",\n          "linkBack" = (\n            SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n            FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "ObjectiveCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n            ) key_values\n          )\n          RETURNING\n          "id" "objectiveCollaboratorId",\n          "objectiveId",\n          "userId",\n          "collaboratorTypeId",\n          "linkBack",\n          "createdAt",\n          "updatedAt";
Executing (8759904e-27b2-405e-b796-86388e3fe629): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231213210654-objectiveusers: migrated (0.107s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231214133506-resource-additional-columns: migrating =======
Executing (3ad052e6-02b7-4e86-a9b5-68a187ea16a5): START TRANSACTION;
Connection validated successfully
Executing (3ad052e6-02b7-4e86-a9b5-68a187ea16a5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231214133506-resource-additional-columns.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3ad052e6-02b7-4e86-a9b5-68a187ea16a5): ALTER TABLE "public"."Resources" ADD COLUMN "mimeType" VARCHAR(255);
Executing (3ad052e6-02b7-4e86-a9b5-68a187ea16a5): ALTER TABLE "public"."Resources" ADD COLUMN "lastStatusCode" INTEGER;
Executing (3ad052e6-02b7-4e86-a9b5-68a187ea16a5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231214133506-resource-additional-columns: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231214140110-add-unavailable-root-cause: migrating =======
Executing (f10f54ae-1379-4d4d-826d-c91e0ea80845): START TRANSACTION;
Connection validated successfully
Executing (f10f54ae-1379-4d4d-826d-c91e0ea80845): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231214140110-add-unavailable-root-cause.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f10f54ae-1379-4d4d-826d-c91e0ea80845): UPDATE "GoalTemplateFieldPrompts"\n        SET "options" = '{"Community Partnerships",Facilities,"Family Circumstances","Other ECE Care Options", Unavailable, Workforce}'\n        WHERE "title" = 'FEI root cause';
Executing (f10f54ae-1379-4d4d-826d-c91e0ea80845): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231214140110-add-unavailable-root-cause: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231218150056-remove-communication-log-feature-flag: migrating =======
Executing (d1592af3-17fc-45bd-aa9d-269c1e84e151): START TRANSACTION;
Connection validated successfully
Executing (d1592af3-17fc-45bd-aa9d-269c1e84e151): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231218150056-remove-communication-log-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d1592af3-17fc-45bd-aa9d-269c1e84e151): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'communication_log'\n          );
Executing (d1592af3-17fc-45bd-aa9d-269c1e84e151): UPDATE "Users" SET "flags" = array_remove(flags, 'communication_log')\n        WHERE 'communication_log' = ANY(flags);
Executing (d1592af3-17fc-45bd-aa9d-269c1e84e151): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'resources_dashboard',\n'rttapa_form',\n'anv_statistics',\n'regional_goal_dashboard',\n'goal_source',\n'merge_goals',\n'monitoring'\n  );
Executing (d1592af3-17fc-45bd-aa9d-269c1e84e151): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (d1592af3-17fc-45bd-aa9d-269c1e84e151): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231218150056-remove-communication-log-feature-flag: migrated (0.052s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20231222192454-add-closed-goal-merge-override-flag: migrating =======
Executing (dc63469f-ca2e-4971-bdb8-004386bcf6a4): START TRANSACTION;
Connection validated successfully
Executing (dc63469f-ca2e-4971-bdb8-004386bcf6a4): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20231222192454-add-closed-goal-merge-override-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (dc63469f-ca2e-4971-bdb8-004386bcf6a4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20231222192454-add-closed-goal-merge-override-flag: migrated (0.054s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240104110924-remove-unwanted-aro-topics: migrating =======
Executing (69326b5a-343b-4a55-83a2-04184232c55f): START TRANSACTION;
Connection validated successfully
Executing (69326b5a-343b-4a55-83a2-04184232c55f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240104110924-remove-unwanted-aro-topics.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (69326b5a-343b-4a55-83a2-04184232c55f): DELETE FROM  "ActivityReportObjectiveTopics" arot\n        USING "ActivityReportObjectives" aro\n        JOIN "ZALActivityReportObjectiveTopics" zaro\n          ON dml_txid = '00000000-0000-0000-0000-000002266502'\n          AND aro.id = (zaro.new_row_data->>'activityReportObjectiveId')::int\n        JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n          AND ar.version = 1\n        WHERE arot."activityReportObjectiveId" = aro.id;
Executing (69326b5a-343b-4a55-83a2-04184232c55f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240104110924-remove-unwanted-aro-topics: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240109174716-add-course-tables: migrating =======
Executing (cdc45942-3d6d-49cf-a035-2c91f20f40e2): START TRANSACTION;
Connection validated successfully
Executing (cdc45942-3d6d-49cf-a035-2c91f20f40e2): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240109174716-add-course-tables.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (cdc45942-3d6d-49cf-a035-2c91f20f40e2): CREATE TABLE IF NOT EXISTS "Courses" ("id"   SERIAL , "name" TEXT NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, "mapsTo" INTEGER DEFAULT NULL REFERENCES "Courses" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id"));
Executing (cdc45942-3d6d-49cf-a035-2c91f20f40e2): ALTER TABLE "Courses"\n      ADD CONSTRAINT "Courses_name_unique" UNIQUE ("name");
Executing (cdc45942-3d6d-49cf-a035-2c91f20f40e2): CREATE TABLE IF NOT EXISTS "ObjectiveCourses" ("id"   SERIAL , "objectiveId" INTEGER NOT NULL REFERENCES "Objectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "courseId" INTEGER NOT NULL REFERENCES "Courses" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (cdc45942-3d6d-49cf-a035-2c91f20f40e2): ALTER TABLE "ObjectiveCourses"\n      ADD CONSTRAINT "ObjectiveCourses_objectiveId_courseId_unique" UNIQUE ("objectiveId", "courseId");
Executing (cdc45942-3d6d-49cf-a035-2c91f20f40e2): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveCourses" ("id"   SERIAL , "activityReportObjectiveId" INTEGER NOT NULL REFERENCES "ActivityReportObjectives" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "courseId" INTEGER NOT NULL REFERENCES "Courses" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (cdc45942-3d6d-49cf-a035-2c91f20f40e2): ALTER TABLE "ActivityReportObjectiveCourses"\n          ADD CONSTRAINT "ActivityReportObjectiveCourses_activityReportObjectiveId_courseId_unique" UNIQUE ("activityReportObjectiveId", "courseId");
Executing (cdc45942-3d6d-49cf-a035-2c91f20f40e2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240109174716-add-course-tables: migrated (0.111s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240110165940-add-goal-similarity-groups-table: migrating =======
Executing (ff35fb5d-ff06-47a5-a827-10f2b3d6c9c4): START TRANSACTION;
Connection validated successfully
Executing (ff35fb5d-ff06-47a5-a827-10f2b3d6c9c4): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240110165940-add-goal-similarity-groups-table.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ff35fb5d-ff06-47a5-a827-10f2b3d6c9c4): CREATE TABLE IF NOT EXISTS "GoalSimilarityGroups" ("id"   SERIAL , "userHasInvalidated" BOOLEAN NOT NULL DEFAULT false, "finalGoalId" INTEGER REFERENCES "Goals" ("id"), "recipientId" INTEGER NOT NULL REFERENCES "Recipients" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ff35fb5d-ff06-47a5-a827-10f2b3d6c9c4): CREATE TABLE IF NOT EXISTS "GoalSimilarityGroupGoals" ("id"   SERIAL , "goalSimilarityGroupId" INTEGER NOT NULL REFERENCES "GoalSimilarityGroups" ("id"), "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (ff35fb5d-ff06-47a5-a827-10f2b3d6c9c4): ALTER TABLE "GoalSimilarityGroupGoals" ADD CONSTRAINT "GoalSimilarityGroupGoals_goalSimilarityGroupId_goalId_unique" UNIQUE ("goalSimilarityGroupId", "goalId");
Executing (ff35fb5d-ff06-47a5-a827-10f2b3d6c9c4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240110165940-add-goal-similarity-groups-table: migrated (0.074s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240118184228-add-language: migrating =======
Executing (7c9c4c4f-630f-48ba-ae76-133f978ab9f5): START TRANSACTION;
Connection validated successfully
Executing (7c9c4c4f-630f-48ba-ae76-133f978ab9f5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240118184228-add-language.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7c9c4c4f-630f-48ba-ae76-133f978ab9f5): ALTER TABLE "public"."ActivityReports" ADD COLUMN "language" VARCHAR(255)[];
Executing (7c9c4c4f-630f-48ba-ae76-133f978ab9f5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240118184228-add-language: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240122210304-fix-erroneous-fei-goals: migrating =======
Executing (f71d3977-a8e7-4d46-957b-e61692fdf9fd): START TRANSACTION;
Connection validated successfully
Executing (f71d3977-a8e7-4d46-957b-e61692fdf9fd): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240122210304-fix-erroneous-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f71d3977-a8e7-4d46-957b-e61692fdf9fd): -- Some goals created from a curated template have been requested to be changed or merged to regular goals\n\n      -- PROCESS:\n      -- Rename false FEI goals\n      -- Remove their root causes in GoalFieldResponses\n      ------ merge 51671 to 40495: (most of this will probably be empty)\n      -- Delete root causes\n      -- Merge objective topics\n      -- Merge objective resources\n      -- Merge objective files\n      -- Delete duplicate objective topics\n      -- Delete duplicate objective resources\n      -- Delete duplicate objective files\n      -- Relink non-goalmerge Objectives\n      -- Update the target goals record history fields from the donor goals\n      -- Relink non-duplicate ARGs\n      -- Delete duplicate ARGs\n      -- Delete donor goals\n\n      DROP TABLE IF EXISTS goals_for_renaming;\n      CREATE TEMP TABLE goals_for_renaming\n      AS\n      SELECT * FROM (\n        VALUES -- sorted and deduped\n        (50862, 'The recipient will analyze work force shortages to understand impact on full enrollment.'),\n        (54049, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes and share concerns with governing body.'),\n        (54097, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes.'),\n        (55400, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes.'),\n        (55765, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes.'),\n        (56179, 'The recipient will explore root causes of underenrollment and develop strategies to address root causes.')\n      ) AS data(gid, newtext)\n      ;\n\n      UPDATE "Goals"\n      SET\n        name = newtext,\n        "goalTemplateId" = NULL,\n        "updatedAt" = NOW()\n      FROM goals_for_renaming\n      WHERE id = gid\n      ;\n\n      DELETE FROM "GoalFieldResponses"\n      USING goals_for_renaming\n      WHERE "goalId" = gid\n      ;\n\n      DROP TABLE IF EXISTS goal_merges;\n      CREATE TEMP TABLE goal_merges\n      AS\n      SELECT\n        51671 donor_gid,\n        40495 target_gid\n      ;\n\n      DROP TABLE IF EXISTS deleted_gfrs;\n      CREATE TEMP TABLE deleted_gfrs\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalFieldResponses"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gfrid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      \n      -- Merge goal collaborators\n      DROP TABLE IF EXISTS relinked_goal_collaborators;\n      CREATE TEMP TABLE relinked_goal_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_gid,\n            "userId" uid\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.donor_gid = gc."goalId"\n          EXCEPT\n          SELECT\n            donor_gid,\n            "userId"\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.target_gid = gc."goalId"\n        )\n        UPDATE "GoalCollaborators" AS gc\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.donor_gid = gm.donor_gid\n        WHERE gc."userId" = u.uid\n          AND gc."goalId" = u.donor_gid\n        RETURNING\n          id gcid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      DROP TABLE IF EXISTS objective_merges;\n      CREATE TEMP TABLE objective_merges\n      AS\n      SELECT\n        donor_obj.id donor_oid,\n        target_obj.id target_oid\n      FROM goal_merges gm\n      JOIN "Objectives" donor_obj\n        ON gm.donor_gid = donor_obj."goalId"\n      JOIN "Objectives" target_obj\n        ON gm.target_gid = target_obj."goalId"\n        AND donor_obj.title = target_obj.title\n      WHERE donor_obj.id != target_obj.id\n      ;\n\n      -- Update the merge target objectives\n      DROP TABLE IF EXISTS updated_target_objectives;\n      CREATE TEMP TABLE updated_target_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" AS o\n        SET\n          "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n          "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n          "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n          "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n          "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n          "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n        FROM objective_merges om\n        JOIN "Objectives" d_o\n          ON om.donor_oid = d_o.id\n        WHERE om.target_oid = o.id\n        RETURNING\n          o.id oid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      \n      -- Merge objective topics\n      DROP TABLE IF EXISTS relinked_objective_topics;\n      CREATE TEMP TABLE relinked_objective_topics\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "topicId" tid\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.donor_oid = ot."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "topicId"\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.target_oid = ot."objectiveId"\n        )\n        UPDATE "ObjectiveTopics" AS ot\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE ot."topicId" = u.tid\n          AND ot."objectiveId" = u.donor_oid\n        RETURNING\n          id otid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Merge objective resources\n      DROP TABLE IF EXISTS relinked_objective_resources;\n      CREATE TEMP TABLE relinked_objective_resources\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "resourceId" rid\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.donor_oid = o_r."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "resourceId"\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.target_oid = o_r."objectiveId"\n        )\n        UPDATE "ObjectiveResources" AS o_r\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE o_r."resourceId" = u.rid\n          AND o_r."objectiveId" = u.donor_oid\n        RETURNING\n          id orid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Merge objective files\n      DROP TABLE IF EXISTS relinked_objective_files;\n      CREATE TEMP TABLE relinked_objective_files\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "fileId" fid\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.donor_oid = of."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "fileId"\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.target_oid = of."objectiveId"\n        )\n        UPDATE "ObjectiveFiles" AS of\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE of."fileId" = u.fid\n          AND of."objectiveId" = u.donor_oid\n        RETURNING\n          id ofid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective topics\n      DROP TABLE IF EXISTS deleted_objective_topics;\n      CREATE TEMP TABLE deleted_objective_topics\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveTopics"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id otid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective resources\n      DROP TABLE IF EXISTS deleted_objective_resources;\n      CREATE TEMP TABLE deleted_objective_resources\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveResources"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id orid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective files\n      DROP TABLE IF EXISTS deleted_objective_files;\n      CREATE TEMP TABLE deleted_objective_files\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveFiles"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ofid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Link objectives on merged goals to the FEI goals\n      DROP TABLE IF EXISTS relinked_objectives;\n      CREATE TEMP TABLE relinked_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives"\n        SET "goalId" = target_gid\n        FROM goal_merges\n        WHERE "goalId" = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          id oid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target goals\n      DROP TABLE IF EXISTS updated_target_goals;\n      CREATE TEMP TABLE updated_target_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          "updatedAt" = GREATEST(dg."updatedAt", g."updatedAt"),\n          "firstNotStartedAt" = LEAST(dg."firstNotStartedAt", g."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(dg."lastNotStartedAt", g."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(dg."firstInProgressAt", g."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(dg."lastInProgressAt", g."lastInProgressAt"),\n          "firstCeasedSuspendedAt" = LEAST(dg."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt"),\n          "lastCeasedSuspendedAt" = GREATEST(dg."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt"),\n          "firstClosedAt" = LEAST(dg."firstClosedAt", g."firstClosedAt"),\n          "lastClosedAt" = GREATEST(dg."lastClosedAt", g."lastClosedAt")\n        FROM goal_merges gm\n        JOIN "Goals" dg\n          ON gm.donor_gid = dg.id\n        WHERE gm.target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- relink non-duplicate ARGs\n      DROP TABLE IF EXISTS relinked_args;\n      CREATE TEMP TABLE relinked_args\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            "activityReportId" arid,\n            "goalId" gid\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.donor_gid = arg."goalId"\n          EXCEPT\n          SELECT\n            "activityReportId",\n            "goalId"\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.target_gid = arg."goalId"\n        )\n        UPDATE "ActivityReportGoals" AS arg\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.gid = gm.donor_gid\n        WHERE arg."goalId" = u.gid\n          AND arg."activityReportId" = u.arid\n        RETURNING\n          id argid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id argid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Delete donor goals\n      DROP TABLE IF EXISTS deleted_goals;\n      CREATE TEMP TABLE deleted_goals\n      AS\n      WITH updater AS (\n        DELETE FROM "Goals"\n        USING goal_merges\n        WHERE id = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          target_gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate goal collaborators\n      DROP TABLE IF EXISTS deleted_goal_collaborators;\n      CREATE TEMP TABLE deleted_goal_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalCollaborators"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gcid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      SELECT\n        1 op_order,\n        'deleted_gfrs' operation,\n        COUNT(*) cnt\n      FROM deleted_gfrs\n      UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n      UNION SELECT 3,'relinked_objective_topics', COUNT(*) FROM relinked_objective_topics\n      UNION SELECT 4,'relinked_objective_resources', COUNT(*) FROM relinked_objective_resources\n      UNION SELECT 5,'relinked_objective_files', COUNT(*) FROM relinked_objective_files\n      UNION SELECT 6,'deleted_objective_topics', COUNT(*) FROM deleted_objective_topics\n      UNION SELECT 7,'deleted_objective_resources', COUNT(*) FROM deleted_objective_resources\n      UNION SELECT 8,'deleted_objective_files', COUNT(*) FROM deleted_objective_files\n      UNION SELECT 9,'relinked_objectives', COUNT(*) FROM relinked_objectives\n      UNION SELECT 10,'updated_target_goals', COUNT(*) FROM updated_target_goals\n      UNION SELECT 11,'relinked_args', COUNT(*) FROM relinked_args\n      UNION SELECT 12,'deleted_args', COUNT(*) FROM deleted_args\n      UNION SELECT 13,'deleted_goals', COUNT(*) FROM deleted_goals\n      UNION SELECT 14,'relinked_goal_collaborators', COUNT(*) FROM relinked_goal_collaborators\n      UNION SELECT 15,'deleted_goal_collaborators', COUNT(*) FROM deleted_goal_collaborators\n      ORDER BY 1\n      ;
Executing (f71d3977-a8e7-4d46-957b-e61692fdf9fd): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240122210304-fix-erroneous-fei-goals: migrated (0.069s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240123000000-add_deletedAt_to_indexes: migrating =======
Executing (86fc10bf-41fc-48e6-938b-57e19efceeee): START TRANSACTION;
Connection validated successfully
Executing (86fc10bf-41fc-48e6-938b-57e19efceeee): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240123000000-add_deletedAt_to_indexes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (86fc10bf-41fc-48e6-938b-57e19efceeee): -- Original plan: In tables that use Sequelize's built-in "deletedAt" column, exclude deleted records\n        -- from unique indexes that don't include the pkey. However, this does not support using ON CONFLICT\n        -- in upserts. So, we need to include "deletedAt" in the index instead.\n\n        ALTER TABLE "ActivityReportApprovers" DROP CONSTRAINT "unique_activityReportId_userId";\n        DROP INDEX IF EXISTS "unique_activityReportId_userId";\n        CREATE UNIQUE INDEX "unique_activityReportId_userId"\n        ON "ActivityReportApprovers" ("activityReportId", "userId", "deletedAt");\n        ALTER TABLE "ActivityReportApprovers" ADD CONSTRAINT "unique_activityReportId_userId" UNIQUE\n        USING INDEX "unique_activityReportId_userId";\n\n        ALTER TABLE "CollaboratorTypes" DROP CONSTRAINT "CollaboratorTypes_name_validForId_unique";\n        DROP INDEX IF EXISTS "CollaboratorTypes_name_validForId_unique";\n        CREATE UNIQUE INDEX "CollaboratorTypes_name_validForId_unique"\n        ON "CollaboratorTypes" (name, "validForId", "deletedAt");\n        ALTER TABLE "CollaboratorTypes" ADD CONSTRAINT "CollaboratorTypes_name_validForId_unique" UNIQUE\n        USING INDEX "CollaboratorTypes_name_validForId_unique";\n\n        ALTER TABLE "Courses" DROP CONSTRAINT "Courses_name_unique";\n        DROP INDEX IF EXISTS "Courses_name_unique";\n        CREATE UNIQUE INDEX "Courses_name_unique"\n        ON "Courses" (name, "deletedAt");\n        ALTER TABLE "Courses" ADD CONSTRAINT "Courses_name_unique" UNIQUE\n        USING INDEX "Courses_name_unique";\n\n        ALTER TABLE "GoalCollaborators" DROP CONSTRAINT "GoalCollaborators_goalId_userId_collaboratorTypeId_unique";\n        DROP INDEX IF EXISTS "GoalCollaborators_goalId_userId_collaboratorTypeId_unique";\n        CREATE UNIQUE INDEX "GoalCollaborators_goalId_userId_collaboratorTypeId_unique"\n        ON "GoalCollaborators" ("goalId", "userId", "collaboratorTypeId", "deletedAt");\n        ALTER TABLE "GoalCollaborators" ADD CONSTRAINT "GoalCollaborators_goalId_userId_collaboratorTypeId_unique" UNIQUE\n        USING INDEX "GoalCollaborators_goalId_userId_collaboratorTypeId_unique";\n\n        ALTER TABLE "ObjectiveCollaborators" DROP CONSTRAINT "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un";\n        DROP INDEX IF EXISTS "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un";\n        CREATE UNIQUE INDEX "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un"\n        ON "ObjectiveCollaborators" ("objectiveId", "userId", "collaboratorTypeId", "deletedAt");\n        ALTER TABLE "ObjectiveCollaborators" ADD CONSTRAINT "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un" UNIQUE\n        USING INDEX "ObjectiveCollaborators_objectiveId_userId_collaboratorTypeId_un";\n\n        ALTER TABLE "ValidFor" DROP CONSTRAINT "ValidFor_option_unique";\n        DROP INDEX IF EXISTS "ValidFor_option_unique";\n        CREATE UNIQUE INDEX "ValidFor_option_unique"\n        ON "ValidFor" (name, "deletedAt");\n        ALTER TABLE "ValidFor" ADD CONSTRAINT "ValidFor_option_unique" UNIQUE\n        USING INDEX "ValidFor_option_unique";
Executing (86fc10bf-41fc-48e6-938b-57e19efceeee): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240123000000-add_deletedAt_to_indexes: migrated (0.051s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240123150604-objective-support-type: migrating =======
Executing (603a9a0a-6662-4883-9181-11d929e9c880): START TRANSACTION;
Connection validated successfully
Executing (603a9a0a-6662-4883-9181-11d929e9c880): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240123150604-objective-support-type.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (603a9a0a-6662-4883-9181-11d929e9c880): CREATE TYPE "public"."enum_Objectives_supportType" AS ENUM('Introducing', 'Planning', 'Implementing', 'Maintaining');ALTER TABLE "public"."Objectives" ADD COLUMN "supportType" "public"."enum_Objectives_supportType";
Executing (603a9a0a-6662-4883-9181-11d929e9c880): CREATE TYPE "public"."enum_ActivityReportObjectives_supportType" AS ENUM('Introducing', 'Planning', 'Implementing', 'Maintaining');ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "supportType" "public"."enum_ActivityReportObjectives_supportType";
Executing (603a9a0a-6662-4883-9181-11d929e9c880): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240123150604-objective-support-type: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240123211933-hardcode-goal-source-for-curated-goals: migrating =======
Executing (1c8f9ea7-734b-4835-b06d-2909045b378b): START TRANSACTION;
Connection validated successfully
Executing (1c8f9ea7-734b-4835-b06d-2909045b378b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240123211933-hardcode-goal-source-for-curated-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1c8f9ea7-734b-4835-b06d-2909045b378b): ALTER TABLE "public"."GoalTemplates" ADD COLUMN "source" VARCHAR(255);
Executing (1c8f9ea7-734b-4835-b06d-2909045b378b): UPDATE "GoalTemplates" SET "source" = 'Regional office priority'\n            WHERE "templateName" ILIKE '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)' AND "creationMethod" = 'Curated';\n          \n          UPDATE "GoalTemplates" SET "source" = 'Federal monitoring issues, including CLASS and RANs'\n            WHERE "templateName" ILIKE '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)' AND "creationMethod" = 'Curated';\n\n          UPDATE "Goals" SET "source" = 'Regional office priority' \n            WHERE "goalTemplateId" IN (\n              SELECT "id" FROM "GoalTemplates" WHERE "templateName" ILIKE '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment)' AND "creationMethod" = 'Curated'\n            );\n          \n          UPDATE "Goals" SET "source" = 'Federal monitoring issues, including CLASS and RANs' \n            WHERE "goalTemplateId" IN (\n              SELECT "id" FROM "GoalTemplates" WHERE "templateName" ILIKE '(Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores)' AND "creationMethod" = 'Curated'\n            );
Executing (1c8f9ea7-734b-4835-b06d-2909045b378b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240123211933-hardcode-goal-source-for-curated-goals: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240125155606-add-goal-created-via-tr: migrating =======
Executing (8da29c60-f288-4d39-9ca2-fefd5b6db887): START TRANSACTION;
Connection validated successfully
Executing (8da29c60-f288-4d39-9ca2-fefd5b6db887): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240125155606-add-goal-created-via-tr.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'imported';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'activityReport';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'rtr';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'merge';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'admin';
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (8da29c60-f288-4d39-9ca2-fefd5b6db887): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240125155606-add-goal-created-via-tr: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240125161416-goal-tr-join-table: migrating =======
Executing (c19ff64b-d4ab-4c4c-abfa-28e630ad4228): START TRANSACTION;
Connection validated successfully
Executing (c19ff64b-d4ab-4c4c-abfa-28e630ad4228): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240125161416-goal-tr-join-table.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c19ff64b-d4ab-4c4c-abfa-28e630ad4228): CREATE TABLE IF NOT EXISTS "EventReportPilotGoals" ("id"   SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id"), "eventId" INTEGER NOT NULL REFERENCES "EventReportPilots" ("id"), "sessionId" INTEGER NOT NULL REFERENCES "SessionReportPilots" ("id"), "grantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (c19ff64b-d4ab-4c4c-abfa-28e630ad4228): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240125161416-goal-tr-join-table: migrated (0.043s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240129221712-change-training-event-goal-source: migrating =======
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): START TRANSACTION;
Connection validated successfully
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240129221712-change-training-event-goal-source.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): -- rename the existing type\n  ALTER TYPE "enum_Goals_source" RENAME TO "enum_Goals_source_old";\n  -- create the new type\n  CREATE TYPE "enum_Goals_source" AS ENUM(\n    'Federal monitoring issues, including CLASS and RANs',\n'RTTAPA development',\n'Recipient request',\n'Regional office priority',\n'Training event',\n'Training event follow-up'\n  );
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): -- update the columns to use the new type\n  ALTER TABLE "Goals" ALTER COLUMN "source" set default null;\n  ALTER TABLE "Goals" ALTER COLUMN "source" TYPE "enum_Goals_source" USING "source"::text::"enum_Goals_source";\n  \n  -- remove the old type\n  DROP TYPE "enum_Goals_source_old";
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): UPDATE "Goals"\n          SET source = 'Training event'::"enum_Goals_source"\n        WHERE source = 'Training event follow-up'::"enum_Goals_source";
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): -- rename the existing type\n  ALTER TYPE "enum_Goals_source" RENAME TO "enum_Goals_source_old";\n  -- create the new type\n  CREATE TYPE "enum_Goals_source" AS ENUM(\n    'Federal monitoring issues, including CLASS and RANs',\n'RTTAPA development',\n'Recipient request',\n'Regional office priority',\n'Training event'\n  );
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): -- update the columns to use the new type\n  ALTER TABLE "Goals" ALTER COLUMN "source" set default null;\n  ALTER TABLE "Goals" ALTER COLUMN "source" TYPE "enum_Goals_source" USING "source"::text::"enum_Goals_source";\n  \n  -- remove the old type\n  DROP TYPE "enum_Goals_source_old";
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): -- rename the existing type\n  ALTER TYPE "enum_ActivityReportGoals_source" RENAME TO "enum_ActivityReportGoals_source_old";\n  -- create the new type\n  CREATE TYPE "enum_ActivityReportGoals_source" AS ENUM(\n    'Federal monitoring issues, including CLASS and RANs',\n'RTTAPA development',\n'Recipient request',\n'Regional office priority',\n'Training event',\n'Training event follow-up'\n  );
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): -- update the columns to use the new type\n  ALTER TABLE "ActivityReportGoals" ALTER COLUMN "source" set default null;\n  ALTER TABLE "ActivityReportGoals" ALTER COLUMN "source" TYPE "enum_ActivityReportGoals_source" USING "source"::text::"enum_ActivityReportGoals_source";\n  \n  -- remove the old type\n  DROP TYPE "enum_ActivityReportGoals_source_old";
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): UPDATE "ActivityReportGoals"\n          SET source = 'Training event'::"enum_ActivityReportGoals_source"\n        WHERE source = 'Training event follow-up'::"enum_ActivityReportGoals_source";
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): -- rename the existing type\n  ALTER TYPE "enum_ActivityReportGoals_source" RENAME TO "enum_ActivityReportGoals_source_old";\n  -- create the new type\n  CREATE TYPE "enum_ActivityReportGoals_source" AS ENUM(\n    'Federal monitoring issues, including CLASS and RANs',\n'RTTAPA development',\n'Recipient request',\n'Regional office priority',\n'Training event'\n  );
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): -- update the columns to use the new type\n  ALTER TABLE "ActivityReportGoals" ALTER COLUMN "source" set default null;\n  ALTER TABLE "ActivityReportGoals" ALTER COLUMN "source" TYPE "enum_ActivityReportGoals_source" USING "source"::text::"enum_ActivityReportGoals_source";\n  \n  -- remove the old type\n  DROP TYPE "enum_ActivityReportGoals_source_old";
Executing (7e287ea1-9b55-4026-b190-aa4515f09761): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240129221712-change-training-event-goal-source: migrated (0.109s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240205192219-remove-goal-source-flag: migrating =======
Executing (05043d13-23cf-4b78-8c07-95ff9ac20834): START TRANSACTION;
Connection validated successfully
Executing (05043d13-23cf-4b78-8c07-95ff9ac20834): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240205192219-remove-goal-source-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (05043d13-23cf-4b78-8c07-95ff9ac20834): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'goal_source'\n          );
Executing (05043d13-23cf-4b78-8c07-95ff9ac20834): UPDATE "Users" SET "flags" = array_remove(flags, 'goal_source')\n        WHERE 'goal_source' = ANY(flags);
Executing (05043d13-23cf-4b78-8c07-95ff9ac20834): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'resources_dashboard',\n'rttapa_form',\n'anv_statistics',\n'regional_goal_dashboard',\n'merge_goals',\n'monitoring',\n'closed_goal_merge_override'\n  );
Executing (05043d13-23cf-4b78-8c07-95ff9ac20834): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (05043d13-23cf-4b78-8c07-95ff9ac20834): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240205192219-remove-goal-source-flag: migrated (0.040s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240206000000-delete_comlog_entry: migrating =======
Executing (d34afb72-5cdc-434a-a53e-dff04418549a): START TRANSACTION;
Connection validated successfully
Executing (d34afb72-5cdc-434a-a53e-dff04418549a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240206000000-delete_comlog_entry.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (d34afb72-5cdc-434a-a53e-dff04418549a): -- Delete a communications log record as desired by a customer.\n        -- Because there's no soft delete column (deletedAt), we're:\n        \n        -- Doing a hard DELETE FROM in the communications log and link tables (currently just CommunicationLogFiles)\n        -- Removing any Files that only exist due to the Communication Log.\n\n        -- The File removal step is intensive because currently there are many different ways\n        -- for a File to be linked and all have to be checked before the File can be removed.\n\n        -- Create the sets of things to be deleted and before counts\n        DROP TABLE IF EXISTS before_set;\n        CREATE TEMP TABLE before_set\n        AS\n        SELECT DISTINCT\n          cl.id clid,\n          clf.id clfid,\n          clf."fileId" fid\n        FROM "CommunicationLogs" cl\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON clf."communicationLogId" = cl.id\n        WHERE cl.id = 174;\n        \n\n        DROP TABLE IF EXISTS before_count;\n        CREATE TEMP TABLE before_count\n        AS\n        SELECT\n          COUNT(DISTINCT clid) comlog_count,\n          COUNT(DISTINCT clfid) comlogfile_count,\n          COUNT(DISTINCT fid) file_count\n        FROM before_set;\n\n        -- Check to see if any files are only present because of this communication log\n        -- unfortunately there's currently many ways to link a file\n        DROP TABLE IF EXISTS files_to_delete;\n        CREATE TEMP TABLE files_to_delete\n        AS\n        WITH candidate_files AS (SELECT DISTINCT fid FROM before_set),\n        file_links AS (\n        SELECT\n          fid,\n          clf.id clfid,\n          arf.id arfid,\n          arof.id arofid,\n          of.id ofid,\n          otf.id otfid,\n          srpf.id srpfid\n        FROM candidate_files cf\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON fid = clf."fileId"\n          AND clf."communicationLogId" NOT IN (SELECT DISTINCT clid FROM before_set)\n        LEFT JOIN "ActivityReportFiles" arf\n          ON fid = arf."fileId"\n        LEFT JOIN "ActivityReportObjectiveFiles" arof\n          ON fid = arof."fileId"\n        LEFT JOIN "ObjectiveFiles" of\n          ON fid = of."fileId"\n        LEFT JOIN "ObjectiveTemplateFiles" otf\n          ON fid = otf."fileId"\n        LEFT JOIN "SessionReportPilotFiles" srpf\n          ON fid = srpf."fileId"\n        )\n        SELECT DISTINCT fid\n        FROM file_links\n        WHERE clfid IS NULL\n          AND arfid IS NULL\n          AND arofid IS NULL\n          AND ofid IS NULL\n          AND otfid IS NULL\n          AND srpfid IS NULL\n          AND fid IS NOT NULL;\n\n        -- Actually start deleting records, starting with the link records\n        DELETE FROM "CommunicationLogFiles" clf\n        USING (SELECT DISTINCT clfid FROM before_set) b\n        WHERE clf.id = b.clfid;\n\n        DELETE FROM "Files" f\n        USING files_to_delete\n        WHERE f.id = fid;\n\n        DELETE FROM "CommunicationLogs" cl\n        USING (SELECT DISTINCT clid FROM before_set) b\n        WHERE cl.id = b.clid;\n\n        -- Show after counts\n        DROP TABLE IF EXISTS after_count;\n        CREATE TEMP TABLE after_count\n        AS\n        WITH target_logs AS (SELECT DISTINCT clid FROM before_set),\n        deleted_files AS (\n        SELECT fid\n        FROM files_to_delete\n        EXCEPT\n        SELECT id\n        FROM "Files"\n        ),\n        df_count AS (SELECT COUNT(*) cnt FROM deleted_files)\n        SELECT\n          COUNT(DISTINCT cl.id) comlog_count,\n          COUNT(DISTINCT clf.id) comlogfile_count,\n          COUNT(DISTINCT clf."fileId") file_count,\n          dfc.cnt deleted_file_count\n        FROM target_logs tl\n        CROSS JOIN df_count dfc\n        LEFT JOIN "CommunicationLogs" cl\n          ON tl.clid = cl.id\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON clf."communicationLogId" = cl.id\n        GROUP BY 4;
Executing (d34afb72-5cdc-434a-a53e-dff04418549a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240206000000-delete_comlog_entry: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240215183516-remove-rttapapilot: migrating =======
Executing (2e5eaf86-41b8-4652-971d-25c00910c9c7): START TRANSACTION;
Connection validated successfully
Executing (2e5eaf86-41b8-4652-971d-25c00910c9c7): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240215183516-remove-rttapapilot.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2e5eaf86-41b8-4652-971d-25c00910c9c7): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (2e5eaf86-41b8-4652-971d-25c00910c9c7): SELECT "ZAFRemoveAuditingOnTable"('RttapaPilots');
Executing (2e5eaf86-41b8-4652-971d-25c00910c9c7): DROP TABLE IF EXISTS "ZALRttapaPilots";
Executing (2e5eaf86-41b8-4652-971d-25c00910c9c7): DROP TABLE IF EXISTS "RttapaPilots";
Executing (2e5eaf86-41b8-4652-971d-25c00910c9c7): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (2e5eaf86-41b8-4652-971d-25c00910c9c7): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240215183516-remove-rttapapilot: migrated (0.297s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240215194008-remove-rttapa-form-flag: migrating =======
Executing (36ac4b40-3568-4d1e-8646-65967f3de6da): START TRANSACTION;
Connection validated successfully
Executing (36ac4b40-3568-4d1e-8646-65967f3de6da): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'rttapa_form'\n          );
Executing (36ac4b40-3568-4d1e-8646-65967f3de6da): UPDATE "Users" SET "flags" = array_remove(flags, 'rttapa_form')\n        WHERE 'rttapa_form' = ANY(flags);
Executing (36ac4b40-3568-4d1e-8646-65967f3de6da): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'resources_dashboard',\n'anv_statistics',\n'regional_goal_dashboard',\n'merge_goals',\n'monitoring',\n'closed_goal_merge_override'\n  );
Executing (36ac4b40-3568-4d1e-8646-65967f3de6da): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (36ac4b40-3568-4d1e-8646-65967f3de6da): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240215194008-remove-rttapa-form-flag: migrated (0.048s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240228223541-import-system: migrating =======
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): START TRANSACTION;
Connection validated successfully
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240228223541-import-system.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_category" ADD VALUE IF NOT EXISTS 'DB';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_category" ADD VALUE IF NOT EXISTS 'MAINTENANCE';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_category" ADD VALUE IF NOT EXISTS 'IMPORT';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'VACUUM ANALYZE';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'REINDEX';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'VACUUM TABLES';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'REINDEX TABLES';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'DAILY DB MAINTENANCE';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'CLEAR MAINTENANCE LOGS';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'IMPORT_DOWNLOAD';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TYPE "enum_MaintenanceLogs_type" ADD VALUE IF NOT EXISTS 'IMPORT_PROCESS';
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): CREATE TABLE IF NOT EXISTS "Imports" ("id"   SERIAL , "name" TEXT NOT NULL, "ftpSettings" JSONB NOT NULL, "path" TEXT, "fileMask" TEXT, "schedule" TEXT NOT NULL, "enabled" BOOLEAN NOT NULL DEFAULT false, "definitions" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ImportFiles_status' GROUP BY 1
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): CREATE TYPE "public"."enum_ImportFiles_status" AS ENUM('IDENTIFIED', 'COLLECTING', 'COLLECTED', 'COLLECTION_FAILED', 'PROCESSING', 'PROCESSED', 'PROCESSING_FAILED');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): CREATE TABLE IF NOT EXISTS "ImportFiles" ("id"   SERIAL , "importId" INTEGER NOT NULL REFERENCES "Imports" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "fileId" INTEGER REFERENCES "Files" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "ftpFileInfo" JSONB, "status" "public"."enum_ImportFiles_status" NOT NULL DEFAULT 'IDENTIFIED', "downloadAttempts" INTEGER NOT NULL DEFAULT 0, "processAttempts" INTEGER NOT NULL DEFAULT 0, "hash" TEXT, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): CREATE UNIQUE INDEX "ImportFiles_importId_fileId"\n          ON "ImportFiles"\n          ("importId", "fileId");
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): ALTER TABLE "ImportFiles"\n          ADD CONSTRAINT "ImportFiles_importId_fileId_unique"\n          UNIQUE USING INDEX "ImportFiles_importId_fileId";
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ImportDataFiles_status' GROUP BY 1
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): CREATE TYPE "public"."enum_ImportDataFiles_status" AS ENUM('IDENTIFIED', 'PROCESSING', 'PROCESSED', 'PROCESSING_FAILED', 'WILL_NOT_PROCESS');
Executing (default): WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));
Connection validated successfully
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): CREATE TABLE IF NOT EXISTS "ImportDataFiles" ("id"   SERIAL , "importFileId" INTEGER NOT NULL REFERENCES "ImportFiles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "fileInfo" JSONB, "status" "public"."enum_ImportDataFiles_status" NOT NULL DEFAULT 'IDENTIFIED', "hash" TEXT, "schema" JSONB, "recordCounts" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (63d172dd-88ef-4a0b-a668-ac4e44846579): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240228223541-import-system: migrated (0.139s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240228223541-monitoring-data: migrating =======
Executing (f959ba40-661b-4936-ac7d-999386b404c1): START TRANSACTION;
Connection validated successfully
Executing (f959ba40-661b-4936-ac7d-999386b404c1): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240228223541-monitoring-data.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE TABLE IF NOT EXISTS "GrantNumberLinks" ("id"   SERIAL, "grantNumber" TEXT NOT NULL , "grantId" INTEGER REFERENCES "Grants" ("id"), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("grantNumber"));
Executing (f959ba40-661b-4936-ac7d-999386b404c1): INSERT INTO "GrantNumberLinks"\n          (\n            "grantNumber",\n            "grantId",\n            "createdAt",\n            "updatedAt"\n          )\n          SELECT\n            "number",\n            "id",\n            "createdAt",\n            "updatedAt"\n          FROM "Grants";
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE TABLE IF NOT EXISTS "MonitoringReviewLinks" ("id"   SERIAL, "reviewId" TEXT NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("reviewId"));
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE TABLE IF NOT EXISTS "MonitoringReviewStatusLinks" ("id"   SERIAL, "statusId" INTEGER NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("statusId"));
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE TABLE IF NOT EXISTS "MonitoringReviewStatuses" ("id"   SERIAL , "statusId" INTEGER NOT NULL REFERENCES "MonitoringReviewStatusLinks" ("statusId"), "name" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE UNIQUE INDEX "MonitoringReviewStatuses_statusId_deletedAt"\n          ON "MonitoringReviewStatuses"\n          ("statusId", "deletedAt");
Executing (f959ba40-661b-4936-ac7d-999386b404c1): ALTER TABLE "MonitoringReviewStatuses"\n          ADD CONSTRAINT "MonitoringReviewStatuses_statusId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringReviewStatuses_statusId_deletedAt";
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE TABLE IF NOT EXISTS "MonitoringReviews" ("id"   SERIAL , "reviewId" TEXT NOT NULL REFERENCES "MonitoringReviewLinks" ("reviewId"), "contentId" TEXT NOT NULL, "statusId" INTEGER NOT NULL REFERENCES "MonitoringReviewStatusLinks" ("statusId"), "startDate" DATE, "endDate" DATE, "reviewType" TEXT, "reportDeliveryDate" TIMESTAMP WITH TIME ZONE, "outcome" TEXT, "hash" TEXT, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE UNIQUE INDEX "MonitoringReviews_reviewId_deletedAt"\n          ON "MonitoringReviews"\n          ("reviewId", "deletedAt");
Executing (f959ba40-661b-4936-ac7d-999386b404c1): ALTER TABLE "MonitoringReviews"\n          ADD CONSTRAINT "MonitoringReviews_reviewId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringReviews_reviewId_deletedAt";
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE INDEX "MonitoringReviews_statusId"\n          ON "MonitoringReviews"\n          ("statusId")\n          WHERE "deletedAt" IS NULL;
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE INDEX "MonitoringReviews_reviewId_statusId"\n          ON "MonitoringReviews"\n          ("reviewId", "statusId")\n          WHERE "deletedAt" IS NULL;
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE TABLE IF NOT EXISTS "MonitoringReviewGrantees" ("id"   SERIAL , "reviewId" TEXT NOT NULL REFERENCES "MonitoringReviewLinks" ("reviewId"), "granteeId" TEXT NOT NULL, "createTime" TIMESTAMP WITH TIME ZONE NOT NULL, "updateTime" TIMESTAMP WITH TIME ZONE NOT NULL, "updateBy" TEXT NOT NULL, "grantNumber" TEXT NOT NULL REFERENCES "GrantNumberLinks" ("grantNumber"), "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE INDEX "MonitoringReviewGrantees_reviewId"\n          ON "MonitoringReviewGrantees"\n          ("reviewId")\n          WHERE "deletedAt" IS NULL;
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE INDEX "MonitoringReviewGrantees_granteeId"\n          ON "MonitoringReviewGrantees"\n          ("granteeId")\n          WHERE "deletedAt" IS NULL;
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE INDEX "MonitoringReviewGrantees_grantNumber"\n          ON "MonitoringReviewGrantees"\n          ("grantNumber")\n          WHERE "deletedAt" IS NULL;
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE UNIQUE INDEX "MonitoringReviewGrantees_reviewId_grantNumber_deletedAt"\n          ON "MonitoringReviewGrantees"\n          ("reviewId", "grantNumber", "deletedAt");
Executing (f959ba40-661b-4936-ac7d-999386b404c1): ALTER TABLE "MonitoringReviewGrantees"\n          ADD CONSTRAINT "MonitoringReviewGrantees_reviewId_grantNumber_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringReviewGrantees_reviewId_grantNumber_deletedAt";
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE TABLE IF NOT EXISTS "MonitoringFindingHistories" ("id"   SERIAL , "reviewId" TEXT NOT NULL REFERENCES "MonitoringReviewLinks" ("reviewId"), "findingHistoryId" TEXT NOT NULL, "hash" TEXT, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE INDEX "MonitoringFindingHistories_reviewId"\n          ON "MonitoringFindingHistories"\n          ("reviewId")\n          WHERE "deletedAt" IS NULL;
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE INDEX "MonitoringFindingHistories_findingHistoryId"\n          ON "MonitoringFindingHistories"\n          ("findingHistoryId")\n          WHERE "deletedAt" IS NULL;
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE UNIQUE INDEX "MonitoringFindingHistories_reviewId_findingHistoryId_deletedAt"\n          ON "MonitoringFindingHistories"\n          ("reviewId", "findingHistoryId", "deletedAt");
Executing (f959ba40-661b-4936-ac7d-999386b404c1): ALTER TABLE "MonitoringFindingHistories"\n          ADD CONSTRAINT "MonitoringFindingHistories_reviewId_findingHistoryId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringFindingHistories_reviewId_findingHistoryId_deletedAt";
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE TABLE IF NOT EXISTS "MonitoringClassSummaries" ("id"   SERIAL , "reviewId" TEXT NOT NULL REFERENCES "MonitoringReviewLinks" ("reviewId"), "grantNumber" TEXT NOT NULL REFERENCES "GrantNumberLinks" ("grantNumber"), "emotionalSupport" DECIMAL(5,4), "classroomOrganization" DECIMAL(5,4), "instructionalSupport" DECIMAL(5,4), "reportDeliveryDate" TIMESTAMP WITH TIME ZONE, "hash" TEXT, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE INDEX "MonitoringClassSummaries_reviewId"\n          ON "MonitoringClassSummaries"\n          ("reviewId")\n          WHERE "deletedAt" IS NULL;
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE INDEX "MonitoringClassSummaries_grantNumber"\n          ON "MonitoringClassSummaries"\n          ("grantNumber")\n          WHERE "deletedAt" IS NULL;
Executing (f959ba40-661b-4936-ac7d-999386b404c1): CREATE UNIQUE INDEX "MonitoringClassSummaries_reviewId_grantNumber_deletedAt"\n          ON "MonitoringClassSummaries"\n          ("reviewId", "grantNumber", "deletedAt");
Executing (f959ba40-661b-4936-ac7d-999386b404c1): ALTER TABLE "MonitoringClassSummaries"\n          ADD CONSTRAINT "MonitoringClassSummaries_reviewId_grantNumber_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringClassSummaries_reviewId_grantNumber_deletedAt";
Executing (f959ba40-661b-4936-ac7d-999386b404c1): INSERT INTO "Imports" (\n        "name",\n        "ftpSettings",\n        "path",\n        "fileMask",\n        "schedule",\n        "enabled",\n        "definitions",\n        "createdAt",\n        "updatedAt"\n      ) values (\n        'ITAMS Monitoring Data',\n        '{"host":"ITAMS_MD_HOST","port":"ITAMS_MD_PORT","username":"ITAMS_MD_USERNAME","password":"ITAMS_MD_PASSWORD"}',\n        '/ProdTTAHome',\n        '[0-9]{4}_[0-9]{2}_[0-9]{2}_XML[.]zip',\n        '0 7 * * *',\n        true,\n        '[{"fileName":"AMS_ReviewStatus.xml","path":".","encoding":"utf16le","tableName":"MonitoringReviewStatuses","keys":["statusId"],"remapDef":{"StatusId":"statusId","Name":"name"}},{"fileName":"AMS_Review.xml","path":".","encoding":"utf16le","tableName":"MonitoringReviews","keys":["reviewId"],"remapDef":{"ReviewId":"reviewId","ContentId":"contentId","StatusId":"statusId","StartDate":"startDate","EndDate":"endDate","ReviewType":"reviewType","ReportDeliveryDate":"reportDeliveryDate","Outcome":"outcome",".":"toHash.*"}},{"fileName":"AMS_ReviewGrantee.xml","path":".","encoding":"utf16le","tableName":"MonitoringReviewGrantees","keys":["reviewId","granteeId"],"remapDef":{"ReviewId":"reviewId","GranteeId":"granteeId","CreateTime":"createTime","UpdateTime":"updateTime","UpdateBy":"updateBy","GrantNumber":"grantNumber"}},{"fileName":"AMS_FindingHistory.xml","path":".","encoding":"utf16le","tableName":"MonitoringFindingHistories","keys":["findingHistoryId"],"remapDef":{"FindingHistoryId":"findingHistoryId","ReviewId":"reviewId",".":"toHash.*"}},{"fileName":"AMS_CLASS_SUMMARYGrants.xml","path":".","encoding":"utf16le","tableName":"MonitoringClassSummaries","keys":["reviewId"],"remapDef":{"ReviewId":"reviewId","GrantNumber":"grantNumber","Domain_ES":"emotionalSupport","Domain_CO":"classroomOrganization","Domain_IS":"instructionalSupport","ReportDeliveryDate":"reportDeliveryDate",".":"toHash.*"}}]',\n        CURRENT_TIMESTAMP,\n        CURRENT_TIMESTAMP\n      );
Executing (f959ba40-661b-4936-ac7d-999386b404c1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240228223541-monitoring-data: migrated (0.285s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240305121018-share-groups: migrating =======
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): START TRANSACTION;
Connection validated successfully
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240305121018-share-groups.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): CREATE TYPE "public"."enum_Groups_sharedWith" AS ENUM('Everyone', 'Individuals');ALTER TABLE "public"."Groups" ADD COLUMN "sharedWith" "public"."enum_Groups_sharedWith";
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): INSERT INTO "ValidFor"\n        ("name", "isReport", "createdAt", "updatedAt")\n        VALUES\n        (\n          'Groups',\n          false,\n          current_timestamp,\n          current_timestamp\n        );
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): INSERT INTO "CollaboratorTypes"\n        ("name", "validForId", "propagateOnMerge", "createdAt", "updatedAt")\n        SELECT\n          t.name,\n          vf.id,\n          t.name NOT LIKE 'Merge%',\n          current_timestamp,\n          current_timestamp\n        FROM "ValidFor" vf\n        CROSS JOIN UNNEST(ARRAY[\n          'Creator',\n'Co-Owner',\n'SharedWith',\n'Editor'\n        ]) t(name)\n        WHERE vf.name = 'Groups'\n       ;
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): CREATE TABLE IF NOT EXISTS "GroupCollaborators" ("id"   SERIAL , "groupId" INTEGER NOT NULL REFERENCES "Groups" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "collaboratorTypeId" INTEGER NOT NULL REFERENCES "CollaboratorTypes" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "linkBack" JSONB, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE DEFAULT NULL, PRIMARY KEY ("id"));
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): CREATE UNIQUE INDEX "GroupCollaborators_groupId_userId_collaboratorTypeId_deletedAt_idx"\n          ON "GroupCollaborators"\n          ("groupId", "userId", "collaboratorTypeId", "deletedAt");
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): ALTER TABLE "GroupCollaborators"\n          ADD CONSTRAINT "GroupCollaborators_groupId_userId_collaboratorTypeId_deletedAt_idx"\n          UNIQUE USING INDEX "GroupCollaborators_groupId_userId_collaboratorTypeId_deletedAt_idx";
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): WITH\n        source_data AS (\n          \n        SELECT\n          g.id "groupId",\n          g."userId",\n          MIN(g."createdAt") "createdAt",\n          MIN(g."createdAt") "updatedAt",\n          NULL::JSONB "linkBack"\n        FROM "Groups" g\n        GROUP BY 1,2\n        ORDER BY 1\n        \n        ),\n        collaborator_type AS (\n          SELECT\n            ct.id "collaboratorTypeId"\n          FROM "CollaboratorTypes" ct\n          JOIN "ValidFor" vf\n          ON ct."validForId" = vf.id\n          WHERE ct.name = 'Creator'\n          AND vf.name = 'Groups'\n        )\n      INSERT INTO "GroupCollaborators"\n      (\n        "groupId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        sd."groupId",\n        sd."userId",\n        ct."collaboratorTypeId",\n        sd."linkBack",\n        sd."createdAt",\n        sd."updatedAt"\n      FROM source_data sd\n      CROSS JOIN collaborator_type ct\n      ON CONFLICT\n      (\n        "groupId",\n        "userId",\n        "collaboratorTypeId",\n        "deletedAt"\n      )\n      DO UPDATE SET\n        "updatedAt" = EXCLUDED."updatedAt",\n        "linkBack" = (\n          SELECT\n            JSONB_OBJECT_AGG(key_values.key, key_values.values)\n          FROM (\n            SELECT\n              je.key,\n              JSONB_AGG(DISTINCT jae.value ORDER BY jae.value) "values"\n            FROM (\n              SELECT "GroupCollaborators"."linkBack"\n              UNION\n              SELECT EXCLUDED."linkBack"\n            ) "linkBacks"("linkBack")\n            CROSS JOIN jsonb_each("linkBacks"."linkBack") je\n            CROSS JOIN jsonb_array_elements(je.value) jae(value)\n            GROUP BY 1\n          ) key_values\n        )\n      RETURNING\n        "id" "groupCollaboratorId",\n        "groupId",\n        "userId",\n        "collaboratorTypeId",\n        "linkBack",\n        "createdAt",\n        "updatedAt";
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): ALTER TABLE "public"."Groups" DROP COLUMN "userId";
Executing (b4450f1e-a24c-49ad-95ea-25860a280866): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240305121018-share-groups: migrated (0.063s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240305173842-variable-goal-similarity-groups: migrating =======
Executing (b668b2b6-63dd-430b-a785-ee6acf46ddb6): START TRANSACTION;
Connection validated successfully
Executing (b668b2b6-63dd-430b-a785-ee6acf46ddb6): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240305173842-variable-goal-similarity-groups.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b668b2b6-63dd-430b-a785-ee6acf46ddb6): ALTER TABLE "public"."GoalSimilarityGroups" ADD COLUMN "version" INTEGER;
Executing (b668b2b6-63dd-430b-a785-ee6acf46ddb6): ALTER TABLE "public"."GoalSimilarityGroupGoals" ADD COLUMN "excludedIfNotAdmin" BOOLEAN DEFAULT false;
Executing (b668b2b6-63dd-430b-a785-ee6acf46ddb6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240305173842-variable-goal-similarity-groups: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240306000000-monitoring-nonbulkcreate: migrating =======
Executing (568ede3c-b089-4d8c-96cb-7c3794c4f11d): START TRANSACTION;
Connection validated successfully
Executing (568ede3c-b089-4d8c-96cb-7c3794c4f11d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240306000000-monitoring-nonbulkcreate.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (568ede3c-b089-4d8c-96cb-7c3794c4f11d): SELECT setval('"ImportFiles_id_seq"', COALESCE((SELECT MAX(id)+1 FROM "ImportFiles"), 1), false);
Executing (568ede3c-b089-4d8c-96cb-7c3794c4f11d): SELECT setval('"ImportDataFiles_id_seq"', COALESCE((SELECT MAX(id)+1 FROM "ImportDataFiles"), 1), false);
Executing (568ede3c-b089-4d8c-96cb-7c3794c4f11d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240306000000-monitoring-nonbulkcreate: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240306000001-fix-r9-fei-goals: migrating =======
Executing (3520b572-a891-45e7-9685-894bb500d879): START TRANSACTION;
Connection validated successfully
Executing (3520b572-a891-45e7-9685-894bb500d879): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240306000001-fix-r9-fei-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3520b572-a891-45e7-9685-894bb500d879): -- Unlike most goal merging, this is for changing both the ongoing and historical text of goals\n        -- I.e. both the goal text and the text cached to link records are all changed\n\n        -- We also do a before_count and after count that can be compared and should go from 5 to 1 for eac\n\n        DROP TABLE IF EXISTS goals_to_update;\n        CREATE TEMP TABLE goals_to_update\n        AS\n        SELECT * FROM (\n          VALUES -- sorted and deduped\n          (61498, 19017),\n          (61519, 19017),\n          (61520, 19017),\n          (61523, 19017),\n          (64323, 19017),\n          (64331, 19017)\n        ) AS data(gid, correct_template)\n        ;\n        \n        -- GoalTemplates should be empty or the transaction will fail and rollback. They're empty now but this\n        -- guards against attempting to reuse the logic as-is in a future scenario that's more complicated.\n        SELECT 1/(LEAST(COUNT(*),1) - 1)\n        FROM "Goals" g\n        JOIN goals_to_update\n          ON g.id = gid\n        JOIN "GoalTemplates" gt\n          ON g."goalTemplateId" = gt.id;\n\n        -- Guards against there already being goals for the same grant with the correct template already on these ARs.\n        WITH affected_ars AS (\n        SELECT DISTINCT\n          "activityReportId" arid,\n          gid source_gid\n        FROM "ActivityReportGoals" arg\n        JOIN goals_to_update\n          ON arg."goalId" = gid\n        ),\n        relevant_goals AS (\n        SELECT DISTINCT\n          arid,\n          source_gid,\n          "goalId" all_gid,\n          "goalTemplateId" all_gtid,\n          "grantId" all_grid\n        FROM affected_ars\n        JOIN "ActivityReportGoals" arg\n          ON arid = arg."activityReportId"\n        JOIN "Goals" g\n          ON arg."goalId" = g.id\n        )\n        SELECT 1/(LEAST(COUNT(*),1) - 1)\n        FROM goals_to_update gtu\n        JOIN "Goals" g\n          ON gid = g.id\n        JOIN relevant_goals rg\n          ON gid = source_gid\n          AND all_gtid = correct_template\n          AND all_grid = g."grantId";\n\n        -- before counts\n        DROP TABLE IF EXISTS before_count;\n        CREATE TEMP TABLE before_count\n        AS\n        SELECT\n          'Goals' source_table,\n          COUNT(DISTINCT name) unique_goal_texts\n        FROM "Goals" g\n        JOIN goals_to_update\n          ON gid = g.id\n        GROUP BY 1\n        UNION\n        SELECT\n          'ActivityReportGoals' source_table,\n          COUNT(DISTINCT name) unique_goal_texts\n        FROM "ActivityReportGoals" arg\n        JOIN goals_to_update\n          ON gid = arg."goalId"\n        GROUP BY 1;\n\n        UPDATE "Goals" g\n        SET\n          "goalTemplateId" = correct_template,\n          name = gt."templateName"\n        FROM goals_to_update\n        JOIN "GoalTemplates" gt\n          ON  gt.id = correct_template\n        WHERE g.id = gid;\n\n        UPDATE "ActivityReportGoals" arg\n        SET name = gt."templateName"\n        FROM goals_to_update\n        JOIN "GoalTemplates" gt\n          ON gt.id = correct_template\n        WHERE arg."goalId" = gid;\n\n        -- after counts\n        DROP TABLE IF EXISTS after_count;\n        CREATE TEMP TABLE after_count\n        AS\n        SELECT\n          'Goals' source_table,\n          COUNT(DISTINCT name) unique_goal_texts\n        FROM "Goals" g\n        JOIN goals_to_update\n          ON gid = g.id\n        GROUP BY 1\n        UNION\n        SELECT\n          'ActivityReportGoals' source_table,\n          COUNT(DISTINCT name) unique_goal_texts\n        FROM "ActivityReportGoals" arg\n        JOIN goals_to_update\n          ON gid = arg."goalId"\n        GROUP BY 1;
Executing (3520b572-a891-45e7-9685-894bb500d879): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240306000001-fix-r9-fei-goals: migrated (0.034s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240307224936-add-user-roles-and-cleanup-settings: migrating =======
Executing (16b25425-fa9d-40ad-bed2-dd7a440c5fe0): START TRANSACTION;
Connection validated successfully
Executing (16b25425-fa9d-40ad-bed2-dd7a440c5fe0): INSERT INTO "Roles" ("name","fullName","isSpecialist","createdAt","updatedAt") VALUES ('ITM','Interim Management Team',false,'2025-03-28 23:18:59.845 +00:00','2025-03-28 23:18:59.845 +00:00'),('IST','Integrated Service Team',false,'2025-03-28 23:18:59.845 +00:00','2025-03-28 23:18:59.845 +00:00'),('GMS','Grants Management Specialist',false,'2025-03-28 23:18:59.845 +00:00','2025-03-28 23:18:59.845 +00:00');
Executing (16b25425-fa9d-40ad-bed2-dd7a440c5fe0): -- 1.) Cleanup for 'emailWhenReportSubmittedForReview' setting.\n      WITH "overrides" AS (\n        -- Get settings we potentially need to delete.\n        SELECT\n          uso.id as "overrideId",\n          uso."userId",\n          us.key,\n          uso.value\n        FROM "UserSettingOverrides" uso\n        JOIN "UserSettings" us\n          ON uso."userSettingId" = us.id\n        WHERE us.key = 'emailWhenReportSubmittedForReview'\n      ), "usersWithRoles" AS (\n        -- Get array of roles for each user.\n        SELECT\n        ur."userId",\n        ARRAY_AGG(r."name") AS roles\n        FROM "UserRoles" ur\n        JOIN "Roles" r\n          ON ur."roleId" = r.id\n        WHERE ur."userId" IN (\n          SELECT DISTINCT "userId" FROM "overrides"\n        )\n        GROUP BY ur."userId"\n      ), "toCleanUp" AS (\n        -- Compare roles for each setting and delete if necessary.\n        SELECT\n        o."overrideId",\n        o."userId",\n        o.key,\n        o."value",\n        uwr."roles"\n        FROM "overrides" o\n        JOIN "usersWithRoles" uwr\n          ON uwr."userId" = o."userId"\n        WHERE NOT (uwr."roles"::text[] &&  ARRAY['ECM', 'GSM', 'TTAC'])\n      )\n      DELETE FROM "UserSettingOverrides"\n      WHERE id IN (SELECT "overrideId" FROM "toCleanUp");\n\n      -- 2.) Cleanup for 'emailWhenChangeRequested', 'emailWhenReportApproval', 'emailWhenAppointedCollaborator' settings.\n      WITH "overrides" AS (\n        -- Get settings we potentially need to delete.\n        SELECT\n          uso.id as "overrideId",\n          uso."userId",\n          us.key,\n          uso.value\n        FROM "UserSettingOverrides" uso\n        JOIN "UserSettings" us\n          ON uso."userSettingId" = us.id\n        WHERE us.key IN ('emailWhenChangeRequested', 'emailWhenReportApproval', 'emailWhenAppointedCollaborator')\n      ), "usersWithRoles" AS (\n        -- Get array of roles for each user.\n        SELECT\n        ur."userId",\n        ARRAY_AGG(r."name") AS roles\n        FROM "UserRoles" ur\n        JOIN "Roles" r\n          ON ur."roleId" = r.id\n        WHERE ur."userId" IN (\n          SELECT DISTINCT "userId" FROM "overrides"\n        )\n        GROUP BY ur."userId"\n      ), "toCleanUp" AS (\n        -- Compare roles for each setting and delete if necessary.\n        SELECT\n        o."overrideId",\n        o."userId",\n        o.key,\n        o."value",\n        uwr."roles"\n        FROM "overrides" o\n        JOIN "usersWithRoles" uwr\n          ON uwr."userId" = o."userId"\n        WHERE NOT (uwr."roles"::text[] &&  ARRAY['ECM', 'ECS', 'FES', 'GS', 'GSM', 'HS', 'SS', 'TTAC'])\n      )\n      DELETE FROM "UserSettingOverrides"\n      WHERE id IN (SELECT "overrideId" FROM "toCleanUp");\n\n      -- 3.) Cleanup for 'emailWhenRecipientReportApprovedProgramSpecialist' setting.\n      WITH "overrides" AS (\n        -- Get settings we potentially need to delete.\n        SELECT\n          uso.id as "overrideId",\n          uso."userId",\n          us.key,\n          uso.value\n        FROM "UserSettingOverrides" uso\n        JOIN "UserSettings" us\n          ON uso."userSettingId" = us.id\n        WHERE us.key  = 'emailWhenRecipientReportApprovedProgramSpecialist'\n      ), "usersWithRoles" AS (\n        -- Get array of roles for each user.\n        SELECT\n        ur."userId",\n        ARRAY_AGG(r."name") AS roles\n        FROM "UserRoles" ur\n        JOIN "Roles" r\n          ON ur."roleId" = r.id\n        WHERE ur."userId" IN (\n          SELECT DISTINCT "userId" FROM "overrides"\n        )\n        GROUP BY ur."userId"\n      ), "toCleanUp" AS (\n        -- Compare roles for each setting and delete if necessary.\n        SELECT\n        o."overrideId",\n        o."userId",\n        o.key,\n        o."value",\n        uwr."roles"\n        FROM "overrides" o\n        JOIN "usersWithRoles" uwr\n          ON uwr."userId" = o."userId"\n        WHERE NOT (uwr."roles"::text[] &&  ARRAY['PS', 'SPS', 'GMS'])\n      )\n      DELETE FROM "UserSettingOverrides"\n      WHERE id IN (SELECT "overrideId" FROM "toCleanUp");
Executing (16b25425-fa9d-40ad-bed2-dd7a440c5fe0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240307224936-add-user-roles-and-cleanup-settings: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240311000000-add-effectivedate_for_migrated_personnel: migrating =======
Executing (6b6a8ca2-5668-4857-a556-a55e05dea7f3): START TRANSACTION;
Connection validated successfully
Executing (6b6a8ca2-5668-4857-a556-a55e05dea7f3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240311000000-add-effectivedate_for_migrated_personnel.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6b6a8ca2-5668-4857-a556-a55e05dea7f3): -------------\n        -- PROCESS --\n        -------------\n        -- 1: Make sure the migration is valid\n        -- 2: Get unique role assignments, so:\n        --   roles * programs * grants * emails\n        -- 3: Get the instances where people were set active\n        --   This is separate because they may be set active\n        --   in a different transaction than when the rest\n        --   of their data was set\n        -- 4: Get the latest activation timestamp for the currently assigned personnel\n        --   No one appears to have been assigned to the same role * program * grant\n        --   more than once, so this is more of a "due diligence" item\n        -- 5: Update any blank effectiveDates with the latest activation timestamp\n\n        -- 1: Make sure the migration is valid\n        -- (The logic is not guaranteed to work if the values that associate personnel\n        -- with a role in a ProgramPersonnel record have been updated more than once.)\n        CREATE TEMP TABLE invalid_test\n        AS\n        WITH program_personnel_association_updates AS (\n        SELECT\n          data_id,\n          COUNT(DISTINCT new_row_data->>'email') email_cnt,\n          COUNT(DISTINCT new_row_data->>'programId') program_cnt,\n          COUNT(DISTINCT new_row_data->>'grantId') grant_cnt,\n          COUNT(DISTINCT new_row_data->>'role') role_cnt\n        FROM "ZALProgramPersonnel"\n        GROUP BY 1\n        )\n        SELECT *\n        FROM program_personnel_association_updates\n        WHERE email_cnt > 1\n          OR program_cnt > 1\n          OR grant_cnt > 1\n          OR role_cnt > 1\n        ;\n        -- This will cause a divide by zero error that fails the transaction if invalid_test is not empty\n        SELECT\n          1/(LEAST(COUNT(*),1) - 1)\n        FROM invalid_test\n        ;\n        \n        -- 2: Get unique role assignments\n        WITH all_personnel_roles AS (\n        SELECT DISTINCT\n          (new_row_data->>'programId')::int pid,\n          (new_row_data->>'grantId')::int grid,\n          new_row_data->>'role' prole,\n          new_row_data->>'email' email,\n          data_id\n        FROM "ZALProgramPersonnel"\n        ),\n        ordered_effective_dates AS (\n        SELECT\n          pp.id ppid,\n          zpp.dml_timestamp effective_date,\n          -- 4: Count how many times each email * role * program * grant was assigned\n          ROW_NUMBER() OVER (\n            PARTITION BY apr.data_id\n            ORDER BY zpp.dml_timestamp DESC\n          ) date_order\n        FROM "ProgramPersonnel" pp\n        JOIN all_personnel_roles apr\n          ON pp.id = apr.data_id\n          AND pp.email = apr.email\n        -- 3: Get the instances where people were set active\n        JOIN "ZALProgramPersonnel" zpp\n          ON pp.id = zpp.data_id\n          AND (zpp.new_row_data->>'active')::bool = TRUE\n        WHERE pp.active = TRUE\n        )\n        UPDATE "ProgramPersonnel" pp\n        -- 5: Update any blank effectiveDates\n        SET "effectiveDate" = effective_date\n        FROM ordered_effective_dates\n        -- 4: Get the latest activation timestamp\n        WHERE date_order = 1\n          AND ppid = id\n          AND pp."effectiveDate" IS NULL;
Executing (6b6a8ca2-5668-4857-a556-a55e05dea7f3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240311000000-add-effectivedate_for_migrated_personnel: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240313000002-delete_comlog_entry: migrating =======
Executing (1d8f9b22-ed77-4c37-91db-5d2c51eba497): START TRANSACTION;
Connection validated successfully
Executing (1d8f9b22-ed77-4c37-91db-5d2c51eba497): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240313000002-delete_comlog_entry.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1d8f9b22-ed77-4c37-91db-5d2c51eba497): -- Delete communications log records as desired by a customer.\n        -- Because there's no soft delete column (deletedAt), we're:\n        \n        -- Doing a hard DELETE FROM in the communications log and link tables (currently just CommunicationLogFiles)\n        -- Removing any Files that only exist due to the Communication Log.\n\n        -- The File removal step is intensive because currently there are many different ways\n        -- for a File to be linked and all have to be checked before the File can be removed.\n\n        -- Create the sets of things to be deleted and before counts\n        DROP TABLE IF EXISTS before_set;\n        CREATE TEMP TABLE before_set\n        AS\n        SELECT DISTINCT\n          cl.id clid,\n          clf.id clfid,\n          clf."fileId" fid\n        FROM "CommunicationLogs" cl\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON clf."communicationLogId" = cl.id\n        WHERE cl.id IN (788, 888);\n        \n\n        DROP TABLE IF EXISTS before_count;\n        CREATE TEMP TABLE before_count\n        AS\n        SELECT\n          COUNT(DISTINCT clid) comlog_count,\n          COUNT(DISTINCT clfid) comlogfile_count,\n          COUNT(DISTINCT fid) file_count\n        FROM before_set;\n\n        -- Check to see if any files are only present because of this communication log\n        -- unfortunately there's currently many ways to link a file\n        DROP TABLE IF EXISTS files_to_delete;\n        CREATE TEMP TABLE files_to_delete\n        AS\n        WITH candidate_files AS (SELECT DISTINCT fid FROM before_set),\n        file_links AS (\n        SELECT\n          fid,\n          clf.id clfid,\n          arf.id arfid,\n          arof.id arofid,\n          of.id ofid,\n          otf.id otfid,\n          srpf.id srpfid\n        FROM candidate_files cf\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON fid = clf."fileId"\n          AND clf."communicationLogId" NOT IN (SELECT DISTINCT clid FROM before_set)\n        LEFT JOIN "ActivityReportFiles" arf\n          ON fid = arf."fileId"\n        LEFT JOIN "ActivityReportObjectiveFiles" arof\n          ON fid = arof."fileId"\n        LEFT JOIN "ObjectiveFiles" of\n          ON fid = of."fileId"\n        LEFT JOIN "ObjectiveTemplateFiles" otf\n          ON fid = otf."fileId"\n        LEFT JOIN "SessionReportPilotFiles" srpf\n          ON fid = srpf."fileId"\n        )\n        SELECT DISTINCT fid\n        FROM file_links\n        WHERE clfid IS NULL\n          AND arfid IS NULL\n          AND arofid IS NULL\n          AND ofid IS NULL\n          AND otfid IS NULL\n          AND srpfid IS NULL\n          AND fid IS NOT NULL;\n\n        -- Actually start deleting records, starting with the link records\n        DELETE FROM "CommunicationLogFiles" clf\n        USING (SELECT DISTINCT clfid FROM before_set) b\n        WHERE clf.id = b.clfid;\n\n        DELETE FROM "Files" f\n        USING files_to_delete\n        WHERE f.id = fid;\n\n        DELETE FROM "CommunicationLogs" cl\n        USING (SELECT DISTINCT clid FROM before_set) b\n        WHERE cl.id = b.clid;\n\n        -- Show after counts\n        DROP TABLE IF EXISTS after_count;\n        CREATE TEMP TABLE after_count\n        AS\n        WITH target_logs AS (SELECT DISTINCT clid FROM before_set),\n        deleted_files AS (\n        SELECT fid\n        FROM files_to_delete\n        EXCEPT\n        SELECT id\n        FROM "Files"\n        ),\n        df_count AS (SELECT COUNT(*) cnt FROM deleted_files)\n        SELECT\n          COUNT(DISTINCT cl.id) comlog_count,\n          COUNT(DISTINCT clf.id) comlogfile_count,\n          COUNT(DISTINCT clf."fileId") file_count,\n          dfc.cnt deleted_file_count\n        FROM target_logs tl\n        CROSS JOIN df_count dfc\n        LEFT JOIN "CommunicationLogs" cl\n          ON tl.clid = cl.id\n        LEFT JOIN "CommunicationLogFiles" clf\n          ON clf."communicationLogId" = cl.id\n        GROUP BY 4;
Executing (1d8f9b22-ed77-4c37-91db-5d2c51eba497): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240313000002-delete_comlog_entry: migrated (0.039s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240313173842-allow-null-eventreportgoal-session-fk: migrating =======
Executing (5a408ff9-0deb-488d-bb38-857256ec5f16): START TRANSACTION;
Connection validated successfully
Executing (5a408ff9-0deb-488d-bb38-857256ec5f16): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240313173842-allow-null-eventreportgoal-session-fk.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5a408ff9-0deb-488d-bb38-857256ec5f16): ALTER TABLE "EventReportPilotGoals" ALTER COLUMN "sessionId" DROP NOT NULL;ALTER TABLE "EventReportPilotGoals" ALTER COLUMN "sessionId" DROP DEFAULT;ALTER TABLE "EventReportPilotGoals" ALTER COLUMN "sessionId" TYPE INTEGER;
Executing (5a408ff9-0deb-488d-bb38-857256ec5f16): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240313173842-allow-null-eventreportgoal-session-fk: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240320000000-merge_dissimilar_fei_goals: migrating =======
Executing (1991e4dc-4164-4188-8eff-4ab169e40123): START TRANSACTION;
Connection validated successfully
Executing (1991e4dc-4164-4188-8eff-4ab169e40123): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240320000000-merge_dissimilar_fei_goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1991e4dc-4164-4188-8eff-4ab169e40123): -- A user wants non-FEI goals merged into their FEI goal\n\n      -- PROCESS:\n      -- Delete existing root causes (there should be none for this PR)\n      -- Test to make sure no root causes were actually deleted (this PR only)\n      -- Merge objective topics\n      -- Merge objective resources\n      -- Merge objective files\n      -- Delete duplicate objective topics\n      -- Delete duplicate objective resources\n      -- Delete duplicate objective files\n      -- Relink non-goalmerge Objectives\n      -- Update the target goals record history fields from the donor goals\n      -- Relink non-duplicate ARGs\n      -- Delete duplicate ARGs\n      -- Delete donor goals\n\n\n      DROP TABLE IF EXISTS goal_merges;\n      CREATE TEMP TABLE goal_merges\n      AS\n      SELECT * FROM (\n        VALUES -- sorted and deduped\n        (47264, 69397),\n        (50779, 69397),\n        (52085, 69397),\n        (69396, 69397),\n        (69401, 69397)\n      ) AS data(donor_gid, target_gid)\n      ;\n\n      -- This should be empty for TTAHUB-2664\n      DROP TABLE IF EXISTS deleted_gfrs;\n      CREATE TEMP TABLE deleted_gfrs\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalFieldResponses"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gfrid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Exit if any GFR deletions(TTAHUB-2664 only)\n      SELECT\n        1/(LEAST(COUNT(*),1) - 1)\n      FROM deleted_gfrs\n      ;\n      \n      -- Merge goal collaborators\n      DROP TABLE IF EXISTS relinked_goal_collaborators;\n      CREATE TEMP TABLE relinked_goal_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_gid,\n            "userId" uid\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.donor_gid = gc."goalId"\n          EXCEPT\n          SELECT\n            donor_gid,\n            "userId"\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.target_gid = gc."goalId"\n        )\n        UPDATE "GoalCollaborators" AS gc\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.donor_gid = gm.donor_gid\n        WHERE gc."userId" = u.uid\n          AND gc."goalId" = u.donor_gid\n        RETURNING\n          id gcid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      DROP TABLE IF EXISTS objective_merges;\n      CREATE TEMP TABLE objective_merges\n      AS\n      SELECT\n        donor_obj.id donor_oid,\n        target_obj.id target_oid\n      FROM goal_merges gm\n      JOIN "Objectives" donor_obj\n        ON gm.donor_gid = donor_obj."goalId"\n      JOIN "Objectives" target_obj\n        ON gm.target_gid = target_obj."goalId"\n        AND donor_obj.title = target_obj.title\n      WHERE donor_obj.id != target_obj.id\n      ;\n      \n      -- Merge goal collaborators\n      DROP TABLE IF EXISTS relinked_objective_collaborators;\n      CREATE TEMP TABLE relinked_objective_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "userId" uid\n          FROM objective_merges om\n          JOIN "ObjectiveCollaborators" oc\n            ON om.donor_oid = oc."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "userId"\n          FROM objective_merges om\n          JOIN "ObjectiveCollaborators" oc\n            ON om.target_oid = oc."objectiveId"\n        )\n        UPDATE "ObjectiveCollaborators" AS oc\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE oc."userId" = u.uid\n          AND oc."objectiveId" = u.donor_oid\n        RETURNING\n          id ocid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target objectives\n      DROP TABLE IF EXISTS updated_target_objectives;\n      CREATE TEMP TABLE updated_target_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" AS o\n        SET\n          "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n          "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n          "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n          "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n          "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n          "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n        FROM objective_merges om\n        JOIN "Objectives" d_o\n          ON om.donor_oid = d_o.id\n        WHERE om.target_oid = o.id\n        RETURNING\n          o.id oid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      \n      -- Merge objective topics\n      DROP TABLE IF EXISTS relinked_objective_topics;\n      CREATE TEMP TABLE relinked_objective_topics\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "topicId" tid\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.donor_oid = ot."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "topicId"\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.target_oid = ot."objectiveId"\n        )\n        UPDATE "ObjectiveTopics" AS ot\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE ot."topicId" = u.tid\n          AND ot."objectiveId" = u.donor_oid\n        RETURNING\n          id otid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Merge objective resources\n      DROP TABLE IF EXISTS relinked_objective_resources;\n      CREATE TEMP TABLE relinked_objective_resources\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "resourceId" rid\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.donor_oid = o_r."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "resourceId"\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.target_oid = o_r."objectiveId"\n        )\n        UPDATE "ObjectiveResources" AS o_r\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE o_r."resourceId" = u.rid\n          AND o_r."objectiveId" = u.donor_oid\n        RETURNING\n          id orid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Merge objective files\n      DROP TABLE IF EXISTS relinked_objective_files;\n      CREATE TEMP TABLE relinked_objective_files\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "fileId" fid\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.donor_oid = of."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "fileId"\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.target_oid = of."objectiveId"\n        )\n        UPDATE "ObjectiveFiles" AS of\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE of."fileId" = u.fid\n          AND of."objectiveId" = u.donor_oid\n        RETURNING\n          id ofid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective topics\n      DROP TABLE IF EXISTS deleted_objective_topics;\n      CREATE TEMP TABLE deleted_objective_topics\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveTopics"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id otid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective resources\n      DROP TABLE IF EXISTS deleted_objective_resources;\n      CREATE TEMP TABLE deleted_objective_resources\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveResources"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id orid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective files\n      DROP TABLE IF EXISTS deleted_objective_files;\n      CREATE TEMP TABLE deleted_objective_files\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveFiles"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ofid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Link objectives on merged goals to the FEI goals\n      DROP TABLE IF EXISTS relinked_objectives;\n      CREATE TEMP TABLE relinked_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives"\n        SET "goalId" = target_gid\n        FROM goal_merges\n        WHERE "goalId" = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          id oid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target goals\n      DROP TABLE IF EXISTS updated_target_goals;\n      CREATE TEMP TABLE updated_target_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          "updatedAt" = GREATEST(dg."updatedAt", g."updatedAt"),\n          "firstNotStartedAt" = LEAST(dg."firstNotStartedAt", g."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(dg."lastNotStartedAt", g."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(dg."firstInProgressAt", g."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(dg."lastInProgressAt", g."lastInProgressAt"),\n          "firstCeasedSuspendedAt" = LEAST(dg."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt"),\n          "lastCeasedSuspendedAt" = GREATEST(dg."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt"),\n          "firstClosedAt" = LEAST(dg."firstClosedAt", g."firstClosedAt"),\n          "lastClosedAt" = GREATEST(dg."lastClosedAt", g."lastClosedAt")\n        FROM goal_merges gm\n        JOIN "Goals" dg\n          ON gm.donor_gid = dg.id\n        WHERE gm.target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- relink non-duplicate ARGs\n      DROP TABLE IF EXISTS relinked_args;\n      CREATE TEMP TABLE relinked_args\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            "activityReportId" arid,\n            "goalId" gid\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.donor_gid = arg."goalId"\n          EXCEPT\n          SELECT\n            "activityReportId",\n            "goalId"\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.target_gid = arg."goalId"\n        )\n        UPDATE "ActivityReportGoals" AS arg\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.gid = gm.donor_gid\n        WHERE arg."goalId" = u.gid\n          AND arg."activityReportId" = u.arid\n        RETURNING\n          id argid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id argid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Soft delete donor goals\n      DROP TABLE IF EXISTS deleted_goals;\n      CREATE TEMP TABLE deleted_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals"\n        SET "deletedAt" = NOW()\n        FROM goal_merges\n        WHERE id = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          target_gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate goal collaborators\n      DROP TABLE IF EXISTS deleted_goal_collaborators;\n      CREATE TEMP TABLE deleted_goal_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalCollaborators"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gcid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective collaborators\n      DROP TABLE IF EXISTS deleted_objective_collaborators;\n      CREATE TEMP TABLE deleted_objective_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveCollaborators"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ocid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      SELECT\n        1 op_order,\n        'deleted_gfrs' operation,\n        COUNT(*) cnt\n      FROM deleted_gfrs\n      UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n      UNION SELECT 3,'relinked_objective_topics', COUNT(*) FROM relinked_objective_topics\n      UNION SELECT 4,'relinked_objective_resources', COUNT(*) FROM relinked_objective_resources\n      UNION SELECT 5,'relinked_objective_files', COUNT(*) FROM relinked_objective_files\n      UNION SELECT 6,'deleted_objective_topics', COUNT(*) FROM deleted_objective_topics\n      UNION SELECT 7,'deleted_objective_resources', COUNT(*) FROM deleted_objective_resources\n      UNION SELECT 8,'deleted_objective_files', COUNT(*) FROM deleted_objective_files\n      UNION SELECT 9,'relinked_objectives', COUNT(*) FROM relinked_objectives\n      UNION SELECT 10,'updated_target_goals', COUNT(*) FROM updated_target_goals\n      UNION SELECT 11,'relinked_args', COUNT(*) FROM relinked_args\n      UNION SELECT 12,'deleted_args', COUNT(*) FROM deleted_args\n      UNION SELECT 13,'deleted_goals', COUNT(*) FROM deleted_goals\n      UNION SELECT 14,'relinked_goal_collaborators', COUNT(*) FROM relinked_goal_collaborators\n      UNION SELECT 15,'deleted_goal_collaborators', COUNT(*) FROM deleted_goal_collaborators\n      UNION SELECT 16,'relinked_objective_collaborators', COUNT(*) FROM relinked_objective_collaborators\n      UNION SELECT 17,'deleted_objective_collaborators', COUNT(*) FROM deleted_objective_collaborators\n      ORDER BY 1\n      ;
Executing (1991e4dc-4164-4188-8eff-4ab169e40123): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240320000000-merge_dissimilar_fei_goals: migrated (0.123s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240321002253-create-goals-for-completed-sessions: migrating =======
Executing (776feaff-f096-4747-ac97-10e54c90dc63): START TRANSACTION;
Connection validated successfully
Executing (776feaff-f096-4747-ac97-10e54c90dc63): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240321002253-create-goals-for-completed-sessions.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (776feaff-f096-4747-ac97-10e54c90dc63): SELECT id, "eventId", data\n      FROM "SessionReportPilots"\n      WHERE data->>'status' = 'Complete';
Executing (776feaff-f096-4747-ac97-10e54c90dc63): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240321002253-create-goals-for-completed-sessions: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240326004505-cache-table-for-training-reports: migrating =======
Executing (fd2911cf-550b-4dcc-b084-d60d43aa158c): START TRANSACTION;
Connection validated successfully
Executing (fd2911cf-550b-4dcc-b084-d60d43aa158c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240326004505-cache-table-for-training-reports.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "EventReportPilotNationalCenterUsers" ("id"  SERIAL , "eventReportPilotId" INTEGER NOT NULL REFERENCES "EventReportPilots" ("id") ON DELETE CASCADE, "nationalCenterName" VARCHAR(255) NOT NULL, "nationalCenterId" INTEGER NOT NULL REFERENCES "NationalCenters" ("id"), "userId" INTEGER NOT NULL REFERENCES "Users" ("id"), "userName" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (fd2911cf-550b-4dcc-b084-d60d43aa158c): ALTER TABLE "EventReportPilotNationalCenterUsers"\n      ADD CONSTRAINT "EventReportPilotNationalCenterUsers_nationalCenterId_userId_eventReportPilotId_unique" UNIQUE ("nationalCenterId", "eventReportPilotId", "userId");
Executing (fd2911cf-550b-4dcc-b084-d60d43aa158c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240326004505-cache-table-for-training-reports: migrated (0.068s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240327150240-training_reports_dashboard_feature-flag: migrating =======
Executing (730abdd6-6c68-4a8e-b13a-9ac8a1fa2faf): START TRANSACTION;
Connection validated successfully
Executing (730abdd6-6c68-4a8e-b13a-9ac8a1fa2faf): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240327150240-training_reports_dashboard_feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (730abdd6-6c68-4a8e-b13a-9ac8a1fa2faf): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240327150240-training_reports_dashboard_feature-flag: migrated (0.044s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240403000000-reopen-closed-FEI-goals: migrating =======
Executing (80bb045e-7799-4f61-bce8-9c8c549f7a20): START TRANSACTION;
Connection validated successfully
Executing (80bb045e-7799-4f61-bce8-9c8c549f7a20): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240403000000-reopen-closed-FEI-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51128;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51130;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51131;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51095;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51096;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 66611;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51115;
Executing (default): UPDATE "Goals" g\n      SET status = 'In Progress'\n      WHERE g.id = 51105;
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (default): UPDATE "ActivityReportGoals" arg\n      SET source = 'Regional office priority'\n      WHERE arg.id = 99676;
Connection validated successfully
Executing (default): DELETE FROM "ActivityReportGoals" arg\n      WHERE arg.id = 99685;
Connection validated successfully
Executing (80bb045e-7799-4f61-bce8-9c8c549f7a20): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240403000000-reopen-closed-FEI-goals: migrated (0.035s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240409162356-remove-duplicate-goals-for-same-grant: migrating =======
Executing (f6a13fd1-816f-4968-b98b-8c9255ae9c55): START TRANSACTION;
Connection validated successfully
Executing (f6a13fd1-816f-4968-b98b-8c9255ae9c55): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240409162356-remove-duplicate-goals-for-same-grant.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (f6a13fd1-816f-4968-b98b-8c9255ae9c55): --  1. Identify the affected reports/grants/goals\n      DROP TABLE IF EXISTS tmp_affected_reports_grants_goals;\n      CREATE TEMP TABLE tmp_affected_reports_grants_goals\n      AS\n      SELECT\n        arg."activityReportId",\n        r.name "Recipeint",\n        gr.id "grantId",\n        gr."number",\n        array_agg(DISTINCT g.id ORDER BY g.id) "goalIds",\n        min(arg."createdAt") "earliest createdAt",\n        g.name\n      FROM "ActivityReportGoals" arg\n      JOIN "Goals" g\n      ON arg."goalId" = g.id\n      JOIN "Grants" gr\n      on g."grantId" = gr.id\n      JOIN "Recipients" r\n      ON gr."recipientId" = r.id\n      GROUP BY 1,2,3,4,7\n      HAVING COUNT(DISTINCT g.id) > 1\n      AND COUNT(DISTINCT g.id) != COUNT(DISTINCT g.name)\n      ORDER BY 1 desc,2,3;\n      --  2. Identify the affected objectives\n      DROP TABLE IF EXISTS tmp_affected_objectives;\n      CREATE TEMP TABLE tmp_affected_objectives\n      AS\n      SELECT\n        targg."activityReportId",\n        targg."grantId",\n        targg."goalIds"[1] "originalGoalId",\n        targg."goalIds"[2] "extraGoalId",\n        array_remove(array_agg(DISTINCT aro."objectiveId" ORDER BY aro."objectiveId") filter (where o."goalId" = targg."goalIds"[1]),null) "originalGoalObjectiveIds",\n        array_remove(array_agg(DISTINCT aro."objectiveId" ORDER BY aro."objectiveId") filter (where o."goalId" = targg."goalIds"[2]),null) "extraGoalObjectiveIds",\n        aro.title\n      FROM tmp_affected_reports_grants_goals targg\n      LEFT JOIN "Objectives" o\n      ON o."goalId" = any(targg."goalIds")\n      left join "ActivityReportObjectives" aro\n      ON o.id = aro."objectiveId"\n      AND targg."activityReportId" = aro."activityReportId"\n      group by 1,2,3,4,7\n      having aro.title is not null;\n      --  3. create missing objectives on original goals\n      DROP TABLE IF EXISTS tmp_created_missing_objectives;\n      CREATE TEMP TABLE tmp_created_missing_objectives AS\n      WITH created_missing_objectives AS (\n          INSERT INTO "Objectives" (\n              "goalId",\n              title,\n              status,\n              "createdAt",\n              "updatedAt",\n              "objectiveTemplateId",\n              "onApprovedAR",\n              "rtrOrder",\n              "createdVia",\n              "onAR",\n              "closeSuspendReason",\n              "closeSuspendContext",\n              "supportType"\n          )\n          SELECT\n              tao."originalGoalId" AS "goalId",\n              o.title,\n              (ARRAY_AGG(DISTINCT o.status))[1] AS "status",\n              MIN(o."createdAt") AS "createdAt",\n              MAX(o."updatedAt") AS "updatedAt",\n              o."objectiveTemplateId",\n              bool_or(o."onApprovedAR"),\n              MIN(o."rtrOrder") AS "rtrOrder",\n              (ARRAY_AGG(DISTINCT o."createdVia"))[1] AS "createdVia",\n              bool_or(o."onAR"),\n              (ARRAY_AGG(DISTINCT o."closeSuspendReason"))[1] AS "closeSuspendReason",\n              (ARRAY_AGG(DISTINCT o."closeSuspendContext"))[1] AS "closeSuspendContext",\n              (ARRAY_AGG(DISTINCT o."supportType"))[1] AS "supportType"\n          FROM "Objectives" o\n          JOIN tmp_affected_objectives tao ON o.id = ANY(tao."extraGoalObjectiveIds")\n          WHERE "originalGoalObjectiveIds" IS NULL\n          GROUP BY 1, 2, 6\n          RETURNING\n            id,\n            "goalId",\n            title,\n            status,\n            "createdAt",\n            "updatedAt",\n            "objectiveTemplateId",\n            "onApprovedAR",\n            "rtrOrder",\n            "createdVia",\n            "onAR",\n            "closeSuspendReason",\n            "closeSuspendContext",\n            "supportType"\n      )\n      SELECT\n          tao."activityReportId",\n          tao."grantId",\n          cmo."goalId",\n          cmo.id AS "objectiveId",\n          cmo.title,\n          cmo.status,\n          cmo."createdAt",\n          cmo."updatedAt",\n          cmo."objectiveTemplateId",\n          cmo."onApprovedAR",\n          cmo."rtrOrder",\n          cmo."createdVia",\n          cmo."onAR",\n          cmo."closeSuspendReason",\n          cmo."closeSuspendContext",\n          cmo."supportType"\n      FROM created_missing_objectives cmo\n      JOIN tmp_affected_objectives tao ON cmo."goalId" = tao."originalGoalId"\n      AND cmo.title = tao.title;\n      --  4. add new objectives to reports\n      DROP TABLE IF EXISTS tmp_missing_objectives_added_to_reports;\n      CREATE TEMP TABLE tmp_missing_objectives_added_to_reports\n      AS\n      WITH missing_objectives_added_to_reports AS (\n        INSERT INTO "ActivityReportObjectives"\n        (\n          "activityReportId",\n          "objectiveId",\n          "createdAt",\n          "updatedAt",\n          "ttaProvided",\n          "title",\n          "status",\n          "arOrder",\n          "closeSuspendReason",\n          "closeSuspendContext",\n          "supportType"\n        )\n        SELECT\n          tcmo."activityReportId",\n          tcmo."objectiveId",\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          (ARRAY_AGG(DISTINCT aro."ttaProvided"))[1] "ttaProvided",\n          o.title,\n          (ARRAY_AGG(DISTINCT aro.status))[1] "status",\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(DISTINCT aro."closeSuspendReason"))[1] "closeSuspendReason",\n          (ARRAY_AGG(DISTINCT aro."closeSuspendContext"))[1] "closeSuspendContext",\n          (ARRAY_AGG(DISTINCT aro."supportType"))[1] "supportType"\n        FROM tmp_created_missing_objectives tcmo\n        JOIN "Objectives" o\n        ON tcmo."objectiveId" = o.id\n        JOIN tmp_affected_objectives tao\n        ON tcmo."activityReportId" = tao."activityReportId"\n        AND tcmo."grantId" = tao."grantId"\n        AND tcmo."goalId" = tao."originalGoalId"\n        JOIN "ActivityReportObjectives" aro\n        ON tcmo."activityReportId" = aro."activityReportId"\n        AND aro."objectiveId" = ANY(tao."extraGoalObjectiveIds")\n        GROUP BY 1,2,6\n        RETURNING\n          id,\n          "activityReportId",\n          "objectiveId",\n          title\n      )\n      SELECT\n        moatr."activityReportId",\n        moatr."objectiveId",\n        moatr.title\n      FROM missing_objectives_added_to_reports moatr;\n      --  5. Identify the affected objectives\n      DROP TABLE IF EXISTS tmp_affected_objectives;\n      CREATE TEMP TABLE tmp_affected_objectives\n      AS\n      SELECT\n        targg."activityReportId",\n        targg."grantId",\n        targg."goalIds"[1] "originalGoalId",\n        targg."goalIds"[2] "extraGoalId",\n        array_remove(array_agg(DISTINCT aro."objectiveId" ORDER BY aro."objectiveId") filter (where o."goalId" = targg."goalIds"[1]),null) "originalGoalObjectiveIds",\n        array_remove(array_agg(DISTINCT aro."objectiveId" ORDER BY aro."objectiveId") filter (where o."goalId" = targg."goalIds"[2]),null) "extraGoalObjectiveIds",\n        aro.title\n      FROM tmp_affected_reports_grants_goals targg\n      LEFT JOIN "Objectives" o\n      ON o."goalId" = any(targg."goalIds")\n      left join "ActivityReportObjectives" aro\n      ON o.id = aro."objectiveId"\n      AND targg."activityReportId" = aro."activityReportId"\n      group by 1,2,3,4,7\n      having aro.title is not null;\n      --  6. Sync courses from extra activity report objectives to main objective\n      DROP TABLE IF EXISTS tmp_sync_courses_across_affected_objectives;\n      CREATE TEMP TABLE tmp_sync_courses_across_affected_objectives\n      AS\n      WITH sync_courses_across_affected_objectives AS (\n        INSERT INTO "ActivityReportObjectiveCourses"\n        (\n          "activityReportObjectiveId",\n          "courseId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro.id "activityReportObjectiveId",\n          aroc_e."courseId" "courseId",\n          MIN(aroc_e."createdAt") "createdAt",\n          MAX(aroc_e."updatedAt") "updatedAt"\n        FROM tmp_affected_objectives tao\n        JOIN "ActivityReportObjectives" aro\n        ON tao."activityReportId" = aro."activityReportId"\n        AND tao."originalGoalObjectiveIds"[1] = aro."objectiveId"\n        JOIN (\n          SELECT\n            aroc.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveCourses" aroc\n          JOIN "ActivityReportObjectives" aro\n          ON aroc."activityReportObjectiveId" = aro.id\n        ) aroc_e\n        ON aroc_e."objectiveId" = any(tao."extraGoalObjectiveIds")\n        OR (aroc_e."objectiveId" = any(tao."originalGoalObjectiveIds")\n          AND aroc_e."objectiveId" != tao."originalGoalObjectiveIds"[1])\n        LEFT JOIN (\n          SELECT\n            aroc.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveCourses" aroc\n          JOIN "ActivityReportObjectives" aro\n          ON aroc."activityReportObjectiveId" = aro.id\n        ) aroc_o\n        ON aroc_o."objectiveId" = tao."originalGoalObjectiveIds"[1]\n        AND aroc_e."courseId" = aroc_o."courseId"\n        WHERE aroc_o.id is null\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "activityReportObjectiveId",\n          "courseId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        scafo."activityReportObjectiveId",\n        scafo."courseId",\n        scafo."createdAt",\n        scafo."updatedAt"\n      FROM sync_courses_across_affected_objectives scafo;\n      --  7. Sync corses into the objective\n      DROP TABLE IF EXISTS tmp_sync_course_to_objectives;\n      CREATE TEMP TABLE tmp_sync_course_to_objectives\n      AS\n      WITH sync_course_to_objectives AS (\n        INSERT INTO "ObjectiveCourses"\n        (\n          "objectiveId",\n          "courseId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro."objectiveId" "objectiveId",\n        tscao."courseId",\n        MIN(tscao."createdAt") "createdAt",\n        MAX(tscao."updatedAt") "updatedAt"\n        FROM tmp_sync_courses_across_affected_objectives tscao\n        JOIN "ActivityReportObjectives" aro\n        ON tscao."activityReportObjectiveId" = aro.id\n        LEFT JOIN "ObjectiveCourses" oc\n        ON tscao."courseId" = oc."courseId"\n        AND aro."objectiveId" = oc."objectiveId"\n        WHERE oc.id IS NULL\n        GROUP BY 1,2\n        RETURNING\n          id,\n        "objectiveId",\n        "courseId",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        scto."objectiveId",\n        scto."courseId",\n        scto."createdAt",\n        scto."updatedAt"\n      FROM sync_course_to_objectives scto;\n      --  8. Sync files from extra activity report objectives to main objective\n      DROP TABLE IF EXISTS tmp_sync_files_across_affected_objectives;\n      CREATE TEMP TABLE tmp_sync_files_across_affected_objectives\n      AS\n      WITH sync_files_across_affected_objectives AS (\n        INSERT INTO "ActivityReportObjectiveFiles"\n        (\n          "activityReportObjectiveId",\n          "fileId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro.id "activityReportObjectiveId",\n          arof_e."fileId" "fileId",\n          MIN(arof_e."createdAt") "createdAt",\n          MAX(arof_e."updatedAt") "updatedAt"\n        FROM tmp_affected_objectives tao\n        JOIN "ActivityReportObjectives" aro\n        ON tao."activityReportId" = aro."activityReportId"\n        AND tao."originalGoalObjectiveIds"[1] = aro."objectiveId"\n        JOIN (\n          SELECT\n            arof.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveFiles" arof\n          JOIN "ActivityReportObjectives" aro\n          ON arof."activityReportObjectiveId" = aro.id\n        ) arof_e\n        ON arof_e."objectiveId" = any(tao."extraGoalObjectiveIds")\n        OR (arof_e."objectiveId" = any(tao."originalGoalObjectiveIds")\n          AND arof_e."objectiveId" != tao."originalGoalObjectiveIds"[1])\n        LEFT JOIN (\n          SELECT\n            arof.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveFiles" arof\n          JOIN "ActivityReportObjectives" aro\n          ON arof."activityReportObjectiveId" = aro.id\n        ) arof_o\n        ON arof_o."objectiveId" = tao."originalGoalObjectiveIds"[1]\n        AND arof_e."fileId" = arof_o."fileId"\n        WHERE arof_o.id is null\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "activityReportObjectiveId",\n          "fileId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        sfafo."activityReportObjectiveId",\n        sfafo."fileId",\n        sfafo."createdAt",\n        sfafo."updatedAt"\n      FROM sync_files_across_affected_objectives sfafo;\n      --  9. Sync files into the objective\n      DROP TABLE IF EXISTS tmp_sync_file_to_objectives;\n      CREATE TEMP TABLE tmp_sync_file_to_objectives\n      AS\n      WITH sync_file_to_objectives AS (\n        INSERT INTO "ObjectiveFiles"\n        (\n          "objectiveId",\n          "fileId",\n        "createdAt",\n        "updatedAt"\n        )\n        SELECT\n          aro."objectiveId" "objectiveId",\n          tsfao."fileId",\n          MIN(tsfao."createdAt") "createdAt",\n          MAX(tsfao."updatedAt") "updatedAt"\n        FROM tmp_sync_files_across_affected_objectives tsfao\n        JOIN "ActivityReportObjectives" aro\n        ON tsfao."activityReportObjectiveId" = aro.id\n        LEFT JOIN "ObjectiveFiles" fo\n        ON tsfao."fileId" = fo."fileId"\n        AND aro."objectiveId" = fo."objectiveId"\n        WHERE fo.id IS NULL\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "objectiveId",\n          "fileId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        sfto."objectiveId",\n        sfto."fileId",\n        sfto."createdAt",\n        sfto."updatedAt"\n      FROM sync_file_to_objectives sfto;\n      -- 10. Sync resources from extra activity report objectives to main objective\n      DROP TABLE IF EXISTS tmp_sync_resources_across_affected_objectives;\n      CREATE TEMP TABLE tmp_sync_resources_across_affected_objectives\n      AS\n      WITH sync_resources_across_affected_objectives AS (\n        INSERT INTO "ActivityReportObjectiveResources"\n        (\n          "activityReportObjectiveId",\n          "resourceId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro.id "activityReportObjectiveId",\n          aror_e."resourceId" "resourceId",\n          MIN(aror_e."createdAt") "createdAt",\n          MAX(aror_e."updatedAt") "updatedAt"\n        FROM tmp_affected_objectives tao\n        JOIN "ActivityReportObjectives" aro\n        ON tao."activityReportId" = aro."activityReportId"\n        AND tao."originalGoalObjectiveIds"[1] = aro."objectiveId"\n        JOIN (\n          SELECT\n            aror.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveResources" aror\n          JOIN "ActivityReportObjectives" aro\n          ON aror."activityReportObjectiveId" = aro.id\n        ) aror_e\n        ON aror_e."objectiveId" = any(tao."extraGoalObjectiveIds")\n        OR (aror_e."objectiveId" = any(tao."originalGoalObjectiveIds")\n          AND aror_e."objectiveId" != tao."originalGoalObjectiveIds"[1])\n        LEFT JOIN (\n          SELECT\n            aror.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveResources" aror\n          JOIN "ActivityReportObjectives" aro\n          ON aror."activityReportObjectiveId" = aro.id\n        ) aror_o\n        ON aror_o."objectiveId" = tao."originalGoalObjectiveIds"[1]\n        AND aror_e."resourceId" = aror_o."resourceId"\n        WHERE aror_o.id is null\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "activityReportObjectiveId",\n          "resourceId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        srafo."activityReportObjectiveId",\n        srafo."resourceId",\n      srafo."createdAt",\n      srafo."updatedAt"\n      FROM sync_resources_across_affected_objectives srafo;\n      -- 11. Sync resources into the objective\n      DROP TABLE IF EXISTS tmp_sync_resource_to_objectives;\n      CREATE TEMP TABLE tmp_sync_resource_to_objectives\n      AS\n      WITH sync_resource_to_objectives AS (\n        INSERT INTO "ObjectiveResources"\n        (\n          "objectiveId",\n          "resourceId",\n        "createdAt",\n        "updatedAt"\n        )\n        SELECT\n          aro."objectiveId" "objectiveId",\n          tsrao."resourceId",\n          MIN(tsrao."createdAt") "createdAt",\n          MAX(tsrao."updatedAt") "updatedAt"\n        FROM tmp_sync_resources_across_affected_objectives tsrao\n        JOIN "ActivityReportObjectives" aro\n        ON tsrao."activityReportObjectiveId" = aro.id\n        LEFT JOIN "ObjectiveResources" ro\n        ON tsrao."resourceId" = ro."resourceId"\n        AND aro."objectiveId" = ro."objectiveId"\n        WHERE ro.id IS NULL\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "objectiveId",\n          "resourceId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        srto."objectiveId",\n        srto."resourceId",\n        srto."createdAt",\n        srto."updatedAt"\n      FROM sync_resource_to_objectives srto;\n      -- 12. Sync topics from extra activity report objectives to main objective\n      DROP TABLE IF EXISTS tmp_sync_topics_across_affected_objectives;\n      CREATE TEMP TABLE tmp_sync_topics_across_affected_objectives\n      AS\n      WITH sync_topics_across_affected_objectives AS (\n        INSERT INTO "ActivityReportObjectiveTopics"\n        (\n          "activityReportObjectiveId",\n          "topicId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro.id "activityReportObjectiveId",\n          arot_e."topicId" "topicId",\n          MIN(arot_e."createdAt") "createdAt",\n          MAX(arot_e."updatedAt") "updatedAt"\n        FROM tmp_affected_objectives tao\n        JOIN "ActivityReportObjectives" aro\n        ON tao."activityReportId" = aro."activityReportId"\n        AND tao."originalGoalObjectiveIds"[1] = aro."objectiveId"\n        JOIN (\n          SELECT\n            arot.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveTopics" arot\n          JOIN "ActivityReportObjectives" aro\n          ON arot."activityReportObjectiveId" = aro.id\n        ) arot_e\n        ON arot_e."objectiveId" = any(tao."extraGoalObjectiveIds")\n        OR (arot_e."objectiveId" = any(tao."originalGoalObjectiveIds")\n          AND arot_e."objectiveId" != tao."originalGoalObjectiveIds"[1])\n        LEFT JOIN (\n          SELECT\n            arot.*,\n            aro."objectiveId"\n          FROM "ActivityReportObjectiveTopics" arot\n          JOIN "ActivityReportObjectives" aro\n          ON arot."activityReportObjectiveId" = aro.id\n        ) arot_o\n        ON arot_o."objectiveId" = tao."originalGoalObjectiveIds"[1]\n        AND arot_e."topicId" = arot_o."topicId"\n        WHERE arot_o.id is null\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "activityReportObjectiveId",\n          "topicId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        stafo."activityReportObjectiveId",\n        stafo."topicId",\n        stafo."createdAt",\n        stafo."updatedAt"\n      FROM sync_topics_across_affected_objectives stafo;\n      -- 13. Sync topics into the objective\n      DROP TABLE IF EXISTS tmp_sync_topic_to_objectives;\n      CREATE TEMP TABLE tmp_sync_topic_to_objectives\n      AS\n      WITH sync_topic_to_objectives AS (\n        INSERT INTO "ObjectiveTopics"\n        (\n          "objectiveId",\n          "topicId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          aro."objectiveId" "objectiveId",\n          tstao."topicId",\n          MIN(tstao."createdAt") "createdAt",\n          MAX(tstao."updatedAt") "updatedAt"\n        FROM tmp_sync_topics_across_affected_objectives tstao\n        JOIN "ActivityReportObjectives" aro\n        ON tstao."activityReportObjectiveId" = aro.id\n        LEFT JOIN "ObjectiveTopics" ot\n        ON tstao."topicId" = ot."topicId"\n        AND aro."objectiveId" = ot."objectiveId"\n        WHERE ot.id IS NULL\n        GROUP BY 1,2\n        RETURNING\n          id,\n          "objectiveId",\n          "topicId",\n          "createdAt",\n          "updatedAt"\n      )\n      SELECT\n        srto."objectiveId",\n        srto."topicId",\n        srto."createdAt",\n        srto."updatedAt"\n      FROM sync_topic_to_objectives srto;\n      -- 14. Identify objectives to unlink from reports\n      DROP TABLE IF EXISTS tmp_objectives_to_unlink_from_reports;\n      CREATE TEMP TABLE tmp_objectives_to_unlink_from_reports\n      AS\n      WITH objectives_to_unlink AS (\n        SELECT\n          tao."activityReportId",\n          ego."objectiveId"\n        FROM tmp_affected_objectives tao\n        CROSS JOIN UNNEST(tao."extraGoalObjectiveIds") ego("objectiveId")\n        UNION\n        SELECT\n          tao."activityReportId",\n          ego."objectiveId"\n        FROM tmp_affected_objectives tao\n        CROSS JOIN UNNEST(tao."originalGoalObjectiveIds") ego("objectiveId")\n        WHERE ego."objectiveId" != tao."originalGoalObjectiveIds"[1]\n      )\n      SELECT\n        aro.*\n      FROM "ActivityReportObjectives" aro\n      JOIN objectives_to_unlink otu\n      ON aro."activityReportId" = otu."activityReportId"\n      AND aro."objectiveId" = otu."objectiveId";\n      -- 15. Remove courses for objectives to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_courses;\n      CREATE TEMP TABLE tmp_removed_activity_report_objective_courses\n      AS\n      WITH remove_activity_report_objective_courses AS (\n        SELECT\n          aroc.id\n        FROM tmp_objectives_to_unlink_from_reports totufr\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON totufr.id = aroc."activityReportObjectiveId"\n      ),\n      removed_activity_report_objective_courses AS (\n        DELETE FROM "ActivityReportObjectiveCourses" aroc\n        USING remove_activity_report_objective_courses raroc\n        WHERE aroc.id = raroc.id\n        RETURNING\n          aroc.id,\n          aroc."activityReportObjectiveId",\n          aroc."courseId"\n      )\n      SELECT\n        raroc.id,\n        raroc."activityReportObjectiveId",\n        raroc."courseId"\n      FROM removed_activity_report_objective_courses raroc;\n      -- 16. Remove files for objectives to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_files;\n      CREATE TEMP TABLE tmp_removed_activity_report_objective_files\n      AS\n      WITH remove_activity_report_objective_files AS (\n        SELECT\n          arof.id\n        FROM tmp_objectives_to_unlink_from_reports totufr\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON totufr.id = arof."activityReportObjectiveId"\n      ),\n      removed_activity_report_objective_files AS (\n        DELETE FROM "ActivityReportObjectiveFiles" arof\n        USING remove_activity_report_objective_files rarof\n        WHERE arof.id = rarof.id\n        RETURNING\n          arof.id,\n          arof."activityReportObjectiveId",\n          arof."fileId"\n      )\n      SELECT\n        rarof.id,\n        rarof."activityReportObjectiveId",\n        rarof."fileId"\n      FROM removed_activity_report_objective_files rarof;\n      -- 17. Remove resources for objectives to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_resources;\n      CREATE TEMP TABLE tmp_removed_activity_report_objective_resources\n      AS\n      WITH remove_activity_report_objective_resources AS (\n        SELECT\n          aror.id\n        FROM tmp_objectives_to_unlink_from_reports totufr\n        JOIN "ActivityReportObjectiveResources" aror\n        ON totufr.id = aror."activityReportObjectiveId"\n      ),\n      removed_activity_report_objective_resources AS (\n        DELETE FROM "ActivityReportObjectiveResources" aror\n        USING remove_activity_report_objective_resources raror\n        WHERE aror.id = raror.id\n        RETURNING\n          aror.id,\n          aror."activityReportObjectiveId",\n          aror."resourceId"\n      )\n      SELECT\n        raror.id,\n        raror."activityReportObjectiveId",\n        raror."resourceId"\n      FROM removed_activity_report_objective_resources raror;\n      -- 18. Remove topics for objectives to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_topics;\n      CREATE TEMP TABLE tmp_removed_activity_report_objective_topics\n      AS\n      WITH remove_activity_report_objective_topics AS (\n        SELECT\n          arot.id\n        FROM tmp_objectives_to_unlink_from_reports totufr\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON totufr.id = arot."activityReportObjectiveId"\n      ),\n      removed_activity_report_objective_topics AS (\n        DELETE FROM "ActivityReportObjectiveTopics" arot\n        USING remove_activity_report_objective_topics rarot\n        WHERE arot.id = rarot.id\n        RETURNING\n          arot.id,\n          arot."activityReportObjectiveId",\n          arot."topicId"\n      )\n      SELECT\n        rarot.id,\n        rarot."activityReportObjectiveId",\n        rarot."topicId"\n      FROM removed_activity_report_objective_topics rarot;\n      --  19. Remove activity report objective records that are to be unlinked\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objectives;\n      CREATE TEMP TABLE tmp_removed_activity_report_objectives\n      AS\n      WITH removed_activity_report_objectives AS (\n        DELETE FROM "ActivityReportObjectives" aro\n        USING tmp_objectives_to_unlink_from_reports totufr\n        WHERE aro."activityReportId" = totufr."activityReportId"\n        AND aro."objectiveId" = totufr."objectiveId"\n        RETURNING\n          aro.id,\n          aro."activityReportId",\n          aro."objectiveId"\n      )\n      SELECT\n        raro.id "activityReportObjectiveId",\n        raro."activityReportId",\n        raro."objectiveId"\n      FROM removed_activity_report_objectives raro;\n      -- 20. Collect a list of objectives to remove as they are no longer referenced on any report\n      DROP TABLE IF EXISTS tmp_objectives_to_remove;\n      CREATE TEMP TABLE tmp_objectives_to_remove\n      AS\n      SELECT\n        traro."objectiveId"\n      FROM tmp_removed_activity_report_objectives traro\n      LEFT JOIN "ActivityReportObjectives" aro\n      ON traro."objectiveId" = aro."objectiveId"\n      WHERE aro.id IS NULL;\n      -- 21. Remove objective courses for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_courses;\n      CREATE TEMP TABLE tmp_removed_objective_courses\n      AS\n      WITH removed_objective_courses AS (\n        DELETE FROM "ObjectiveCourses" oc\n        USING tmp_objectives_to_remove totr\n        WHERE oc."objectiveId" = totr."objectiveId"\n        RETURNING\n          oc.id,\n          oc."objectiveId",\n          oc."courseId"\n      )\n      SELECT\n        roc.id,\n        roc."objectiveId",\n        roc."courseId"\n      FROM removed_objective_courses roc;\n      -- 22. Remove objective files for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_files;\n      CREATE TEMP TABLE tmp_removed_objective_files\n      AS\n      WITH removed_objective_files AS (\n        DELETE FROM "ObjectiveFiles" fo\n        USING tmp_objectives_to_remove totr\n        WHERE fo."objectiveId" = totr."objectiveId"\n        RETURNING\n          fo.id,\n          fo."objectiveId",\n          fo."fileId"\n      )\n      SELECT\n        rof.id,\n        rof."objectiveId",\n        rof."fileId"\n      FROM removed_objective_files rof;\n      -- 23. Remove objective resources for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_resources;\n      CREATE TEMP TABLE tmp_removed_objective_resources\n      AS\n      WITH removed_objective_resources AS (\n        DELETE FROM "ObjectiveResources" ro\n        USING tmp_objectives_to_remove totr\n        WHERE ro."objectiveId" = totr."objectiveId"\n        RETURNING\n          ro.id,\n          ro."objectiveId",\n          ro."resourceId"\n      )\n      SELECT\n        ror.id,\n        ror."objectiveId",\n        ror."resourceId"\n      FROM removed_objective_resources ror;\n      -- 24. Remove objective topics for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_topics;\n      CREATE TEMP TABLE tmp_removed_objective_topics\n      AS\n      WITH removed_objective_topics AS (\n        DELETE FROM "ObjectiveTopics" ot\n        USING tmp_objectives_to_remove totr\n        WHERE ot."objectiveId" = totr."objectiveId"\n        RETURNING\n          ot.id,\n          ot."objectiveId",\n          ot."topicId"\n      )\n      SELECT\n        rot.id,\n        rot."objectiveId",\n        rot."topicId"\n      FROM removed_objective_topics rot;\n      -- 25. Remove objective collaborators for objective to be removed\n      DROP TABLE IF EXISTS tmp_removed_objective_collaborators;\n      CREATE TEMP TABLE tmp_removed_objective_collaborators\n      AS\n      WITH removed_objective_collaborators AS (\n        DELETE FROM "ObjectiveCollaborators" oc\n        USING tmp_objectives_to_remove totr\n        WHERE oc."objectiveId" = totr."objectiveId"\n        RETURNING\n          oc.id "collaboratorId",\n          oc."objectiveId",\n          oc."userId"\n      )\n      SELECT\n        roc."collaboratorId",\n        roc."objectiveId",\n        roc."userId"\n      FROM removed_objective_collaborators roc;\n      -- 26. Remove objectives that are no longer referenced on any report\n      DROP TABLE IF EXISTS tmp_removed_objectives;\n      CREATE TEMP TABLE tmp_removed_objectives\n      AS\n      WITH removed_objectives AS (\n        DELETE FROM "Objectives" o\n        USING tmp_objectives_to_remove totr\n        WHERE o.id = totr."objectiveId"\n        RETURNING\n          o.id,\n          o.title\n      )\n      SELECT\n          ro.id,\n          ro.title\n      FROM removed_objectives ro;\n      -- 27. Collect a list of ActivityReportGoals to remove\n      DROP TABLE IF EXISTS tmp_activity_report_goals_to_remove;\n      CREATE TEMP TABLE tmp_activity_report_goals_to_remove\n      AS\n      SELECT\n        targg."activityReportId",\n        targg."Recipeint",\n        targg."grantId",\n        targg."number",\n        g."goalId",\n        arg.id "activityReportGoalId"\n      FROM tmp_affected_reports_grants_goals targg\n      CROSS JOIN UNNEST(targg."goalIds") g("goalId")\n      JOIN "ActivityReportGoals" arg\n      ON targg."activityReportId" = arg."activityReportId"\n      AND g."goalId" = arg."goalId"\n      WHERE targg."goalIds"[1] != g."goalId";\n      -- 28. Remove ActivityReportGoalFieldResponses that are nolonger going to be referenced\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal_field_responses;\n      CREATE TEMP TABLE tmp_removed_activity_report_goal_field_responses\n      AS\n      WITH removed_activity_report_goal_field_responses AS (\n        DELETE FROM "ActivityReportGoalFieldResponses" argfr\n        USING tmp_activity_report_goals_to_remove targtr\n        WHERE argfr."activityReportGoalId" = targtr."activityReportGoalId"\n        RETURNING\n          argfr.id,\n          argfr."activityReportGoalId",\n          argfr.response\n      )\n      SELECT\n        rargfr.id,\n        rargfr."activityReportGoalId",\n        rargfr.response\n      FROM removed_activity_report_goal_field_responses rargfr;\n      -- 29. Remove ActivityReportGoalResources that are nolonger going to be referenced\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal_resources;\n      CREATE TEMP TABLE tmp_removed_activity_report_goal_resources\n      AS\n      WITH removed_activity_report_goal_resources AS (\n        DELETE FROM "ActivityReportGoalResources" argr\n        USING tmp_activity_report_goals_to_remove targtr\n        WHERE argr."activityReportGoalId" = targtr."activityReportGoalId"\n        RETURNING\n          argr.id,\n          argr."activityReportGoalId",\n          argr."resourceId"\n      )\n      SELECT\n        rargr.id,\n        rargr."activityReportGoalId",\n        rargr."resourceId"\n      FROM removed_activity_report_goal_resources rargr;\n      -- 30. Remove ActivityReportGoal that are nolonger going to be referenced\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal;\n      CREATE TEMP TABLE tmp_removed_activity_report_goal\n      AS\n      WITH removed_activity_report_goal AS (\n        DELETE FROM "ActivityReportGoals" arg\n        USING tmp_activity_report_goals_to_remove targtr\n        WHERE arg."id" = targtr."activityReportGoalId"\n        RETURNING\n        arg.id,\n        arg."activityReportId",\n        arg."goalId"\n      )\n      SELECT\n        rarg.id,\n        rarg."activityReportId",\n        rarg."goalId"\n      FROM removed_activity_report_goal rarg;\n      -- 31. Update onAR and onApprovedAR for unlinked objective\n      DROP TABLE IF EXISTS tmp_flags_update_for_unlinked_objectives;\n      CREATE TEMP TABLE tmp_flags_update_for_unlinked_objectives\n      AS\n      WITH objective_flags AS (\n        SELECT\n          traro."objectiveId",\n          count(aro."id") FILTER (WHERE aro.id IS NOT NULL) > 0 "onAR",\n          COUNT(ar.id) FILTER (WHERE ar.id IS NOT NULL) > 0 "onApprovedAR"\n        FROM tmp_removed_activity_report_objectives traro\n        LEFT JOIN "ActivityReportObjectives" aro\n        ON traro."objectiveId" = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        AND ar."calculatedStatus"::text = 'approved'\n        GROUP BY 1\n      ),\n      flags_update_for_unlinked_objectives AS (\n        UPDATE "Objectives" o\n        SET\n          "onAR" = f."onAR",\n          "onApprovedAR" = f."onApprovedAR"\n        FROM objective_flags f\n        WHERE o.id = f."objectiveId"\n        AND (\n          o."onAR" != f."onAR"\n          OR o."onApprovedAR" != f."onApprovedAR"\n        )\n        RETURNING\n          o.id "objectiveId",\n          o."onAR",\n          o."onApprovedAR"\n      )\n      SELECT\n        "objectiveId",\n        "onAR",\n        "onApprovedAR"\n      FROM flags_update_for_unlinked_objectives;\n      -- 32. If unlinked objective onAR is false, delete objective\n      DROP TABLE IF EXISTS tmp_deleted_objectives;\n      CREATE TEMP TABLE tmp_deleted_objectives\n      AS\n      WITH deleted_objectives AS (\n        UPDATE "Objectives" o\n        SET "deletedAt" = now()\n        FROM tmp_flags_update_for_unlinked_objectives tfufuo\n        WHERE o.id = tfufuo."objectiveId"\n        AND o."onAR" = false\n        RETURNING\n          o.id "objectiveId"\n      )\n      SELECT\n        "objectiveId"\n      FROM deleted_objectives;\n      -- 33. Update onAR and onApprovedAR for unlinked goal\n      DROP TABLE IF EXISTS tmp_flags_update_for_unlinked_goals;\n      CREATE TEMP TABLE tmp_flags_update_for_unlinked_goals\n      AS\n      WITH goal_flags AS (\n        SELECT\n          trarg."goalId",\n          count(arg.id) FILTER (WHERE arg.id IS NOT NULL) > 0 "onAR",\n          COUNT(ar.id) FILTER (WHERE ar.id IS NOT NULL) > 0 "onApprovedAR"\n        FROM tmp_removed_activity_report_goal trarg\n        LEFT JOIN "ActivityReportGoals" arg\n        ON trarg."goalId" = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        AND ar."calculatedStatus"::text = 'approved'\n        GROUP BY 1\n      ),\n      flags_update_for_unlinked_goals AS (\n        UPDATE "Goals" g\n        SET\n          "onAR" = gf."onAR",\n          "onApprovedAR" = gf."onApprovedAR"\n        FROM goal_flags gf\n        WHERE g.id = gf."goalId"\n        AND (\n          g."onAR" != gf."onAR"\n          OR g."onApprovedAR" != gf."onApprovedAR"\n        )\n        RETURNING\n          g.id "goalId",\n          g."onAR",\n          g."onApprovedAR"\n      )\n      SELECT\n        "goalId",\n        "onAR",\n        "onApprovedAR"\n      FROM flags_update_for_unlinked_goals;\n      -- 34. Remove all temp tables\n      DROP TABLE IF EXISTS tmp_affected_reports_grants_goals;\n      DROP TABLE IF EXISTS tmp_affected_objectives;\n      DROP TABLE IF EXISTS tmp_created_missing_objectives;\n      DROP TABLE IF EXISTS tmp_missing_objectives_added_to_reports;\n      DROP TABLE IF EXISTS tmp_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_courses_across_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_course_to_objectives;\n      DROP TABLE IF EXISTS tmp_sync_files_across_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_file_to_objectives;\n      DROP TABLE IF EXISTS tmp_sync_resources_across_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_resource_to_objectives;\n      DROP TABLE IF EXISTS tmp_sync_topics_across_affected_objectives;\n      DROP TABLE IF EXISTS tmp_sync_topic_to_objectives;\n      DROP TABLE IF EXISTS tmp_objectives_to_unlink_from_reports;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_courses;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_files;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_resources;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objective_topics;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_objectives;\n      DROP TABLE IF EXISTS tmp_objectives_to_remove;\n      DROP TABLE IF EXISTS tmp_removed_objective_courses;\n      DROP TABLE IF EXISTS tmp_removed_objective_files;\n      DROP TABLE IF EXISTS tmp_removed_objective_resources;\n      DROP TABLE IF EXISTS tmp_removed_objective_topics;\n      DROP TABLE IF EXISTS tmp_removed_objective_collaborators;\n      DROP TABLE IF EXISTS tmp_removed_objectives;\n      DROP TABLE IF EXISTS tmp_activity_report_goals_to_remove;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal_field_responses;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal_resources;\n      DROP TABLE IF EXISTS tmp_removed_activity_report_goal;\n      DROP TABLE IF EXISTS tmp_flags_update_for_unlinked_objectives;\n      DROP TABLE IF EXISTS tmp_deleted_objectives;\n      DROP TABLE IF EXISTS tmp_flags_update_for_unlinked_goals;
Executing (f6a13fd1-816f-4968-b98b-8c9255ae9c55): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240409162356-remove-duplicate-goals-for-same-grant: migrated (0.199s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240412183116-add-goalstatuschanges-table: migrating =======
Executing (6ddab718-e04b-4db3-aa17-caafc3fe4441): START TRANSACTION;
Connection validated successfully
Executing (6ddab718-e04b-4db3-aa17-caafc3fe4441): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240412183116-add-goalstatuschanges-table.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): CREATE TABLE IF NOT EXISTS "GoalStatusChanges" ("id"  SERIAL , "goalId" INTEGER NOT NULL REFERENCES "Goals" ("id") ON DELETE CASCADE, "userId" INTEGER NOT NULL REFERENCES "Users" ("id") ON DELETE CASCADE, "userName" VARCHAR(255) NOT NULL, "userRoles" VARCHAR(255)[] NOT NULL, "oldStatus" VARCHAR(255), "newStatus" VARCHAR(255) NOT NULL, "reason" TEXT NOT NULL, "context" TEXT, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), PRIMARY KEY ("id"));
Connection validated successfully
Executing (6ddab718-e04b-4db3-aa17-caafc3fe4441): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240412183116-add-goalstatuschanges-table: migrated (0.046s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240420000000-correct-onApprovedAR-values: migrating =======
Executing (73c3165c-ece2-4335-a5fa-1544a782d2d6): START TRANSACTION;
Connection validated successfully
Executing (73c3165c-ece2-4335-a5fa-1544a782d2d6): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240420000000-correct-onApprovedAR-values.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (73c3165c-ece2-4335-a5fa-1544a782d2d6): --  1. Calculate correct onApprovedAR values for objectives\n      DROP TABLE IF EXISTS objectives_on_ars;\n      CREATE TEMP TABLE objectives_on_ars\n      AS\n      SELECT\n        o.id oid,\n        BOOL_OR(ar.id IS NOT NULL AND ar."calculatedStatus" = 'approved') on_approved_ar,\n        BOOL_OR(ar.id IS NOT NULL) on_ar\n      FROM "Objectives" o\n      LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n      LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n        AND ar."calculatedStatus" != 'deleted'\n      GROUP BY 1\n      ;\n      --  2. Calculate correct onApprovedAR values for goals\n      DROP TABLE IF EXISTS goals_on_ars;\n      CREATE TEMP TABLE goals_on_ars\n      AS\n      SELECT\n        g.id gid,\n        BOOL_OR(\n          (ar.id IS NOT NULL AND ar."calculatedStatus" = 'approved')\n          OR\n          COALESCE(ooaa.on_approved_ar,FALSE)\n        ) on_approved_ar,\n        BOOL_OR(ar.id IS NOT NULL OR COALESCE(ooaa.on_ar,FALSE)) on_ar\n      FROM "Goals" g\n      LEFT JOIN "ActivityReportGoals" arg\n        ON g.id = arg."goalId"\n      LEFT JOIN "ActivityReports" ar\n        ON arg."activityReportId" = ar.id\n        AND ar."calculatedStatus" != 'deleted'\n      LEFT JOIN "Objectives" o\n        ON o."goalId" = g.id\n      LEFT JOIN objectives_on_ars ooaa\n        ON ooaa.oid = o.id\n      GROUP BY 1\n      ;\n      --  3. Calculate onApprovedAR stats for objectives\n      DROP TABLE IF EXISTS initial_obj_approved_ar_stats;\n      CREATE TEMP TABLE initial_obj_approved_ar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_objectives\n      FROM "Objectives" o\n      JOIN objectives_on_ars\n        ON o.id = oid\n      ;\n      --  4. Calculate onAR stats for objectives\n      DROP TABLE IF EXISTS initial_obj_onar_stats;\n      CREATE TEMP TABLE initial_obj_onar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_ar = "onAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_objectives\n      FROM "Objectives" o\n      JOIN objectives_on_ars\n        ON o.id = oid\n      ;\n      --  5. Calculate onApprovedAR stats for goals\n      DROP TABLE IF EXISTS initial_goal_approved_ar_stats;\n      CREATE TEMP TABLE initial_goal_approved_ar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_goals\n      FROM "Goals" g\n      JOIN goals_on_ars\n        ON g.id = gid\n      ;\n      --  6. Calculate onAR stats for goals\n      DROP TABLE IF EXISTS initial_goal_onar_stats;\n      CREATE TEMP TABLE initial_goal_onar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_ar = "onAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_goals\n      FROM "Goals" g\n      JOIN goals_on_ars\n        ON g.id = gid\n      ;\n      --  7. Update onApprovedAR values for objectives and save the results\n      DROP TABLE IF EXISTS corrected_approved_objectives;\n      CREATE TEMP TABLE corrected_approved_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" o\n        SET "onApprovedAR" = on_approved_ar\n        FROM objectives_on_ars\n        WHERE o.id = oid\n          AND ("onApprovedAR" != on_approved_ar OR "onApprovedAR" IS NULL)\n        RETURNING\n          oid,\n          on_approved_ar\n      ) SELECT * FROM updater\n      ;\n      --  8. Update onAR values for objectives and save the results\n      DROP TABLE IF EXISTS corrected_onar_objectives;\n      CREATE TEMP TABLE corrected_onar_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" o\n        SET "onAR" = on_ar\n        FROM objectives_on_ars\n        WHERE o.id = oid\n          AND ("onAR" != on_ar OR "onAR" IS NULL)\n        RETURNING\n          oid,\n          on_ar\n      ) SELECT * FROM updater\n      ;\n      --  9. Update onApprovedAR values for goals and save the results\n      DROP TABLE IF EXISTS corrected_approved_goals;\n      CREATE TEMP TABLE corrected_approved_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" g\n        SET "onApprovedAR" = on_approved_ar\n        FROM goals_on_ars\n        WHERE g.id = gid\n          AND ("onApprovedAR" != on_approved_ar OR "onApprovedAR" IS NULL)\n        RETURNING\n          gid,\n          on_approved_ar\n      ) SELECT * FROM updater\n      ;\n      --  10. Update onAR values for goals and save the results\n      DROP TABLE IF EXISTS corrected_onar_goals;\n      CREATE TEMP TABLE corrected_onar_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" g\n        SET "onAR" = on_ar\n        FROM goals_on_ars\n        WHERE g.id = gid\n          AND ("onAR" != on_ar OR "onAR" IS NULL)\n        RETURNING\n          gid,\n          on_ar\n      ) SELECT * FROM updater\n      ;\n      -- produce stats on what happened\n      --  11. Final onApprovedAR stats for objectives\n      DROP TABLE IF EXISTS final_obj_approved_ar_stats;\n      CREATE TEMP TABLE final_obj_approved_ar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_objectives\n      FROM "Objectives" o\n      JOIN objectives_on_ars\n        ON o.id = oid\n      ;\n      --  12. Final onAR stats for objectives\n      DROP TABLE IF EXISTS final_obj_onar_stats;\n      CREATE TEMP TABLE final_obj_onar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_ar = "onAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_objectives\n      FROM "Objectives" o\n      JOIN objectives_on_ars\n        ON o.id = oid\n      ;\n      --  13. Final onApprovedAR stats for goals\n      DROP TABLE IF EXISTS final_goal_approved_ar_stats;\n      CREATE TEMP TABLE final_goal_approved_ar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_goals\n      FROM "Goals" g\n      JOIN goals_on_ars\n        ON g.id = gid\n      ;\n      --  14. Final onAR stats for goals\n      DROP TABLE IF EXISTS final_goal_onar_stats;\n      CREATE TEMP TABLE final_goal_onar_stats\n      AS\n      SELECT\n        COUNT(*) FILTER (WHERE on_ar = "onAR"\n        ) matching_values,\n        COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n        ) incorrect_values,\n        COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n        ) should_be_marked_true_but_isnt,\n        COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n        ) marked_true_but_shouldnt_be,\n        COUNT(*) total_goals\n      FROM "Goals" g\n      JOIN goals_on_ars\n        ON g.id = gid\n      ;\n      -- make a nice little table to see the math\n      SELECT\n        1 AS order,\n        'objective onApprovedAR starting stats' description,\n        matching_values,\n        incorrect_values,\n        should_be_marked_true_but_isnt,\n        marked_true_but_shouldnt_be,\n        total_objectives total\n      FROM initial_obj_approved_ar_stats\n      UNION\n      SELECT\n        2,\n        'objective onApprovedAR values changed',\n        NULL,\n        NULL,\n        SUM(CASE WHEN on_approved_ar THEN 1 ELSE 0 END),\n        SUM(CASE WHEN NOT on_approved_ar THEN 1 ELSE 0 END),\n        COUNT(*)\n      FROM corrected_approved_objectives\n      UNION\n      SELECT 3,'objective onApprovedAR ending stats', * FROM final_obj_approved_ar_stats\n      UNION\n      SELECT 4,'objective onAR starting stats', * FROM initial_obj_onar_stats\n      UNION\n      SELECT\n        5,\n        'objective onAR values changed',\n        NULL,\n        NULL,\n        SUM(CASE WHEN on_ar THEN 1 ELSE 0 END),\n        SUM(CASE WHEN NOT on_ar THEN 1 ELSE 0 END),\n        COUNT(*)\n      FROM corrected_onar_objectives\n      UNION\n      SELECT 6,'objective onAR ending stats', * FROM final_obj_onar_stats\n      UNION\n      SELECT 7,'goal onApprovedAR starting stats', * FROM initial_goal_approved_ar_stats\n      UNION\n      SELECT\n        8,\n        'goal onApprovedAR values changed',\n        NULL,\n        NULL,\n        SUM(CASE WHEN on_approved_ar THEN 1 ELSE 0 END),\n        SUM(CASE WHEN NOT on_approved_ar THEN 1 ELSE 0 END),\n        COUNT(*)\n      FROM corrected_approved_goals\n      UNION\n      SELECT 9,'goal onApprovedAR ending stats', * FROM final_goal_approved_ar_stats\n      UNION\n      SELECT 10,'goal onAR starting stats', * FROM initial_goal_onar_stats\n      UNION\n      SELECT\n        11,\n        'goal onAR values changed',\n        NULL,\n        NULL,\n        SUM(CASE WHEN on_ar THEN 1 ELSE 0 END),\n        SUM(CASE WHEN NOT on_ar THEN 1 ELSE 0 END),\n        COUNT(*)\n      FROM corrected_onar_goals\n      UNION\n      SELECT 12,'goal onAR ending stats', * FROM final_goal_onar_stats\n      ORDER BY 1\n      ;
Executing (73c3165c-ece2-4335-a5fa-1544a782d2d6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240420000000-correct-onApprovedAR-values: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240426130641-remove-three-flags: migrating =======
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): START TRANSACTION;
Connection validated successfully
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240426130641-remove-three-flags.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'merge_goals'\n          );
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'monitoring'\n          );
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): SELECT EXISTS(\n            SELECT 1\n            FROM pg_type t\n            JOIN pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typname = 'enum_Users_flags' AND e.enumlabel = 'resources_dashboard'\n          );
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): UPDATE "Users" SET "flags" = array_remove(flags, 'merge_goals')\n        WHERE 'merge_goals' = ANY(flags);
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): UPDATE "Users" SET "flags" = array_remove(flags, 'monitoring')\n        WHERE 'monitoring' = ANY(flags);
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): UPDATE "Users" SET "flags" = array_remove(flags, 'resources_dashboard')\n        WHERE 'resources_dashboard' = ANY(flags);
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): -- rename the existing type\n  ALTER TYPE "enum_Users_flags" RENAME TO "enum_Users_flags_old";\n  -- create the new type\n  CREATE TYPE "enum_Users_flags" AS ENUM(\n    'anv_statistics',\n'regional_goal_dashboard',\n'closed_goal_merge_override',\n'training_reports_dashboard'\n  );
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): -- update the columns to use the new type\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default null;\n  ALTER TABLE "Users" ALTER COLUMN "flags" TYPE "enum_Users_flags"[] USING "flags"::text[]::"enum_Users_flags"[];\n  ALTER TABLE "Users" ALTER COLUMN "flags" set default ARRAY[]::"enum_Users_flags"[];\n  -- remove the old type\n  DROP TYPE "enum_Users_flags_old";
Executing (81c230e4-07df-43bb-9c80-fab1e6d5c882): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240426130641-remove-three-flags: migrated (0.054s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240429131938-update-objective-trainer-fields: migrating =======
Executing (50c0d373-31ae-438a-a6c9-2b6110d56269): START TRANSACTION;
Connection validated successfully
Executing (50c0d373-31ae-438a-a6c9-2b6110d56269): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240429131938-update-objective-trainer-fields.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (50c0d373-31ae-438a-a6c9-2b6110d56269): UPDATE "SessionReportPilots" \n        SET data = jsonb_set(data, '{objectiveTrainers}', '["PFCE"]'::jsonb, false)\n        WHERE id = 7;\n\n        UPDATE "SessionReportPilots" \n        SET data = jsonb_set(data, '{objectiveTrainers}', '["PFMO"]'::jsonb, false)\n        WHERE id IN (3, 5);\n\n        UPDATE "SessionReportPilots" \n        SET data = jsonb_set(data, '{objectiveTrainers}', '["HBHS"]'::jsonb, false)\n        WHERE id = 6;\n\n        UPDATE "SessionReportPilots" \n        SET data = jsonb_set(data, '{objectiveTrainers}', '["DTL"]'::jsonb, false)\n        WHERE id = 8;
Executing (50c0d373-31ae-438a-a6c9-2b6110d56269): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240429131938-update-objective-trainer-fields: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240503000000-merge_to_fei_goal: migrating =======
Executing (c0fb5fa5-aefb-4471-a356-69971f29777f): START TRANSACTION;
Connection validated successfully
Executing (c0fb5fa5-aefb-4471-a356-69971f29777f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240503000000-merge_to_fei_goal.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c0fb5fa5-aefb-4471-a356-69971f29777f): -- A user wants non-FEI goals merged into their FEI goal\n\n      -- PROCESS:\n      -- Delete existing root cause (there should be none for this PR)\n      -- Test to make sure no root causes were actually deleted (this PR only)\n      -- Merge goal collaborators\n      -- Merge objective collaborators\n      -- Update the merge target objectives\n      -- Merge objective topics\n      -- Merge objective resources\n      -- Merge objective files\n      -- Delete duplicate objective topics\n      -- Delete duplicate objective resources\n      -- Delete duplicate objective files\n      -- Relink non-goalmerge Objectives\n      -- Update the target goals record history fields from the donor goals\n      -- Relink non-duplicate ARGs\n      -- Delete duplicate ARGs\n      -- Delete donor goals\n      -- Delete duplicate goal collaborators\n      -- Delete duplicate objective collaborators\n\n\n      DROP TABLE IF EXISTS goal_merges;\n      CREATE TEMP TABLE goal_merges\n      AS\n      SELECT * FROM (\n        VALUES\n        (52282, 54882)\n      ) AS data(donor_gid, target_gid)\n      ;\n\n      -- This should be empty for TTAHUB-2880\n      DROP TABLE IF EXISTS deleted_gfrs;\n      CREATE TEMP TABLE deleted_gfrs\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalFieldResponses"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gfrid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Exit if any GFR deletions(TTAHUB-2880 only)\n      SELECT\n        1/(LEAST(COUNT(*),1) - 1)\n      FROM deleted_gfrs\n      ;\n      \n      -- Merge goal collaborators\n      DROP TABLE IF EXISTS relinked_goal_collaborators;\n      CREATE TEMP TABLE relinked_goal_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_gid,\n            "userId" uid\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.donor_gid = gc."goalId"\n          EXCEPT\n          SELECT\n            donor_gid,\n            "userId"\n          FROM goal_merges gm\n          JOIN "GoalCollaborators" gc\n            ON gm.target_gid = gc."goalId"\n        )\n        UPDATE "GoalCollaborators" AS gc\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.donor_gid = gm.donor_gid\n        WHERE gc."userId" = u.uid\n          AND gc."goalId" = u.donor_gid\n        RETURNING\n          id gcid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      DROP TABLE IF EXISTS objective_merges;\n      CREATE TEMP TABLE objective_merges\n      AS\n      SELECT\n        donor_obj.id donor_oid,\n        target_obj.id target_oid\n      FROM goal_merges gm\n      JOIN "Objectives" donor_obj\n        ON gm.donor_gid = donor_obj."goalId"\n      JOIN "Objectives" target_obj\n        ON gm.target_gid = target_obj."goalId"\n        AND donor_obj.title = target_obj.title\n      WHERE donor_obj.id != target_obj.id\n      ;\n      \n      -- Merge objective collaborators\n      DROP TABLE IF EXISTS relinked_objective_collaborators;\n      CREATE TEMP TABLE relinked_objective_collaborators\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "userId" uid\n          FROM objective_merges om\n          JOIN "ObjectiveCollaborators" oc\n            ON om.donor_oid = oc."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "userId"\n          FROM objective_merges om\n          JOIN "ObjectiveCollaborators" oc\n            ON om.target_oid = oc."objectiveId"\n        )\n        UPDATE "ObjectiveCollaborators" AS oc\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE oc."userId" = u.uid\n          AND oc."objectiveId" = u.donor_oid\n        RETURNING\n          id ocid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target objectives\n      DROP TABLE IF EXISTS updated_target_objectives;\n      CREATE TEMP TABLE updated_target_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives" AS o\n        SET\n          "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n          "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n          "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n          "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n          "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n          "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n        FROM objective_merges om\n        JOIN "Objectives" d_o\n          ON om.donor_oid = d_o.id\n        WHERE om.target_oid = o.id\n        RETURNING\n          o.id oid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      \n      -- Merge objective topics\n      DROP TABLE IF EXISTS relinked_objective_topics;\n      CREATE TEMP TABLE relinked_objective_topics\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "topicId" tid\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.donor_oid = ot."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "topicId"\n          FROM objective_merges om\n          JOIN "ObjectiveTopics" ot\n            ON om.target_oid = ot."objectiveId"\n        )\n        UPDATE "ObjectiveTopics" AS ot\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE ot."topicId" = u.tid\n          AND ot."objectiveId" = u.donor_oid\n        RETURNING\n          id otid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Merge objective resources\n      DROP TABLE IF EXISTS relinked_objective_resources;\n      CREATE TEMP TABLE relinked_objective_resources\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "resourceId" rid\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.donor_oid = o_r."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "resourceId"\n          FROM objective_merges om\n          JOIN "ObjectiveResources" o_r\n            ON om.target_oid = o_r."objectiveId"\n        )\n        UPDATE "ObjectiveResources" AS o_r\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE o_r."resourceId" = u.rid\n          AND o_r."objectiveId" = u.donor_oid\n        RETURNING\n          id orid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Merge objective files\n      DROP TABLE IF EXISTS relinked_objective_files;\n      CREATE TEMP TABLE relinked_objective_files\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            donor_oid,\n            "fileId" fid\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.donor_oid = of."objectiveId"\n          EXCEPT\n          SELECT\n            donor_oid,\n            "fileId"\n          FROM objective_merges om\n          JOIN "ObjectiveFiles" of\n            ON om.target_oid = of."objectiveId"\n        )\n        UPDATE "ObjectiveFiles" AS of\n        SET "objectiveId" = target_oid\n        FROM objective_merges om\n        JOIN unmatched u\n          ON u.donor_oid = om.donor_oid\n        WHERE of."fileId" = u.fid\n          AND of."objectiveId" = u.donor_oid\n        RETURNING\n          id ofid,\n          om.donor_oid original_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective topics\n      DROP TABLE IF EXISTS deleted_objective_topics;\n      CREATE TEMP TABLE deleted_objective_topics\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveTopics"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id otid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective resources\n      DROP TABLE IF EXISTS deleted_objective_resources;\n      CREATE TEMP TABLE deleted_objective_resources\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveResources"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id orid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective files\n      DROP TABLE IF EXISTS deleted_objective_files;\n      CREATE TEMP TABLE deleted_objective_files\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveFiles"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ofid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      -- Link objectives on merged goals to the FEI goals\n      DROP TABLE IF EXISTS relinked_objectives;\n      CREATE TEMP TABLE relinked_objectives\n      AS\n      WITH updater AS (\n        UPDATE "Objectives"\n        SET "goalId" = target_gid\n        FROM goal_merges\n        WHERE "goalId" = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          id oid,\n          donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Update the merge target goals\n      DROP TABLE IF EXISTS updated_target_goals;\n      CREATE TEMP TABLE updated_target_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals" AS g\n        SET\n          "updatedAt" = GREATEST(dg."updatedAt", g."updatedAt"),\n          "firstNotStartedAt" = LEAST(dg."firstNotStartedAt", g."firstNotStartedAt"),\n          "lastNotStartedAt" = GREATEST(dg."lastNotStartedAt", g."lastNotStartedAt"),\n          "firstInProgressAt" = LEAST(dg."firstInProgressAt", g."firstInProgressAt"),\n          "lastInProgressAt" = GREATEST(dg."lastInProgressAt", g."lastInProgressAt"),\n          "firstCeasedSuspendedAt" = LEAST(dg."firstCeasedSuspendedAt", g."firstCeasedSuspendedAt"),\n          "lastCeasedSuspendedAt" = GREATEST(dg."lastCeasedSuspendedAt", g."lastCeasedSuspendedAt"),\n          "firstClosedAt" = LEAST(dg."firstClosedAt", g."firstClosedAt"),\n          "lastClosedAt" = GREATEST(dg."lastClosedAt", g."lastClosedAt")\n        FROM goal_merges gm\n        JOIN "Goals" dg\n          ON gm.donor_gid = dg.id\n        WHERE gm.target_gid = g.id\n        RETURNING\n          g.id gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- relink non-duplicate ARGs\n      DROP TABLE IF EXISTS relinked_args;\n      CREATE TEMP TABLE relinked_args\n      AS\n      WITH updater AS (\n        WITH unmatched AS (\n          SELECT\n            "activityReportId" arid,\n            "goalId" gid\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.donor_gid = arg."goalId"\n          EXCEPT\n          SELECT\n            "activityReportId",\n            "goalId"\n          FROM goal_merges gm\n          JOIN "ActivityReportGoals" arg\n            ON gm.target_gid = arg."goalId"\n        )\n        UPDATE "ActivityReportGoals" AS arg\n        SET "goalId" = target_gid\n        FROM goal_merges gm\n        JOIN unmatched u\n          ON u.gid = gm.donor_gid\n        WHERE arg."goalId" = u.gid\n          AND arg."activityReportId" = u.arid\n        RETURNING\n          id argid,\n          gm.donor_gid original_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id argid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n\n      -- Soft delete donor goals\n      DROP TABLE IF EXISTS deleted_goals;\n      CREATE TEMP TABLE deleted_goals\n      AS\n      WITH updater AS (\n        UPDATE "Goals"\n        SET "deletedAt" = NOW()\n        FROM goal_merges\n        WHERE id = donor_gid\n          AND donor_gid != target_gid\n        RETURNING\n          target_gid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate goal collaborators\n      DROP TABLE IF EXISTS deleted_goal_collaborators;\n      CREATE TEMP TABLE deleted_goal_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "GoalCollaborators"\n        USING goal_merges\n        WHERE "goalId" = donor_gid\n        RETURNING\n          id gcid,\n          donor_gid\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective collaborators\n      DROP TABLE IF EXISTS deleted_objective_collaborators;\n      CREATE TEMP TABLE deleted_objective_collaborators\n      AS\n      WITH updater AS (\n        DELETE FROM "ObjectiveCollaborators"\n        USING objective_merges\n        WHERE "objectiveId" = donor_oid\n        RETURNING\n          id ocid,\n          donor_oid\n      ) SELECT * FROM updater\n      ;\n\n      SELECT\n        1 op_order,\n        'deleted_gfrs' operation,\n        COUNT(*) cnt\n      FROM deleted_gfrs\n      UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n      UNION SELECT 3,'relinked_objective_topics', COUNT(*) FROM relinked_objective_topics\n      UNION SELECT 4,'relinked_objective_resources', COUNT(*) FROM relinked_objective_resources\n      UNION SELECT 5,'relinked_objective_files', COUNT(*) FROM relinked_objective_files\n      UNION SELECT 6,'deleted_objective_topics', COUNT(*) FROM deleted_objective_topics\n      UNION SELECT 7,'deleted_objective_resources', COUNT(*) FROM deleted_objective_resources\n      UNION SELECT 8,'deleted_objective_files', COUNT(*) FROM deleted_objective_files\n      UNION SELECT 9,'relinked_objectives', COUNT(*) FROM relinked_objectives\n      UNION SELECT 10,'updated_target_goals', COUNT(*) FROM updated_target_goals\n      UNION SELECT 11,'relinked_args', COUNT(*) FROM relinked_args\n      UNION SELECT 12,'deleted_args', COUNT(*) FROM deleted_args\n      UNION SELECT 13,'deleted_goals', COUNT(*) FROM deleted_goals\n      UNION SELECT 14,'relinked_goal_collaborators', COUNT(*) FROM relinked_goal_collaborators\n      UNION SELECT 15,'deleted_goal_collaborators', COUNT(*) FROM deleted_goal_collaborators\n      UNION SELECT 16,'relinked_objective_collaborators', COUNT(*) FROM relinked_objective_collaborators\n      UNION SELECT 17,'deleted_objective_collaborators', COUNT(*) FROM deleted_objective_collaborators\n      ORDER BY 1\n      ;
Executing (c0fb5fa5-aefb-4471-a356-69971f29777f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240503000000-merge_to_fei_goal: migrated (0.095s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240506162550-remove-goal-status-columns: migrating =======
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): START TRANSACTION;
Connection validated successfully
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240506162550-remove-goal-status-columns.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "closeSuspendReason";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "closeSuspendContext";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "previousStatus";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "firstNotStartedAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "lastNotStartedAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "firstInProgressAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "lastInProgressAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "firstCeasedSuspendedAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "lastCeasedSuspendedAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "firstClosedAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "lastClosedAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "firstCompletedAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): ALTER TABLE "public"."Goals" DROP COLUMN "lastCompletedAt";
Executing (1a123133-48d9-4e5f-9a82-fbf58d534db5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240506162550-remove-goal-status-columns: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240509221012-monitoring-findings: migrating =======
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): START TRANSACTION;
Connection validated successfully
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240509221012-monitoring-findings.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringGranteeLinks" ("id"   SERIAL, "granteeId" TEXT NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("granteeId"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): INSERT INTO "MonitoringGranteeLinks"\n      (\n        "granteeId",\n        "createdAt",\n        "updatedAt",\n        "deletedAt"\n      )\n      SELECT\n        "granteeId",\n        MIN("createdAt") "createdAt",\n        MAX("updatedAt") "updatedAt",\n        MAX("deletedAt") "deletedAt"\n      FROM "MonitoringReviewGrantees"\n      GROUP BY 1;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringStandardLinks" ("id"   SERIAL, "standardId" INTEGER NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("standardId"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringFindingStatusLinks" ("id"   SERIAL, "statusId" INTEGER NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("statusId"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringFindingHistoryStatusLinks" ("id"   SERIAL, "statusId" INTEGER NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("statusId"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringFindingLinks" ("id"   SERIAL, "findingId" TEXT NOT NULL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("findingId"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringFindingStatuses" ("id"   SERIAL , "statusId" INTEGER NOT NULL REFERENCES "MonitoringFindingStatusLinks" ("statusId"), "name" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringFindings" ("id"   SERIAL , "findingId" TEXT NOT NULL REFERENCES "MonitoringFindingLinks" ("findingId"), "statusId" INTEGER NOT NULL REFERENCES "MonitoringFindingStatusLinks" ("statusId"), "findingType" TEXT NOT NULL, "source" TEXT, "correctionDeadLine" TIMESTAMP WITH TIME ZONE, "reportedDate" TIMESTAMP WITH TIME ZONE, "closedDate" TIMESTAMP WITH TIME ZONE, "hash" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE UNIQUE INDEX "MonitoringFindings_findingId_deletedAt"\n          ON "MonitoringFindings"\n          ("findingId", "deletedAt");
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "MonitoringFindings"\n          ADD CONSTRAINT "MonitoringFindings_findingId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringFindings_findingId_deletedAt";
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE INDEX "MonitoringFindings_statusId"\n          ON "MonitoringFindings"\n          ("statusId")\n          WHERE "deletedAt" IS NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE INDEX "MonitoringFindings_findingId_statusId"\n          ON "MonitoringFindings"\n          ("findingId", "statusId")\n          WHERE "deletedAt" IS NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringFindingGrants" ("id"   SERIAL , "findingId" TEXT NOT NULL REFERENCES "MonitoringFindingLinks" ("findingId"), "granteeId" TEXT NOT NULL REFERENCES "MonitoringGranteeLinks" ("granteeId"), "statusId" INTEGER NOT NULL REFERENCES "MonitoringFindingStatusLinks" ("statusId"), "findingType" TEXT NOT NULL, "source" TEXT, "correctionDeadLine" TIMESTAMP WITH TIME ZONE, "reportedDate" TIMESTAMP WITH TIME ZONE, "closedDate" TIMESTAMP WITH TIME ZONE, "hash" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE UNIQUE INDEX "MonitoringFindingGrants_findingId_granteeId_deletedAt"\n          ON "MonitoringFindingGrants"\n          ("findingId", "granteeId", "deletedAt");
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "MonitoringFindingGrants"\n          ADD CONSTRAINT "MonitoringFindingGrants_findingId_granteeId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringFindingGrants_findingId_granteeId_deletedAt";
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE INDEX "MonitoringFindingGrants_statusId"\n          ON "MonitoringFindingGrants"\n          ("statusId")\n          WHERE "deletedAt" IS NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE INDEX "MonitoringFindingGrants_granteeId"\n          ON "MonitoringFindingGrants"\n          ("granteeId")\n          WHERE "deletedAt" IS NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE INDEX "MonitoringFindingGrants_findingId_granteeId_statusId"\n          ON "MonitoringFindingGrants"\n          ("findingId", "granteeId", "statusId")\n          WHERE "deletedAt" IS NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringFindingStandards" ("id"   SERIAL , "findingId" TEXT NOT NULL REFERENCES "MonitoringFindingLinks" ("findingId"), "standardId" INTEGER NOT NULL REFERENCES "MonitoringStandardLinks" ("standardId"), "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE UNIQUE INDEX "MonitoringFindingStandards_findingId_standardId_deletedAt"\n          ON "MonitoringFindingStandards"\n          ("findingId", "standardId", "deletedAt");
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "MonitoringFindingStandards"\n          ADD CONSTRAINT "MonitoringFindingStandards_findingId_standardId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringFindingStandards_findingId_standardId_deletedAt";
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringStandards" ("id"   SERIAL , "standardId" INTEGER NOT NULL REFERENCES "MonitoringStandardLinks" ("standardId"), "contentId" TEXT NOT NULL, "citation" TEXT, "text" TEXT, "guidance" TEXT, "citable" INTEGER NOT NULL, "hash" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE UNIQUE INDEX "MonitoringStandards_standardId_deletedAt"\n          ON "MonitoringStandards"\n          ("standardId", "deletedAt");
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "MonitoringStandards"\n          ADD CONSTRAINT "MonitoringStandards_standardId_deletedAt_unique"\n          UNIQUE USING INDEX "MonitoringStandards_standardId_deletedAt";
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "MonitoringReviewGrantees" ALTER COLUMN "granteeId" SET NOT NULL;ALTER TABLE "MonitoringReviewGrantees"  ADD FOREIGN KEY ("granteeId") REFERENCES "MonitoringGranteeLinks" ("granteeId");
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): CREATE TABLE IF NOT EXISTS "MonitoringFindingHistoryStatuses" ("id"   SERIAL , "statusId" INTEGER NOT NULL REFERENCES "MonitoringFindingHistoryStatusLinks" ("statusId"), "name" TEXT NOT NULL, "sourceCreatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceUpdatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "sourceDeletedAt" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "findingId" TEXT DEFAULT NULL REFERENCES "MonitoringFindingLinks" ("findingId");
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "statusId" INTEGER DEFAULT NULL REFERENCES "MonitoringFindingHistoryStatusLinks" ("statusId");
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "narrative" TEXT DEFAULT NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "ordinal" INTEGER DEFAULT NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "public"."MonitoringFindingHistories" ADD COLUMN "determination" TEXT DEFAULT NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "public"."MonitoringReviews" ADD COLUMN "reportAttachmentId" TEXT DEFAULT NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): ALTER TABLE "public"."MonitoringReviews" ADD COLUMN "name" TEXT DEFAULT NULL;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): Update "Imports" i\n      SET\n        definitions = (\n          SELECT jsonb_agg(elem) || jsonb_build_array(\n          jsonb_build_object(\n            'keys', jsonb_build_array('findingId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_Finding.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'FindingId', 'findingId',\n              'StatusId', 'statusId',\n              'FindingType', 'findingType',\n              'Source', 'source',\n              'CorrectionDeadLine', 'correctionDeadLine',\n              'ReportDate', 'reportDate',\n              'ClosedDate', 'closedDate'\n            ),\n            'tableName', 'MonitoringFindings'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('findingId', 'granteeId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingGrants.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'FindingId', 'findingId',\n              'GranteeId', 'granteeId',\n              'StatusId', 'statusId',\n              'FindingType', 'findingType',\n              'Source', 'source',\n              'CorrectionDeadLine', 'correctionDeadLine',\n              'ReportDate', 'reportDate',\n              'ClosedDate', 'closedDate'\n            ),\n            'tableName', 'MonitoringFindingGrants'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('findingHistoryId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingHistory.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'FindingHistoryId', 'findingHistoryId',\n              'FindingId', 'findingId',\n              'ReviewId', 'reviewId',\n              'StatusId', 'statusId',\n              'Narrative', 'narrative',\n              'Ordinal', 'ordinal',\n              'Determination', 'determination'\n            ),\n            'tableName', 'MonitoringFindingHistories'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('statusId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingHistoryStatus.xml',\n            'remapDef', jsonb_build_object(\n              'StatusId', 'statusId',\n              'Name', 'name'\n            ),\n            'tableName', 'MonitoringFindingHistoryStatuses'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('findingId', 'standardId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingStandard.xml',\n            'remapDef', jsonb_build_object(\n              'FindingId', 'findingId',\n              'StandardId', 'standardId'\n            ),\n            'tableName', 'MonitoringFindingStandards'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('statusId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_FindingStatus.xml',\n            'remapDef', jsonb_build_object(\n              'StatusId', 'statusId',\n              'Name', 'name'\n            ),\n            'tableName', 'MonitoringFindingStatuses'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('reviewId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_Review.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'ReviewId', 'reviewId',\n              'ContentId', 'contentId',\n              'StatusId', 'statusId',\n              'StartDate', 'startDate',\n              'EndDate', 'endDate',\n              'ReviewType', 'reviewType',\n              'ReportDeliveryDate', 'reportDeliveryDate',\n              'ReportAttachmentId', 'reportAttachmentId',\n              'Outcome', 'outcome',\n              'ReviewId', 'reviewId',\n              'Name', 'name'\n            ),\n            'tableName', 'MonitoringReviews'\n          ),\n          jsonb_build_object(\n            'keys', jsonb_build_array('standardId'),\n            'path', '.',\n            'encoding', 'utf16le',\n            'fileName', 'AMS_Standard.xml',\n            'remapDef', jsonb_build_object(\n              '.', 'toHash.*',\n              'ContentId', 'contentId',\n              'StandardId', 'standardId',\n              'Citation', 'citation',\n              'Text', 'text',\n              'Guidance', 'guidance',\n              'Citable', 'citable'\n            ),\n            'tableName', 'MonitoringStandards'\n          )\n        )\n          FROM (\n              SELECT elem\n              FROM jsonb_array_elements(i.definitions) AS elem\n              WHERE elem->>'fileName' != 'AMS_FindingHistory.xml'\n              OR elem->>'fileName' != 'AMS_Review.xml'\n          ) subquery\n      ),\n        "updatedAt" = CURRENT_TIMESTAMP\n      WHERE i.id = 1;
Executing (ae1e2f62-f603-4ac8-b8ab-22689f8c0654): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240509221012-monitoring-findings: migrated (0.469s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240510140448-update-course-model: migrating =======
Executing (66cad4f2-8542-4f8d-8921-794b3dc67f40): START TRANSACTION;
Connection validated successfully
Executing (66cad4f2-8542-4f8d-8921-794b3dc67f40): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240510140448-update-course-model.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (66cad4f2-8542-4f8d-8921-794b3dc67f40): ALTER TABLE "public"."Courses" ADD COLUMN "persistsOnUpload" BOOLEAN NOT NULL DEFAULT false;
Executing (66cad4f2-8542-4f8d-8921-794b3dc67f40): INSERT INTO "Courses" ("name","persistsOnUpload","createdAt","updatedAt") VALUES ('Other',true,'2025-03-28 23:19:01.441 +00:00','2025-03-28 23:19:01.441 +00:00');
Executing (66cad4f2-8542-4f8d-8921-794b3dc67f40): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240510140448-update-course-model: migrated (0.029s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240520000000-merge_duplicate_args: migrating =======
Executing (09e26d25-b552-4e92-b2a9-fe410575bf24): START TRANSACTION;
Connection validated successfully
Executing (09e26d25-b552-4e92-b2a9-fe410575bf24): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240520000000-merge_duplicate_args.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (09e26d25-b552-4e92-b2a9-fe410575bf24): -- Creating it as a function because we'll need to rerun this in the future\n      -- up until and unless all issues producing duplicate ARGs are addressed\n\n      CREATE OR REPLACE FUNCTION dedupe_args()\n      RETURNS VOID LANGUAGE plpgsql AS\n      $$\n      BEGIN\n      -- There are some duplicate ARGs, meaning link records that connect the same\n      -- AR-Goal pairs. This migration merges them down to the link record that was\n      -- most recently updated and thus presumably has the latest status & etc.\n      -- Merging rather than simply deleting is necessary to account for\n      -- ActivityReportGoalFieldResponses and ActivityReportGoalResources, both of\n      -- which link to ARGs and so may need to be moved and deconflicted.\n      -- Neither ActivityReportGoalResources nor ActivityReportGoalFieldResponses\n      -- have applicable records at time of writing, but this may not remain true in\n      -- the future when this runs.\n\n      DROP TABLE IF EXISTS arg_merges;\n      CREATE TEMP TABLE arg_merges\n      AS\n      WITH link_counts AS (\n      SELECT\n        "activityReportId" arid,\n        "goalId" gid,\n        COUNT(*) link_cnt\n      FROM "ActivityReportGoals"\n      GROUP BY 1,2\n      ),\n      latest_updated AS (\n      SELECT\n        arid,\n        gid,\n        arg.id argid,\n        ROW_NUMBER() OVER (\n          PARTITION BY arid,gid\n          ORDER BY "updatedAt" DESC, arg.id\n        ) updated_rank\n      FROM "ActivityReportGoals" arg\n      JOIN link_counts\n        ON "activityReportId" = arid\n        AND "goalId" = gid\n      WHERE link_cnt > 1\n      )\n      SELECT\n        id donor_arg,\n        argid target_arg\n      FROM "ActivityReportGoals" arg\n      JOIN latest_updated\n        ON "activityReportId" = arid\n        AND "goalId" = gid\n        AND updated_rank = 1\n      ;\n\n      -- Relink any ActivityReportGoalFieldResponses connected to the\n      -- duplicate (and therefore donor) ARG\n      -- Because there could theoretically be multiple prompts on\n      -- multiple duplicates, we need to rank the ARGFRs referring to\n      -- a particular prompt-goal pair and select just one of each.\n      -- There's one target_arg per goal so we use that as a proxy.\n      -- Just for simplicity, ARGFRs that are already on the target\n      -- ARG are left alone and the corresponding responses on donors\n      -- will be deleted.\n      --\n      -- At time of writing this is all theoretical as there aren't\n      -- any reponses at all for FEI goals with duplicate ARGs, but this\n      -- could change by the time it runs\n      DROP TABLE IF EXISTS relinked_argfrs;\n      CREATE TEMP TABLE relinked_argfrs\n      AS\n      WITH updater AS (\n        WITH argfr_on_donor_args AS (\n          SELECT\n            donor_arg,\n            target_arg,\n            argfr."activityReportGoalId" argid,\n            argfr."goalTemplateFieldPromptId" promptid,\n            argfr.id argfrid,\n            ROW_NUMBER() OVER (\n              PARTITION BY arg."goalId", argfr."goalTemplateFieldPromptId"\n              ORDER BY argfr."activityReportGoalId" = target_arg DESC, argfr."updatedAt" DESC, argfr.id\n            ) choice_rank\n          FROM arg_merges am\n          JOIN "ActivityReportGoals" arg\n            ON donor_arg = arg.id\n          JOIN "ActivityReportGoalFieldResponses" argfr\n            ON am.donor_arg = argfr."activityReportGoalId"\n        ), unmatched AS (\n          SELECT\n            donor_arg,\n            argid,\n            argfrid\n          FROM argfr_on_donor_args aoda\n          WHERE choice_rank = 1\n            AND argid != target_arg\n        )\n        UPDATE "ActivityReportGoalFieldResponses" AS argfr\n        SET "activityReportGoalId" = target_arg\n        FROM arg_merges am\n        JOIN unmatched u\n          ON u.donor_arg = am.donor_arg\n        WHERE argfr.id = u.argfrid\n        RETURNING\n          id argfrid,\n          am.donor_arg original_arg\n      ) SELECT * FROM updater\n      ;\n\n      -- Delete duplicate objective ARGFRs\n      DROP TABLE IF EXISTS deleted_argfrs;\n      CREATE TEMP TABLE deleted_argfrs\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoalFieldResponses"\n        USING arg_merges\n        WHERE "activityReportGoalId" = donor_arg\n          AND target_arg != donor_arg\n        RETURNING\n          id argfrid,\n          donor_arg\n      ) SELECT * FROM updater\n      ;\n\n      -- Relink any ActivityReportGoalResources connected to the\n      -- duplicate (and therefore donor) ARG\n      -- Because there could theoretically be multiple resources on\n      -- multiple duplicates, we need to rank the ARGRs referring to\n      -- a particular resource-goal pair and select just one of each.\n      -- There's one target_arg per goal so we use that as a proxy.\n      -- Just for simplicity, ARGRs that are already on the target\n      -- ARG are left alone and the corresponding responses on donors\n      -- will be deleted.\n      --\n      -- At time of writing this is all theoretical as there aren't\n      -- any ARGRs at all but this could change by the time it runs\n      DROP TABLE IF EXISTS relinked_argrs;\n      CREATE TEMP TABLE relinked_argrs\n      AS\n      WITH updater AS (\n        WITH argr_on_donor_args AS (\n          SELECT\n            donor_arg,\n            target_arg,\n            argr."activityReportGoalId" argid,\n            argr."resourceId" resourceid,\n            argr.id argrid,\n            ROW_NUMBER() OVER (\n              PARTITION BY arg."goalId", argr."resourceId"\n              ORDER BY argr."activityReportGoalId" = target_arg DESC, argr."updatedAt" DESC, argr.id\n            ) choice_rank\n          FROM arg_merges am\n          JOIN "ActivityReportGoals" arg\n            ON donor_arg = arg.id\n          JOIN "ActivityReportGoalResources" argr\n            ON am.donor_arg = argr."activityReportGoalId"\n        ), unmatched AS (\n          SELECT\n            donor_arg,\n            argid,\n            argrid\n          FROM argr_on_donor_args aoda\n          WHERE choice_rank = 1\n            AND argid != target_arg\n        )\n        UPDATE "ActivityReportGoalResources" AS argr\n        SET "activityReportGoalId" = target_arg\n        FROM arg_merges am\n        JOIN unmatched u\n          ON u.donor_arg = am.donor_arg\n        WHERE argr.id = u.argrid\n        RETURNING\n          id argrid,\n          am.donor_arg original_arg\n      ) SELECT * FROM updater\n      ;\n      -- Delete duplicate objective ARGRs\n      DROP TABLE IF EXISTS deleted_argrs;\n      CREATE TEMP TABLE deleted_argrs\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoalResources"\n        USING arg_merges\n        WHERE "activityReportGoalId" = donor_arg\n        RETURNING\n          id argrid,\n          donor_arg\n      ) SELECT * FROM updater\n      ;\n\n      -- Delete duplicate ARGs\n      DROP TABLE IF EXISTS deleted_args;\n      CREATE TEMP TABLE deleted_args\n      AS\n      WITH updater AS (\n        DELETE FROM "ActivityReportGoals"\n        USING arg_merges\n        WHERE id = donor_arg\n          AND target_arg != donor_arg\n        RETURNING\n          donor_arg\n      ) SELECT * FROM updater\n      ;\n\n      END\n      $$\n      ;\n      -- Actually call the function\n      SELECT dedupe_args();\n\n      SELECT\n        1 op_order,\n        'relinked_argfrs' op_name,\n        COUNT(*) record_cnt\n      FROM relinked_argfrs\n      UNION SELECT 2, 'deleted_argfrs', COUNT(*) FROM deleted_argfrs\n      UNION SELECT 3, 'relinked_argrs', COUNT(*) FROM relinked_argrs\n      UNION SELECT 4, 'deleted_argrs', COUNT(*) FROM deleted_argrs\n      UNION SELECT 5, 'deleted_args', COUNT(*) FROM deleted_args\n      ORDER BY 1;
Executing (09e26d25-b552-4e92-b2a9-fe410575bf24): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240520000000-merge_duplicate_args: migrated (0.061s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240520000001-create-timeseries-and-root-causes: migrating =======
Executing (768332f1-c5e0-4052-9745-711e36c5cc1b): START TRANSACTION;
Connection validated successfully
Executing (768332f1-c5e0-4052-9745-711e36c5cc1b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240520000001-create-timeseries-and-root-causes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (768332f1-c5e0-4052-9745-711e36c5cc1b): CREATE OR REPLACE FUNCTION create_timeseries_from_audit_log(tablename text)\n      RETURNS VOID LANGUAGE plpgsql AS\n      $$\n      DECLARE\n        qry text := '';\n        wtext text := '';\n        rec record;\n      BEGIN\n      -- Get the column list for the main table\n      -- NOTE regarding string formatting used to assemble the queries that the\n      -- function uses to do its work:\n      -- The format() function works like C string interpolation except\n      -- that it protects from SQL injection attacks. Like C string interpolation,\n      -- the %<character> is replaced by the comma-separated values following the\n      -- base string.\n      -- %I is formatted as a database object name and manages double quotes\n      -- %L is formatted as a string literal and manages single quotes\n      -- %s can be used for arbitrary string interpolation but doesn't\n      -- provide any protections or quote management.\n      qry := format('\n      DROP TABLE IF EXISTS clist;\n      CREATE TEMP TABLE clist\n      AS\n      SELECT\n        column_name cname\n        ,ordinal_position cnum\n        ,data_type  ctype\n      FROM information_schema.columns ic\n      WHERE table_schema = %L\n        AND table_name = %L'\n      ,'public'\n      ,tablename);\n      EXECUTE qry;\n      qry := '';\n      -- Get the pg_typeof column datatypes for the main table\n      -- these are more precise than the information schema types\n      qry := 'DROP TABLE IF EXISTS ctypes;\n      CREATE TEMP TABLE ctypes\n      AS';\n      FOR rec IN\n        SELECT * FROM clist ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n          SELECT cname, cnum, ctype, pg_typeof( %I ) pgtype FROM clist LEFT JOIN (SELECT * FROM %I LIMIT 1) a ON TRUE WHERE %L = cname UNION'\n        ,rec.cname\n        ,tablename\n        ,rec.cname);\n      END LOOP;\n      qry := qry || LEFT(wtext,-6) || '\n      ORDER BY cnum';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- set up the beginning and end of time\n      qry := format('DROP TABLE IF EXISTS timeband;\n      CREATE TEMP TABLE timeband\n      AS\n      SELECT\n        %L::timestamp timebegin,\n        NOW() timeend'\n      ,'2020-01-01');\n      EXECUTE qry;\n      qry := '';\n      wtext := '';\n      -- assemble flat_z, containing the typed columns with changed data\n      -- there will be one record per audit log entry, plus one for the\n      -- current value\n      -- This assumes every table as an id column, which the audit log\n      -- also assumes\n      qry := format('DROP TABLE IF EXISTS flat_z;\n      CREATE TEMP TABLE flat_z\n      AS\n      SELECT\n        id zid\n        ,data_id\n        ,dml_timestamp\n        ,dml_type = %L is_insert\n        ,FALSE is_current_record'\n      ,'INSERT');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        CASE\n          WHEN rec.ctype = 'USER-DEFINED' THEN -- for enums\n            -- because the enums have changed over time we\n            -- are only casting to text. The other option\n            -- of building a new enum containing all historical\n            -- enums is both more complex and won't make\n            -- using the resulting time series any easier\n            wtext := wtext || format('\n            ,(old_row_data->>%L)::%s AS %I'\n            ,rec.cname\n            ,'text'\n            ,rec.cname);\n          WHEN rec.ctype = 'ARRAY' THEN\n            -- Because the arrays are stored as strings, they need to be parsed\n            -- back into arrays. They look like:\n            -- ["element1", "element2", "", "element4"]\n            -- The X-X-X is a string very unlikely to be present\n            -- in the internal text and replaces the internal element separators (", ")\n            -- before the start ([") and end ("]) are stripped off. That step probably\n            -- isn't strictly necessary, but is in place because the end also trims\n            -- double quotes, so it's safest to already have the internal separators\n            -- containing the double quotes replaced with an alternative separator.\n            wtext := wtext || format('\n            ,(\n              string_to_array(\n                TRIM(\n                  TRIM(\n                    regexp_replace((old_row_data->>%L), %L , %L, %L\n                    ), %L\n                  ),%L\n                ), %L\n              )\n            )::%s AS %I'\n            ,rec.cname\n            ,'", "'\n            ,'X-X-X'\n            ,'g'\n            ,'["'\n            ,'"]'\n            ,'X-X-X'\n            ,rec.pgtype\n            ,rec.cname);\n          ELSE -- for everything else\n            -- All of these values can be cast as-is into their original types\n            wtext := wtext || format('\n            ,(old_row_data->>%L)::%s AS %I'\n            ,rec.cname\n            ,rec.ctype\n            ,rec.cname);\n        END CASE;\n        -- this detects whether the column was updated to be null\n        wtext := wtext || format('\n        ,(old_row_data->%L) = %L %I'\n        ,rec.cname\n        ,'null'\n        ,rec.cname || '_isnull');\n      END LOOP;\n      qry := qry || wtext || format('\n      FROM %I\n      UNION ALL\n      -- Add in the current value from the live table as a final record\n      SELECT\n        9223372036854775807 --max bigint so these always sort last\n        ,id\n        ,timeend\n        ,FALSE\n        ,TRUE'\n      , 'ZAL' || tablename);\n      wtext := '';\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        CASE\n          WHEN rec.ctype = 'USER-DEFINED' THEN -- for enums\n            -- this is to match pushing enums to text in\n            -- records pulled from the audit log\n            wtext := wtext || format('\n            ,%I::%s'\n            ,rec.cname\n            ,'text');\n          ELSE\n            wtext := wtext || format('\n            ,%I'\n            ,rec.cname);\n        END CASE;\n        wtext := wtext || format('\n        ,%I IS NULL %I'\n        ,rec.cname\n        ,rec.cname || '_isnull');\n      END LOOP;\n      qry := qry || wtext || format('\n      FROM %I\n      CROSS JOIN timeband\n      ORDER BY 2,1'\n      ,tablename);\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- create group ids for each column to identify which iteration\n      -- of column value each record should have\n      qry := 'DROP TABLE IF EXISTS group_z;\n      CREATE TEMP TABLE group_z\n      AS\n      SELECT\n        zid\n        ,data_id';\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,SUM(CASE WHEN %I OR %I IS NOT NULL THEN 1 ELSE 0 END) OVER (PARTITION BY data_id ORDER BY zid DESC ROWS UNBOUNDED PRECEDING) AS %I'\n        ,rec.cname || '_isnull'\n        ,rec.cname\n        ,rec.cname || '_group');\n      END LOOP;\n      qry := qry || wtext || E'\n' || 'FROM flat_z';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- spread the value from the records with update values throughout their respective groups\n      -- also create the start and end timestamps using adjacent timestamps. Add one millisecond\n      -- to the previous record's timestamp so it's not possible to match both with a BETWEEN.\n      -- This is not implausible if a large number of records are updated at the same time in a\n      -- shared transaction\n      qry := format('DROP TABLE IF EXISTS banded_z;\n      CREATE TEMP TABLE banded_z\n      AS\n      SELECT\n        fz.zid\n        ,fz.data_id\n        ,fz.is_insert\n        ,fz.is_current_record\n        ,(LAG(fz.dml_timestamp) OVER (PARTITION BY fz.data_id ORDER BY fz.zid)) + (1 * interval %L) timeband_start\n        ,fz.dml_timestamp timeband_end'\n        ,'1  ms');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,FIRST_VALUE(fz.%I) OVER (PARTITION BY fz.data_id, %I ORDER BY fz.zid DESC) AS %I'\n        ,rec.cname\n        ,rec.cname || '_group'\n        ,rec.cname);\n      END LOOP;\n      qry := qry || wtext || '\n      FROM flat_z fz\n      JOIN group_z gz\n        ON fz.zid = gz.zid\n        AND fz.data_id = gz.data_id';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- create the actual time series table\n      qry := format('DROP TABLE IF EXISTS %I;\n      CREATE TEMP TABLE %I\n      AS\n      SELECT\n        data_id\n        ,CASE\n          WHEN is_current_record AND timeband_start IS NULL THEN timebegin \n          ELSE COALESCE(timeband_start, timebegin)\n        END timeband_start\n        ,timeband_end'\n        ,tablename || '_timeseries'\n        ,tablename || '_timeseries');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,%I'\n        ,rec.cname);\n      END LOOP;\n      qry := qry || wtext || '\n      FROM banded_z\n      CROSS JOIN timeband\n      WHERE NOT is_insert';\n      wtext := '';\n      EXECUTE qry;\n      END\n      $$\n      ;
Executing (768332f1-c5e0-4052-9745-711e36c5cc1b): -- Create GoalFieldResponses_timeseries\n    \n      SELECT create_timeseries_from_audit_log('GoalFieldResponses');\n\n      -- Pull the data necessary to create an ARGFR from the historical\n      -- state of the associated GFR. If there is a historical state, use\n      -- it, if not, use the root cause currently on the goal. If there's\n      -- still no root cause, do nothing.\n      DROP TABLE IF EXISTS argfrs_to_insert;\n      CREATE TEMP TABLE argfrs_to_insert\n      AS\n      SELECT\n        arg.id argid,\n        gfrt."goalId" gid,\n        gfrt.data_id gfrid,\n        COALESCE(gfrt."goalTemplateFieldPromptId", gfr."goalTemplateFieldPromptId") "goalTemplateFieldPromptId",\n        COALESCE(gfrt.response, gfr.response) response\n      FROM "ActivityReports" ar\n      JOIN "ActivityReportGoals" arg\n        ON ar.id = arg."activityReportId"\n      JOIN "Goals" g\n        ON arg."goalId" = g.id\n      LEFT JOIN "GoalFieldResponses_timeseries" gfrt\n        ON arg."goalId" = gfrt."goalId"\n        AND ar."approvedAt" BETWEEN timeband_start AND timeband_end\n      LEFT JOIN "ActivityReportGoalFieldResponses" argfr\n        ON arg.id = argfr."activityReportGoalId"\n      LEFT JOIN "GoalFieldResponses" gfr\n        ON gfr."goalId" = arg."goalId"\n      WHERE argfr.id IS NULL\n        AND g."goalTemplateId" = 19017\n        AND (gfrt.response IS NOT NULL OR gfr.response IS NOT NULL)\n      ;\n      \n      -- Insert the records\n      INSERT INTO "ActivityReportGoalFieldResponses" (\n        "activityReportGoalId",\n        "goalTemplateFieldPromptId",\n        response,\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        argid,\n        "goalTemplateFieldPromptId",\n        response,\n        NOW(),\n        NOW()\n      FROM argfrs_to_insert\n      ;
Executing (768332f1-c5e0-4052-9745-711e36c5cc1b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240520000001-create-timeseries-and-root-causes: migrated (0.069s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240529000000-correct-spanish-course-names: migrating =======
Executing (c05e76f4-e5e7-4eea-9ca8-bc06c0d7cbd5): START TRANSACTION;
Connection validated successfully
Executing (c05e76f4-e5e7-4eea-9ca8-bc06c0d7cbd5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240529000000-correct-spanish-course-names.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c05e76f4-e5e7-4eea-9ca8-bc06c0d7cbd5): -- Matches to created the mapping use hex encodings of the exact bits currently\n        -- stored in the database to avoid having to trust that the UTF-8 'unknown character'\n        -- value won't get corrupted somewhere along the deployment chain and cause the string\n        -- values to not match. An alternative method would be to match on IDs, but this is\n        -- vulnerable if anything else ends up changing the ID order in the meantime.\n        DROP TABLE IF EXISTS name_map;\n        CREATE TEMP TABLE name_map\n        AS\n        SELECT\n          id old_cid,\n          LEFT(name,30) old_name, -- here for validation convenience\n          'Apoyar al desarrollo de bebés y niños pequeños (BTS-IT)' new_name\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '41706f79617220616c206465736172726f6c6c6f20646520626562efbfbd732079206e69efbfbd6f73207065717565efbfbd6f7320284254532d495429'\n        UNION SELECT id, LEFT(name,30), 'Apoyo para niños y familias que están experimentando la carencia de hogar'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '41706f796f2070617261206e69efbfbd6f7320792066616d696c6961732071756520657374efbfbd6e206578706572696d656e74616e646f206c6120636172656e63696120646520686f676172'\n        UNION SELECT id, LEFT(name,30), 'Autoevaluación: su viaje anual'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '4175746f6576616c75616369efbfbd6e3a207375207669616a6520616e75616c'\n        UNION SELECT id, LEFT(name,30), 'Capacitación de Liderazgo y gobernanza en Head Start: valores, reglamentos y habilidades'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '43617061636974616369efbfbd6e206465204c69646572617a676f207920676f6265726e616e7a6120656e20486561642053746172743a2076616c6f7265732c207265676c616d656e746f73207920686162696c696461646573'\n        UNION SELECT id, LEFT(name,30), 'Coaching basado en la práctica'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '436f616368696e672062617361646f20656e206c61207072efbfbd6374696361'\n        UNION SELECT id, LEFT(name,30), 'Evaluación continua (BTS-IT)'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '4576616c75616369efbfbd6e20636f6e74696e756120284254532d495429'\n        UNION SELECT id, LEFT(name,30), 'Gerentes de educación en vivo'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '476572656e7465732064652065647563616369efbfbd6e20656e207669766f'\n        UNION SELECT id, LEFT(name,30), 'La gestión es importante: Asignación de costos'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '4c61206765737469efbfbd6e20657320696d706f7274616e74653a20417369676e616369efbfbd6e20646520636f73746f73'\n        UNION SELECT id, LEFT(name,30), 'Planificación del aprendizaje (BTS-IT)'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '506c616e69666963616369efbfbd6e2064656c20617072656e64697a616a6520284254532d495429'\n        UNION SELECT id, LEFT(name,30), 'Práctica basada en la relación (BTS-IT)'\n        FROM "Courses"\n        WHERE ENCODE(name::bytea,'hex') =\n        '5072efbfbd63746963612062617361646120656e206c612072656c616369efbfbd6e20284254532d495429'\n        ;\n\n        -- Insert the new courses\n        INSERT INTO "Courses" (name)\n        SELECT new_name\n        FROM name_map\n        ;\n\n        -- Update the old courses with the mapsTo the new courses, and set their deletedAt\n        UPDATE "Courses" uc\n        SET\n          "mapsTo" = c.id,\n          "updatedAt" = NOW(),\n          "deletedAt" = NOW()\n        FROM name_map nm\n        JOIN "Courses" c\n          ON nm.new_name = c.name\n        WHERE uc.id = old_cid\n        ;
Executing (c05e76f4-e5e7-4eea-9ca8-bc06c0d7cbd5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240529000000-correct-spanish-course-names: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240529190616-add-created-here-column-to-activity-report-objectives: migrating =======
Executing (e3891079-d97e-46f7-bfe0-df59621a5a1d): START TRANSACTION;
Connection validated successfully
Executing (e3891079-d97e-46f7-bfe0-df59621a5a1d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240529190616-add-created-here-column-to-activity-report-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (e3891079-d97e-46f7-bfe0-df59621a5a1d): ALTER TABLE "public"."ActivityReportObjectives" ADD COLUMN "objectiveCreatedHere" BOOLEAN;
Executing (e3891079-d97e-46f7-bfe0-df59621a5a1d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240529190616-add-created-here-column-to-activity-report-objectives: migrated (0.110s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240529200808-change-import-schedule: migrating =======
Executing (e5718042-a958-452f-8e14-484314fe9ca8): START TRANSACTION;
Connection validated successfully
Executing (e5718042-a958-452f-8e14-484314fe9ca8): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240529200808-change-import-schedule.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): UPDATE "Imports"\n      SET schedule = '30 8 * * *'\n      WHERE name = 'ITAMS Monitoring Data'\n      AND schedule = '0 7 * * *';
Connection validated successfully
Executing (e5718042-a958-452f-8e14-484314fe9ca8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240529200808-change-import-schedule: migrated (0.109s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240530143904-add-qa-dashboard-feature-flag: migrating =======
Executing (63175162-ea4e-4f8f-8b67-934861baa713): START TRANSACTION;
Connection validated successfully
Executing (63175162-ea4e-4f8f-8b67-934861baa713): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240530143904-add-qa-dashboard-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (63175162-ea4e-4f8f-8b67-934861baa713): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240530143904-add-qa-dashboard-feature-flag: migrated (0.036s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240531163151-remove-unused-objective-tables: migrating =======
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): START TRANSACTION;
Connection validated successfully
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240531163151-remove-unused-objective-tables.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): ALTER TABLE "public"."Objectives" DROP COLUMN "supportType";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTemplateTopics');
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTemplateFiles');
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTemplateResources');
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveCourses');
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveTopics');
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveFiles');
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT "ZAFRemoveAuditingOnTable"('ObjectiveResources');
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ZALObjectiveTemplateTopics";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ZALObjectiveTemplateFiles";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ZALObjectiveTemplateResources";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ZALObjectiveCourses";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ZALObjectiveTopics";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ZALObjectiveFiles";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ZALObjectiveResources";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ObjectiveTemplateTopics";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ObjectiveTemplateFiles";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ObjectiveTemplateResources";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ObjectiveCourses";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ObjectiveTopics";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ObjectiveFiles";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ObjectiveResources";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): DROP TABLE IF EXISTS "ObjectiveResourcesToModify";\n        DROP TYPE IF EXISTS "enum_ObjectiveResources_sourceFields";\n        DROP TYPE IF EXISTS "enum_ObjectiveTemplateResources_sourceFields";
Executing (b0c0bf4d-93b1-4a81-ac60-3b618cd9d812): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240531163151-remove-unused-objective-tables: migrated (0.457s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240607000000-fix-timeseries: migrating =======
Executing (4b794f4b-41b7-4373-99cc-d4192058fbde): START TRANSACTION;
Connection validated successfully
Executing (4b794f4b-41b7-4373-99cc-d4192058fbde): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240607000000-fix-timeseries.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (4b794f4b-41b7-4373-99cc-d4192058fbde): CREATE OR REPLACE FUNCTION create_timeseries_from_audit_log(tablename text)\n      RETURNS VOID LANGUAGE plpgsql AS\n      $$\n      DECLARE\n        qry text := '';\n        wtext text := '';\n        rec record;\n      BEGIN\n      -- Get the column list for the main table\n      -- NOTE regarding string formatting used to assemble the queries that the\n      -- function uses to do its work:\n      -- The format() function works like C string interpolation except\n      -- that it protects from SQL injection attacks. Like C string interpolation,\n      -- the %<character> is replaced by the comma-separated values following the\n      -- base string.\n      -- %I is formatted as a database object name and manages double quotes\n      -- %L is formatted as a string literal and manages single quotes\n      -- %s can be used for arbitrary string interpolation but doesn't\n      -- provide any protections or quote management.\n      qry := format('\n      DROP TABLE IF EXISTS clist;\n      CREATE TEMP TABLE clist\n      AS\n      SELECT\n        column_name cname\n        ,ordinal_position cnum\n        ,data_type  ctype\n      FROM information_schema.columns ic\n      WHERE table_schema = %L\n        AND table_name = %L'\n      ,'public'\n      ,tablename);\n      EXECUTE qry;\n      qry := '';\n      -- Get the pg_typeof column datatypes for the main table\n      -- these are more precise than the information schema types\n      qry := 'DROP TABLE IF EXISTS ctypes;\n      CREATE TEMP TABLE ctypes\n      AS';\n      FOR rec IN\n        SELECT * FROM clist ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n          SELECT cname, cnum, ctype, pg_typeof( %I ) pgtype FROM clist LEFT JOIN (SELECT * FROM %I LIMIT 1) a ON TRUE WHERE %L = cname UNION'\n        ,rec.cname\n        ,tablename\n        ,rec.cname);\n      END LOOP;\n      qry := qry || LEFT(wtext,-6) || '\n      ORDER BY cnum';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- set up the beginning and end of time\n      qry := format('DROP TABLE IF EXISTS timeband;\n      CREATE TEMP TABLE timeband\n      AS\n      SELECT\n        %L::timestamp timebegin,\n        NOW() timeend'\n      ,'2020-01-01');\n      EXECUTE qry;\n      qry := '';\n      wtext := '';\n      -- assemble flat_z, containing the typed columns with changed data\n      -- there will be one record per audit log entry, plus one for the\n      -- current value\n      -- This assumes every table as an id column, which the audit log\n      -- also assumes\n      qry := format('DROP TABLE IF EXISTS flat_z;\n      CREATE TEMP TABLE flat_z\n      AS\n      SELECT\n        id zid\n        ,data_id\n        ,dml_timestamp\n        ,dml_type = %L is_insert\n        ,FALSE is_current_record'\n      ,'INSERT');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        CASE\n          WHEN rec.ctype = 'USER-DEFINED' THEN -- for enums\n            -- because the enums have changed over time we\n            -- are only casting to text. The other option\n            -- of building a new enum containing all historical\n            -- enums is both more complex and won't make\n            -- using the resulting time series any easier\n            wtext := wtext || format('\n            ,(old_row_data->>%L)::%s AS %I'\n            ,rec.cname\n            ,'text'\n            ,rec.cname);\n          WHEN rec.ctype = 'ARRAY' AND rec.pgtype::text NOT LIKE '"enum%' THEN\n            -- Because the arrays are stored as strings, they need to be parsed\n            -- back into arrays. They look like:\n            -- ["element1", "element2", "", "element4"]\n            -- The X-X-X is a string very unlikely to be present\n            -- in the internal text and replaces the internal element separators (", ")\n            -- before the start ([") and end ("]) are stripped off. That step probably\n            -- isn't strictly necessary, but is in place because the end also trims\n            -- double quotes, so it's safest to already have the internal separators\n            -- containing the double quotes replaced with an alternative separator.\n            wtext := wtext || format('\n            ,(\n              string_to_array(\n                TRIM(\n                  TRIM(\n                    regexp_replace((old_row_data->>%L), %L , %L, %L\n                    ), %L\n                  ),%L\n                ), %L\n              )\n            )::%s AS %I'\n            ,rec.cname\n            ,'", "'\n            ,'X-X-X'\n            ,'g'\n            ,'["'\n            ,'"]'\n            ,'X-X-X'\n            ,rec.pgtype\n            ,rec.cname);\n          WHEN rec.ctype = 'ARRAY' AND rec.pgtype::text LIKE '"enum%' THEN\n            -- As a combinations of both previous cases, arrays of enums need\n            -- to be cast to arrays of text.\n            wtext := wtext || format('\n            ,(\n              string_to_array(\n                TRIM(\n                  TRIM(\n                    regexp_replace((old_row_data->>%L), %L , %L, %L\n                    ), %L\n                  ),%L\n                ), %L\n              )\n            )::%s AS %I'\n            ,rec.cname\n            ,'", "'\n            ,'X-X-X'\n            ,'g'\n            ,'["'\n            ,'"]'\n            ,'X-X-X'\n            ,'text[]'\n            ,rec.cname);\n          ELSE -- for everything else\n            -- All of these values can be cast as-is into their original types\n            wtext := wtext || format('\n            ,(old_row_data->>%L)::%s AS %I'\n            ,rec.cname\n            ,rec.ctype\n            ,rec.cname);\n        END CASE;\n        -- this detects whether the column was updated to be null\n        wtext := wtext || format('\n        ,(old_row_data->%L) = %L %I'\n        ,rec.cname\n        ,'null'\n        ,rec.cname || '_isnull');\n      END LOOP;\n      qry := qry || wtext || format('\n      FROM %I\n      UNION ALL\n      -- Add in the current value from the live table as a final record\n      SELECT\n        9223372036854775807 --max bigint so these always sort last\n        ,id\n        ,timeend\n        ,FALSE\n        ,TRUE'\n      , 'ZAL' || tablename);\n      wtext := '';\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        CASE\n          WHEN rec.ctype = 'USER-DEFINED' THEN -- for enums\n            -- this is to match pushing enums to text in\n            -- records pulled from the audit log\n            wtext := wtext || format('\n            ,%I::%s'\n            ,rec.cname\n            ,'text');\n          WHEN rec.ctype = 'ARRAY' AND rec.pgtype::text LIKE '"enum%' THEN\n            -- For handling enums in arrays, which have the same issue\n            wtext := wtext || format('\n            ,%I::%s'\n            ,rec.cname\n            ,'text[]');\n          ELSE\n            wtext := wtext || format('\n            ,%I'\n            ,rec.cname);\n        END CASE;\n        wtext := wtext || format('\n        ,%I IS NULL %I'\n        ,rec.cname\n        ,rec.cname || '_isnull');\n      END LOOP;\n      qry := qry || wtext || format('\n      FROM %I\n      CROSS JOIN timeband\n      ORDER BY 2,1'\n      ,tablename);\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- create group ids for each column to identify which iteration\n      -- of column value each record should have\n      qry := 'DROP TABLE IF EXISTS group_z;\n      CREATE TEMP TABLE group_z\n      AS\n      SELECT\n        zid\n        ,data_id';\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,SUM(CASE WHEN %I OR %I IS NOT NULL THEN 1 ELSE 0 END) OVER (PARTITION BY data_id ORDER BY zid DESC ROWS UNBOUNDED PRECEDING) AS %I'\n        ,rec.cname || '_isnull'\n        ,rec.cname\n        ,rec.cname || '_group');\n      END LOOP;\n      qry := qry || wtext || E'\n' || 'FROM flat_z';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- spread the value from the records with update values throughout their respective groups\n      -- also create the start and end timestamps using adjacent timestamps. Add one millisecond\n      -- to the previous record's timestamp so it's not possible to match both with a BETWEEN.\n      -- This is not implausible if a large number of records are updated at the same time in a\n      -- shared transaction\n      qry := format('DROP TABLE IF EXISTS banded_z;\n      CREATE TEMP TABLE banded_z\n      AS\n      SELECT\n        fz.zid\n        ,fz.data_id\n        ,fz.is_insert\n        ,fz.is_current_record\n        ,(LAG(fz.dml_timestamp) OVER (PARTITION BY fz.data_id ORDER BY fz.zid)) + (1 * interval %L) timeband_start\n        ,fz.dml_timestamp timeband_end'\n        ,'1  ms');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,FIRST_VALUE(fz.%I) OVER (PARTITION BY fz.data_id, %I ORDER BY fz.zid DESC) AS %I'\n        ,rec.cname\n        ,rec.cname || '_group'\n        ,rec.cname);\n      END LOOP;\n      qry := qry || wtext || '\n      FROM flat_z fz\n      JOIN group_z gz\n        ON fz.zid = gz.zid\n        AND fz.data_id = gz.data_id';\n      wtext := '';\n      EXECUTE qry;\n      qry := '';\n      -- create the actual time series table\n      qry := format('DROP TABLE IF EXISTS %I;\n      CREATE TEMP TABLE %I\n      AS\n      SELECT\n        data_id\n        ,CASE\n          WHEN is_current_record AND timeband_start IS NULL THEN timebegin \n          ELSE COALESCE(timeband_start, timebegin)\n        END timeband_start\n        ,timeband_end'\n        ,tablename || '_timeseries'\n        ,tablename || '_timeseries');\n      FOR rec IN\n        SELECT * FROM ctypes WHERE cname != 'id' ORDER BY cnum\n      LOOP\n        wtext := wtext || format('\n        ,%I'\n        ,rec.cname);\n      END LOOP;\n      qry := qry || wtext || '\n      FROM banded_z\n      CROSS JOIN timeband\n      WHERE NOT is_insert';\n      wtext := '';\n      EXECUTE qry;\n      END\n      $$\n      ;
Executing (4b794f4b-41b7-4373-99cc-d4192058fbde): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240607000000-fix-timeseries: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240610110823-remove-unwanted-objectives: migrating =======
Executing (b9dae1a2-a625-43cf-9cf5-f046f18e56a0): START TRANSACTION;
Connection validated successfully
Executing (b9dae1a2-a625-43cf-9cf5-f046f18e56a0): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240610110823-remove-unwanted-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b9dae1a2-a625-43cf-9cf5-f046f18e56a0): -- Get all unwanted objectives for this Goal.\n      DROP TABLE IF EXISTS ObjectivesToRemove;\n      CREATE TEMP TABLE ObjectivesToRemove\n            AS\n      SELECT\n      o."id"\n      FROM "Objectives" o\n      LEFT JOIN "ActivityReportObjectives" aro\n        ON o.id = aro."objectiveId"\n      LEFT JOIN "ActivityReports" ar\n        ON aro."activityReportId" = ar.id\n      WHERE o."goalId" = 66089\n        AND o."status" = 'Not Started'\n        AND COALESCE(ar."calculatedStatus",'draft') = 'draft';\n\n      -- Delete from ARO Topics.\n      DROP TABLE IF EXISTS DeleteTopics;\n      CREATE TEMP TABLE DeleteTopics\n            AS\n      WITH delete_topics AS (\n      DELETE FROM "ActivityReportObjectiveTopics" WHERE "activityReportObjectiveId" IN (\n        SELECT id FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n          SELECT id FROM ObjectivesToRemove\n        )\n      )\n      RETURNING\n      id\n      ) SELECT * FROM delete_topics;\n\n\n\n     -- Delete from ARO Resources.\n     DROP TABLE IF EXISTS DeleteResources;\n      CREATE TEMP TABLE DeleteResources\n            AS\n      WITH deleted_resources AS (\n      DELETE FROM "ActivityReportObjectiveResources" WHERE "activityReportObjectiveId" IN (\n        SELECT id FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n          SELECT id FROM ObjectivesToRemove\n        )\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_resources;\n\n      -- Delete from ARO Files.\n      DROP TABLE IF EXISTS DeleteFiles;\n      CREATE TEMP TABLE DeleteFiles\n            AS\n      WITH deleted_files AS (\n      DELETE FROM "ActivityReportObjectiveFiles" WHERE "activityReportObjectiveId" IN (\n        SELECT id FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n          SELECT id FROM ObjectivesToRemove\n        )\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_files;\n\n      -- Delete from AR Courses.\n      DROP TABLE IF EXISTS DeleteCourses;\n      CREATE TEMP TABLE DeleteCourses\n            AS\n      WITH deleted_courses AS (\n      DELETE FROM "ActivityReportObjectiveCourses" WHERE "activityReportObjectiveId" IN (\n        SELECT id FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n          SELECT id FROM ObjectivesToRemove\n        )\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_courses;\n\n      -- Delete ARO's.\n      DROP TABLE IF EXISTS DeleteAROs;\n      CREATE TEMP TABLE DeleteAROs\n            AS\n      WITH deleted_aros AS (\n      DELETE FROM "ActivityReportObjectives" WHERE "objectiveId" IN (\n        SELECT id FROM ObjectivesToRemove\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_aros;\n\n      -- Delete objectives.\n      DROP TABLE IF EXISTS DeleteObjectives;\n      CREATE TEMP TABLE DeleteObjectives\n            AS\n      WITH deleted_objectives AS (\n      DELETE FROM "Objectives" WHERE id IN (\n         SELECT id FROM ObjectivesToRemove\n      )\n      RETURNING\n      id\n      ) SELECT * FROM deleted_objectives;\n\n      -- Get Delete counts using union.\n      SELECT COUNT(*), 'ARO Topics' FROM DeleteTopics\n      UNION ALL\n      SELECT COUNT(*), 'ARO Resources' FROM DeleteResources\n      UNION ALL\n      SELECT COUNT(*), 'ARO Files' FROM DeleteFiles\n      UNION ALL\n      SELECT COUNT(*), 'ARO Courses' FROM DeleteCourses\n      UNION ALL\n      SELECT COUNT(*), 'AROs' FROM DeleteAROs\n      UNION ALL\n      SELECT COUNT(*), 'Objectives' FROM DeleteObjectives;\n\n      -- Drop all tables.\n      DROP TABLE IF EXISTS ObjectivesToRemove;\n      DROP TABLE IF EXISTS DeleteTopics;\n      DROP TABLE IF EXISTS DeleteResources;\n      DROP TABLE IF EXISTS DeleteFiles;\n      DROP TABLE IF EXISTS DeleteCourses;\n      DROP TABLE IF EXISTS DeleteAROs;\n      DROP TABLE IF EXISTS DeleteObjectives;
Executing (b9dae1a2-a625-43cf-9cf5-f046f18e56a0): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240610110823-remove-unwanted-objectives: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240614000000-r10-clear-all-goals-and-objs: migrating =======
Executing (5511e62f-7e75-4763-862b-fa04f2402711): START TRANSACTION;
Connection validated successfully
Executing (5511e62f-7e75-4763-862b-fa04f2402711): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240614000000-r10-clear-all-goals-and-objs.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5511e62f-7e75-4763-862b-fa04f2402711): -- 1. Get all r10 goals that are currently visible.\n      WITH r_10_active_goals AS (\n      SELECT DISTINCT\n        g.*\n      FROM "Grants" gr\n      JOIN "Goals" g\n        ON gr.id = g."grantId"\n      WHERE gr."regionId" = 10\n        AND g.status != 'Closed'\n        AND g."deletedAt" IS NULL\n        AND g."mapsToParentGoalId" IS NULL\n      ),\n      -- 2. insert the status changes for the goals and return the important elements\n      log_status_change AS (\n      INSERT INTO "GoalStatusChanges"(\n        "goalId",\n        "userId",\n        "userName",\n        "userRoles",\n        "oldStatus",\n        "newStatus",\n        "reason",\n        "context",\n        "createdAt",\n        "updatedAt"\n      )\n      SELECT\n        g.id "goalId",\n        u.id,\n        u.name,\n        ARRAY_AGG(ro.name),\n        g.status "oldSataus", \n        'Closed' "newStatus",\n        'TTA completed' "reason",\n        'Close all goals to move to new goal language' "context",\n        now() "createdAt",\n        now() "updatedAt"\n      FROM r_10_active_goals g\n      LEFT JOIN "Users" u\n        ON (\n          (u.id = 550 AND "phoneNumber" IS NOT NULL) --for non-prod\n          OR\n          (md5(u.name || 'bdjy34gg') = '7b1166c709d27ec6519b05c24373be6ai') --for prod\n        )\n      LEFT JOIN "UserRoles" ur\n        ON u.id = ur."userId"\n      LEFT JOIN "Roles" ro\n        ON ur."roleId" = ro.id\n      GROUP BY 1,2,3,5,6,7,8,9,10\n      RETURNING\n        id,\n        "goalId",\n        "newStatus",\n        "updatedAt"\n      ),\n      -- 3. Update the actual goals\n      update_goals AS (\n      UPDATE "Goals" g\n      SET\n        "status" = lsc."newStatus",\n        "updatedAt" = lsc."updatedAt"\n      FROM log_status_change lsc\n      WHERE g.id = lsc."goalId"\n      RETURNING\n        g.id "goalId",\n        g.status\n      ),\n      -- 4. Update all objectives attached to any R10 goal\n      update_objectives AS (\n      UPDATE "Objectives" o\n      SET\n        "status" = 'Complete',\n        "updatedAt" = NOW()\n      FROM "Grants" gr\n      JOIN "Goals" g\n        ON g."grantId" = gr.id\n        AND gr."regionId" = 10\n      WHERE o."goalId" = g.id\n        AND o."status" != 'Complete'\n        AND o."deletedAt" IS NULL\n        AND o."mapsToParentObjectiveId" IS NULL\n      RETURNING\n        o.id "objectiveId",\n        o.status\n      )\n      -- 5. show stats for what was done when testing.\n      SELECT\n        'goals updated' stat,\n        COUNT("goalId") statcnt\n      FROM update_goals\n      UNION\n      SELECT\n        'objectives updated',\n        COUNT("objectiveId")\n      FROM update_objectives;
Executing (5511e62f-7e75-4763-862b-fa04f2402711): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240614000000-r10-clear-all-goals-and-objs: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240624185931-unlock-tr-and-sessions: migrating =======
Executing (7233e971-22b5-4f01-975f-256b8f4a579b): START TRANSACTION;
Connection validated successfully
Executing (7233e971-22b5-4f01-975f-256b8f4a579b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240624185931-unlock-tr-and-sessions.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7233e971-22b5-4f01-975f-256b8f4a579b): UPDATE "SessionReportPilots"\n        SET data = jsonb_set(data, '{status}', '"In progress"', true)\n        WHERE "eventId" = 48;\n\n        UPDATE "EventReportPilots"\n        SET data = jsonb_set(data, '{status}', '"In progress"', true)\n        WHERE "id" = 48;
Executing (7233e971-22b5-4f01-975f-256b8f4a579b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240624185931-unlock-tr-and-sessions: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240625000000-correct-fei-root-cause: migrating =======
Executing (ce8a9935-c560-4344-a2a9-783c320731bb): START TRANSACTION;
Connection validated successfully
Executing (ce8a9935-c560-4344-a2a9-783c320731bb): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240625000000-correct-fei-root-cause.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ce8a9935-c560-4344-a2a9-783c320731bb): -- Find all the ActivityReportGoalFieldResponses that have the\n      -- invalid 'Transportation' value\n      DROP TABLE IF EXISTS argfr_to_update;\n      CREATE TEMP TABLE argfr_to_update\n      AS\n      SELECT\n        argfr.id argfrid,\n        arg."goalId" gid\n      FROM "ActivityReportGoalFieldResponses" argfr\n      JOIN "ActivityReportGoals" arg\n        ON "activityReportGoalId" = arg.id\n      WHERE 'Transportation' = ANY(response);\n\n      -- Find all the GoalFieldResponses that have the\n      -- invalid 'Transportation' value\n      DROP TABLE IF EXISTS gfr_to_update;\n      CREATE TEMP TABLE gfr_to_update\n      AS\n      SELECT\n        id gfrid,\n        "goalId" gid\n      FROM "GoalFieldResponses"\n      WHERE 'Transportation' = ANY(response);\n\n      -- Make sure this is only the one recipient being updated.\n      -- If 'Transportation' somehow spread somewhere else then\n      -- we don't know how to correct it accurately.\n      DROP TABLE IF EXISTS recipient_list;\n      CREATE TEMP TABLE recipient_list\n      AS\n      SELECT DISTINCT gr."recipientId"\n      FROM argfr_to_update atu\n      JOIN "Goals" g\n        ON g.id = atu.gid\n      JOIN "Grants" gr\n        ON g."grantId" = gr.id\n      UNION\n      SELECT DISTINCT gr."recipientId"\n      FROM gfr_to_update atu\n      JOIN "Goals" g\n        ON g.id = atu.gid\n      JOIN "Grants" gr\n        ON g."grantId" = gr.id\n      ;\n      \n      -- As a protective step, this will create a divide by zero error and\n      -- rollback the transaction if there is more than\n      -- one recipient found with 'Transportation' responses\n      SELECT 1/\n        (\n          LEAST(2, (SELECT COUNT(*) FROM recipient_list))\n          - 2\n        )\n      ;\n\n      -- Perform the actual updates to ActivityReportGoalFieldResponses\n      CREATE TEMP TABLE argfr_updates\n      AS\n      WITH updater AS (\n      UPDATE "ActivityReportGoalFieldResponses" argfr\n      SET response = ARRAY_REPLACE(response,'Transportation','Family Circumstances')\n      FROM argfr_to_update u\n      WHERE argfrid = argfr.id\n      RETURNING\n        argfr.id argfrid,\n        'ActivityReportGoalFieldResponses' tablename\n      ) SELECT * FROM updater\n      ;\n\n      -- Perform the actual updates to GoalFieldResponses\n      CREATE TEMP TABLE gfr_updates\n      AS\n      WITH updater AS (\n      UPDATE "GoalFieldResponses" gfr\n      SET response = ARRAY_REPLACE(response,'Transportation','Family Circumstances')\n      FROM gfr_to_update u\n      WHERE gfrid = gfr.id\n      RETURNING\n        gfr.id gfrid,\n        'GoalFieldResponses' tablename\n      ) SELECT * FROM updater\n      ;\n     \n\n      -- A quick count of the results that is expected to be:\n      -- update_cnt |            tablename\n      -- -----------+----------------------------------\n      --          3 | GoalFieldResponses\n      --         10 | ActivityReportGoalFieldResponses\n      SELECT\n        COUNT(*) update_cnt,\n        tablename\n      FROM gfr_updates\n      GROUP BY 2\n      UNION\n      SELECT\n        COUNT(*),\n        tablename\n      FROM argfr_updates\n      GROUP BY 2\n      ;
Executing (ce8a9935-c560-4344-a2a9-783c320731bb): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240625000000-correct-fei-root-cause: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240625135148-reset-bad-created-vias: migrating =======
Executing (1c8d2116-4822-4b99-bd75-5248c1667ac3): START TRANSACTION;
Connection validated successfully
Executing (1c8d2116-4822-4b99-bd75-5248c1667ac3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240625135148-reset-bad-created-vias.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1c8d2116-4822-4b99-bd75-5248c1667ac3): UPDATE "Goals"\n        SET "createdVia" = 'merge'\n        WHERE id IN (69403, 78365) AND "createdVia" = 'imported'; -- Nathan helpfully provided me with these IDs based on the audit log
Executing (1c8d2116-4822-4b99-bd75-5248c1667ac3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240625135148-reset-bad-created-vias: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240627000000-uncomplete_trs_and_remove_goals: migrating =======
Executing (25b11916-b9f8-43d2-9652-c91b4c14aa25): START TRANSACTION;
Connection validated successfully
Executing (25b11916-b9f8-43d2-9652-c91b4c14aa25): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240627000000-uncomplete_trs_and_remove_goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (25b11916-b9f8-43d2-9652-c91b4c14aa25): -- 1. Find the event report IDs for Training Reports that need\n        -- all their components set back to in progress and Goals\n        -- deleted. If any Goals have already been used (hopefully none)\n        -- then exclude that TR from the fix and we'll deal with it\n        -- later after the user fixes it.\n        DROP TABLE IF EXISTS er_to_update;\n        CREATE TEMP TABLE er_to_update\n        AS\n        WITH er_candidates AS (\n        SELECT id erid\n        FROM "EventReportPilots"\n        WHERE data->>'eventId' in ('R05-TR-23-5019','R05-TR-23-5017')\n        ),\n        er_goals AS (\n        SELECT\n          erid,\n          BOOL_AND(o.id IS NULL AND arg.id IS NULL) unused\n        FROM er_candidates\n        JOIN "EventReportPilotGoals" erpg\n          ON erid = erpg."eventId"\n        LEFT JOIN "Objectives" o\n          ON o."goalId" = erpg."goalId"\n        LEFT JOIN "ActivityReportGoals" arg\n          ON arg."goalId" = erpg."goalId"\n        GROUP BY 1\n        )\n        SELECT DISTINCT erid\n        FROM er_goals\n        WHERE unused\n        ;\n\n        -- 2. Get all the associated Session Reports to update\n        DROP TABLE IF EXISTS sr_to_update;\n        CREATE TEMP TABLE sr_to_update\n        AS\n        SELECT id srid\n        FROM "SessionReportPilots"\n        JOIN er_to_update\n          ON "eventId" = erid\n        ;\n\n        -- 3. Find all the Goals that need deleting. In step #1\n        -- we checked to make sure none of these are connected\n        -- to anything else.\n        DROP TABLE IF EXISTS goals_to_delete;\n        CREATE TEMP TABLE goals_to_delete\n        AS\n        SELECT DISTINCT erpg."goalId" gid\n        FROM "EventReportPilotGoals" erpg\n        JOIN er_to_update\n          ON erpg."eventId" = erid\n        ;\n        \n        -- 4. Delete the EventReportPilotGoal records\n        DROP TABLE IF EXISTS erpg_deletions;\n        CREATE TEMP TABLE erpg_deletions\n        AS\n        WITH updater AS (\n        DELETE FROM  "EventReportPilotGoals"\n        USING er_to_update\n        WHERE "eventId" = erid\n        RETURNING\n          id erpgid,\n          'EventReportPilotGoals deleted' operation\n        ) SELECT * FROM updater\n        ;\n\n        -- 5. Delete the Goals\n        DROP TABLE IF EXISTS goal_deletions;\n        CREATE TEMP TABLE goal_deletions\n        AS\n        WITH updater AS (\n        DELETE FROM  "Goals"\n        USING goals_to_delete\n        WHERE id = gid\n        RETURNING\n          gid,\n          'Goals deleted' operation\n        ) SELECT * FROM updater\n        ;\n\n        -- 6. Update any "Complete" session statuses back to "In Progress"\n        CREATE TEMP TABLE sr_updates\n        AS\n        WITH updater AS (\n        UPDATE "SessionReportPilots"\n        SET data = JSONB_SET(data,'{status}','"In progress"')\n        FROM sr_to_update\n        WHERE id = srid\n          AND data->>'status' = 'Complete'\n        RETURNING\n          srid,\n          'SessionReportPilots reset' operation\n        ) SELECT * FROM updater\n        ;\n\n        -- 6. Update any "Complete" event statuses back to "In Progress"\n        CREATE TEMP TABLE er_updates\n        AS\n        WITH updater AS (\n        UPDATE "EventReportPilots"\n        SET data = JSONB_SET(data,'{status}','"In progress"')\n        FROM er_to_update\n        WHERE id = erid\n          AND data->>'status' = 'Complete'\n        RETURNING\n          erid,\n          'EventReportPilots reset' operation\n        ) SELECT * FROM updater\n        ;\n      \n\n        -- A quick count of the results that is expected to be:\n        --  cnt |           operation\n        -- -----+-------------------------------\n        --    1 | EventReportPilots reset\n        --    8 | SessionReportPilots reset\n        --   60 | Goals deleted\n        --   60 | EventReportPilotGoals deleted\n        SELECT COUNT(*) cnt, operation FROM erpg_deletions GROUP BY 2\n        UNION\n        SELECT COUNT(*), operation FROM goal_deletions GROUP BY 2\n        UNION\n        SELECT COUNT(*), operation FROM sr_updates GROUP BY 2\n        UNION\n        SELECT COUNT(*), operation FROM er_updates GROUP BY 2\n        ;
Executing (25b11916-b9f8-43d2-9652-c91b4c14aa25): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240627000000-uncomplete_trs_and_remove_goals: migrated (0.036s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240702000000-monitoring-config-correction: migrating =======
Executing (3ddfbe57-95f1-451f-8bd4-3d9f77dc8c81): START TRANSACTION;
Connection validated successfully
Executing (3ddfbe57-95f1-451f-8bd4-3d9f77dc8c81): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240702000000-monitoring-config-correction.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3ddfbe57-95f1-451f-8bd4-3d9f77dc8c81): WITH \n          reconfigure AS (\n            SELECT\n              i."name",\n              jsonb_agg(\n                CASE\n                  WHEN elem->>'tableName' = 'MonitoringFindings' THEN\n                    jsonb_set(\n                      elem,\n                      '{remapDef}',\n                      (elem->'remapDef')::jsonb - 'ReportDate' || jsonb_build_object('ReportedDate', 'reportedDate')\n                  )\n                  ELSE\n                    elem\n                END\n              ) "definitions"\n            FROM "Imports" i\n            CROSS JOIN jsonb_array_elements(i."definitions") as elem\n            WHERE i."name" = 'ITAMS Monitoring Data'\n            AND "definitions" @> '[{"tableName": "MonitoringFindings"}]'\n            GROUP BY 1\n          )\n          UPDATE "Imports" i\n          SET "definitions" = r."definitions"\n          FROM "reconfigure" r\n          WHERE i."name" = r."name";
Executing (3ddfbe57-95f1-451f-8bd4-3d9f77dc8c81): WITH\n          erroneous_records AS (\n            SELECT DISTINCT if2.id \n            FROM "ImportFiles" if1\n            JOIN "ImportFiles" if2\n            ON  if1.id < if2.id\n            AND if1."ftpFileInfo" -> 'name' = if2."ftpFileInfo" -> 'name'\n          )\n        DELETE FROM "ImportFiles" i\n        USING erroneous_records er\n        WHERE i.id = er.id;
Executing (3ddfbe57-95f1-451f-8bd4-3d9f77dc8c81): CREATE UNIQUE INDEX "ImportFiles_ftpFileInfo_name_unique" ON "ImportFiles" (("ftpFileInfo" -> 'name'));
Executing (3ddfbe57-95f1-451f-8bd4-3d9f77dc8c81): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240702000000-monitoring-config-correction: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240708000000-remove_national_center_ars: migrating =======
Executing (ea05498e-511a-44f7-8bea-0417ca3c0633): START TRANSACTION;
Connection validated successfully
Executing (ea05498e-511a-44f7-8bea-0417ca3c0633): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240708000000-remove_national_center_ars.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ea05498e-511a-44f7-8bea-0417ca3c0633): ---------------------------------------------------\n        -- NOTE:\n        -- Files and Resources are most properly managed by\n        -- maintenance jobs, so this and similar migrations\n        -- won't delete them directly. Deleting the link\n        -- records will give the maintenance job the info\n        -- it needs to perform its housekeeping.\n        ---------------------------------------------------\n        -------- Deleting unwanted ARs --------\n        -- Create the AR deletion list\n        -- Remove AR link records: -------------\n        -- ActivityRecipients\n        -- ActivityReportApprovers\n        -- ActivityReportCollaborators\n        -- ActivityReportFiles (no need to remove Files)\n        -- ActivityReportResources (no need to remove Resources)\n\n        -- Create the NextSteps deletion list\n        -- Remove NextSteps link records: -------------\n        -- NextStepResources\n        -- remove NextSteps -------------\n\n        -- Create the ARO deletion list\n        -- Remove ARO link records: -------------\n        -- ActivityReportObjectiveFiles\n        -- ActivityReportObjectiveResources\n        -- ActivityReportObjectiveTopics\n        -- ActivityReportObjectiveCourses\n        -- remove AROs -------------------\n\n        -- Create the orphaned Objective deletion list\n        -- Remove Objective link records: -------------\n        -- Delete ObjectiveCollaborators\n        -- remove Objectives -------------\n\n        -- Create the ARG deletion list\n        -- Remove ARG link records: -------------\n        -- ActivityReportGoalFieldResponses\n        -- ActivityReportGoalResources\n        -- remove ARGs -------------------\n\n        -- Create the orphaned Goal deletions list\n        -- ( check if isFromSmartsheetTtaPlan, isRttapa)\n        -- Remove Goal link records: -------------\n        -- EventReportPilotGoals\n        -- GoalFieldResponses\n        -- GoalResources\n        -- remove Goals ------------------\n\n        -- Create the orphaned ObjectiveTemplate deletion list\n        -- Create the orphaned GoalTemplate deletion list\n        -- Remove GoalTemplate link records: -------------\n        -- GoalTemplateObjectiveTemplates\n        -- Remove ObjectiveTemplates --------\n        -- Remove GoalTemplates -------------\n\n        -- Remove ARs -----------------------\n\n        -- Test query\n\n        -- Correct the onApprovedAR and onAR values for the goals\n        -- and objectives that were not deleted\n\n        -------------------------------------------------------------------------------------------------------------------\n        -------- Deleting unwanted ARs --------\n        -- Create the AR deletion list\n        DROP TABLE IF EXISTS ars_to_delete;\n        CREATE TEMP TABLE ars_to_delete\n        AS\n        SELECT id arid\n        FROM "ActivityReports"\n        WHERE id IN (24998, 24645, 24297, 24122, 27517, 30829, 29864, 6442, 23057, 23718, 25205, 25792, 25577, 25573, 26478, 26210, 27117, 26918, 28451, 28117, 27669, 29542, 29101, 29024, 30137, 29762, 31201)\n        AND "regionId" = 10\n        ;\n\n        -- Remove AR link records: -------------\n        DROP TABLE IF EXISTS deleted_activityrecipients;\n        CREATE TEMP TABLE deleted_activityrecipients AS\n        WITH deletes AS (\n          DELETE FROM "ActivityRecipients"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportapprovers;\n        CREATE TEMP TABLE deleted_activityreportapprovers AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportApprovers"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportcollaborators;\n        CREATE TEMP TABLE deleted_activityreportcollaborators AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportCollaborators"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportfiles;\n        CREATE TEMP TABLE deleted_activityreportfiles AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportFiles"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportresources;\n        CREATE TEMP TABLE deleted_activityreportresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportResources"\n          USING ars_to_delete\n          WHERE "activityReportId" = arid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n\n\n\n        -- Create the NextSteps deletion list\n        DROP TABLE IF EXISTS nextsteps_to_delete;\n        CREATE TEMP TABLE nextsteps_to_delete\n        AS\n        SELECT\n          id nsid\n        FROM "NextSteps"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove NextSteps link records: -------------\n        DROP TABLE IF EXISTS deleted_nextstepresources;\n        CREATE TEMP TABLE deleted_nextstepresources AS\n        WITH deletes AS (\n          DELETE FROM "NextStepResources"\n          USING nextsteps_to_delete\n          WHERE "nextStepId" = nsid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove NextSteps -------------\n        DROP TABLE IF EXISTS deleted_nextsteps;\n        CREATE TEMP TABLE deleted_nextsteps AS\n        WITH deletes AS (\n          DELETE FROM "NextSteps"\n          USING nextsteps_to_delete\n          WHERE id = nsid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n\n        -- Create the ARO deletion list\n        DROP TABLE IF EXISTS aros_to_delete;\n        CREATE TEMP TABLE aros_to_delete\n        AS\n        SELECT\n          id aroid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove ARO link records: -------------\n        DROP TABLE IF EXISTS deleted_activityreportobjectivefiles;\n        CREATE TEMP TABLE deleted_activityreportobjectivefiles AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveFiles"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id,\n          "fileId" fid\n        )\n        SELECT id, fid FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportobjectiveresources;\n        CREATE TEMP TABLE deleted_activityreportobjectiveresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveResources"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportobjectivetopics;\n        CREATE TEMP TABLE deleted_activityreportobjectivetopics AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveTopics"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportobjectivecourses;\n        CREATE TEMP TABLE deleted_activityreportobjectivecourses AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectiveCourses"\n          USING aros_to_delete\n          WHERE "activityReportObjectiveId" = aroid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- remove AROs -------------------\n        DROP TABLE IF EXISTS deleted_aros;\n        CREATE TEMP TABLE deleted_aros AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportObjectives"\n          USING aros_to_delete\n          WHERE id = aroid\n          RETURNING\n          id,\n          "objectiveId" oid\n        )\n        SELECT id, oid FROM deletes\n        ;\n\n        -- Create the orphaned Objective deletion list\n        DROP TABLE IF EXISTS objectives_to_delete;\n        CREATE TEMP TABLE objectives_to_delete\n        AS\n        SELECT DISTINCT oid\n        FROM deleted_aros\n        EXCEPT\n        SELECT DISTINCT "objectiveId"\n        FROM "ActivityReportObjectives"\n        ;\n        -- Remove Objective link records: -------------\n        -- Delete ObjectiveCollaborators\n        DROP TABLE IF EXISTS deleted_objectivecollaborators;\n        CREATE TEMP TABLE deleted_objectivecollaborators AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveCollaborators"\n          USING objectives_to_delete\n          WHERE "objectiveId" = oid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        \n        -- remove Objectives -------------------\n        DROP TABLE IF EXISTS deleted_objectives;\n        CREATE TEMP TABLE deleted_objectives AS\n        WITH deletes AS (\n          DELETE FROM "Objectives"\n          USING objectives_to_delete\n          WHERE id = oid\n          RETURNING\n          id,\n          "goalId" gid,\n          "objectiveTemplateId" otid\n        )\n        SELECT id, gid, otid FROM deletes\n        ;\n\n        -- Create the ARG deletion list\n        DROP TABLE IF EXISTS args_to_delete;\n        CREATE TEMP TABLE args_to_delete\n        AS\n        SELECT DISTINCT\n          id argid,\n          "goalId" gid\n        FROM "ActivityReportGoals"\n        JOIN ars_to_delete\n          ON "activityReportId" = arid\n        ;\n        -- Remove ARG link records: -------------\n        DROP TABLE IF EXISTS deleted_activityreportgoalfieldresponses;\n        CREATE TEMP TABLE deleted_activityreportgoalfieldresponses AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoalFieldResponses"\n          USING args_to_delete\n          WHERE "activityReportGoalId" = argid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_activityreportgoalresources;\n        CREATE TEMP TABLE deleted_activityreportgoalresources AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoalResources"\n          USING args_to_delete\n          WHERE "activityReportGoalId" = argid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        -- remove ARGs -------------------\n        DROP TABLE IF EXISTS deleted_args;\n        CREATE TEMP TABLE deleted_args AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReportGoals"\n          USING args_to_delete\n          WHERE id = argid\n          RETURNING\n          id,\n          "goalId" gid\n        )\n        SELECT id, gid FROM deletes\n        ;\n\n        -- Create the orphaned Goal deletions list\n        DROP TABLE IF EXISTS goals_to_delete;\n        CREATE TEMP TABLE goals_to_delete\n        AS\n        SELECT DISTINCT gid\n        FROM deleted_args dargs\n        JOIN "Goals" g\n          ON gid = g.id\n        WHERE (g."isRttapa" IS NULL OR g."isRttapa" != 'Yes')\n          AND g."isFromSmartsheetTtaPlan" != TRUE\n          AND g."createdVia" != 'merge'\n        EXCEPT \n        SELECT gid\n        FROM (\n          SELECT DISTINCT "goalId" gid\n          FROM "ActivityReportGoals"\n          UNION\n          SELECT DISTINCT "goalId"\n          FROM "Objectives"\n          UNION\n          SELECT DISTINCT "goalId"\n          FROM "EventReportPilotGoals"\n        ) keepers\n        ;\n        -- Remove Goal link records: -------------\n        DROP TABLE IF EXISTS deleted_goalcollaborators;\n        CREATE TEMP TABLE deleted_goalcollaborators AS\n        WITH deletes AS (\n          DELETE FROM "GoalCollaborators"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_goalfieldresponses;\n        CREATE TEMP TABLE deleted_goalfieldresponses AS\n        WITH deletes AS (\n          DELETE FROM "GoalFieldResponses"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_goalresources;\n        CREATE TEMP TABLE deleted_goalresources AS\n        WITH deletes AS (\n          DELETE FROM "GoalResources"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id,\n          "resourceId" resourceid\n        )\n        SELECT id, resourceid FROM deletes\n        ;\n        DROP TABLE IF EXISTS deleted_goalstatuschanges;\n        CREATE TEMP TABLE deleted_goalstatuschanges AS\n        WITH deletes AS (\n          DELETE FROM "GoalStatusChanges"\n          USING goals_to_delete\n          WHERE "goalId" = gid\n          RETURNING\n          id,\n          "goalId" gid\n        )\n        SELECT id, gid FROM deletes\n        ;\n        -- remove Goals -------------------\n        DROP TABLE IF EXISTS deleted_goals;\n        CREATE TEMP TABLE deleted_goals AS\n        WITH deletes AS (\n          DELETE FROM "Goals"\n          USING goals_to_delete\n          WHERE id = gid\n          RETURNING\n          id,\n          "goalTemplateId" gtid\n        )\n        SELECT id, gtid FROM deletes\n        ;\n\n        -- Create the orphaned ObjectiveTemplate deletion list\n        DROP TABLE IF EXISTS ots_to_delete;\n        CREATE TEMP TABLE ots_to_delete\n        AS\n        SELECT DISTINCT otid\n        FROM deleted_objectives\n        EXCEPT\n        SELECT DISTINCT "objectiveTemplateId"\n        FROM "Objectives"\n        ;\n\n        -- Create the orphaned GoalTemplate deletion list\n        DROP TABLE IF EXISTS gts_to_delete;\n        CREATE TEMP TABLE gts_to_delete\n        AS\n        SELECT DISTINCT gtid\n        FROM deleted_goals\n        EXCEPT\n        SELECT DISTINCT "goalTemplateId"\n        FROM "Goals"\n        ;\n        -- Remove GoalTemplate link records: -------------\n        DROP TABLE IF EXISTS deleted_goaltemplateobjectivetemplates;\n        CREATE TEMP TABLE deleted_goaltemplateobjectivetemplates AS\n        WITH unified_deletes AS (\n          SELECT DISTINCT id gtotid\n          FROM "GoalTemplateObjectiveTemplates"\n          JOIN ots_to_delete\n            ON otid = "objectiveTemplateId"\n          UNION\n          SELECT DISTINCT id gtotid\n          FROM "GoalTemplateObjectiveTemplates"\n          JOIN gts_to_delete\n            ON gtid = "goalTemplateId"\n        ),\n        deletes AS (\n          DELETE FROM "GoalTemplateObjectiveTemplates"\n          USING unified_deletes\n          WHERE id = gtotid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- Remove ObjectiveTemplates --------\n        DROP TABLE IF EXISTS deleted_objectivetemplates;\n        CREATE TEMP TABLE deleted_objectivetemplates AS\n        WITH deletes AS (\n          DELETE FROM "ObjectiveTemplates"\n          USING ots_to_delete\n          WHERE id = otid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n        -- Remove GoalTemplates -------------\n        DROP TABLE IF EXISTS deleted_goaltemplates;\n        CREATE TEMP TABLE deleted_goaltemplates AS\n        WITH deletes AS (\n          DELETE FROM "GoalTemplates"\n          USING gts_to_delete\n          WHERE id = gtid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n        -- Remove ARs -------------\n        DROP TABLE IF EXISTS deleted_ars;\n        CREATE TEMP TABLE deleted_ars AS\n        WITH deletes AS (\n          DELETE FROM "ActivityReports"\n          USING ars_to_delete\n          WHERE id = arid\n          RETURNING\n          id\n        )\n        SELECT id FROM deletes\n        ;\n\n\n        -- Stats ----------------------------\n        SELECT 1,'ars_to_delete', count(*) FROM ars_to_delete\n        UNION\n        SELECT 2,'deleted_activityreportapprovers', count(*) FROM deleted_activityreportapprovers\n        UNION\n        SELECT 3,'deleted_activityreportcollaborators', count(*) FROM deleted_activityreportcollaborators\n        UNION\n        SELECT 4,'deleted_activityreportfiles', count(*) FROM deleted_activityreportfiles\n        UNION\n        SELECT 5,'deleted_activityreportresources', count(*) FROM deleted_activityreportresources\n        UNION\n        SELECT 6,'nextsteps_to_delete', count(*) FROM nextsteps_to_delete\n        UNION\n        SELECT 7,'deleted_nextstepresources', count(*) FROM deleted_nextstepresources\n        UNION\n        SELECT 8,'deleted_nextsteps', count(*) FROM deleted_nextsteps\n        UNION\n        SELECT 9,'aros_to_delete', count(*) FROM aros_to_delete\n        UNION\n        SELECT 10,'deleted_activityreportobjectivefiles', count(*) FROM deleted_activityreportobjectivefiles\n        UNION\n        SELECT 11,'deleted_activityreportobjectiveresources', count(*) FROM deleted_activityreportobjectiveresources\n        UNION\n        SELECT 12,'deleted_activityreportobjectivetopics', count(*) FROM deleted_activityreportobjectivetopics\n        UNION\n        SELECT 12,'deleted_activityreportobjectivecourses', count(*) FROM deleted_activityreportobjectivetopics\n        UNION\n        SELECT 13,'deleted_aros', count(*) FROM deleted_aros\n        UNION\n        SELECT 14,'objectives_to_delete', count(*) FROM objectives_to_delete\n        UNION\n        SELECT 14,'deleted_objectivecollaborators', count(*) FROM objectives_to_delete\n        UNION\n        SELECT 15,'deleted_objectives', count(*) FROM deleted_objectives\n        UNION\n        SELECT 16,'args_to_delete', count(*) FROM args_to_delete\n        UNION\n        SELECT 17,'deleted_activityreportgoalfieldresponses', count(*) FROM deleted_activityreportgoalfieldresponses\n        UNION\n        SELECT 18,'deleted_activityreportgoalresources', count(*) FROM deleted_activityreportgoalresources\n        UNION\n        SELECT 19,'deleted_args', count(*) FROM deleted_args\n        UNION\n        SELECT 20,'goals_to_delete', count(*) FROM goals_to_delete\n        UNION\n        SELECT 21,'deleted_goalcollaborators', count(*) FROM deleted_goalcollaborators\n        UNION\n        SELECT 22,'deleted_goalfieldresponses', count(*) FROM deleted_goalfieldresponses\n        UNION\n        SELECT 23,'deleted_goalresources', count(*) FROM deleted_goalresources\n        UNION\n        SELECT 24,'deleted_goalstatuschanges', count(*) FROM deleted_goalstatuschanges\n        UNION\n        SELECT 25,'deleted_goals', count(*) FROM deleted_goals\n        UNION\n        SELECT 26,'ots_to_delete', count(*) FROM ots_to_delete\n        UNION\n        SELECT 27,'gts_to_delete', count(*) FROM gts_to_delete\n        UNION\n        SELECT 28,'deleted_goaltemplateobjectivetemplates', count(*) FROM deleted_goaltemplateobjectivetemplates\n        UNION\n        SELECT 29,'deleted_objectivetemplates', count(*) FROM deleted_objectivetemplates\n        UNION\n        SELECT 30,'deleted_goaltemplates', count(*) FROM deleted_goaltemplates\n        UNION\n        SELECT 31,'deleted_ars', count(*) FROM deleted_ars\n        ORDER BY 1\n        ;\n\n        -- Reset the onApprovedAR and onAR values for the goals and objectives that\n        -- were not deleted\n        --  1. Calculate correct onApprovedAR values for objectives\n        DROP TABLE IF EXISTS objectives_on_ars;\n        CREATE TEMP TABLE objectives_on_ars\n        AS\n        WITH objectivelist AS (\n        SELECT DISTINCT oid FROM aros_to_delete\n        EXCEPT\n        SELECT id FROM deleted_objectives\n        )\n        SELECT\n          o.id oid,\n          BOOL_OR(ar.id IS NOT NULL AND ar."calculatedStatus" = 'approved') on_approved_ar,\n          BOOL_OR(ar.id IS NOT NULL) on_ar\n        FROM objectivelist ol\n        JOIN "Objectives" o\n          ON ol.oid = o.id\n        LEFT JOIN "ActivityReportObjectives" aro\n          ON o.id = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n          AND ar."calculatedStatus" != 'deleted'\n        GROUP BY 1\n        ;\n        --  2. Calculate correct onApprovedAR values for goals\n        DROP TABLE IF EXISTS goals_on_ars;\n        CREATE TEMP TABLE goals_on_ars\n        AS\n        WITH goallist AS (\n        SELECT DISTINCT gid FROM args_to_delete\n        EXCEPT\n        SELECT id FROM deleted_goals\n        )\n        SELECT\n          g.id gid,\n          BOOL_OR(\n            (ar.id IS NOT NULL AND ar."calculatedStatus" = 'approved')\n            OR\n            COALESCE(ooaa.on_approved_ar,FALSE)\n          ) on_approved_ar,\n          BOOL_OR(ar.id IS NOT NULL OR COALESCE(ooaa.on_ar,FALSE)) on_ar\n        FROM goallist gl\n        JOIN "Goals" g\n          ON g.id = gl.gid\n        LEFT JOIN "ActivityReportGoals" arg\n          ON g.id = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n          AND ar."calculatedStatus" != 'deleted'\n        LEFT JOIN "Objectives" o\n          ON o."goalId" = g.id\n        LEFT JOIN objectives_on_ars ooaa\n          ON ooaa.oid = o.id\n        GROUP BY 1\n        ;\n        --  3. Calculate onApprovedAR stats for objectives\n        DROP TABLE IF EXISTS initial_obj_approved_ar_stats;\n        CREATE TEMP TABLE initial_obj_approved_ar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_objectives\n        FROM "Objectives" o\n        JOIN objectives_on_ars\n          ON o.id = oid\n        ;\n        --  4. Calculate onAR stats for objectives\n        DROP TABLE IF EXISTS initial_obj_onar_stats;\n        CREATE TEMP TABLE initial_obj_onar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_ar = "onAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_objectives\n        FROM "Objectives" o\n        JOIN objectives_on_ars\n          ON o.id = oid\n        ;\n        --  5. Calculate onApprovedAR stats for goals\n        DROP TABLE IF EXISTS initial_goal_approved_ar_stats;\n        CREATE TEMP TABLE initial_goal_approved_ar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_goals\n        FROM "Goals" g\n        JOIN goals_on_ars\n          ON g.id = gid\n        ;\n        --  6. Calculate onAR stats for goals\n        DROP TABLE IF EXISTS initial_goal_onar_stats;\n        CREATE TEMP TABLE initial_goal_onar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_ar = "onAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_goals\n        FROM "Goals" g\n        JOIN goals_on_ars\n          ON g.id = gid\n        ;\n        --  7. Update onApprovedAR values for objectives and save the results\n        DROP TABLE IF EXISTS corrected_approved_objectives;\n        CREATE TEMP TABLE corrected_approved_objectives\n        AS\n        WITH updater AS (\n          UPDATE "Objectives" o\n          SET "onApprovedAR" = on_approved_ar\n          FROM objectives_on_ars\n          WHERE o.id = oid\n            AND ("onApprovedAR" != on_approved_ar OR "onApprovedAR" IS NULL)\n          RETURNING\n            oid,\n            on_approved_ar\n        ) SELECT * FROM updater\n        ;\n        --  8. Update onAR values for objectives and save the results\n        DROP TABLE IF EXISTS corrected_onar_objectives;\n        CREATE TEMP TABLE corrected_onar_objectives\n        AS\n        WITH updater AS (\n          UPDATE "Objectives" o\n          SET "onAR" = on_ar\n          FROM objectives_on_ars\n          WHERE o.id = oid\n            AND ("onAR" != on_ar OR "onAR" IS NULL)\n          RETURNING\n            oid,\n            on_ar\n        ) SELECT * FROM updater\n        ;\n        --  9. Update onApprovedAR values for goals and save the results\n        DROP TABLE IF EXISTS corrected_approved_goals;\n        CREATE TEMP TABLE corrected_approved_goals\n        AS\n        WITH updater AS (\n          UPDATE "Goals" g\n          SET "onApprovedAR" = on_approved_ar\n          FROM goals_on_ars\n          WHERE g.id = gid\n            AND ("onApprovedAR" != on_approved_ar OR "onApprovedAR" IS NULL)\n          RETURNING\n            gid,\n            on_approved_ar\n        ) SELECT * FROM updater\n        ;\n        --  10. Update onAR values for goals and save the results\n        DROP TABLE IF EXISTS corrected_onar_goals;\n        CREATE TEMP TABLE corrected_onar_goals\n        AS\n        WITH updater AS (\n          UPDATE "Goals" g\n          SET "onAR" = on_ar\n          FROM goals_on_ars\n          WHERE g.id = gid\n            AND ("onAR" != on_ar OR "onAR" IS NULL)\n          RETURNING\n            gid,\n            on_ar\n        ) SELECT * FROM updater\n        ;\n        -- produce stats on what happened\n        --  11. Final onApprovedAR stats for objectives\n        DROP TABLE IF EXISTS final_obj_approved_ar_stats;\n        CREATE TEMP TABLE final_obj_approved_ar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_objectives\n        FROM "Objectives" o\n        JOIN objectives_on_ars\n          ON o.id = oid\n        ;\n        --  12. Final onAR stats for objectives\n        DROP TABLE IF EXISTS final_obj_onar_stats;\n        CREATE TEMP TABLE final_obj_onar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_ar = "onAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_objectives\n        FROM "Objectives" o\n        JOIN objectives_on_ars\n          ON o.id = oid\n        ;\n        --  13. Final onApprovedAR stats for goals\n        DROP TABLE IF EXISTS final_goal_approved_ar_stats;\n        CREATE TEMP TABLE final_goal_approved_ar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_approved_ar = "onApprovedAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onApprovedAR" IS NOT NULL AND on_approved_ar != "onApprovedAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_approved_ar AND (NOT "onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_approved_ar AND ("onApprovedAR" OR "onApprovedAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_goals\n        FROM "Goals" g\n        JOIN goals_on_ars\n          ON g.id = gid\n        ;\n        --  14. Final onAR stats for goals\n        DROP TABLE IF EXISTS final_goal_onar_stats;\n        CREATE TEMP TABLE final_goal_onar_stats\n        AS\n        SELECT\n          COUNT(*) FILTER (WHERE on_ar = "onAR"\n          ) matching_values,\n          COUNT(*) FILTER (WHERE "onAR" IS NOT NULL AND on_ar != "onAR"\n          ) incorrect_values,\n          COUNT(*) FILTER (WHERE on_ar AND (NOT "onAR" OR "onAR" IS NULL)\n          ) should_be_marked_true_but_isnt,\n          COUNT(*) FILTER (WHERE NOT on_ar AND ("onAR" OR "onAR" IS NULL)\n          ) marked_true_but_shouldnt_be,\n          COUNT(*) total_goals\n        FROM "Goals" g\n        JOIN goals_on_ars\n          ON g.id = gid\n        ;\n        -- make a nice little table to see the math\n        SELECT\n          1 AS order,\n          'objective onApprovedAR starting stats' description,\n          matching_values,\n          incorrect_values,\n          should_be_marked_true_but_isnt,\n          marked_true_but_shouldnt_be,\n          total_objectives total\n        FROM initial_obj_approved_ar_stats\n        UNION\n        SELECT\n          2,\n          'objective onApprovedAR values changed',\n          NULL,\n          NULL,\n          SUM(CASE WHEN on_approved_ar THEN 1 ELSE 0 END),\n          SUM(CASE WHEN NOT on_approved_ar THEN 1 ELSE 0 END),\n          COUNT(*)\n        FROM corrected_approved_objectives\n        UNION\n        SELECT 3,'objective onApprovedAR ending stats', * FROM final_obj_approved_ar_stats\n        UNION\n        SELECT 4,'objective onAR starting stats', * FROM initial_obj_onar_stats\n        UNION\n        SELECT\n          5,\n          'objective onAR values changed',\n          NULL,\n          NULL,\n          SUM(CASE WHEN on_ar THEN 1 ELSE 0 END),\n          SUM(CASE WHEN NOT on_ar THEN 1 ELSE 0 END),\n          COUNT(*)\n        FROM corrected_onar_objectives\n        UNION\n        SELECT 6,'objective onAR ending stats', * FROM final_obj_onar_stats\n        UNION\n        SELECT 7,'goal onApprovedAR starting stats', * FROM initial_goal_approved_ar_stats\n        UNION\n        SELECT\n          8,\n          'goal onApprovedAR values changed',\n          NULL,\n          NULL,\n          SUM(CASE WHEN on_approved_ar THEN 1 ELSE 0 END),\n          SUM(CASE WHEN NOT on_approved_ar THEN 1 ELSE 0 END),\n          COUNT(*)\n        FROM corrected_approved_goals\n        UNION\n        SELECT 9,'goal onApprovedAR ending stats', * FROM final_goal_approved_ar_stats\n        UNION\n        SELECT 10,'goal onAR starting stats', * FROM initial_goal_onar_stats\n        UNION\n        SELECT\n          11,\n          'goal onAR values changed',\n          NULL,\n          NULL,\n          SUM(CASE WHEN on_ar THEN 1 ELSE 0 END),\n          SUM(CASE WHEN NOT on_ar THEN 1 ELSE 0 END),\n          COUNT(*)\n        FROM corrected_onar_goals\n        UNION\n        SELECT 12,'goal onAR ending stats', * FROM final_goal_onar_stats\n        ORDER BY 1\n        ;
Executing (ea05498e-511a-44f7-8bea-0417ca3c0633): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240708000000-remove_national_center_ars: migrated (0.325s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240708153514-goalStatusChanges-historical: migrating =======
Executing (3ebb6f82-52cd-48ff-9513-ee928b8daa54): START TRANSACTION;
Connection validated successfully
Executing (3ebb6f82-52cd-48ff-9513-ee928b8daa54): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240708153514-goalStatusChanges-historical.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3ebb6f82-52cd-48ff-9513-ee928b8daa54): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userName" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userName" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userName" TYPE VARCHAR(255);
Executing (3ebb6f82-52cd-48ff-9513-ee928b8daa54): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userRoles" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userRoles" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userRoles" TYPE VARCHAR(255)[];
Executing (3ebb6f82-52cd-48ff-9513-ee928b8daa54): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "reason" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "reason" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "reason" TYPE TEXT;
Executing (3ebb6f82-52cd-48ff-9513-ee928b8daa54): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "newStatus" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "newStatus" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "newStatus" TYPE VARCHAR(255);
Executing (3ebb6f82-52cd-48ff-9513-ee928b8daa54): ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userId" DROP NOT NULL;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userId" DROP DEFAULT;ALTER TABLE "GoalStatusChanges" ALTER COLUMN "userId" TYPE INTEGER;
Executing (3ebb6f82-52cd-48ff-9513-ee928b8daa54): select create_timeseries_from_audit_log('Users');\nselect create_timeseries_from_audit_log('UserRoles');\n\nWITH\n  reason_lookup AS (\n    SELECT *\n    FROM\n      (VALUES\n        ('Not Started', 'In Progress', 'reviewReport', 'UPDATE', 'Activity Report reviewed', NULL),\n        ('Draft', 'Not Started', 'submitReport', 'UPDATE', 'Activity Report submission', NULL),\n        (NULL, 'Draft', 'createGoalsForReport', 'INSERT', 'Activity Report created', NULL),\n        ('Not Started', 'In Progress', NULL, 'UPDATE', 'Objective moved to In Progress', NULL),\n        (NULL, 'Not Started', NULL, 'INSERT', NULL, NULL),\n        (NULL, 'Draft', 'saveReport', 'INSERT', 'Activity Report created', NULL),\n        (NULL, 'In Progress', 'createGoalsForReport', 'INSERT', 'Activity Report created', NULL),\n        ('Not Started', 'Draft', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        (NULL, 'Draft', NULL, 'INSERT', NULL, NULL),\n        ('Draft', 'Not Started', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        (NULL, 'In Progress', NULL, 'INSERT', NULL, NULL),\n        ('Closed', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        (NULL, 'Not Started', 'createGoalsForReport', 'INSERT', 'Activity Report created', NULL),\n        ('Draft', 'Not Started', NULL, 'UPDATE', NULL, NULL),\n        ('In Progress', 'Draft', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        (NULL, 'In Progress', 'saveReport', 'INSERT', 'User change', NULL),\n        ('Not Started', 'In Progress', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        ('Draft', 'In Progress', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        ('In Progress', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        ('In Progress', 'Not Started', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        ('In Progress', 'Not Started', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('Not Started', 'In Progress', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('Not Started', 'Draft', 'saveReport', 'UPDATE', 'User change', NULL),\n        (NULL, 'Not Started', 'saveReport', 'INSERT', 'User change', NULL),\n        ('Draft', 'In Progress', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('In Progress', 'Closed', NULL, 'UPDATE', NULL, NULL),\n        ('In Progress', 'Draft', 'saveReport', 'UPDATE', 'User change', NULL),\n        (NULL, 'Draft', 'createGoals', 'INSERT', 'Goal creation', NULL),\n        ('Not Started', NULL, 'RUN MIGRATIONS', 'DELETE', 'Migration', NULL),\n        ('Draft', 'Not Started', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('Draft', NULL, 'RUN MIGRATIONS', 'DELETE', 'Migration', NULL),\n        ('Draft', NULL, 'createGoalsForReport', 'DELETE', 'Activity Report created', NULL),\n        ('Closed', NULL, 'RUN MIGRATIONS', 'DELETE', 'Migration', NULL),\n        ('Draft', 'Not Started', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('Closed', 'In Progress', 'mergeGoalHandler', 'UPDATE', NULL, NULL),\n        ('Draft', NULL, 'saveReport', 'DELETE', 'User change', NULL),\n        ('Draft', 'In Progress', 'reviewReport', 'UPDATE', 'Activity Report reviewed', NULL),\n        (NULL, 'In Progress', 'mergeGoalHandler', 'INSERT', NULL, NULL),\n        ('Not Started', 'Closed', NULL, 'UPDATE', 'Migration', NULL),\n        ('In Progress', 'Closed', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        ('In Progress', 'Closed', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('In Progress', NULL, 'RUN MIGRATIONS', 'DELETE', 'Migration', NULL),\n        (NULL, 'Closed', 'saveReport', 'INSERT', 'User change', NULL),\n        (NULL, 'Closed', 'createGoalsForReport', 'INSERT', 'Activity Report created', NULL),\n        ('Closed', 'In Progress', 'createGoalsForReport', 'UPDATE', 'Activity Report created', NULL),\n        (NULL, 'Closed', NULL, 'INSERT', 'Migration', NULL),\n        ('In Progress', 'Not Started', NULL, 'UPDATE', NULL, NULL),\n        ('Not Started', NULL, 'saveReport', 'DELETE', 'User change', NULL),\n        ('Closed', 'In Progress', 'saveReport', 'UPDATE', 'User change', NULL),\n        (NULL, 'Draft', 'updateHandler', 'INSERT', NULL, NULL),\n        (NULL, 'In Progress', 'RUN MIGRATIONS', 'INSERT', 'Migration', NULL),\n        (NULL, 'Closed', 'mergeGoalHandler', 'INSERT', NULL, NULL),\n        ('In Progress', NULL, 'createGoalsForReport', 'DELETE', 'Activity Report created', NULL),\n        ('Not Started', 'Suspended', NULL, 'UPDATE', 'Migration', NULL),\n        ('In Progress', NULL, 'saveReport', 'DELETE', 'User change', NULL),\n        ('In Progress', 'Closed', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        ('Not Started', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        (NULL, 'Not Started', 'createGoalsFromAdmin', 'INSERT', NULL, NULL),\n        ('Not Started', NULL, NULL, 'DELETE', NULL, NULL),\n        ('Not Started', NULL, 'createGoalsForReport', 'DELETE', 'Activity Report created', NULL),\n        ('Draft', 'In Progress', 'updateHandler', 'UPDATE', NULL, NULL),\n        ('Not Started', 'In Progress', 'dup_goals_Update_Goals', 'UPDATE', 'Migration', NULL),\n        ('Suspended', 'In Progress', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        ('Closed', 'In Progress', 'reviewReport', 'UPDATE', 'Activity Report reviewed', NULL),\n        ('Draft', 'In Progress', NULL, 'UPDATE', NULL, NULL),\n        ('Closed', 'In Progress', NULL, 'UPDATE', NULL, NULL),\n        (NULL, 'Draft', 'RUN MIGRATIONS', 'UPDATE', NULL, NULL),\n        ('Suspended', 'Closed', NULL, 'UPDATE', NULL, NULL),\n        ('In Progress', 'Suspended', NULL, 'UPDATE', 'Migration', NULL),\n        ('Not Started', 'In Progress', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('Draft', NULL, NULL, 'DELETE', NULL, NULL),\n        ('Suspended', 'Closed', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        (NULL, 'Not Started', 'RUN MIGRATIONS', 'UPDATE', NULL, NULL),\n        ('Not Started', 'In Progress', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        (NULL, 'In Progress', 'updateHandler', 'INSERT', NULL, NULL),\n        ('Closed', 'In Progress', 'RUN MIGRATIONS', 'UPDATE', 'Migration', NULL),\n        ('Suspended', 'In Progress', NULL, 'UPDATE', NULL, NULL),\n        ('Suspended', 'Not Started', 'changeGoalStatus', 'UPDATE', NULL, NULL),\n        ('In Progress', NULL, NULL, 'DELETE', NULL, NULL),\n        ('Suspended', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        (NULL, 'Suspended', NULL, 'INSERT', 'Migration', NULL),\n        ('Closed', NULL, 'saveReport', 'DELETE', 'User change', NULL),\n        (NULL, 'Not Started', 'mergeGoalHandler', 'INSERT', NULL, NULL),\n        ('Draft', 'In Progress', 'dup_goals_Update_Goals', 'UPDATE', 'Migration', NULL),\n        (NULL, 'Completed', NULL, 'INSERT', 'Migration', NULL),\n        (NULL, 'Suspended', 'mergeGoalHandler', 'INSERT', NULL, NULL),\n        (NULL, 'Ceased/Suspended', NULL, 'INSERT', 'Migration', NULL),\n        ('Suspended', 'Not Started', NULL, 'UPDATE', NULL, NULL),\n        ('Not Started', 'In Progress', 'submitReport', 'UPDATE', NULL, NULL),\n        ('Draft', NULL, 'dup_goals_Delete_Goals', 'DELETE', 'Migration', NULL),\n        ('Closed', 'In Progress', 'unlockReport', 'UPDATE', NULL, NULL),\n        ('Suspended', 'In Progress', 'mergeGoalHandler', 'UPDATE', NULL, NULL),\n        ('Suspended', 'Draft', 'saveReport', 'UPDATE', 'User change', NULL),\n        ('Suspended', 'In Progress', 'reviewReport', 'UPDATE', 'Activity Report reviewed', NULL),\n        ('Suspended', 'Draft', 'createGoalsForReport', 'UPDATE', NULL, NULL),\n        ('Closed', 'Not Started', NULL, 'UPDATE', NULL, NULL),\n        ('Not Started', 'Draft', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('In Progress', 'Closed', 'dup_goals_Update_Goals', 'UPDATE', 'Migration', NULL),\n        (NULL, 'Draft', NULL, 'UPDATE', NULL, NULL),\n        ('Not Started', 'In Progress', 'mergeGoalHandler', 'UPDATE', NULL, NULL),\n        ('In Progress', 'Suspended', 'dup_goals_Update_Goals', 'UPDATE', 'Migration', NULL),\n        ('In Progress', 'Not Started', 'RUN MIGRATIONS', 'UPDATE', 'Migration', NULL),\n        ('Draft', NULL, 'deleteGoal', 'DELETE', NULL, NULL),\n        ('In Progress', 'Draft', NULL, 'UPDATE', NULL, NULL),\n        ('Closed', NULL, 'createGoalsForReport', 'DELETE', NULL, NULL),\n        ('In Progress', 'Draft', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        (NULL, 'In Progress', NULL, 'UPDATE', NULL, NULL),\n        ('Suspended', 'In Progress', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('Draft', 'In Progress', 'createGoals', 'UPDATE', 'Goal creation', NULL),\n        ('Not Started', 'Draft', NULL, 'UPDATE', NULL, NULL),\n        ('Suspended', 'In Progress', 'createGoalsForReport', 'UPDATE', NULL, NULL)\n      ) AS tmp_data("oldStatus", "newStatus", descriptor, dml_type, reason, context)\n  ),\n    status_changes_query AS (\n        SELECT\n            zg.data_id AS "goalId",\n            CASE\n                WHEN zg.dml_as = -1 OR zg.dml_as = 0 THEN NULL\n                ELSE zg.dml_as\n            END AS "userId",\n            u.name AS "userName",\n            ARRAY_AGG(DISTINCT r.name) FILTER (WHERE r.name IS NOT NULL) AS "userRoles",\n            zg.old_row_data ->> 'status' AS "oldStatus",\n            zg.new_row_data ->> 'status' AS "newStatus",\n            COALESCE((ARRAY_AGG(TRIM(NULLIF(zg.new_row_data ->> 'closeSuspendReason', ''))))[1], rl.reason) AS "reason",\n            COALESCE((ARRAY_AGG(TRIM(NULLIF(zg.new_row_data ->> 'closeSuspendContext', ''))))[1], rl.context) AS "context",\n            zg.dml_timestamp AS "createdAt",\n            zg.dml_timestamp AS "updatedAt"\n        FROM\n            "ZALGoals" zg\n        LEFT JOIN "ZADescriptor" zd ON zg.descriptor_id = zd.id\n        LEFT JOIN "Users_timeseries" u ON zg."dml_as" = u.data_id AND zg.dml_timestamp BETWEEN u.timeband_start AND u.timeband_end\n        LEFT JOIN "UserRoles_timeseries" ur ON zg."dml_as" = ur."userId" AND zg.dml_timestamp BETWEEN ur.timeband_start AND ur.timeband_end\n        LEFT JOIN "Roles" r ON ur."roleId" = r.id\n        LEFT JOIN reason_lookup rl\n            ON (zg.old_row_data ->> 'status' = rl."oldStatus")\n            AND (zg.new_row_data ->> 'status' = rl."newStatus")\n            AND (zd.descriptor = rl.descriptor)\n            AND (zg.dml_type::text = rl.dml_type)\n        WHERE\n            (NULLIF(TRIM(zg.old_row_data ->> 'status'), '') IS NOT NULL\n                OR NULLIF(TRIM(zg.new_row_data ->> 'status'), '') IS NOT NULL)\n        GROUP BY\n            zg.data_id,\n            zg.dml_as,\n            u.name,\n            zg.dml_timestamp,\n            rl.reason,\n            rl.context,\n            zg.old_row_data ->> 'status',\n            zg.new_row_data ->> 'status'\n    )\nINSERT INTO "GoalStatusChanges"\n      ("goalId", "userId", "userName", "userRoles", "oldStatus", "newStatus", "reason", "context", "createdAt", "updatedAt")\n    SELECT\n        scq."goalId", scq."userId", scq."userName", scq."userRoles", scq."oldStatus", scq."newStatus", scq."reason", scq."context", scq."createdAt", scq."updatedAt"\n    FROM status_changes_query scq\n    LEFT JOIN "GoalStatusChanges" gsc\n    ON gsc."goalId" = scq."goalId"\n    AND gsc."oldStatus" = scq."oldStatus"\n    AND gsc."newStatus" = scq."newStatus"\n    AND gsc."createdAt" BETWEEN scq."createdAt" - interval '30 seconds' AND scq."createdAt" + interval '30 seconds'\n    LEFT JOIN "Goals" g ON g.id = scq."goalId"\n    WHERE gsc.id IS NULL\n    AND g.id IS NOT NULL;
Executing (3ebb6f82-52cd-48ff-9513-ee928b8daa54): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240708153514-goalStatusChanges-historical: migrated (0.135s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240715000000-fix-old-session-regions: migrating =======
Executing (3fefc41b-3a46-4857-aef9-9d1be0893671): START TRANSACTION;
Connection validated successfully
Executing (3fefc41b-3a46-4857-aef9-9d1be0893671): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240715000000-fix-old-session-regions.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (3fefc41b-3a46-4857-aef9-9d1be0893671): -- One very old session lacks the regionId value\n        -- This finds and sets it\n        DROP TABLE IF EXISTS sr_updates;\n        CREATE TEMP TABLE sr_updates\n        AS\n        WITH updater AS (\n        UPDATE "SessionReportPilots" srp\n        SET data = JSONB_SET(srp.data,'{regionId}',TO_JSONB(erp."regionId"))\n        FROM "EventReportPilots" erp\n        WHERE erp.id = srp."eventId"\n          AND srp.data->>'regionId' = ''\n        RETURNING\n          srp.id srpid,\n          erp."regionId"\n        ) SELECT * FROM updater\n        ;\n\n        SELECT * FROM sr_updates;\n        -- Looks like:\n        ----------------------\n        --  srpid | regionId\n        -- -------+----------\n        --      2 |        3
Executing (3fefc41b-3a46-4857-aef9-9d1be0893671): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240715000000-fix-old-session-regions: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240801000000-merge_duplicate_args: migrating =======
Executing (0ebcdc74-abe8-42b4-a15c-f7017f2d68ac): START TRANSACTION;
Connection validated successfully
Executing (0ebcdc74-abe8-42b4-a15c-f7017f2d68ac): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240801000000-merge_duplicate_args.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0ebcdc74-abe8-42b4-a15c-f7017f2d68ac): -- Call the preexisting function for deduping args\n      -- created in 20240520000000-merge_duplicate_args.js\n      SELECT dedupe_args();\n\n      -- The expected results look like:\n      -- op_order |     op_name     | record_cnt\n      ------------+-----------------+------------\n      --        1 | relinked_argfrs |          0\n      --        2 | deleted_argfrs  |          0\n      --        3 | relinked_argrs  |          0\n      --        4 | deleted_argrs   |          0\n      --        5 | deleted_args    |         66\n      SELECT\n        1 op_order,\n        'relinked_argfrs' op_name,\n        COUNT(*) record_cnt\n      FROM relinked_argfrs\n      UNION SELECT 2, 'deleted_argfrs', COUNT(*) FROM deleted_argfrs\n      UNION SELECT 3, 'relinked_argrs', COUNT(*) FROM relinked_argrs\n      UNION SELECT 4, 'deleted_argrs', COUNT(*) FROM deleted_argrs\n      UNION SELECT 5, 'deleted_args', COUNT(*) FROM deleted_args\n      ORDER BY 1;
Executing (0ebcdc74-abe8-42b4-a15c-f7017f2d68ac): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240801000000-merge_duplicate_args: migrated (0.043s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240802204120-repair-multiple-aros: migrating =======
Executing (a90e512a-f1f1-47e1-bb6b-e74153162bb6): START TRANSACTION;
Connection validated successfully
Executing (a90e512a-f1f1-47e1-bb6b-e74153162bb6): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240802204120-repair-multiple-aros.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (a90e512a-f1f1-47e1-bb6b-e74153162bb6): DELETE FROM "ActivityReportObjectiveFiles" WHERE "activityReportObjectiveId" IN (232020, 232022);\n        DELETE FROM "ActivityReportObjectives" WHERE id IN (232020, 232022)
Executing (a90e512a-f1f1-47e1-bb6b-e74153162bb6): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240802204120-repair-multiple-aros: migrated (0.019s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240805181157-remove-commlog-4849: migrating =======
Executing (1a137c57-5a10-4a3d-9aca-b711e8ea59f8): START TRANSACTION;
Connection validated successfully
Executing (1a137c57-5a10-4a3d-9aca-b711e8ea59f8): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240805181157-remove-commlog-4849.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1a137c57-5a10-4a3d-9aca-b711e8ea59f8): DELETE FROM "CommunicationLogs" WHERE id = 4849;
Executing (1a137c57-5a10-4a3d-9aca-b711e8ea59f8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240805181157-remove-commlog-4849: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240807172716-reset-session-completions: migrating =======
Executing (db17d9ff-1f9d-4397-8245-ae36ddf7fa4f): START TRANSACTION;
Connection validated successfully
Executing (db17d9ff-1f9d-4397-8245-ae36ddf7fa4f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240807172716-reset-session-completions.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (db17d9ff-1f9d-4397-8245-ae36ddf7fa4f): -- Four sessions are not editable because they have already been\n        -- marked complete by POC. A support request has asked us to\n        -- revert this completion status so that they can be edited.\n\n        -- To do this, we set:\n\n        -- * pocComplete to false\n        -- * pocCompleteId to ""\n        -- * pocCompleteDate to ""\n\n        -- ...on both the event and the session\n\n        UPDATE "EventReportPilots"\n        SET data = jsonb_set(jsonb_set(jsonb_set(data, '{pocComplete}', 'false'), '{pocCompleteId}', '""'), '{pocCompleteDate}', '""')\n        WHERE id = 39;\n\n        UPDATE "SessionReportPilots"\n        SET data = jsonb_set(\n            jsonb_set(\n                jsonb_set(data, '{pocCompleteId}', '""'),\n                '{pocCompleteDate}', '""'\n            ),\n            '{event, data, pocComplete}', 'false'\n        )\n        WHERE data ->> 'id' IN ('74', '101', '92', '102');
Executing (db17d9ff-1f9d-4397-8245-ae36ddf7fa4f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240807172716-reset-session-completions: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240807195655-remove-tr-goals: migrating =======
Executing (50c9c9a8-1edc-4985-8949-bbb6ba127696): START TRANSACTION;
Connection validated successfully
Executing (50c9c9a8-1edc-4985-8949-bbb6ba127696): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240807195655-remove-tr-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (50c9c9a8-1edc-4985-8949-bbb6ba127696): SELECT "ZAFSetTriggerState"(null, null, null, 'DISABLE');
Executing (50c9c9a8-1edc-4985-8949-bbb6ba127696): SELECT "ZAFRemoveAuditingOnTable"('EventReportPilotGoals');
Executing (50c9c9a8-1edc-4985-8949-bbb6ba127696): DROP TABLE IF EXISTS "ZALEventReportPilotGoals";
Executing (50c9c9a8-1edc-4985-8949-bbb6ba127696): DROP TABLE IF EXISTS "EventReportPilotGoals";
Executing (50c9c9a8-1edc-4985-8949-bbb6ba127696): SELECT "ZAFSetTriggerState"(null, null, null, 'ENABLE');
Executing (50c9c9a8-1edc-4985-8949-bbb6ba127696): -- Goal 83050 is explicitly excluded from this migration. Decided by OHS during refinement on 8/7/2024.\n        -- Force failure if any of these TR goals have been used on an AR.\n        -- Credit to Nathan for this one.\n        SELECT 1/(LEAST(COUNT(*), 1) - 1)\n        FROM "ActivityReportGoals" arg\n        WHERE "goalId" IN (\n          SELECT "id"\n          FROM "Goals"\n          WHERE "createdVia"::text = 'tr'\n          AND "id" != 83050\n        );\n\n        -- Remove GoalSimilarityGroupGoals for Goals that were createdVia 'tr', except for goal 83050:\n        -- The column on this table for goal id is "goalId":\n        DELETE FROM "GoalSimilarityGroupGoals"\n        WHERE "goalId" IN (\n          SELECT "id"\n          FROM "Goals"\n          WHERE "createdVia"::text = 'tr' AND "id" != 83050\n        );\n\n        -- Remove GoalStatusChanges for Goals that were createdVia 'tr':\n        DELETE FROM "GoalStatusChanges"\n        WHERE "goalId" IN (\n          SELECT "id"\n          FROM "Goals"\n          WHERE "createdVia"::text = 'tr' AND "id" != 83050\n        );\n\n        -- Remove Objectives for Goals that were createdVia 'tr':\n        DELETE FROM "Objectives"\n        WHERE "goalId" IN (\n          SELECT "id"\n          FROM "Goals"\n          WHERE "createdVia"::text = 'tr' AND "id" != 83050\n        );\n\n        -- Remove goals that were createdVia 'tr':\n        DELETE FROM "Goals"\n        WHERE "createdVia"::text = 'tr' AND id != 83050;
Executing (50c9c9a8-1edc-4985-8949-bbb6ba127696): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240807195655-remove-tr-goals: migrated (0.287s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240808190905-add-manual_mark_goals_similar: migrating =======
Executing (2cbf4669-8ecd-4696-9171-1974a42f1f3d): START TRANSACTION;
Connection validated successfully
Executing (2cbf4669-8ecd-4696-9171-1974a42f1f3d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240808190905-add-manual_mark_goals_similar.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'anv_statistics';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'regional_goal_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'closed_goal_merge_override';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'training_reports_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'quality_assurance_dashboard';
Executing (default): ALTER TYPE "enum_Users_flags"\n          ADD VALUE IF NOT EXISTS 'manual_mark_goals_similar';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (2cbf4669-8ecd-4696-9171-1974a42f1f3d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240808190905-add-manual_mark_goals_similar: migrated (0.047s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240815000000-remove-dup-aros-via-uploadHandler: migrating =======
Executing (de837fc3-ddb1-4662-82b2-3156acbabe91): START TRANSACTION;
Connection validated successfully
Executing (de837fc3-ddb1-4662-82b2-3156acbabe91): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240815000000-remove-dup-aros-via-uploadHandler.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (de837fc3-ddb1-4662-82b2-3156acbabe91): -- This dedupes the AROs for three ARs (46116, 46266, 45907) in active support cases\n        -- other ARO deduping will come in a subsequent migration after the\n        -- team has reached agreement on how to handle ttaProvided values\n        -- Drop temporary tables if they exist\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        DROP TABLE IF EXISTS temp_reduced_aro;\n\n        DROP TABLE IF EXISTS temp_updated_topics;\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        DROP TABLE IF EXISTS temp_deleted_topics;\n\n        DROP TABLE IF EXISTS temp_updated_courses;\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        DROP TABLE IF EXISTS temp_deleted_courses;\n\n        DROP TABLE IF EXISTS temp_updated_files;\n        DROP TABLE IF EXISTS temp_inserted_files;\n        DROP TABLE IF EXISTS temp_deleted_files;\n\n        DROP TABLE IF EXISTS temp_updated_resources;\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        DROP TABLE IF EXISTS temp_deleted_resources;\n\n        DROP TABLE IF EXISTS temp_updated_objectives;\n        DROP TABLE IF EXISTS temp_inserted_objectives;\n        DROP TABLE IF EXISTS temp_deleted_objectives;\n\n\n        -- Create temporary table for dup_aro_sets\n        CREATE TEMP TABLE temp_dup_aro_sets AS\n        SELECT\n          (zaro.new_row_data ->> 'activityReportId')::int "activityReportId",\n          (zaro.new_row_data ->> 'objectiveId')::int "objectiveId",\n          min(zaro.dml_timestamp) "min_dml_timestamp",\n          max(zaro.dml_timestamp) "max_dml_timestamp",\n          COUNT(zaro.id) "count_id",\n          array_agg(zaro.data_id ORDER BY zaro.data_id ASC) "aroIds",\n          array_agg(DISTINCT zd.descriptor) "descriptors"\n        FROM "ZALActivityReportObjectives" zaro\n        JOIN "ZADescriptor" zd\n        ON zaro.descriptor_id = zd.id\n        LEFT JOIN "ZALActivityReportObjectives" zarod\n        ON zaro.data_id = zarod.data_id\n        AND zarod.dml_type = 'DELETE'\n            WHERE zaro.dml_type = 'INSERT'\n        AND zarod.id IS NULL\n        AND (zaro.new_row_data ->> 'activityReportId')::int in (46116, 46266, 45907)\n        GROUP BY 1,2\n        HAVING COUNT(zaro.id) > 1\n        AND array_position(array_agg(DISTINCT zd.descriptor), 'uploadHandler') IS NOT NULL\n        ORDER BY 3 DESC;\n\n        -- Create temporary table for reduced_arot\n        CREATE TEMP TABLE temp_reduced_arot AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arot."topicId",\n          MIN(arot."createdAt") "createdAt",\n          MAX(arot."updatedAt") "updatedAt",\n          ARRAY_AGG(arot.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON arot."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_updated_topics AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveTopics" t\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arot s\n            WHERE t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            RETURNING t.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_inserted_topics AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveTopics" (\n                "activityReportObjectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."topicId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arot s\n            LEFT JOIN "ActivityReportObjectiveTopics" t\n            ON t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            WHERE t."activityReportObjectiveId" IS NULL\n            AND t."topicId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_deleted_topics AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveTopics" t\n            USING temp_reduced_arot r\n            WHERE t."topicId" = r."topicId"\n            AND t.id = ANY (r.ids)\n            AND t."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING t.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aroc\n        CREATE TEMP TABLE temp_reduced_aroc AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aroc."courseId",\n          MIN(aroc."createdAt") "createdAt",\n          MAX(aroc."updatedAt") "updatedAt",\n          ARRAY_AGG(aroc.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON aroc."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_updated_courses AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveCourses" c\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aroc s\n            WHERE c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            RETURNING c.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_inserted_courses AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveCourses" (\n                "activityReportObjectiveId",\n                "courseId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."courseId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aroc s\n            LEFT JOIN "ActivityReportObjectiveCourses" c\n            ON c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            WHERE c."activityReportObjectiveId" IS NULL\n            AND c."courseId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_deleted_courses AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveCourses" c\n            USING temp_reduced_aroc r\n            WHERE c."courseId" = r."courseId"\n            AND c.id = ANY (r.ids)\n            AND c."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING c.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_arof\n        CREATE TEMP TABLE temp_reduced_arof AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arof."fileId",\n          MIN(arof."createdAt") "createdAt",\n          MAX(arof."updatedAt") "updatedAt",\n          ARRAY_AGG(arof.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON arof."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_updated_files AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveFiles" f\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arof s\n            WHERE f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            RETURNING f.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_inserted_files AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveFiles" (\n                "activityReportObjectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."fileId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arof s\n            LEFT JOIN "ActivityReportObjectiveFiles" f\n            ON f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            WHERE f."activityReportObjectiveId" IS NULL\n            AND f."fileId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_deleted_files AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveFiles" f\n            USING temp_reduced_arof r\n            WHERE f."fileId" = r."fileId"\n            AND f.id = ANY (r.ids)\n            AND f."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING f.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_aror\n        CREATE TEMP TABLE temp_reduced_aror AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aror."resourceId",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          ARRAY_AGG(aror.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveResources" aror\n        ON aror."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_updated_resources AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveResources" r\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aror s\n            WHERE r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            RETURNING r.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_inserted_resources AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveResources" (\n                "activityReportObjectiveId",\n                "resourceId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."resourceId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aror s\n            LEFT JOIN "ActivityReportObjectiveResources" r\n            ON r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            WHERE r."activityReportObjectiveId" IS NULL\n            AND r."resourceId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_deleted_resources AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveResources" r\n            USING temp_reduced_aror t\n            WHERE r."resourceId" = t."resourceId"\n            AND r.id = ANY (t.ids)\n            AND r."activityReportObjectiveId" != t."activityReportObjectiveId"\n            RETURNING r.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aro\n        CREATE TEMP TABLE temp_reduced_aro AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] id,\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          (ARRAY_AGG(aro."ttaProvided" ORDER BY LENGTH(aro."ttaProvided") DESC))[1] "ttaProvided",\n          (ARRAY_AGG(aro."title" ORDER BY LENGTH(aro."title") DESC))[1] "title",\n          CASE MAX(CASE\n              WHEN aro.status = 'Complete' THEN 4\n              WHEN aro.status = 'Suspended' THEN 3\n              WHEN aro.status = 'In Progress' THEN 2\n              WHEN aro.status = 'Not Started' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Complete'\n              WHEN 3 THEN 'Suspended'\n              WHEN 2 THEN 'In Progress'\n              WHEN 1 THEN 'Not Started'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS status,\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(aro."closeSuspendReason" ORDER BY LENGTH(aro."closeSuspendReason"::text) DESC))[1] "closeSuspendReason",\n          (ARRAY_AGG(aro."closeSuspendContext" ORDER BY LENGTH(aro."closeSuspendContext") DESC))[1] "closeSuspendContext",\n          (ARRAY_AGG(aro."originalObjectiveId" ORDER BY aro."originalObjectiveId"))[1] "originalObjectiveId",\n          CASE MAX(CASE\n              WHEN aro."supportType" = 'Maintaining' THEN 4\n              WHEN aro."supportType" = 'Implementing' THEN 3\n              WHEN aro."supportType" = 'Introducing' THEN 2\n              WHEN aro."supportType" = 'Planning' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Maintaining'\n              WHEN 3 THEN 'Implementing'\n              WHEN 2 THEN 'Introducing'\n              WHEN 1 THEN 'Planning'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS "supportType",\n          bool_or(aro."objectiveCreatedHere") "objectiveCreatedHere",\n          array_agg(aro.id order by aro.id) "aroIds"\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectives" aro\n        ON aro.id = ANY (das."aroIds")\n        GROUP BY 1,2,3;\n\n        -- Update matching records in ActivityReportObjectives\n        CREATE TEMP TABLE temp_updated_objectives AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectives" o\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt",\n                "ttaProvided" = s."ttaProvided",\n                "title" = s."title",\n                "status" = s."status",\n                "arOrder" = s."arOrder",\n                "closeSuspendReason" = s."closeSuspendReason",\n                "closeSuspendContext" = s."closeSuspendContext",\n                "originalObjectiveId" = s."originalObjectiveId",\n                "supportType" = s."supportType"::"enum_ActivityReportObjectives_supportType",\n                "objectiveCreatedHere" = s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            WHERE o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            RETURNING o.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectives\n        -- There should never be an INSERT performed here, but the code is present to complete the structure UID structure\n        CREATE TEMP TABLE temp_inserted_objectives AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectives" (\n                "activityReportId",\n                "objectiveId",\n                "id",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided",\n                "title",\n                "status",\n                "arOrder",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "originalObjectiveId",\n                "supportType",\n                "objectiveCreatedHere"\n            )\n            SELECT\n                s."activityReportId",\n                s."objectiveId",\n                s.id,\n                s."createdAt",\n                s."updatedAt",\n                s."ttaProvided",\n                s."title",\n                s."status",\n                s."arOrder",\n                s."closeSuspendReason",\n                s."closeSuspendContext",\n                s."originalObjectiveId",\n                s."supportType"::"enum_ActivityReportObjectives_supportType",\n                s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            LEFT JOIN "ActivityReportObjectives" o\n            ON o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            WHERE o.id IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectives\n        CREATE TEMP TABLE temp_deleted_objectives AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectives" o\n            USING temp_reduced_aro r\n            WHERE o."objectiveId" = r."objectiveId"\n            AND o."activityReportId" = r."activityReportId"\n            AND o.id = ANY (ARRAY_REMOVE(r."aroIds", r."aroIds"[1]))\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- results\n        SELECT\n            'ActivityReportObjectiveTopics' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_topics) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_topics) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_topics) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveCourses' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_courses) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_courses) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_courses) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveFiles' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_files) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_files) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_files) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveResources' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_resources) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_resources) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_resources) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectives' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_objectives) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_objectives) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_objectives) d;\n\n        -- Drop temporary tables at the end\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        DROP TABLE IF EXISTS temp_reduced_aro;\n\n        DROP TABLE IF EXISTS temp_updated_topics;\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        DROP TABLE IF EXISTS temp_deleted_topics;\n\n        DROP TABLE IF EXISTS temp_updated_courses;\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        DROP TABLE IF EXISTS temp_deleted_courses;\n\n        DROP TABLE IF EXISTS temp_updated_files;\n        DROP TABLE IF EXISTS temp_inserted_files;\n        DROP TABLE IF EXISTS temp_deleted_files;\n\n        DROP TABLE IF EXISTS temp_updated_resources;\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        DROP TABLE IF EXISTS temp_deleted_resources;\n\n        DROP TABLE IF EXISTS temp_updated_objectives;\n        DROP TABLE IF EXISTS temp_inserted_objectives;\n        DROP TABLE IF EXISTS temp_deleted_objectives;
Executing (de837fc3-ddb1-4662-82b2-3156acbabe91): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240815000000-remove-dup-aros-via-uploadHandler: migrated (0.091s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240827142432-update-missing-fei-templates: migrating =======
Executing (8a7e518b-4699-493b-9fae-15e0700aae32): START TRANSACTION;
Connection validated successfully
Executing (8a7e518b-4699-493b-9fae-15e0700aae32): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240827142432-update-missing-fei-templates.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (8a7e518b-4699-493b-9fae-15e0700aae32): UPDATE "Goals"\n        SET "goalTemplateId" = 19017\n        WHERE "goalTemplateId" is null AND "id" IN (\n          SELECT \n              g.id  \n          FROM "Goals" g \n          INNER JOIN "GoalFieldResponses" gfr ON g.id = gfr."goalId"\n          INNER JOIN "GoalTemplateFieldPrompts" gfft ON gfr."goalTemplateFieldPromptId" = gfft.id\n          WHERE g."goalTemplateId" is null AND gfft."goalTemplateId" = 19017\n        );
Executing (8a7e518b-4699-493b-9fae-15e0700aae32): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240827142432-update-missing-fei-templates: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240828171934-add-new-mailer-action: migrating =======
Executing (216bb658-e297-4fb6-a688-5b487c0bc6aa): START TRANSACTION;
Connection validated successfully
Executing (216bb658-e297-4fb6-a688-5b487c0bc6aa): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240828171934-add-new-mailer-action.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportTaskDueNotifications';
Connection validated successfully
Executing (216bb658-e297-4fb6-a688-5b487c0bc6aa): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240828171934-add-new-mailer-action: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240830000000-merge-dup-aros: migrating =======
Executing (ef8de72d-0d95-4792-8f06-e840cfc90fe1): START TRANSACTION;
Connection validated successfully
Executing (ef8de72d-0d95-4792-8f06-e840cfc90fe1): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240830000000-merge-dup-aros.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ef8de72d-0d95-4792-8f06-e840cfc90fe1): -- This dedupes all remaining AROs. The logic is the same as used for previous\n        -- support requests, except the latest TTA Provided that is not zero length \n        -- is selected with one exception. If an update is shorter than 10 characters\n        -- and the maximum TTA Provided on an ARO is more than 8x (e.g. 80 characters)\n        -- times as long as that update, then the update is sorted lower. Though this\n        -- case is not seen in the data upon last inspection , this prevents default\n        -- updates from outranking real updates if that case crops up before deployment.\n\n        -- We're not adding a unique constraint right now because it causes test failures.\n        \n        -- Drop temporary tables if they exist\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        DROP TABLE IF EXISTS temp_reduced_aro;\n\n        DROP TABLE IF EXISTS temp_updated_topics;\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        DROP TABLE IF EXISTS temp_deleted_topics;\n\n        DROP TABLE IF EXISTS temp_updated_courses;\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        DROP TABLE IF EXISTS temp_deleted_courses;\n\n        DROP TABLE IF EXISTS temp_updated_files;\n        DROP TABLE IF EXISTS temp_inserted_files;\n        DROP TABLE IF EXISTS temp_deleted_files;\n\n        DROP TABLE IF EXISTS temp_updated_resources;\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        DROP TABLE IF EXISTS temp_deleted_resources;\n\n        DROP TABLE IF EXISTS temp_updated_objectives;\n        DROP TABLE IF EXISTS temp_inserted_objectives;\n        DROP TABLE IF EXISTS temp_deleted_objectives;\n\n\n        -- Create temporary table for dup_aro_sets\n        CREATE TEMP TABLE temp_dup_aro_sets AS\n        WITH dupe_aro_pairs AS (\n        SELECT\n          "activityReportId" arid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        GROUP BY 1,2\n        HAVING COUNT(id) > 1\n        ),\n        dupe_aros AS (\n        SELECT\n          arid,\n          oid,\n          id aroid\n        FROM "ActivityReportObjectives"\n        JOIN dupe_aro_pairs\n          ON "activityReportId" = arid\n          AND "objectiveId" = oid\n        )\n        SELECT\n          arid "activityReportId",\n          oid "objectiveId",\n          min(zaro.dml_timestamp) "min_dml_timestamp",\n          max(zaro.dml_timestamp) "max_dml_timestamp",\n          COUNT(zaro.id) "count_id",\n          array_agg(zaro.data_id ORDER BY zaro.data_id ASC) "aroIds"\n        FROM dupe_aros\n        JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = aroid\n        GROUP BY 1,2\n        ORDER BY 3 DESC;\n\n        -- Create temporary table for reduced_arot\n        CREATE TEMP TABLE temp_reduced_arot AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arot."topicId",\n          MIN(arot."createdAt") "createdAt",\n          MAX(arot."updatedAt") "updatedAt",\n          ARRAY_AGG(arot.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON arot."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_updated_topics AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveTopics" t\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arot s\n            WHERE t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            RETURNING t.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_inserted_topics AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveTopics" (\n                "activityReportObjectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."topicId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arot s\n            LEFT JOIN "ActivityReportObjectiveTopics" t\n            ON t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            WHERE t."activityReportObjectiveId" IS NULL\n            AND t."topicId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveTopics\n        CREATE TEMP TABLE temp_deleted_topics AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveTopics" t\n            USING temp_reduced_arot r\n            WHERE t."topicId" = r."topicId"\n            AND t.id = ANY (r.ids)\n            AND t."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING t.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aroc\n        CREATE TEMP TABLE temp_reduced_aroc AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aroc."courseId",\n          MIN(aroc."createdAt") "createdAt",\n          MAX(aroc."updatedAt") "updatedAt",\n          ARRAY_AGG(aroc.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON aroc."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_updated_courses AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveCourses" c\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aroc s\n            WHERE c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            RETURNING c.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_inserted_courses AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveCourses" (\n                "activityReportObjectiveId",\n                "courseId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."courseId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aroc s\n            LEFT JOIN "ActivityReportObjectiveCourses" c\n            ON c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            WHERE c."activityReportObjectiveId" IS NULL\n            AND c."courseId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveCourses\n        CREATE TEMP TABLE temp_deleted_courses AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveCourses" c\n            USING temp_reduced_aroc r\n            WHERE c."courseId" = r."courseId"\n            AND c.id = ANY (r.ids)\n            AND c."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING c.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_arof\n        CREATE TEMP TABLE temp_reduced_arof AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arof."fileId",\n          MIN(arof."createdAt") "createdAt",\n          MAX(arof."updatedAt") "updatedAt",\n          ARRAY_AGG(arof.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON arof."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_updated_files AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveFiles" f\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arof s\n            WHERE f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            RETURNING f.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_inserted_files AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveFiles" (\n                "activityReportObjectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."fileId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arof s\n            LEFT JOIN "ActivityReportObjectiveFiles" f\n            ON f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            WHERE f."activityReportObjectiveId" IS NULL\n            AND f."fileId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveFiles\n        CREATE TEMP TABLE temp_deleted_files AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveFiles" f\n            USING temp_reduced_arof r\n            WHERE f."fileId" = r."fileId"\n            AND f.id = ANY (r.ids)\n            AND f."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING f.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_aror\n        CREATE TEMP TABLE temp_reduced_aror AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aror."resourceId",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          ARRAY_AGG(aror.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveResources" aror\n        ON aror."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_updated_resources AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveResources" r\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aror s\n            WHERE r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            RETURNING r.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_inserted_resources AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveResources" (\n                "activityReportObjectiveId",\n                "resourceId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."resourceId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aror s\n            LEFT JOIN "ActivityReportObjectiveResources" r\n            ON r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            WHERE r."activityReportObjectiveId" IS NULL\n            AND r."resourceId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveResources\n        CREATE TEMP TABLE temp_deleted_resources AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveResources" r\n            USING temp_reduced_aror t\n            WHERE r."resourceId" = t."resourceId"\n            AND r.id = ANY (t.ids)\n            AND r."activityReportObjectiveId" != t."activityReportObjectiveId"\n            RETURNING r.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aro\n        CREATE TEMP TABLE temp_reduced_aro AS\n        WITH ttap_upd_seq AS ( -- get the update list for each aro set\n        SELECT\n          new_row_data->>'ttaProvided' ttap,\n          das."aroIds"[1] dest_aroid,\n          MAX(LENGTH(new_row_data->>'ttaProvided')) OVER (PARTITION BY "activityReportId", "objectiveId") maxlength,\n          zaro.id zaroid\n        FROM temp_dup_aro_sets das\n        JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = ANY("aroIds")\n        WHERE  new_row_data->'ttaProvided' IS NOT NULL\n        ),\n        ranked_ttap_upd AS ( -- rank the update list per the criteria\n        SELECT\n          ttap,\n          dest_aroid,\n          zaroid,\n          maxlength,\n          ROW_NUMBER() OVER (\n            PARTITION BY dest_aroid\n            ORDER BY (LENGTH(ttap) < 10 AND (maxlength / (LENGTH(ttap)+1)) > 8), zaroid DESC\n          ) select_order\n        FROM ttap_upd_seq\n        )\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          rtu.dest_aroid id,\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          rtu.ttap "ttaProvided",\n          (ARRAY_AGG(aro."title" ORDER BY LENGTH(aro."title") DESC))[1] "title",\n          CASE MAX(CASE\n              WHEN aro.status = 'Complete' THEN 4\n              WHEN aro.status = 'Suspended' THEN 3\n              WHEN aro.status = 'In Progress' THEN 2\n              WHEN aro.status = 'Not Started' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Complete'\n              WHEN 3 THEN 'Suspended'\n              WHEN 2 THEN 'In Progress'\n              WHEN 1 THEN 'Not Started'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS status,\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(aro."closeSuspendReason" ORDER BY LENGTH(aro."closeSuspendReason"::text) DESC))[1] "closeSuspendReason",\n          (ARRAY_AGG(aro."closeSuspendContext" ORDER BY LENGTH(aro."closeSuspendContext") DESC))[1] "closeSuspendContext",\n          (ARRAY_AGG(aro."originalObjectiveId" ORDER BY aro."originalObjectiveId"))[1] "originalObjectiveId",\n          CASE MAX(CASE\n              WHEN aro."supportType" = 'Maintaining' THEN 4\n              WHEN aro."supportType" = 'Implementing' THEN 3\n              WHEN aro."supportType" = 'Introducing' THEN 2\n              WHEN aro."supportType" = 'Planning' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Maintaining'\n              WHEN 3 THEN 'Implementing'\n              WHEN 2 THEN 'Introducing'\n              WHEN 1 THEN 'Planning'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS "supportType",\n          bool_or(aro."objectiveCreatedHere") "objectiveCreatedHere",\n          array_agg(aro.id order by aro.id) "aroIds"\n        FROM temp_dup_aro_sets das\n        JOIN ranked_ttap_upd rtu\n          ON rtu.select_order = 1\n          AND rtu.dest_aroid = ANY (das."aroIds")\n        JOIN "ActivityReportObjectives" aro\n          ON aro.id = ANY (das."aroIds")\n        GROUP BY 1,2,3,6;\n\n        -- Update matching records in ActivityReportObjectives\n        CREATE TEMP TABLE temp_updated_objectives AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectives" o\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt",\n                "ttaProvided" = s."ttaProvided",\n                "title" = s."title",\n                "status" = s."status",\n                "arOrder" = s."arOrder",\n                "closeSuspendReason" = s."closeSuspendReason",\n                "closeSuspendContext" = s."closeSuspendContext",\n                "originalObjectiveId" = s."originalObjectiveId",\n                "supportType" = s."supportType"::"enum_ActivityReportObjectives_supportType",\n                "objectiveCreatedHere" = s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            WHERE o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            RETURNING o.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectives\n        -- There should never be an INSERT performed here, but the code is present to complete the structure UID structure\n        CREATE TEMP TABLE temp_inserted_objectives AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectives" (\n                "activityReportId",\n                "objectiveId",\n                "id",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided",\n                "title",\n                "status",\n                "arOrder",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "originalObjectiveId",\n                "supportType",\n                "objectiveCreatedHere"\n            )\n            SELECT\n                s."activityReportId",\n                s."objectiveId",\n                s.id,\n                s."createdAt",\n                s."updatedAt",\n                s."ttaProvided",\n                s."title",\n                s."status",\n                s."arOrder",\n                s."closeSuspendReason",\n                s."closeSuspendContext",\n                s."originalObjectiveId",\n                s."supportType"::"enum_ActivityReportObjectives_supportType",\n                s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            LEFT JOIN "ActivityReportObjectives" o\n            ON o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            WHERE o.id IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectives\n        CREATE TEMP TABLE temp_deleted_objectives AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectives" o\n            USING temp_reduced_aro r\n            WHERE o."objectiveId" = r."objectiveId"\n            AND o."activityReportId" = r."activityReportId"\n            AND o.id = ANY (ARRAY_REMOVE(r."aroIds", r."aroIds"[1]))\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- results\n        SELECT\n            'ActivityReportObjectiveTopics' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_topics) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_topics) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_topics) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveCourses' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_courses) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_courses) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_courses) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveFiles' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_files) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_files) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_files) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveResources' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_resources) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_resources) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_resources) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectives' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_objectives) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_objectives) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_objectives) d;\n\n        -- Drop temporary tables at the end\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        DROP TABLE IF EXISTS temp_reduced_aro;\n\n        DROP TABLE IF EXISTS temp_updated_topics;\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        DROP TABLE IF EXISTS temp_deleted_topics;\n\n        DROP TABLE IF EXISTS temp_updated_courses;\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        DROP TABLE IF EXISTS temp_deleted_courses;\n\n        DROP TABLE IF EXISTS temp_updated_files;\n        DROP TABLE IF EXISTS temp_inserted_files;\n        DROP TABLE IF EXISTS temp_deleted_files;\n\n        DROP TABLE IF EXISTS temp_updated_resources;\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        DROP TABLE IF EXISTS temp_deleted_resources;\n\n        DROP TABLE IF EXISTS temp_updated_objectives;\n        DROP TABLE IF EXISTS temp_inserted_objectives;\n        DROP TABLE IF EXISTS temp_deleted_objectives;
Executing (ef8de72d-0d95-4792-8f06-e840cfc90fe1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240830000000-merge-dup-aros: migrated (0.135s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240902000000-link-historical-objectives-to-templates: migrating =======
Executing (c78fe12a-e9d1-4761-bcce-d93689b43655): START TRANSACTION;
Connection validated successfully
Executing (c78fe12a-e9d1-4761-bcce-d93689b43655): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240902000000-link-historical-objectives-to-templates.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (c78fe12a-e9d1-4761-bcce-d93689b43655): -- This starts by deduping Goal and Objective templates so that re-linking operations\n        -- will be deterministic and won't create a greater mess. This involves:\n        --   - Collecting the list of templates to merge\n        --   - Failing the transaction if any goal templates with question prompts (e.g. root cause)\n        --     are slated to be merged away. If those ever appear they need an extra look\n        --   - Finding GoalTemplateObjectiveTemplates that would simply create duplicate\n        --     obj-template,goal-template pairs and deleting from GoalTemplateObjectiveTemplates\n        --     rather than updating those\n        --   - Updating GoalTemplateObjectiveTemplates to the new obj templates\n        --   - Updating GoalTemplateObjectiveTemplates to the new goal templates\n        --   - Redirecting GoalTemplateResources to their new template\n        --   - Update any goals or objectives to the merged templates\n        --   - Delete the duplicate templates\n        -- Many of these steps are empty but all the steps are included in case either something changes\n        -- between when this is written and when it's run, or if it gets rerun in the future\n\n        -- THE MAIN WORK:\n        -- This finds all objectives that have titles long enough to be meaningful but\n        -- are not linked to a matching template and marks whether they're created on an\n        -- RTR and what the most advanced status of a connected AR is. Then every\n        -- Objective that is on at least one AR that has reached 'submitted' status\n        -- is:\n        --   - Converted to a template and inserted if there is no matching template\n        --   - Updated to point to the new or existing template\n        -- A query at the end shows the movement. Note that some "unmatched" numbers will\n        -- grow slightly because the template to which they *would* match has been interted\n        -- but the objective wasn't associated with any ARs with sufficiently advanced status\n\n        -- Also doing the same for Goals\n\n        -- Deduping templates ------------------------------------------------------------------\n        -- Create the mappings\n        DROP TABLE IF EXISTS obj_template_mapping;\n        CREATE TEMP TABLE obj_template_mapping\n        AS\n        WITH hash_sets AS (\n        SELECT\n          hash,\n          "regionId" region,\n          MIN(id) target_otid,\n          MIN("createdAt") hash_created_at,\n          MAX("updatedAt") hash_updated_at,\n          MAX("lastUsed") hash_last_used,\n          COUNT(*)\n        FROM "ObjectiveTemplates"\n        GROUP BY 1,2\n        HAVING COUNT(*) > 1\n        )\n        SELECT\n          id otid,\n          target_otid,\n          hash_created_at,\n          hash_updated_at,\n          hash_last_used\n        FROM hash_sets hs\n        JOIN "ObjectiveTemplates" ot\n          ON hs.hash = ot.hash\n          AND hs.region = ot."regionId"\n        ;\n\n        DROP TABLE IF EXISTS goal_template_mapping;\n        CREATE TEMP TABLE goal_template_mapping\n        AS\n        WITH hash_sets AS (\n        SELECT\n          hash,\n          "regionId" region,\n          MIN(id) target_gtid,\n          MIN("createdAt") hash_created_at,\n          MAX("updatedAt") hash_updated_at,\n          MAX("lastUsed") hash_last_used,\n          COUNT(*)\n        FROM "GoalTemplates"\n        GROUP BY 1,2\n        HAVING COUNT(*) > 1\n        )\n        SELECT\n          id gtid,\n          target_gtid,\n          hash_created_at,\n          hash_updated_at,\n          hash_last_used\n        FROM hash_sets hs\n        JOIN "GoalTemplates" gt\n          ON hs.hash = gt.hash\n          AND hs.region = gt."regionId"\n        ;\n\n        -- Fail out of the transaction with a divide by zero error if there\n        -- are any field prompts for a goal template slated to be merged.\n        -- There won't be any now, but this makes sure that if the logic is\n        -- ever rerun in the future we won't accidentally make a big mess.\n        SELECT 1 /\n        (LEAST(COUNT(*),1) - 1)\n        FROM goal_template_mapping\n        JOIN "GoalTemplateFieldPrompts"\n          ON "goalTemplateId" = gtid\n        WHERE gtid != target_gtid\n        ;\n\n        -- Find GoalTemplateObjectiveTemplates that would just duplicate\n        -- if updated. This is also empty so far\n        DROP TABLE IF EXISTS gtot_to_be_deleted;\n        CREATE TEMP TABLE gtot_to_be_deleted\n        AS\n        SELECT\n          gtot.id target_gtotid,\n          gtot2.id gtotid_to_delete\n        FROM "GoalTemplateObjectiveTemplates" gtot\n        JOIN goal_template_mapping gtm\n          ON gtot."goalTemplateId" = gtm.target_gtid\n        JOIN obj_template_mapping otm\n          ON gtot."objectiveTemplateId" = otm.target_otid\n        JOIN "GoalTemplateObjectiveTemplates" gtot2\n          ON gtm.gtid = gtot2."goalTemplateId"\n          AND otm.otid = gtot2."objectiveTemplateId"\n        ;\n\n        \n        DELETE FROM "GoalTemplateObjectiveTemplates" gtot\n        USING gtot_to_be_deleted \n        WHERE gtot.id = gtotid_to_delete\n        ;\n\n        -- Update GoalTemplateObjectiveTemplates to point to the merged records\n        -- create a list of goal updates\n        DROP TABLE IF EXISTS updated_goal_template_obj_template;\n        CREATE TEMP TABLE updated_goal_template_obj_template\n        AS\n        WITH updater AS (\n        UPDATE "GoalTemplateObjectiveTemplates" gtot\n        SET "goalTemplateId" = target_gtid\n        FROM goal_template_mapping\n        WHERE gtot."goalTemplateId" = gtid\n        RETURNING\n          id gtotid,\n          'goal_template' update_type,\n          gtid old_value,\n          target_gtid new_value\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- Add the objective updates to the list\n        WITH updater AS (\n        UPDATE "GoalTemplateObjectiveTemplates" gtot\n        SET "objectiveTemplateId" = target_otid\n        FROM obj_template_mapping\n        WHERE gtot."objectiveTemplateId" = otid\n        RETURNING\n          id gtotid,\n          'obj_template' update_type,\n          otid old_value,\n          target_otid new_value\n        ),\n        insert AS (\n        INSERT INTO updated_goal_template_obj_template\n        SELECT * FROM updater\n        RETURNING *\n        )\n        SELECT COUNT(*) FROM insert\n        ;\n\n        -- Update GoalTemplateResources\n        -- The table is currently empty so this doesn't do anything yet\n        DROP TABLE IF EXISTS updated_goal_tempalate_resources;\n        CREATE TEMP TABLE updated_goal_tempalate_resources\n        AS\n        WITH updater AS (\n        UPDATE "GoalTemplateResources" gtr\n        SET "goalTemplateId" = target_gtid\n        FROM goal_template_mapping\n        WHERE gtr."goalTemplateId" = gtid\n        RETURNING gtid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- update Goals to point to the merged template\n        DROP TABLE IF EXISTS redirected_goals;\n        CREATE TEMP TABLE redirected_goals\n        AS\n        WITH updater AS (\n        UPDATE "Goals" g\n        SET "goalTemplateId" = target_gtid\n        FROM goal_template_mapping\n        WHERE g."goalTemplateId" = gtid\n          AND g."goalTemplateId" != target_gtid\n        RETURNING\n          id gid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- update Objectives to point to the merged template\n        DROP TABLE IF EXISTS redirected_objectives;\n        CREATE TEMP TABLE redirected_objectives\n        AS\n        WITH updater AS (\n        UPDATE "Objectives" o\n        SET "objectiveTemplateId" = target_otid\n        FROM obj_template_mapping\n        WHERE o."objectiveTemplateId" = otid\n          AND o."objectiveTemplateId" != target_otid\n        RETURNING\n          id oid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- Actually delete duplicate templates\n        DROP TABLE IF EXISTS deleted_gt_dupes;\n        CREATE TEMP TABLE deleted_gt_dupes\n        AS\n        WITH updater AS (\n        DELETE FROM "GoalTemplates" gt\n        USING goal_template_mapping\n        WHERE gt.id = gtid\n          AND gt.id != target_gtid\n        RETURNING\n          id gid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS deleted_ot_dupes;\n        CREATE TEMP TABLE deleted_ot_dupes\n        AS\n        WITH updater AS (\n        DELETE FROM "ObjectiveTemplates" ot\n        USING obj_template_mapping\n        WHERE ot.id = otid\n          AND ot.id != target_otid\n        RETURNING\n          id oid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        -- Connecting to objectives ------------------------------------------------------------------\n        DROP TABLE IF EXISTS unconnected_objectives;\n        CREATE TEMP TABLE unconnected_objectives\n        AS\n        WITH stat_progression AS (\n        SELECT\n          1 statord,\n          'deleted'::"enum_ActivityReports_calculatedStatus" statname\n        UNION SELECT 2, NULL\n        UNION SELECT 3,'draft'\n        UNION SELECT 4,'submitted'\n        UNION SELECT 5,'needs_action'\n        UNION SELECT 6,'approved'\n        ),\n        titlematch AS (\n        SELECT\n          o.id oid,\n          ot.id otid,\n          COALESCE(gr."regionId",ar."regionId") region,\n          o."createdVia" = 'rtr' is_rtr,\n          MAX(statord) most_advanced_ar,\n          MAX(o."createdAt") template_last_used\n        FROM "Objectives" o\n        LEFT JOIN "Goals" g\n          ON o."goalId" = g.id\n        LEFT JOIN "Grants" gr\n          ON g."grantId" = gr.id\n        LEFT JOIN "ObjectiveTemplates" ot\n          ON TRIM(o.title) = TRIM(ot."templateTitle")\n          AND gr."regionId" = ot."regionId"\n        LEFT JOIN "ActivityReportObjectives" aro\n          ON o.id = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n        JOIN stat_progression\n          ON (ar."calculatedStatus" IS NULL AND statname IS NULL)\n          OR ar."calculatedStatus" = statname\n        WHERE o."objectiveTemplateId" IS NULL\n          AND LENGTH(o.title) > 9\n        GROUP BY 1,2,3,4\n        )\n        SELECT\n          oid,\n          otid,\n          otid IS NULL template_missing,\n          region,\n          is_rtr,\n          most_advanced_ar,\n          statname,\n          template_last_used\n        FROM titlematch\n        JOIN stat_progression\n          ON most_advanced_ar = statord\n        WHERE region IS NOT NULL\n        ;\n\n        DROP TABLE IF EXISTS created_obj_templates;\n        CREATE TEMP TABLE created_obj_templates\n        AS\n        WITH updater AS (\n        INSERT INTO "ObjectiveTemplates" (\n          hash,\n          "templateTitle",\n          "regionId",\n          "creationMethod",\n          "createdAt",\n          "updatedAt",\n          "lastUsed",\n          "templateTitleModifiedAt"\n        )\n        SELECT\n          MD5(o.title),\n          o.title,\n          uo.region,\n          'Automatic'::"enum_ObjectiveTemplates_creationMethod",\n          NOW(),\n          NOW(),\n          MAX(uo.template_last_used),\n          NOW()\n        FROM unconnected_objectives uo\n        JOIN "Objectives" o\n          ON o.id = uo.oid\n        WHERE uo.otid IS NULL\n          AND uo.most_advanced_ar > 3\n        GROUP BY 1,2,3,4,5,6,8\n        RETURNING\n          id new_otid,\n          "templateTitle" new_template_title\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        UPDATE unconnected_objectives\n        SET otid = new_otid\n        FROM "Objectives"\n        JOIN created_obj_templates\n          ON new_template_title = title\n        WHERE oid = id\n        ;\n\n\n        DROP TABLE IF EXISTS updated_objectives;\n        CREATE TEMP TABLE updated_objectives\n        AS\n        WITH updater AS (\n        UPDATE "Objectives" o\n        SET "objectiveTemplateId" = otid\n        FROM unconnected_objectives\n        WHERE o.id = oid\n          AND most_advanced_ar > 3\n          AND "objectiveTemplateId" IS NULL\n        RETURNING oid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS unconnected_objectives_after;\n        CREATE TEMP TABLE unconnected_objectives_after\n        AS\n        WITH stat_progression AS (\n        SELECT\n          1 statord,\n          'deleted'::"enum_ActivityReports_calculatedStatus" statname\n        UNION SELECT 2, NULL\n        UNION SELECT 3,'draft'\n        UNION SELECT 4,'submitted'\n        UNION SELECT 5,'needs_action'\n        UNION SELECT 6,'approved'\n        ),\n        titlematch AS (\n        SELECT\n          o.id oid,\n          ot.id otid,\n          COALESCE(gr."regionId",ar."regionId") region,\n          o."createdVia" = 'rtr' is_rtr,\n          MAX(statord) most_advanced_ar,\n          MAX(o."createdAt") template_last_used\n        FROM "Objectives" o\n        LEFT JOIN "Goals" g\n          ON o."goalId" = g.id\n        LEFT JOIN "Grants" gr\n          ON g."grantId" = gr.id\n        LEFT JOIN "ObjectiveTemplates" ot\n          ON TRIM(o.title) = TRIM(ot."templateTitle")\n          AND gr."regionId" = ot."regionId"\n        LEFT JOIN "ActivityReportObjectives" aro\n          ON o.id = aro."objectiveId"\n        LEFT JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n        JOIN stat_progression\n          ON (ar."calculatedStatus" IS NULL AND statname IS NULL)\n          OR ar."calculatedStatus" = statname\n        WHERE o."objectiveTemplateId" IS NULL\n          AND LENGTH(o.title) > 9\n        GROUP BY 1,2,3,4\n        )\n        SELECT\n          oid,\n          otid,\n          otid IS NULL template_missing,\n          region,\n          is_rtr,\n          most_advanced_ar,\n          statname,\n          template_last_used\n        FROM titlematch\n        JOIN stat_progression\n          ON most_advanced_ar = statord\n        WHERE region IS NOT NULL\n        ;\n\n        WITH befores AS (\n        SELECT\n          is_rtr,\n          statname,\n          COUNT(*) FILTER (WHERE template_missing) no_templ,\n          COUNT(*) cnt,\n          'before' beforeafter\n        FROM unconnected_objectives\n        GROUP BY 1,2,5\n        ),\n        afters AS (\n        SELECT\n          is_rtr,\n          statname,\n          COUNT(*) FILTER (WHERE otid IS NULL) no_templ,\n          COUNT(*) cnt,\n          'after' beforeafter\n        FROM unconnected_objectives_after\n        GROUP BY 1,2,5\n        )\n        SELECT\n          b.is_rtr,\n          b.statname most_advanced_ar_status,\n          b.no_templ no_templ_before,\n          COALESCE(a.no_templ,0) no_templ_after,\n          b.cnt "before",\n          COALESCE(a.cnt,0) "after"\n        FROM befores b\n        LEFT JOIN afters a\n          ON (\n              (b.statname IS NULL AND a.statname IS NULL)\n              OR b.statname = a.statname\n            )\n          AND (\n              (b.is_rtr IS NULL AND a.is_rtr IS NULL)\n              OR b.is_rtr = a.is_rtr\n            )\n        ORDER BY 2,1\n        ;\n\n        -- GOAL SECTION -----------------------------------------------------\n\n        DROP TABLE IF EXISTS unconnected_goals;\n        CREATE TEMP TABLE unconnected_goals\n        AS\n        WITH stat_progression AS (\n        SELECT\n          1 statord,\n          'deleted'::"enum_ActivityReports_calculatedStatus" statname\n        UNION SELECT 2, NULL\n        UNION SELECT 3,'draft'\n        UNION SELECT 4,'submitted'\n        UNION SELECT 5,'needs_action'\n        UNION SELECT 6,'approved'\n        ),\n        namematch AS (\n        SELECT\n          g.id gid,\n          gt.id gtid,\n          gr."regionId" region,\n          g."createdVia" = 'rtr' is_rtr,\n          MAX(statord) most_advanced_ar,\n          MAX(g."createdAt") template_last_used\n        FROM "Goals" g\n        JOIN "Grants" gr\n          ON g."grantId" = gr.id\n        LEFT JOIN "GoalTemplates" gt\n          ON TRIM(g.name) = TRIM(gt."templateName")\n          AND gr."regionId" = gt."regionId"\n        LEFT JOIN "ActivityReportGoals" arg\n          ON g.id = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n        JOIN stat_progression\n          ON (ar."calculatedStatus" IS NULL AND statname IS NULL)\n          OR ar."calculatedStatus" = statname\n        WHERE g."goalTemplateId" IS NULL\n        GROUP BY 1,2,3,4\n        )\n        SELECT\n          gid,\n          gtid,\n          gtid IS NULL template_missing,\n          region,\n          is_rtr,\n          most_advanced_ar,\n          statname,\n          template_last_used\n        FROM namematch\n        JOIN stat_progression\n          ON most_advanced_ar = statord\n        WHERE region IS NOT NULL\n        ;\n\n        DROP TABLE IF EXISTS created_goal_templates;\n        CREATE TEMP TABLE created_goal_templates\n        AS\n        WITH updater AS (\n        INSERT INTO "GoalTemplates" (\n          hash,\n          "templateName",\n          "regionId",\n          "creationMethod",\n          "createdAt",\n          "updatedAt",\n          "lastUsed",\n          "templateNameModifiedAt"\n          -- not inserting "source" because that's null for autocreated templates\n        )\n        SELECT\n          MD5(g.name),\n          g.name,\n          ug.region,\n          'Automatic'::"enum_GoalTemplates_creationMethod",\n          NOW(),\n          NOW(),\n          MAX(ug.template_last_used),\n          NOW()\n        FROM unconnected_goals ug\n        JOIN "Goals" g\n          ON g.id = ug.gid\n        WHERE ug.gtid IS NULL\n          AND ug.most_advanced_ar > 3\n        GROUP BY 1,2,3,4,5,6,8\n        RETURNING\n          id new_gtid,\n          "templateName" new_template_name\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        UPDATE unconnected_goals\n        SET gtid = new_gtid\n        FROM "Goals"\n        JOIN created_goal_templates\n          ON new_template_name = name\n        WHERE gid = id\n        ;\n\n        DROP TABLE IF EXISTS updated_goals;\n        CREATE TEMP TABLE updated_goals\n        AS\n        WITH updater AS (\n        UPDATE "Goals" g\n        SET "goalTemplateId" = gtid\n        FROM unconnected_goals\n        WHERE g.id = gid\n          AND most_advanced_ar > 3\n          AND "goalTemplateId" IS NULL\n        RETURNING gid\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS unconnected_goals_after;\n        CREATE TEMP TABLE unconnected_goals_after\n        AS\n        WITH stat_progression AS (\n        SELECT\n          1 statord,\n          'deleted'::"enum_ActivityReports_calculatedStatus" statname\n        UNION SELECT 2, NULL\n        UNION SELECT 3,'draft'\n        UNION SELECT 4,'submitted'\n        UNION SELECT 5,'needs_action'\n        UNION SELECT 6,'approved'\n        ),\n        namematch AS (\n        SELECT\n          g.id gid,\n          gt.id gtid,\n          gr."regionId" region,\n          g."createdVia" = 'rtr' is_rtr,\n          MAX(statord) most_advanced_ar,\n          MAX(g."createdAt") template_last_used\n        FROM "Goals" g\n        JOIN "Grants" gr\n          ON g."grantId" = gr.id\n        LEFT JOIN "GoalTemplates" gt\n          ON TRIM(g.name) = TRIM(gt."templateName")\n          AND gr."regionId" = gt."regionId"\n        LEFT JOIN "ActivityReportGoals" arg\n          ON g.id = arg."goalId"\n        LEFT JOIN "ActivityReports" ar\n          ON arg."activityReportId" = ar.id\n        JOIN stat_progression\n          ON (ar."calculatedStatus" IS NULL AND statname IS NULL)\n          OR ar."calculatedStatus" = statname\n        WHERE g."goalTemplateId" IS NULL\n        GROUP BY 1,2,3,4\n        )\n        SELECT\n          gid,\n          gtid,\n          gtid IS NULL template_missing,\n          region,\n          is_rtr,\n          most_advanced_ar,\n          statname,\n          template_last_used\n        FROM namematch\n        JOIN stat_progression\n          ON most_advanced_ar = statord\n        WHERE region IS NOT NULL\n        ;\n\n        WITH befores AS (\n        SELECT\n          is_rtr,\n          statname,\n          COUNT(*) FILTER (WHERE template_missing) no_templ,\n          COUNT(*) cnt,\n          'before' beforeafter\n        FROM unconnected_goals\n        GROUP BY 1,2,5\n        ),\n        afters AS (\n        SELECT\n          is_rtr,\n          statname,\n          COUNT(*) FILTER (WHERE gtid IS NULL) no_templ,\n          COUNT(*) cnt,\n          'after' beforeafter\n        FROM unconnected_goals_after\n        GROUP BY 1,2,5\n        )\n        SELECT\n          b.is_rtr,\n          b.statname most_advanced_ar_status,\n          b.no_templ no_templ_before,\n          COALESCE(a.no_templ,0) no_templ_after,\n          b.cnt "before",\n          COALESCE(a.cnt,0) "after"\n        FROM befores b\n        LEFT JOIN afters a\n          ON (\n              (b.statname IS NULL AND a.statname IS NULL)\n              OR b.statname = a.statname\n            )\n          AND (\n              (b.is_rtr IS NULL AND a.is_rtr IS NULL)\n              OR b.is_rtr = a.is_rtr\n            )\n        ORDER BY 2,1\n        ;\n        \n        DROP TABLE IF EXISTS obj_template_mapping;\n        DROP TABLE IF EXISTS goal_template_mapping;\n        DROP TABLE IF EXISTS gtot_to_be_deleted;\n        DROP TABLE IF EXISTS updated_goal_template_obj_template;\n        DROP TABLE IF EXISTS updated_goal_tempalate_resources;\n        DROP TABLE IF EXISTS redirected_goals;\n        DROP TABLE IF EXISTS redirected_objectives;\n        DROP TABLE IF EXISTS deleted_gt_dupes;\n        DROP TABLE IF EXISTS deleted_ot_dupes;\n\n        DROP TABLE IF EXISTS unconnected_objectives;\n        DROP TABLE IF EXISTS created_obj_templates;\n        DROP TABLE IF EXISTS updated_objectives;\n        DROP TABLE IF EXISTS unconnected_objectives_after;\n\n        DROP TABLE IF EXISTS unconnected_goal;\n        DROP TABLE IF EXISTS created_goal_templates;\n        DROP TABLE IF EXISTS updated_goals;\n        DROP TABLE IF EXISTS unconnected_goals_after;
Executing (c78fe12a-e9d1-4761-bcce-d93689b43655): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240902000000-link-historical-objectives-to-templates: migrated (0.135s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20240909000000-ssdi-performance-enhancements: migrating =======
Executing (1454997c-c27b-45ef-b82b-9370baa894b4): START TRANSACTION;
Connection validated successfully
Executing (1454997c-c27b-45ef-b82b-9370baa894b4): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20240909000000-ssdi-performance-enhancements.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- Indexes for the "ActivityReports" table\n        -- Index on ActivityReports.calculatedStatus for filtering approved reports\n        CREATE INDEX IF NOT EXISTS activity_reports_calculated_status\n            ON "ActivityReports"("calculatedStatus");\n\n        -- Index on ActivityReports.endDate for filtering by end date\n        CREATE INDEX IF NOT EXISTS activity_reports_end_date\n            ON "ActivityReports"("endDate");\n\n        -- GIN index on array column ActivityReports.ttaType for array containment queries\n        CREATE INDEX IF NOT EXISTS activity_reports_tta_type\n            ON "ActivityReports" USING gin("ttaType");\n\n        -- Indexes for the "Goals" table\n        -- Index on goalTemplateId for FEI for faster filtering\n        CREATE INDEX IF NOT EXISTS  goals_template_id_19017\n            ON "Goals"("goalTemplateId")\n            WHERE "goalTemplateId" = 19017;\n\n        -- Indexes for the "Grants" table\n        -- Index on recipientId and status for faster filtering\n        CREATE INDEX IF NOT EXISTS grants_recipientid_status\n            ON "Grants" ("recipientId", status);\n\n        -- Index on id for filtering active grants\n        CREATE INDEX IF NOT EXISTS active_grants\n            ON "Grants" (id) WHERE status = 'Active';\n\n        -- Index on Grants.status for filtering active grants\n        CREATE INDEX IF NOT EXISTS grants_status\n            ON "Grants"("status");\n\n        -- Index on Grants.regionId for filtering by region\n        CREATE INDEX IF NOT EXISTS grants_region_id\n            ON "Grants"("regionId");\n\n        -- Index on Grants.stateCode for filtering by state\n        CREATE INDEX IF NOT EXISTS grants_state_code\n            ON "Grants"("stateCode");\n\n        -- Index on recipientId for filtering or joining with Recipients\n        CREATE INDEX IF NOT EXISTS grants_recipient_id\n            ON "Grants"("recipientId");\n\n        -- Indexes for the "Recipients" table\n        -- Index for filtering recipients by name\n        CREATE INDEX IF NOT EXISTS recipients_name\n            ON "Recipients" (name);\n\n        -- Indexes for the "MonitoringClassSummaries" table\n        -- Index on reportDeliveryDate for sorting by date\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_report_delivery_date\n            ON "MonitoringClassSummaries"("reportDeliveryDate");\n\n        -- Index on emotionalSupport for filtering based on emotional support\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_emotional_support\n            ON "MonitoringClassSummaries"("emotionalSupport");\n\n        -- Index on classroomOrganization for filtering based on classroom organization\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_classroom_organization\n            ON "MonitoringClassSummaries"("classroomOrganization");\n\n        -- Index on instructionalSupport for filtering based on instructional support\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_instructional_support\n            ON "MonitoringClassSummaries"("instructionalSupport");\n\n        -- Index on grantNumber and reportDeliveryDate for faster aggregations\n        CREATE INDEX IF NOT EXISTS monitoring_class_summaries_grant_number\n            ON "MonitoringClassSummaries" ("grantNumber", "reportDeliveryDate");\n\n        -- Indexes for the "MonitoringReviewStatuses" table\n        -- Index on statusId and name for filtering by status\n        CREATE INDEX IF NOT EXISTS monitoring_review_statuses_status_id_name\n            ON "MonitoringReviewStatuses" ("statusId", "name");\n\n        -- Indexes for the "GroupCollaborators" table\n        -- Index on groupId for fast lookups in group collaborations\n        CREATE INDEX IF NOT EXISTS group_collaborators_group_id\n            ON "GroupCollaborators"("groupId");\n\n        -- Index on userId for fast filtering by userId\n        CREATE INDEX IF NOT EXISTS group_collaborators_user_id\n            ON "GroupCollaborators"("userId");\n\n        -- Index for faster lookups on groupId and userId in GroupCollaborators\n        CREATE INDEX IF NOT EXISTS group_collaborators_group_id_user_id\n            ON "GroupCollaborators" ("groupId", "userId");\n\n        -- Index for faster lookups on groupId, userId, and deletedAt in GroupCollaborators\n        CREATE INDEX group_collaborators_group_user_deleted\n            ON "GroupCollaborators"("groupId", "userId", "deletedAt");\n\n        -- Indexes for the "Programs" table\n        -- Index for faster lookups on grantId and programType in Programs\n        CREATE INDEX IF NOT EXISTS programs_grantid_programtype\n            ON "Programs"("grantId", "programType");
Connection validated successfully
Executing (1454997c-c27b-45ef-b82b-9370baa894b4): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20240909000000-ssdi-performance-enhancements: migrated (0.094s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241002000000-clean-training-report-data: migrating =======
Executing (e850c97d-bc13-4704-9d39-f3f7c0f88aa1): START TRANSACTION;
Connection validated successfully
Executing (e850c97d-bc13-4704-9d39-f3f7c0f88aa1): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241002000000-clean-training-report-data.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): UPDATE "SessionReportPilots" SET data = data - 'event';\n        UPDATE "EventReportPilots" SET data = data - 'sessionReports';\n        UPDATE "SessionReportPilots"\n        SET data = COALESCE(\n          jsonb_set(\n                data,\n                '{recipients}',\n                (\n                    SELECT jsonb_agg(\n                        (\n                            elem\n                            || jsonb_build_object(\n                                'label', COALESCE(elem->>'label', elem->>'name'),\n                                'value', COALESCE(elem->>'value', elem->>'activityRecipientId')::INT\n                            )\n                        ) - 'name' - 'activityRecipientId'\n                    )\n                    FROM jsonb_array_elements(data->'recipients') AS t(elem)\n                ),\n                false\n            ),\n          data\n        )\n        WHERE data ? 'recipients';
Connection validated successfully
Executing (e850c97d-bc13-4704-9d39-f3f7c0f88aa1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241002000000-clean-training-report-data: migrated (0.018s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241016000000-cleanup-old-table-referances: migrating =======
Executing (643dfb77-1baa-4e97-9c36-eee92ee3c554): START TRANSACTION;
Connection validated successfully
Executing (643dfb77-1baa-4e97-9c36-eee92ee3c554): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241016000000-cleanup-old-table-referances.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): DO\n        $$\n        DECLARE\n            drop_stmt text;\n        BEGIN\n            FOR drop_stmt IN\n                WITH all_tables AS (\n                    SELECT table_name\n                    FROM information_schema.tables\n                    WHERE table_type = 'BASE TABLE' AND table_schema NOT IN ('information_schema', 'pg_catalog')\n                ),\n                all_functions AS (\n                    SELECT routine_name\n                    FROM information_schema.routines\n                    WHERE routine_type = 'FUNCTION' AND specific_schema NOT IN ('information_schema', 'pg_catalog')\n                )\n                SELECT 'DROP FUNCTION "' || f.routine_name || '"();' AS drop_statement\n                FROM all_functions f\n                LEFT JOIN all_tables t\n                ON f.routine_name LIKE 'ZALNoTruncateF' || t.table_name\n                OR f.routine_name LIKE 'ZALNoDeleteF' || t.table_name\n                OR f.routine_name LIKE 'ZALNoUpdateF' || t.table_name\n                WHERE t.table_name IS NULL\n                AND (f.routine_name LIKE 'ZALNoTruncateF%'\n                    OR f.routine_name LIKE 'ZALNoDeleteF%'\n                    OR f.routine_name LIKE 'ZALNoUpdateF%')\n                AND f.routine_name NOT LIKE '%DDL'\n            LOOP\n                EXECUTE drop_stmt;\n            END LOOP;\n        END\n        $$;
Connection validated successfully
Executing (643dfb77-1baa-4e97-9c36-eee92ee3c554): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241016000000-cleanup-old-table-referances: migrated (0.295s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241016000001-fix-pfmo-to-pmfo: migrating =======
Executing (6b3ca1b5-8c25-4479-a2ff-acf5aef33335): START TRANSACTION;
Connection validated successfully
Executing (6b3ca1b5-8c25-4479-a2ff-acf5aef33335): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241016000001-fix-pfmo-to-pmfo.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- There are still two places the PMFO national center name was erroneously\n        -- recorded as PFMO:\n        -- - EventReportPilotNationalCenterUsers.nationalCenterName\n        -- - SessionReportPilots.data->objectiveTrainers\n\n        DROP TABLE IF EXISTS corrected_erpncu;\n        CREATE TEMP TABLE corrected_erpncu\n        AS\n        WITH updater AS (\n        UPDATE "EventReportPilotNationalCenterUsers"\n        SET "nationalCenterName" = 'PMFO'\n        WHERE "nationalCenterName" = 'PFMO'\n        RETURNING id\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS corrected_srp;\n        CREATE TEMP TABLE corrected_srp\n        AS\n        WITH updater AS (\n        UPDATE "SessionReportPilots"\n        SET data = regexp_replace(data::text,'PFMO','PMFO')::jsonb\n        RETURNING id\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        DROP TABLE IF EXISTS corrected_erp;\n        CREATE TEMP TABLE corrected_erp\n        AS\n        WITH updater AS (\n        UPDATE "EventReportPilots"\n        SET data = regexp_replace(data::text,'PFMO','PMFO')::jsonb\n        RETURNING id\n        )\n        SELECT * FROM UPDATER\n        ;\n\n        SELECT 'fixed EventReportPilotNationalCenterUsers' operation, COUNT(*) cnt FROM corrected_erpncu\n        UNION\n        SELECT 'fixed SessionReportPilots', COUNT(*) FROM corrected_srp\n        UNION\n        SELECT 'fixed EventReportPilots', COUNT(*) FROM corrected_erp\n        ;
Connection validated successfully
Executing (6b3ca1b5-8c25-4479-a2ff-acf5aef33335): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241016000001-fix-pfmo-to-pmfo: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241017203311-populate-grant-replacements: migrating =======
Executing (5ef9e0bb-43bd-4118-95b3-f45073417247): START TRANSACTION;
Connection validated successfully
Executing (5ef9e0bb-43bd-4118-95b3-f45073417247): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241017203311-populate-grant-replacements.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (5ef9e0bb-43bd-4118-95b3-f45073417247): CREATE TABLE IF NOT EXISTS "GrantReplacementTypes" ("id"  SERIAL , "name" TEXT NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "deletedAt" TIMESTAMP WITH TIME ZONE, "mapsTo" INTEGER REFERENCES "GrantReplacementTypes" ("id"), PRIMARY KEY ("id"));
Executing (5ef9e0bb-43bd-4118-95b3-f45073417247): INSERT INTO "GrantReplacementTypes" ("name")\n          SELECT DISTINCT gr."inactivationReason"\n          FROM "Grants" gr\n          WHERE gr."inactivationReason" IS NOT NULL;
Executing (5ef9e0bb-43bd-4118-95b3-f45073417247): CREATE TABLE IF NOT EXISTS "GrantReplacements" ("id"  SERIAL , "replacedGrantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "replacingGrantId" INTEGER NOT NULL REFERENCES "Grants" ("id"), "grantReplacementTypeId" INTEGER REFERENCES "GrantReplacementTypes" ("id"), "replacementDate" DATE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (5ef9e0bb-43bd-4118-95b3-f45073417247): INSERT INTO "GrantReplacements" (\n          "replacedGrantId",\n          "replacingGrantId",\n          "replacementDate",\n          "grantReplacementTypeId",\n          "createdAt",\n          "updatedAt"\n        )\n        SELECT\n          gr1."oldGrantId" AS "replacedGrantId",\n          gr1."id" AS "replacingGrantId",\n          gr2."inactivationDate" AS "replacementDate",\n          grt.id AS "grantReplacementTypeId",\n          gr1."createdAt",\n          gr1."updatedAt"\n        FROM "Grants" gr1\n        JOIN "Grants" gr2\n        ON gr1."oldGrantId" = gr2.id\n        LEFT JOIN "GrantReplacementTypes" grt\n        ON gr1."inactivationReason"::text = grt.name\n        WHERE gr1."oldGrantId" IS NOT NULL;
Executing (5ef9e0bb-43bd-4118-95b3-f45073417247): ALTER TABLE "public"."Grants" DROP COLUMN "oldGrantId";
Executing (5ef9e0bb-43bd-4118-95b3-f45073417247): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241017203311-populate-grant-replacements: migrated (0.073s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241017203312-create-grant-relationship-to-active: migrating =======
Executing (bd647028-e4df-414b-9006-a27b623c476d): START TRANSACTION;
Connection validated successfully
Executing (bd647028-e4df-414b-9006-a27b623c476d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241017203312-create-grant-relationship-to-active.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (bd647028-e4df-414b-9006-a27b623c476d): CREATE MATERIALIZED VIEW "GrantRelationshipToActive" AS\n        WITH RECURSIVE recursive_cte AS (\n            -- Base query: Case 1: Select all Active grants from the "Grants" table\n            SELECT\n                g."id" AS "grantId",\n                g."id" AS "activeGrantId",\n                ARRAY[g."id"] AS "visited_grantIds"  -- Initialize the array with the first grantId\n            FROM "Grants" g\n            WHERE g."status" = 'Active'\n\n            UNION ALL\n\n            -- Base query: Case 2: Select all inactive grants from the "Grants" table that have replaced other grants, but that have not been replaced\n            SELECT\n                g."id" AS "grantId",\n                NULL::int AS "activeGrantId",\n                ARRAY[g."id"] AS "visited_grantIds"  -- Initialize the array with the first grantId\n            FROM "Grants" g\n            JOIN "GrantReplacements" gr1\n            ON g.id = gr1."replacingGrantId"\n            LEFT JOIN "GrantReplacements" gr2\n            ON g.id = gr2."replacedGrantId"\n            WHERE g.status != 'Active'\n            AND gr2.id IS NULL\n\n            UNION ALL\n\n            -- Base query: Case 3: Select all inactive grants from the "Grants" table that have never replaced other grants or been replaced\n            SELECT\n                g."id" AS "grantId",\n                NULL::int AS "activeGrantId",\n                ARRAY[g."id"] AS "visited_grantIds"  -- Initialize the array with the first grantId\n            FROM "Grants" g\n            JOIN "GrantReplacements" gr\n            ON g.id = gr."replacingGrantId"\n            OR g.id = gr."replacedGrantId"\n            WHERE g.status != 'Active'\n            AND gr.id IS NULL\n\n            UNION ALL\n\n            -- Recursive query: Use an array to track visited grantIds\n            SELECT\n                g."id" AS "grantId",\n                rcte."activeGrantId",\n                "visited_grantIds" || g."id"  -- Append the current grantId to the array\n            FROM recursive_cte rcte\n            JOIN "GrantReplacements" gr\n            ON rcte."grantId" = gr."replacingGrantId"\n            JOIN "Grants" g\n            ON g."id" = gr."replacedGrantId"\n            WHERE g."id" != ALL("visited_grantIds")  -- Ensure the current grantId hasn't been visited\n        )\n        SELECT DISTINCT\n            ROW_NUMBER() OVER (ORDER BY rcte."grantId", rcte."activeGrantId") AS "id",  -- Add row number as "id"\n            rcte."grantId",\n            rcte."activeGrantId"\n        FROM recursive_cte rcte\n        WITH NO DATA;
Executing (bd647028-e4df-414b-9006-a27b623c476d): CREATE INDEX "idx_GrantRelationshipToActive_grantId_activeGrantId"\n        ON "GrantRelationshipToActive" ("grantId", "activeGrantId");
Executing (bd647028-e4df-414b-9006-a27b623c476d): REFRESH MATERIALIZED VIEW "GrantRelationshipToActive";
Executing (bd647028-e4df-414b-9006-a27b623c476d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241017203312-create-grant-relationship-to-active: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241030000000-descriptor-race: migrating =======
Executing (77779952-8135-4284-871a-fede7dc1b206): START TRANSACTION;
Connection validated successfully
Executing (77779952-8135-4284-871a-fede7dc1b206): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241030000000-descriptor-race.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (77779952-8135-4284-871a-fede7dc1b206): CREATE OR REPLACE FUNCTION public."ZAFDescriptorToID"(\n            _param_id text\n        )\n        RETURNS integer\n        LANGUAGE plpgsql\n        COST 100\n        VOLATILE PARALLEL UNSAFE\n        AS $BODY$\n        DECLARE\n            Did INTEGER;\n        BEGIN\n            IF _param_id IS NOT NULL THEN\n                -- Select the minimum id where descriptor matches\n                SELECT MIN(id) INTO Did \n                FROM "ZADescriptor" \n                WHERE descriptor = _param_id;\n\n                -- If no matching descriptor is found, insert it and retrieve the new id\n                IF Did IS NULL THEN\n                    INSERT INTO "ZADescriptor" (descriptor) \n                    VALUES (_param_id)\n                    RETURNING id INTO Did;\n                END IF;\n            END IF;\n\n            RETURN Did;\n        END\n        $BODY$;
Executing (77779952-8135-4284-871a-fede7dc1b206): WITH duplicates AS (\n            SELECT\n                id,\n                descriptor,\n                ROW_NUMBER() OVER (\n                    PARTITION BY descriptor\n                    ORDER BY id ASC\n                ) AS rn\n            FROM\n                public."ZADescriptor"\n        )\n        DELETE FROM public."ZADescriptor"\n        WHERE id IN (\n            SELECT id FROM duplicates WHERE rn > 1\n        );
Executing (77779952-8135-4284-871a-fede7dc1b206): ALTER TABLE public."ZADescriptor"\n        ADD CONSTRAINT unique_descriptor UNIQUE (descriptor);
Executing (77779952-8135-4284-871a-fede7dc1b206): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241030000000-descriptor-race: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241030114000-monitoring-import-cadence: migrating =======
Executing (dabbc238-54aa-4d84-ba4f-4965d44a6ce5): START TRANSACTION;
Connection validated successfully
Executing (dabbc238-54aa-4d84-ba4f-4965d44a6ce5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241030114000-monitoring-import-cadence.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (dabbc238-54aa-4d84-ba4f-4965d44a6ce5): UPDATE public."Imports"\n        SET schedule = '30 2,8,14,20 * * *'\n        WHERE id = 1;
Executing (dabbc238-54aa-4d84-ba4f-4965d44a6ce5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241030114000-monitoring-import-cadence: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241030194608-insert-standard-goals: migrating =======
Executing (1b0fac17-da66-4e6f-8eb2-7737171f1784): START TRANSACTION;
Connection validated successfully
Executing (1b0fac17-da66-4e6f-8eb2-7737171f1784): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241030194608-insert-standard-goals.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1b0fac17-da66-4e6f-8eb2-7737171f1784): INSERT INTO "GoalTemplates" ("creationMethod","hash","createdAt","updatedAt","templateNameModifiedAt","templateName") VALUES ('Curated','c0f559e913f1f32332d08ce9b0d1bbeb','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Teaching Practices) The recipient will implement systems and services that ensure eﬀective adult-child interactions and responsive care using eﬀective teaching and home visiting practices.'),('Curated','4f47ab526837bd4cd510af5796b3ca5d','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Child Safety) The recipient will implement systems and services to ensure that everyone promotes a culture of program safety, so children are kept safe at all times.'),('Curated','f744444d6c9c845fe001e7d95d84fcb6','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(ERSEA) The recipient will implement systems and services to ensure their Eligibility, Recruitment, Selection, Enrollment, and Attendance procedures meet the needs of their children, families, and community.'),('Curated','6f53db294964271e9399aa9b931f7fd2','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Governance) The recipient will establish and maintain a formal structure for program governance that ensures clear roles, responsibilities and procedures, eﬀective training, and representation of families and the community.'),('Curated','d6ee0cd4f720bd8036a19f4c42a18bad','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Fiscal Management) The recipient will implement strong fiscal management and reporting systems to ensure the safeguarding of federal funds, facilities, and resources.'),('Curated','d36d9df2627c62fd08b1a4c4891e040a','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Development and Learning) The recipient will implement child development and early learning services that are developmentally, culturally, and linguistically appropriate for all children and families.'),('Curated','858eb05049c3fc1239f62ca04a0b8852','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Mental Health) The recipient will implement systems and services that promote the mental and behavioral health of all children and families.'),('Curated','b55bb767557e703ece860e1e6aa2858f','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Physical Health) The recipient will implement systems and services that ensure expectant families and children''s health, oral health, and nutrition needs are met in developmentally, culturally, and linguistically appropriate ways.'),('Curated','d4a521307b6bcf2e81306563ba5bcdcb','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(DEIA) The recipient will implement comprehensive systems and services that promote diversity, equity, inclusion, accessibility, and belonging.'),('Curated','f1d8d95e92edee5ba9a0fe773ecd06f8','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Family Engagement) The recipient will implement family engagement strategies that are relationship-based and culturally and linguistically appropriate.'),('Curated','695d11691cba086703a15bb8f5368302','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Family Support) The recipient will implement collaborative systems and services with families and community partners to support family well-being and the needs of vulnerable families.'),('Curated','d2826c6b269dfc701f381382df699139','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Professional Development) The recipient will implement a systematic approach to staﬀ training and professional development that assists staﬀ in acquiring, refining, or increasing the knowledge and skills needed to provide high-quality, comprehensive services.'),('Curated','5590cde3b952790906aaa882ce5a2de3','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Workforce Development) The recipient will implement systems to recruit, hire, onboard, support, and retain staﬀ to ensure all program staﬀ have suﬃcient knowledge, experience, competencies, and resources to fulfill the roles and responsibilities of their positions.'),('Curated','9e869362b539be9d04e469ad464d1624','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(New Leaders) The recipient''s new leader(s) will identify and use resources, professional development, and access to necessary regulations to meet the needs of their role(s) and responsibilities.'),('Curated','8579cdc2adb3fef3ef10bdf6eaf36ae3','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(CQI and Data) The recipient will implement data and ongoing monitoring systems to inform continuous quality improvement.'),('Curated','01a23ac82b8e7dba8a049e760310ca56','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Program Structure) The recipient will implement management and program structures that provide eﬀective oversight and administration and meet the needs of the staﬀ, families, and communities.'),('Curated','ca72eb2ae12059082597fd767443a713','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(Disaster Recovery) The recipient will implement systems and services to support children, families, and staﬀ with recovering from disasters.'),('Curated','d1f8801cee1bbde69e119451e10ac6c4','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','2025-03-28 23:19:04.998 +00:00','(RAN investigation) The recipient will implement systems and services to address a reported child incident during the RO investigation.');
Executing (1b0fac17-da66-4e6f-8eb2-7737171f1784): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241030194608-insert-standard-goals: migrated (0.062s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241031142128-update-fei-class-text: migrating =======
Executing (6722542f-f4a7-475a-8511-41db77090514): START TRANSACTION;
Connection validated successfully
Executing (6722542f-f4a7-475a-8511-41db77090514): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241031142128-update-fei-class-text.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6722542f-f4a7-475a-8511-41db77090514): UPDATE "GoalTemplates" \n          SET "templateName" = '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment).',\n              "hash" = md5('(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment).')\n          WHERE id = 19017;\n\n        UPDATE "GoalTemplates" \n            SET "templateName" = '(CLASS Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores).', \n                "hash" = md5('(CLASS Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores).')\n            WHERE id = 18172;\n\n        UPDATE "Goals"\n            SET "name" = '(FEI) The recipient will eliminate and/or reduce underenrollment as part of the Full Enrollment Initiative (as measured by monthly reported enrollment).'\n            WHERE "goalTemplateId" = 19017;\n\n        UPDATE "Goals"\n            SET "name" = '(CLASS Monitoring) Grant recipient will improve teacher-child interactions (as measured by CLASS scores).'\n            WHERE "goalTemplateId" = 18172;
Executing (6722542f-f4a7-475a-8511-41db77090514): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241031142128-update-fei-class-text: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241031203552-GrantRelationshipToActive: migrating =======
Executing (b3816360-aebf-48ef-9647-42bc662a8340): START TRANSACTION;
Connection validated successfully
Executing (b3816360-aebf-48ef-9647-42bc662a8340): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241031203552-GrantRelationshipToActive.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (b3816360-aebf-48ef-9647-42bc662a8340): DROP MATERIALIZED VIEW IF EXISTS public."GrantRelationshipToActive";\n\n        CREATE MATERIALIZED VIEW IF NOT EXISTS public."GrantRelationshipToActive"\n        AS\n        WITH\n          RECURSIVE recursive_cte AS (\n            SELECT g.id AS "grantId",\n                g.id AS "activeGrantId",\n                ARRAY[g.id] AS "visited_grantIds"\n              FROM "Grants" g\n              WHERE g.status::text = 'Active'\n            UNION\n            SELECT g.id AS "grantId",\n                NULL::integer AS "activeGrantId",\n                ARRAY[g.id] AS "visited_grantIds"\n              FROM "Grants" g\n                JOIN "GrantReplacements" gr1 ON g.id = gr1."replacingGrantId"\n                LEFT JOIN "GrantReplacements" gr2 ON g.id = gr2."replacedGrantId"\n              WHERE g.status::text <> 'Active' AND gr2.id IS NULL\n            UNION\n            SELECT g.id AS "grantId",\n                NULL::integer AS "activeGrantId",\n                ARRAY[g.id] AS "visited_grantIds"\n              FROM "Grants" g\n                JOIN "GrantReplacements" gr ON g.id = gr."replacingGrantId" OR g.id = gr."replacedGrantId"\n              WHERE g.status::text <> 'Active' AND gr.id IS NULL\n            UNION\n            SELECT g.id AS "grantId",\n                rcte_1."activeGrantId",\n                rcte_1."visited_grantIds" || g.id\n              FROM recursive_cte rcte_1\n                JOIN "GrantReplacements" gr ON rcte_1."grantId" = gr."replacingGrantId"\n                JOIN "Grants" g ON g.id = gr."replacedGrantId"\n              WHERE g.id <> ALL (rcte_1."visited_grantIds")\n            ),\n            distinct_cte AS (\n              SELECT DISTINCT *\n              FROM recursive_cte\n            )\n        SELECT DISTINCT \n          row_number() OVER (ORDER BY dcte."grantId", dcte."activeGrantId") AS id,\n          dcte."grantId",\n          dcte."activeGrantId"\n        FROM distinct_cte dcte\n        ORDER BY 2,3\n        WITH DATA;\n\n        CREATE INDEX "idx_GrantRelationshipToActive_grantId_activeGrantId"\n          ON public."GrantRelationshipToActive" USING btree\n          ("grantId", "activeGrantId");
Executing (b3816360-aebf-48ef-9647-42bc662a8340): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241031203552-GrantRelationshipToActive: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241112161634-add-regional-program-director-role: migrating =======
Executing (458ce9ee-f9c0-495f-9851-459f67fcde60): START TRANSACTION;
Connection validated successfully
Executing (458ce9ee-f9c0-495f-9851-459f67fcde60): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241112161634-add-regional-program-director-role.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (458ce9ee-f9c0-495f-9851-459f67fcde60): INSERT INTO "Roles" ("name", "fullName", "isSpecialist", "createdAt", "updatedAt") VALUES ('RPD', 'Regional Program Director', false, now(), now());
Executing (458ce9ee-f9c0-495f-9851-459f67fcde60): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241112161634-add-regional-program-director-role: migrated (0.021s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241113165852-add-monitoring-goal-template: migrating =======
Executing (6f64b4ba-14d0-468d-b7b7-ce24e24458fc): START TRANSACTION;
Connection validated successfully
Executing (6f64b4ba-14d0-468d-b7b7-ce24e24458fc): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241113165852-add-monitoring-goal-template.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (6f64b4ba-14d0-468d-b7b7-ce24e24458fc): INSERT INTO "GoalTemplates" (\n          hash,\n          "templateName",\n          "regionId",\n          "creationMethod",\n          "createdAt",\n          "updatedAt",\n          "lastUsed",\n          "templateNameModifiedAt"\n        ) Values (\n          MD5(TRIM('(Monitoring) The recipient will develop and implement a QIP/CAP to address monitoring findings.')),\n          '(Monitoring) The recipient will develop and implement a QIP/CAP to address monitoring findings.',\n          null,\n          'Curated'::"enum_GoalTemplates_creationMethod",\n          current_timestamp,\n          current_timestamp,\n          NULL,\n          current_timestamp\n        );
Executing (6f64b4ba-14d0-468d-b7b7-ce24e24458fc): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241113165852-add-monitoring-goal-template: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241113171838-add-system-generated-created-via-enum: migrating =======
Executing (8e0df8b7-14a8-456c-b3c9-b4baa19ed042): START TRANSACTION;
Connection validated successfully
Executing (8e0df8b7-14a8-456c-b3c9-b4baa19ed042): -- rename the existing type\n  ALTER TYPE "enum_GoalTemplates_creationMethod" RENAME TO "enum_GoalTemplates_creationMethod_old";\n  -- create the new type\n  CREATE TYPE "enum_GoalTemplates_creationMethod" AS ENUM(\n    'Automatic',\n'Curated',\n'System Generated'\n  );
Executing (8e0df8b7-14a8-456c-b3c9-b4baa19ed042): -- update the columns to use the new type\n  ALTER TABLE "GoalTemplates" ALTER COLUMN "creationMethod" set default null;\n  ALTER TABLE "GoalTemplates" ALTER COLUMN "creationMethod" TYPE "enum_GoalTemplates_creationMethod" USING "creationMethod"::text::"enum_GoalTemplates_creationMethod";\n  \n  -- remove the old type\n  DROP TYPE "enum_GoalTemplates_creationMethod_old";
Executing (8e0df8b7-14a8-456c-b3c9-b4baa19ed042): UPDATE "GoalTemplates"\n        SET "creationMethod" = 'System Generated'::"enum_GoalTemplates_creationMethod"\n        WHERE "templateName" = '(Monitoring) The recipient will develop and implement a QIP/CAP to address monitoring findings.';
Executing (8e0df8b7-14a8-456c-b3c9-b4baa19ed042): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241113171838-add-system-generated-created-via-enum: migrated (0.039s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241114000000-format-comlog-comdate-history: migrating =======
Executing (b2ed20ab-31fb-497f-9790-0d4575c892ef): START TRANSACTION;
Connection validated successfully
Executing (b2ed20ab-31fb-497f-9790-0d4575c892ef): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241114000000-format-comlog-comdate-history.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This reformats all historical communicationDate values to mm/dd/yyyy\n        -- \n        -- Assumptions of preexisting data:\n        -- -always month-day-year\n        -- -always separated by a slash, period, or space [/. ]\n        -- -if there is an extra separator it impacts the year\n        -- -if the third position is at least two characters, it's the year, else it's the fourth position\n        -- -the first four characters of a long year string holds the year\n        --\n        -- These assumptions are based on the data we have, so aren't guaranteed to be correct if this is rerun.\n        -- However the logic is slightly overengineered for extra robustness if new errors show up. At the time of\n        -- writing, this produces all valid strings where to_date(data->>'communicationDate','mm/dd/yyyy') succeeds\n\n        DROP TABLE IF EXISTS comdate_corrections;\n        CREATE TEMP TABLE comdate_corrections\n        AS\n        WITH reseparated AS (\n        SELECT\n          id clid,\n          data->>'communicationDate' orig,\n          -- replace [-. ] seperators (only - has been seen) with / so the subsequent logic always works\n          regexp_replace(data->>'communicationDate','[-. ]','/','g') reseparated\n        FROM "CommunicationLogs"\n        WHERE data->>'communicationDate' !~ '^\d{2}/\d{2}/\d{4}$'\n          AND COALESCE(data->>'communicationDate','') != ''\n        ),\n        date_particles AS (\n        SELECT\n          clid,\n          orig,\n          SPLIT_PART(reseparated,'/',1) month_part,\n          SPLIT_PART(reseparated,'/',2) day_part,\n          -- check where the year part is because sometimes separators between day and year are doubled\n          CASE\n            WHEN LENGTH(SPLIT_PART(reseparated,'/',3)) > 1 THEN SPLIT_PART(reseparated,'/',3)\n            ELSE SPLIT_PART(reseparated,'/',4)\n          END AS year_part\n        FROM reseparated\n        ),\n        padded_particles AS (\n        SELECT\n          clid,\n          orig,\n          LPAD(month_part,2,'0') padded_month,\n          LPAD(day_part,2,'0') padded_day,\n          -- pull out only the leftmost 4 characters, but pad them with the century if we only two chars\n          LPAD(\n            LEFT(year_part,4),\n            4,\n            '20'\n          ) padded_year\n        FROM date_particles\n        )\n        SELECT\n          clid,\n          orig,\n          padded_month || '/' || padded_day || '/' || padded_year reformat\n        FROM padded_particles\n        ;\n\n        UPDATE "CommunicationLogs"\n        SET data = jsonb_set(data, '{communicationDate}', to_jsonb(reformat))\n        FROM comdate_corrections\n        WHERE id = clid\n        ;
Connection validated successfully
Executing (b2ed20ab-31fb-497f-9790-0d4575c892ef): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241114000000-format-comlog-comdate-history: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241114000001-make-program-dates-datetypes: migrating =======
Executing (7d8f404d-a936-42d3-b17c-32a931c63f0d): START TRANSACTION;
Connection validated successfully
Executing (7d8f404d-a936-42d3-b17c-32a931c63f0d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241114000001-make-program-dates-datetypes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7d8f404d-a936-42d3-b17c-32a931c63f0d): -- change Programs startDate and endDate types to date\n        ALTER TABLE "Programs" ALTER COLUMN "startDate" TYPE date\n        USING (NULLIF("startDate", '')::date)\n        ;\n        ALTER TABLE "Programs" ALTER COLUMN "endDate" TYPE date\n        USING (NULLIF("endDate", '')::date)\n        ;
Executing (7d8f404d-a936-42d3-b17c-32a931c63f0d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241114000001-make-program-dates-datetypes: migrated (0.048s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241114190341-remove-grant-replacement-type-dupes: migrating =======
Executing (85af4bd6-6907-42ca-ac65-94b09c8916a3): START TRANSACTION;
Connection validated successfully
Executing (85af4bd6-6907-42ca-ac65-94b09c8916a3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241114190341-remove-grant-replacement-type-dupes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (85af4bd6-6907-42ca-ac65-94b09c8916a3): SELECT "name", array_agg(id ORDER BY "createdAt") AS ids\n          FROM "GrantReplacementTypes"\n          GROUP BY "name"\n          HAVING COUNT(*) > 1
Executing (85af4bd6-6907-42ca-ac65-94b09c8916a3): DELETE FROM "GrantReplacements" gr\n          USING (\n            SELECT\n              MIN(id) AS id,\n              "replacedGrantId",\n              "replacingGrantId",\n              "grantReplacementTypeId"\n            FROM "GrantReplacements"\n            GROUP BY "replacedGrantId", "replacingGrantId", "grantReplacementTypeId"\n            HAVING COUNT(*) > 1\n          ) subquery\n          WHERE gr."id" > subquery.id\n          AND gr. "replacedGrantId" = subquery."replacedGrantId"\n          AND gr. "replacingGrantId" = subquery."replacingGrantId"\n          AND gr. "grantReplacementTypeId" = subquery."grantReplacementTypeId"
Executing (85af4bd6-6907-42ca-ac65-94b09c8916a3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241114190341-remove-grant-replacement-type-dupes: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241114222525-add-monitoring-feature-flag: migrating =======
Executing (058d01f9-4c31-4975-9287-92292433d4a8): START TRANSACTION;
Connection validated successfully
Executing (058d01f9-4c31-4975-9287-92292433d4a8): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241114222525-add-monitoring-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'monitoring_integration';
Connection validated successfully
Executing (058d01f9-4c31-4975-9287-92292433d4a8): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241114222525-add-monitoring-feature-flag: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20241125000000-fix-missing-goal-source: migrating =======
Executing (b2a4a8e0-d2b4-4294-b40d-0e2fe57c551f): START TRANSACTION;
Connection validated successfully
Executing (b2a4a8e0-d2b4-4294-b40d-0e2fe57c551f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20241125000000-fix-missing-goal-source.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This restores Goal.createdVia values that were not being set at creation time\n        -- We considered also trying to restore Goal.source but decided that it it wasn't\n        -- worth the ambiguity\n\n        DROP TABLE IF EXISTS cv_modifications;\n        CREATE TEMP TABLE cv_modifications AS\n        SELECT\n          g.id gid,\n          CASE\n            WHEN zd.descriptor IN ('createGoals','createGoalsFromTemplate') THEN 'rtr'::"enum_Goals_createdVia"\n            WHEN zd.descriptor IN ('saveReport','createGoalsForReport') THEN 'activityReport'::"enum_Goals_createdVia"\n          END new_created_via\n        FROM "GoalTemplates" gt\n        JOIN "Goals" g\n          ON gt.id = g."goalTemplateId"\n        JOIN "ZALGoals" zg\n          ON g.id = zg.data_id\n          AND zg.dml_type = 'INSERT'\n        JOIN "ZADescriptor" zd\n          ON zg.descriptor_id = zd.id\n        WHERE gt."creationMethod" = 'Curated'\n          AND g."createdAt" > '2024-10-31'\n          AND g."createdVia" IS NULL\n          AND zd.descriptor IN ('createGoals','saveReport','createGoalsForReport','createGoalsFromTemplate')\n        ORDER BY 1;\n\n        DROP TABLE IF EXISTS updated_goals;\n        CREATE TEMP TABLE updated_goals\n        AS\n        WITH updater AS (\n        UPDATE "Goals"\n        SET "createdVia" = new_created_via\n        FROM cv_modifications\n        WHERE id = gid\n          AND "createdVia" IS NULL -- just here for extra safety\n        RETURNING id gid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- These numbers should add up\n        SELECT 'goals to be updated' item, COUNT(*) cnt FROM cv_modifications\n        UNION\n        SELECT\n          'new rtr',\n          COUNT(*)\n        FROM "Goals"\n        JOIN updated_goals\n          ON id = gid\n        WHERE "createdVia" = 'rtr'\n        UNION\n        SELECT\n          'new activityReport',\n          COUNT(*)\n        FROM "Goals"\n        JOIN updated_goals\n          ON id = gid\n        WHERE "createdVia" = 'activityReport'\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (b2a4a8e0-d2b4-4294-b40d-0e2fe57c551f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20241125000000-fix-missing-goal-source: migrated (0.032s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250107000000-clean-orphan-objectives: migrating =======
Executing (d39b1b1e-9a86-4768-9125-4bd8e2cf95d9): START TRANSACTION;
Connection validated successfully
Executing (d39b1b1e-9a86-4768-9125-4bd8e2cf95d9): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250107000000-clean-orphan-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This marks as deleted any objectives for which all of the following are true:\n        -- - created within an AR\n        -- - Is currently linked to no AR\n        -- - Is not already marked as deleted\n\n        DROP TABLE IF EXISTS orphan_obj;\n        CREATE TEMP TABLE orphan_obj AS\n        SELECT o.id oid\n        FROM "Objectives" o\n        LEFT JOIN "ActivityReportObjectives" aro\n          ON o.id = aro."objectiveId"\n        WHERE o."createdVia" = 'activityReport'\n          AND o."deletedAt" IS NULL\n          AND aro.id IS NULL\n        ORDER BY 1;\n\n        DROP TABLE IF EXISTS updated_obj;\n        CREATE TEMP TABLE updated_obj\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Objectives"\n        SET "deletedAt" = nowts\n        FROM orphan_obj\n        CROSS JOIN nowtime\n        WHERE oid = id\n        RETURNING id deleted_oid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- The first two numbers should match and the last should be 0\n        SELECT 1 ord,'orphaned objectives' item, COUNT(*) cnt FROM orphan_obj\n        UNION\n        SELECT 2, 'objectives marked deleted' , COUNT(*)  FROM updated_obj\n        UNION\n        SELECT 3, 'remaining orphaned objectives', COUNT(*) FROM (\n          SELECT * FROM orphan_obj\n          EXCEPT\n          SELECT * FROM updated_obj\n        ) a\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (d39b1b1e-9a86-4768-9125-4bd8e2cf95d9): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250107000000-clean-orphan-objectives: migrated (0.037s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250107000001-merge-duplicate-objectives: migrating =======
Executing (2e0acb8b-18d4-4f1e-bbf0-02cb5fbc5d84): START TRANSACTION;
Connection validated successfully
Executing (2e0acb8b-18d4-4f1e-bbf0-02cb5fbc5d84): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250107000001-merge-duplicate-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This merges duplicate Objectives that were EITHER:\n        -- - created on the same AR\n        -- - created on different ARs, but are not 'Completed'\n        --\n        -- The merged-away Objective will be merged into a target Objective with a greater\n        -- status progression than the merged-away Objective and is EITHER:\n        -- - the next duplicate Objective in time to be set to "Completed"\n        -- - the most advanced Objective when there is no next "Completed" Objective\n\n        -- Find all candidate duplicates\n\n        DROP TABLE IF EXISTS objective_merges;\n        CREATE TEMP TABLE objective_merges\n        AS\n        WITH candidate_dupe_pairs AS (\n        -- Get all the title, goalId pairs seen more than once\n        SELECT\n          title d_title,\n          "goalId" d_gid\n        FROM "Objectives"\n        WHERE "deletedAt" IS NULL\n        GROUP BY 1,2\n        HAVING COUNT(*) > 1\n        ), candidate_dupes AS (\n        -- get all the Objectives that have the candidate dupe pair\n        SELECT\n          id oid,\n          status,\n          MD5(d_title) || '-' || d_gid cd_set_signature,\n          "createdAt" cd_create_time\n        FROM candidate_dupe_pairs\n        JOIN "Objectives"\n          ON title = d_title\n          AND "goalId" = d_gid\n        WHERE "deletedAt" IS NULL\n        ), uncompleted_sets AS (\n        -- only sets with at least one uncompleted Objective should be examined\n        SELECT DISTINCT cd_set_signature us_signature\n        FROM candidate_dupes\n        WHERE status != 'Complete'\n        ), completed_candidates AS (\n        -- link completed Objectives to their completion events\n        SELECT\n          oid c_oid,\n          dml_timestamp complete_time,\n          ROW_NUMBER() OVER (\n            PARTITION BY oid\n            ORDER BY dml_timestamp DESC\n          ) final_complete_rank\n        FROM candidate_dupes\n        JOIN uncompleted_sets\n          ON cd_set_signature = us_signature\n        JOIN "ZALObjectives"\n          ON data_id = oid\n        WHERE status = 'Complete'\n          AND new_row_data->>'status' = 'Complete'\n        ), dupe_collections AS (\n        -- create a collection of dupes that might need merging\n        SELECT\n          oid,\n          status,\n          cd_create_time create_time,\n          complete_time,\n          us_signature set_signature\n        FROM candidate_dupes\n        JOIN uncompleted_sets\n          ON cd_set_signature = us_signature\n        LEFT JOIN completed_candidates\n          ON oid = c_oid\n          AND final_complete_rank = 1\n        ), future_completes AS (\n        -- Link uncomplete Objectives to any future dupes that are Complete\n        SELECT\n          base.oid uncomplete_oid,\n          future_completes.oid future_complete_oid,\n          ROW_NUMBER() OVER (\n            PARTITION BY base.oid\n            ORDER BY future_completes.complete_time\n          ) closest_complete_rank,\n          base.set_signature\n        FROM dupe_collections base\n        LEFT JOIN dupe_collections future_completes\n          ON base.set_signature = future_completes.set_signature\n          AND future_completes.complete_time > base.create_time\n        ), open_sets AS (\n        -- get cases where there is no future complete and multiple dupes, which also need merging\n        SELECT\n          set_signature,\n          uncomplete_oid,\n          SUM(CASE WHEN future_complete_oid IS NULL THEN 1 ELSE 0 END) OVER (\n            PARTITION BY set_signature\n          ) unmatched_sum\n        FROM future_completes\n        WHERE future_complete_oid IS NULL\n        ), ranked_status AS (\n        -- creating a status ranking so that active statuses outrank inactive\n        SELECT 'Not Started' stat, 1 srank\n        UNION SELECT 'In Progress', 2\n        UNION SELECT 'Suspended', 2\n        ), ranked_updates AS (\n        -- Find which update was the most recent amongst all the Objectives in the set\n        -- so we can use that as the receiving Objective\n        SELECT\n          uncomplete_oid,\n          set_signature,\n          dml_timestamp,\n          new_row_data->>'status' zstatus,\n          ROW_NUMBER() OVER (\n            PARTITION BY set_signature\n            ORDER BY srank DESC, dml_timestamp DESC\n          ) latest_status_rank\n        FROM open_sets\n        JOIN "ZALObjectives"\n          ON uncomplete_oid = data_id\n        JOIN ranked_status\n          ON new_row_data->>'status' = stat\n        WHERE unmatched_sum > 1\n        )\n        -- Union the merge-to-current and merge-to-complete sets\n        -- Objectives not in this list don't need merging because they are\n        -- either already complete or the last updated non-closed objective\n        SELECT DISTINCT\n          donor.uncomplete_oid donor_oid,\n          heir.uncomplete_oid target_oid,\n          donor.set_signature,\n          'to current' inheritance_type\n        FROM ranked_updates donor\n        JOIN ranked_updates heir\n          ON donor.set_signature = heir.set_signature\n          AND heir.latest_status_rank = 1\n        WHERE donor.uncomplete_oid != heir.uncomplete_oid\n        UNION\n        SELECT\n          uncomplete_oid donor_oid,\n          future_complete_oid,\n          set_signature,\n          'to complete'\n        FROM future_completes\n        WHERE closest_complete_rank = 1\n          AND uncomplete_oid != future_complete_oid\n          AND future_complete_oid IS NOT NULL\n        ;\n\n        -- Merge objective collaborators\n        DROP TABLE IF EXISTS relinked_objective_collaborators;\n        CREATE TEMP TABLE relinked_objective_collaborators\n        AS\n        WITH updater AS (\n          WITH unmatched AS (\n            SELECT\n              donor_oid,\n              "userId" uid\n            FROM objective_merges om\n            JOIN "ObjectiveCollaborators" oc\n              ON om.donor_oid = oc."objectiveId"\n            EXCEPT\n            SELECT\n              donor_oid,\n              "userId"\n            FROM objective_merges om\n            JOIN "ObjectiveCollaborators" oc\n              ON om.target_oid = oc."objectiveId"\n          )\n          UPDATE "ObjectiveCollaborators" AS oc\n          SET "objectiveId" = target_oid\n          FROM objective_merges om\n          JOIN unmatched u\n            ON u.donor_oid = om.donor_oid\n          WHERE oc."userId" = u.uid\n            AND oc."objectiveId" = u.donor_oid\n          RETURNING\n            id ocid,\n            om.donor_oid original_oid\n        ) SELECT * FROM updater\n        ;\n\n        -- Update the merge target objectives\n        DROP TABLE IF EXISTS updated_target_objectives;\n        CREATE TEMP TABLE updated_target_objectives\n        AS\n        WITH updater AS (\n          UPDATE "Objectives" AS o\n          SET\n            "updatedAt" = GREATEST(d_o."updatedAt", o."updatedAt"),\n            "firstNotStartedAt" = LEAST(d_o."firstNotStartedAt", o."firstNotStartedAt"),\n            "lastNotStartedAt" = GREATEST(d_o."lastNotStartedAt", o."lastNotStartedAt"),\n            "firstInProgressAt" = LEAST(d_o."firstInProgressAt", o."firstInProgressAt"),\n            "lastInProgressAt" = GREATEST(d_o."lastInProgressAt", o."lastInProgressAt"),\n            "firstSuspendedAt" = LEAST(d_o."firstSuspendedAt", o."firstSuspendedAt"),\n            "lastSuspendedAt" = GREATEST(d_o."lastSuspendedAt", o."lastSuspendedAt"),\n            "firstCompleteAt" = LEAST(d_o."firstCompleteAt", o."firstCompleteAt"),\n            "lastCompleteAt" = GREATEST(d_o."lastCompleteAt", o."lastCompleteAt")\n          FROM objective_merges om\n          JOIN "Objectives" d_o\n            ON om.donor_oid = d_o.id\n          WHERE om.target_oid = o.id\n          RETURNING\n            o.id oid,\n            donor_oid\n        ) SELECT * FROM updater\n        ;\n\n        -- Update AROs associated with donor Objectives to point at target Objectives\n        -- This allows running the standard ARO deduplication logic\n        DROP TABLE IF EXISTS redirected_aros;\n        CREATE TEMP TABLE redirected_aros\n        AS\n        WITH updater AS (\n          UPDATE "ActivityReportObjectives" AS aro\n          SET "objectiveId" = target_oid\n          FROM objective_merges om\n          JOIN "ActivityReportObjectives" d_aro\n            ON d_aro."objectiveId" = donor_oid\n          WHERE d_aro.id = aro.id\n          RETURNING\n            aro.id aroid,\n            d_aro.id donor_aroid,\n            target_oid,\n            donor_oid\n        ) SELECT * FROM updater\n        ;\n        \n        --------------------------------------------------------------------------------\n        -- START Apply the logic for ARO deduplication ---------------------------------\n        --------------------------------------------------------------------------------\n\n        -- Create temporary table for dup_aro_sets\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        CREATE TEMP TABLE temp_dup_aro_sets\n        AS\n        WITH dupe_aro_pairs AS (\n        SELECT\n          "activityReportId" arid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        GROUP BY 1,2\n        HAVING COUNT(id) > 1\n        ),\n        dupe_aros AS (\n        SELECT\n          arid,\n          oid,\n          id aroid\n        FROM "ActivityReportObjectives"\n        JOIN dupe_aro_pairs\n          ON "activityReportId" = arid\n          AND "objectiveId" = oid\n        )\n        SELECT\n          arid "activityReportId",\n          oid "objectiveId",\n          min(zaro.dml_timestamp) "min_dml_timestamp",\n          max(zaro.dml_timestamp) "max_dml_timestamp",\n          COUNT(zaro.id) "count_id",\n          array_agg(zaro.data_id ORDER BY zaro.data_id ASC) "aroIds"\n        FROM dupe_aros\n        JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = aroid\n        GROUP BY 1,2\n        ORDER BY 3 DESC;\n\n        -- Create temporary table for reduced_arot\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        CREATE TEMP TABLE temp_reduced_arot\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arot."topicId",\n          MIN(arot."createdAt") "createdAt",\n          MAX(arot."updatedAt") "updatedAt",\n          ARRAY_AGG(arot.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON arot."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_updated_topics;\n        CREATE TEMP TABLE temp_updated_topics\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveTopics" t\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arot s\n            WHERE t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            RETURNING t.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        CREATE TEMP TABLE temp_inserted_topics\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveTopics" (\n                "activityReportObjectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."topicId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arot s\n            LEFT JOIN "ActivityReportObjectiveTopics" t\n            ON t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            WHERE t."activityReportObjectiveId" IS NULL\n            AND t."topicId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_deleted_topics;\n        CREATE TEMP TABLE temp_deleted_topics\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveTopics" t\n            USING temp_reduced_arot r\n            WHERE t."topicId" = r."topicId"\n            AND t.id = ANY (r.ids)\n            AND t."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING t.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aroc\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        CREATE TEMP TABLE temp_reduced_aroc\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aroc."courseId",\n          MIN(aroc."createdAt") "createdAt",\n          MAX(aroc."updatedAt") "updatedAt",\n          ARRAY_AGG(aroc.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON aroc."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_updated_courses;\n        CREATE TEMP TABLE temp_updated_courses\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveCourses" c\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aroc s\n            WHERE c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            RETURNING c.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        CREATE TEMP TABLE temp_inserted_courses\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveCourses" (\n                "activityReportObjectiveId",\n                "courseId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."courseId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aroc s\n            LEFT JOIN "ActivityReportObjectiveCourses" c\n            ON c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            WHERE c."activityReportObjectiveId" IS NULL\n            AND c."courseId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_deleted_courses;\n        CREATE TEMP TABLE temp_deleted_courses\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveCourses" c\n            USING temp_reduced_aroc r\n            WHERE c."courseId" = r."courseId"\n            AND c.id = ANY (r.ids)\n            AND c."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING c.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_arof\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        CREATE TEMP TABLE temp_reduced_arof\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arof."fileId",\n          MIN(arof."createdAt") "createdAt",\n          MAX(arof."updatedAt") "updatedAt",\n          ARRAY_AGG(arof.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON arof."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_updated_files;\n        CREATE TEMP TABLE temp_updated_files\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveFiles" f\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arof s\n            WHERE f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            RETURNING f.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_inserted_files;\n        CREATE TEMP TABLE temp_inserted_files\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveFiles" (\n                "activityReportObjectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."fileId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arof s\n            LEFT JOIN "ActivityReportObjectiveFiles" f\n            ON f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            WHERE f."activityReportObjectiveId" IS NULL\n            AND f."fileId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_deleted_files;\n        CREATE TEMP TABLE temp_deleted_files\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveFiles" f\n            USING temp_reduced_arof r\n            WHERE f."fileId" = r."fileId"\n            AND f.id = ANY (r.ids)\n            AND f."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING f.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_aror\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        CREATE TEMP TABLE temp_reduced_aror\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aror."resourceId",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          ARRAY_AGG(aror.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveResources" aror\n        ON aror."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_updated_resources;\n        CREATE TEMP TABLE temp_updated_resources\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveResources" r\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aror s\n            WHERE r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            RETURNING r.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        CREATE TEMP TABLE temp_inserted_resources\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveResources" (\n                "activityReportObjectiveId",\n                "resourceId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."resourceId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aror s\n            LEFT JOIN "ActivityReportObjectiveResources" r\n            ON r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            WHERE r."activityReportObjectiveId" IS NULL\n            AND r."resourceId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_deleted_resources;\n        CREATE TEMP TABLE temp_deleted_resources\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveResources" r\n            USING temp_reduced_aror t\n            WHERE r."resourceId" = t."resourceId"\n            AND r.id = ANY (t.ids)\n            AND r."activityReportObjectiveId" != t."activityReportObjectiveId"\n            RETURNING r.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aro\n        DROP TABLE IF EXISTS temp_reduced_aro;\n        CREATE TEMP TABLE temp_reduced_aro\n        AS\n        WITH ttap_upd_seq AS ( -- get the update list for each aro set\n        SELECT\n          new_row_data->>'ttaProvided' ttap,\n          das."aroIds"[1] dest_aroid,\n          MAX(LENGTH(new_row_data->>'ttaProvided')) OVER (PARTITION BY "activityReportId", "objectiveId") maxlength,\n          zaro.id zaroid\n        FROM temp_dup_aro_sets das\n        JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = ANY("aroIds")\n        WHERE  new_row_data->'ttaProvided' IS NOT NULL\n        ),\n        ranked_ttap_upd AS ( -- rank the update list per the criteria\n        SELECT\n          ttap,\n          dest_aroid,\n          zaroid,\n          maxlength,\n          ROW_NUMBER() OVER (\n            PARTITION BY dest_aroid\n            ORDER BY (LENGTH(ttap) < 10 AND (maxlength / (LENGTH(ttap)+1)) > 8), zaroid DESC\n          ) select_order\n        FROM ttap_upd_seq\n        )\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          rtu.dest_aroid id,\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          rtu.ttap "ttaProvided",\n          (ARRAY_AGG(aro."title" ORDER BY LENGTH(aro."title") DESC))[1] "title",\n          CASE MAX(CASE\n              WHEN aro.status = 'Complete' THEN 4\n              WHEN aro.status = 'Suspended' THEN 3\n              WHEN aro.status = 'In Progress' THEN 2\n              WHEN aro.status = 'Not Started' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Complete'\n              WHEN 3 THEN 'Suspended'\n              WHEN 2 THEN 'In Progress'\n              WHEN 1 THEN 'Not Started'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS status,\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(aro."closeSuspendReason" ORDER BY LENGTH(aro."closeSuspendReason"::text) DESC))[1] "closeSuspendReason",\n          (ARRAY_AGG(aro."closeSuspendContext" ORDER BY LENGTH(aro."closeSuspendContext") DESC))[1] "closeSuspendContext",\n          (ARRAY_AGG(aro."originalObjectiveId" ORDER BY aro."originalObjectiveId"))[1] "originalObjectiveId",\n          CASE MAX(CASE\n              WHEN aro."supportType" = 'Maintaining' THEN 4\n              WHEN aro."supportType" = 'Implementing' THEN 3\n              WHEN aro."supportType" = 'Introducing' THEN 2\n              WHEN aro."supportType" = 'Planning' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Maintaining'\n              WHEN 3 THEN 'Implementing'\n              WHEN 2 THEN 'Introducing'\n              WHEN 1 THEN 'Planning'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS "supportType",\n          bool_or(aro."objectiveCreatedHere") "objectiveCreatedHere",\n          array_agg(aro.id order by aro.id) "aroIds"\n        FROM temp_dup_aro_sets das\n        JOIN ranked_ttap_upd rtu\n          ON rtu.select_order = 1\n          AND rtu.dest_aroid = ANY (das."aroIds")\n        JOIN "ActivityReportObjectives" aro\n          ON aro.id = ANY (das."aroIds")\n        GROUP BY 1,2,3,6;\n\n        -- Update matching records in ActivityReportObjectives\n        DROP TABLE IF EXISTS temp_updated_aro;\n        CREATE TEMP TABLE temp_updated_aro\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectives" o\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt",\n                "ttaProvided" = s."ttaProvided",\n                "title" = s."title",\n                "status" = s."status",\n                "arOrder" = s."arOrder",\n                "closeSuspendReason" = s."closeSuspendReason",\n                "closeSuspendContext" = s."closeSuspendContext",\n                "originalObjectiveId" = s."originalObjectiveId",\n                "supportType" = s."supportType"::"enum_ActivityReportObjectives_supportType",\n                "objectiveCreatedHere" = s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            WHERE o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            RETURNING o.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectives\n        -- There should never be an INSERT performed here, but the code is present to complete the structure UID structure\n        DROP TABLE IF EXISTS temp_inserted_aro;\n        CREATE TEMP TABLE temp_inserted_aro\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectives" (\n                "activityReportId",\n                "objectiveId",\n                "id",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided",\n                "title",\n                "status",\n                "arOrder",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "originalObjectiveId",\n                "supportType",\n                "objectiveCreatedHere"\n            )\n            SELECT\n                s."activityReportId",\n                s."objectiveId",\n                s.id,\n                s."createdAt",\n                s."updatedAt",\n                s."ttaProvided",\n                s."title",\n                s."status",\n                s."arOrder",\n                s."closeSuspendReason",\n                s."closeSuspendContext",\n                s."originalObjectiveId",\n                s."supportType"::"enum_ActivityReportObjectives_supportType",\n                s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            LEFT JOIN "ActivityReportObjectives" o\n            ON o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            WHERE o.id IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectives\n        DROP TABLE IF EXISTS temp_deleted_aro;\n        CREATE TEMP TABLE temp_deleted_aro\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectives" o\n            USING temp_reduced_aro r\n            WHERE o."objectiveId" = r."objectiveId"\n            AND o."activityReportId" = r."activityReportId"\n            AND o.id = ANY (ARRAY_REMOVE(r."aroIds", r."aroIds"[1]))\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        --------------------------------------------------------------------------------\n        -- FINISHED Apply the logic for ARO deduplication ------------------------------\n        --------------------------------------------------------------------------------\n\n        -- results of ARO dedupe\n        SELECT\n            'ActivityReportObjectiveTopics' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_topics) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_topics) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_topics) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveCourses' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_courses) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_courses) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_courses) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveFiles' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_files) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_files) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_files) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveResources' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_resources) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_resources) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_resources) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectives' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_aro) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_aro) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_aro) d;\n\n        --------------------------------------------------------------------------------\n        -- RESUME Objective deduplication section --------------------------------------\n        --------------------------------------------------------------------------------\n        \n        -- Delete duplicate objective collaborators\n        DROP TABLE IF EXISTS deleted_objective_collaborators;\n        CREATE TEMP TABLE deleted_objective_collaborators\n        AS\n        WITH updater AS (\n          DELETE FROM "ObjectiveCollaborators"\n          USING objective_merges\n          WHERE "objectiveId" = donor_oid\n          RETURNING\n            id ocid,\n            donor_oid\n        ) SELECT * FROM updater\n        ;\n\n        -- Soft delete operation for duplicate Objectives\n        -- Originally this was a hard delete, but that breaks the\n        -- ActivityReportObjectives_originalObjectiveId_fkey constraint\n        -- and updating originalObjectiveId seems like a bad idea\n        DROP TABLE IF EXISTS temp_deleted_objectives;\n        CREATE TEMP TABLE temp_deleted_objectives\n        AS\n        WITH deleted_rows AS (\n            UPDATE "Objectives" o\n            SET "deletedAt" = NOW()\n            FROM objective_merges om\n            WHERE donor_oid = id\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        SELECT\n          1 op_order,\n          'deleted_objectives' operation,\n          COUNT(*) cnt\n        FROM temp_deleted_objectives\n        UNION SELECT 2,'updated_target_objectives', COUNT(*) FROM updated_target_objectives\n        UNION SELECT 16,'relinked_objective_collaborators', COUNT(*) FROM relinked_objective_collaborators\n        UNION SELECT 17,'deleted_objective_collaborators', COUNT(*) FROM deleted_objective_collaborators\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (2e0acb8b-18d4-4f1e-bbf0-02cb5fbc5d84): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250107000001-merge-duplicate-objectives: migrated (0.092s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250109205626-AddMonitoringEnum: migrating =======
Executing (cefca8aa-edd6-4fe1-98dd-c493f894572b): START TRANSACTION;
Connection validated successfully
Executing (cefca8aa-edd6-4fe1-98dd-c493f894572b): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250109205626-AddMonitoringEnum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Connection validated successfully
Executing (cefca8aa-edd6-4fe1-98dd-c493f894572b): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250109205626-AddMonitoringEnum: migrated (0.023s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250109205626-add-activity-report-objective-citations: migrating =======
Executing (0529a955-d140-4311-9a9c-d660e6239349): START TRANSACTION;
Connection validated successfully
Executing (0529a955-d140-4311-9a9c-d660e6239349): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250109205626-add-activity-report-objective-citations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0529a955-d140-4311-9a9c-d660e6239349): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveCitations" ("id"  SERIAL , "activityReportObjectiveId" INTEGER NOT NULL, "citation" TEXT NOT NULL, "monitoringReferences" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (0529a955-d140-4311-9a9c-d660e6239349): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250109205626-add-activity-report-objective-citations: migrated (0.063s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250109205626-create-standard-goal-template-column: migrating =======
Executing (1ec1e11d-3e39-4d62-8837-31b2dfbecd17): START TRANSACTION;
Connection validated successfully
Executing (1ec1e11d-3e39-4d62-8837-31b2dfbecd17): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250109205626-create-standard-goal-template-column.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (1ec1e11d-3e39-4d62-8837-31b2dfbecd17): UPDATE "GoalTemplates"\n        SET "creationMethod" = 'Curated'\n        WHERE "creationMethod" = 'System Generated';
Executing (1ec1e11d-3e39-4d62-8837-31b2dfbecd17): ALTER TABLE "GoalTemplates"\n      ADD COLUMN standard TEXT GENERATED ALWAYS AS (\n        CASE\n        WHEN "creationMethod" = 'Curated' THEN substring("templateName" from '(?:^[(]([^)]+)[)])')\n        ELSE NULL\n        END) STORED;
Executing (1ec1e11d-3e39-4d62-8837-31b2dfbecd17): CREATE UNIQUE INDEX unique_standard_non_null\n        ON "GoalTemplates"(standard)\n        WHERE standard IS NOT NULL;
Executing (1ec1e11d-3e39-4d62-8837-31b2dfbecd17): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250109205626-create-standard-goal-template-column: migrated (0.041s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250110162036-AddMonitoringEnum: migrating =======
Executing (d8de78db-09df-487f-b19c-7b27eea3c56d): START TRANSACTION;
Connection validated successfully
Executing (d8de78db-09df-487f-b19c-7b27eea3c56d): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250110162036-AddMonitoringEnum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Connection validated successfully
Executing (d8de78db-09df-487f-b19c-7b27eea3c56d): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250110162036-AddMonitoringEnum: migrated (0.020s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250110162153-add-activity-report-objective-citations: migrating =======
Executing (7f024081-904e-438e-9438-92e85b2f399a): START TRANSACTION;
Connection validated successfully
Executing (7f024081-904e-438e-9438-92e85b2f399a): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250110162153-add-activity-report-objective-citations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (7f024081-904e-438e-9438-92e85b2f399a): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveCitations" ("id"  SERIAL , "activityReportObjectiveId" INTEGER NOT NULL, "citation" TEXT NOT NULL, "monitoringReferences" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (7f024081-904e-438e-9438-92e85b2f399a): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250110162153-add-activity-report-objective-citations: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250116140614-AddMonitoringEnum: migrating =======
Executing (b8785843-0d4a-4fe4-90a2-32eaaceb7cc5): START TRANSACTION;
Connection validated successfully
Executing (b8785843-0d4a-4fe4-90a2-32eaaceb7cc5): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250116140614-AddMonitoringEnum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Goals_createdVia" ADD VALUE IF NOT EXISTS 'monitoring';
Connection validated successfully
Executing (b8785843-0d4a-4fe4-90a2-32eaaceb7cc5): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250116140614-AddMonitoringEnum: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250116140614-add-activity-report-objective-citations: migrating =======
Executing (2fbe7673-c416-472d-b5eb-1c81fb6527b1): START TRANSACTION;
Connection validated successfully
Executing (2fbe7673-c416-472d-b5eb-1c81fb6527b1): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250116140614-add-activity-report-objective-citations.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (2fbe7673-c416-472d-b5eb-1c81fb6527b1): CREATE TABLE IF NOT EXISTS "ActivityReportObjectiveCitations" ("id"  SERIAL , "activityReportObjectiveId" INTEGER NOT NULL, "citation" TEXT NOT NULL, "monitoringReferences" JSONB NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (2fbe7673-c416-472d-b5eb-1c81fb6527b1): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250116140614-add-activity-report-objective-citations: migrated (0.025s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250205000000-clean_disallowed_goal_data: migrating =======
Executing (e446972c-d830-42b8-b8bd-b744bc84f59c): START TRANSACTION;
Connection validated successfully
Executing (e446972c-d830-42b8-b8bd-b744bc84f59c): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250205000000-clean_disallowed_goal_data.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- If objectives are neither suspended nor complete and are on closed\n        -- Goals, this marks them 'Suspended'. It also soft-deletes Goals\n        -- with disallowed text that are not on any non-deleted AR.\n\n        -- Create a table listing all Goals with text that was disallowed due\n        -- to the EO.\n        DROP TABLE IF EXISTS disallowed_goals;\n        CREATE TEMP TABLE disallowed_goals\n        AS\n        SELECT\n          id gid,\n          name gname,\n          status gstatus\n        FROM "Goals"\n        WHERE (\n            LOWER(name) LIKE '% dei%'\n            OR\n            LOWER(name) LIKE '% equit%'\n            OR\n            LOWER(name) LIKE 'dei%'\n            OR\n            LOWER(name) LIKE 'equit%'\n          )\n          AND "deletedAt" IS NULL\n        ;\n\n        -- Get a list of all the active Objectives on Goals with a status of\n        -- 'Closed'. Keeping this order after generelizing the logic to make\n        -- a less confusing diff from the previous version that only applied\n        -- to disallowed goals.\n        DROP TABLE IF EXISTS objectives_to_suspend;\n        CREATE TEMP TABLE objectives_to_suspend\n        AS\n        SELECT\n          o.id oid,\n          -- Other columns here for convenience when inspecting\n          o.status orig_ostatus,\n          o."createdAt" obj_createtime,\n          LEFT(o.title, 30) short_otitle,\n          LEFT(g.name, 50) short_gname\n        FROM "Objectives" o\n        JOIN "Goals" g\n          ON o."goalId" = g.id\n        WHERE g.status = 'Closed'\n          AND o.status NOT IN ('Complete', 'Suspended')\n          AND g."deletedAt" IS NULL\n          AND o."deletedAt" IS NULL\n        ;\n\n        -- Update the Objectives\n        DROP TABLE IF EXISTS updated_obj;\n        CREATE TEMP TABLE updated_obj\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Objectives"\n        SET\n          "updatedAt" = nowts,\n          status = 'Suspended'\n        FROM objectives_to_suspend\n        CROSS JOIN nowtime\n        WHERE oid = id\n        RETURNING id completed_oid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- Get a list of all the disallowed Goals without any connections\n        -- to non-deleted ARs. We will soft-delete these.\n        DROP TABLE IF EXISTS goals_to_delete;\n        CREATE TEMP TABLE goals_to_delete\n        AS\n        WITH linked_goals AS (\n        SELECT\n          gid,\n          aro.id aroid,\n          "calculatedStatus" ar_status,\n          gname\n        FROM disallowed_goals\n        LEFT JOIN "ActivityReportGoals" aro\n          ON "goalId" = gid\n        LEFT JOIN "ActivityReports" ar\n          ON aro."activityReportId" = ar.id\n        ),\n        -- This is here in case the goals are connected to both deleted and\n        -- non-deleted ARs\n        marked_goals AS (\n        SELECT\n          gid marked_gid,\n          BOOL_AND(aroid IS NULL) unlinked,\n          BOOL_AND(ar_status = 'deleted') all_deleted\n        FROM linked_goals\n        GROUP BY 1\n        )\n        SELECT\n          gid,\n          -- Other columns here for convenience when inspecting\n          aroid,\n          ar_status,\n          LEFT(gname, 50) short_gname\n        FROM linked_goals\n        JOIN marked_goals\n          ON gid = marked_gid\n        WHERE unlinked\n          OR all_deleted\n        ;\n\n        DROP TABLE IF EXISTS updated_goals;\n        CREATE TEMP TABLE updated_goals\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Goals"\n        SET\n          "updatedAt" = nowts,\n          "deletedAt" = nowts\n        FROM goals_to_delete\n        CROSS JOIN nowtime\n        WHERE gid = id\n        RETURNING id deleted_gid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- disallowed_goals is just for context but the other numbers should match up\n        SELECT 1 ord,'disallowed_goals' item, COUNT(*) cnt FROM disallowed_goals\n        UNION\n        SELECT 2, 'objectives_to_suspend' , COUNT(*)  FROM objectives_to_suspend\n        UNION\n        SELECT 3, 'updated_obj', COUNT(*)  FROM updated_obj\n        UNION\n        SELECT 4, 'mismatched suspensions', COUNT(*) FROM (\n          (\n            SELECT oid FROM objectives_to_suspend\n            EXCEPT\n            SELECT completed_oid FROM updated_obj\n          )\n          UNION\n          (\n            SELECT completed_oid FROM updated_obj\n            EXCEPT\n            SELECT oid FROM objectives_to_suspend\n          )\n        ) a\n        UNION\n        SELECT 5, 'goals_to_delete' , COUNT(*)  FROM goals_to_delete\n        UNION\n        SELECT 6, 'updated_goals', COUNT(*)  FROM updated_goals\n        UNION\n        SELECT 7, 'mismatched deletions', COUNT(*) FROM (\n          (\n            SELECT gid FROM goals_to_delete\n            EXCEPT\n            SELECT deleted_gid FROM updated_goals\n          )\n          UNION\n          (\n            SELECT deleted_gid FROM updated_goals\n            EXCEPT\n            SELECT gid FROM goals_to_delete\n          )\n        ) a\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (e446972c-d830-42b8-b8bd-b744bc84f59c): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250205000000-clean_disallowed_goal_data: migrated (0.079s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250205000001-apply-eo-directives: migrating =======
Executing (58faca79-18da-48ab-87e7-ad6911b4095f): START TRANSACTION;
Connection validated successfully
Executing (58faca79-18da-48ab-87e7-ad6911b4095f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250205000001-apply-eo-directives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TABLE "GoalTemplates" DROP COLUMN IF EXISTS "deletedAt";
Connection validated successfully
Executing (58faca79-18da-48ab-87e7-ad6911b4095f): ALTER TABLE "public"."GoalTemplates" ADD COLUMN "deletedAt" TIMESTAMP WITH TIME ZONE;
Executing (58faca79-18da-48ab-87e7-ad6911b4095f): UPDATE "Topics" SET "deletedAt" = NOW() WHERE "name" = 'Equity';\n         UPDATE "GoalTemplates" SET "deletedAt" = NOW() WHERE "templateName" = '(DEIA) The recipient will implement comprehensive systems and services that promote diversity, equity, inclusion, accessibility, and belonging.';
Executing (58faca79-18da-48ab-87e7-ad6911b4095f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250205000001-apply-eo-directives: migrated (0.031s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250205141016-update-eclkc-maps-to: migrating =======
Executing (0775c90e-f591-40fd-855a-a277b8a73f0e): START TRANSACTION;
Connection validated successfully
Executing (0775c90e-f591-40fd-855a-a277b8a73f0e): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250205141016-update-eclkc-maps-to.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (0775c90e-f591-40fd-855a-a277b8a73f0e): ALTER TABLE "public"."Resources" ADD COLUMN "mapsTo" INTEGER REFERENCES "Resources" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
Executing (0775c90e-f591-40fd-855a-a277b8a73f0e): -- Create new headstart.gov resources for all eclkc resources that are missing.\n         WITH orig_resources AS (\n            SELECT DISTINCT ON ("url")\n            *\n            FROM "Resources"\n            WHERE "domain" = 'eclkc.ohs.acf.hhs.gov'\n            ORDER BY "url", "metadataUpdatedAt" DESC, "updatedAt" DESC\n            ),\n        existing_new_resources AS (\n            SELECT\n            "url"\n            FROM "Resources"\n            WHERE "domain" = 'headstart.gov'\n            GROUP BY 1\n        ) INSERT INTO "Resources" (\n        "domain", "url", "title", "mimeType",\n        "lastStatusCode", "metadata", "metadataUpdatedAt",\n        "mapsTo", "createdAt", "updatedAt"\n        )\n        SELECT\n        'headstart.gov' AS domain,\n        regexp_replace(\n            o."url", 'eclkc.ohs.acf.hhs.gov',\n            'headstart.gov'\n        ) AS "url",\n        o."title",\n        o."mimeType",\n        o."lastStatusCode",\n        o."metadata",\n        o."metadataUpdatedAt",\n        null AS "mapsTo",\n        NOW() "createdAt",\n        NOW() "updatedAt"\n        FROM\n        orig_resources o\n        LEFT JOIN existing_new_resources e\n            -- Prevent duplicating existing headstart.gov resources.\n            ON regexp_replace(o."url", 'eclkc.ohs.acf.hhs.gov', 'headstart.gov') = e."url"\n        WHERE\n        e."url" IS NULL;\n\n        -- Set the mapsTo for all old eclkc resources to the new headstart.gov resources.\n        WITH new_resources AS (\n        SELECT\n            *\n        FROM\n            "Resources"\n        WHERE\n            "domain" = 'headstart.gov'\n        )\n        UPDATE\n        "Resources" r\n        SET\n        "mapsTo" = n.id\n        FROM\n        new_resources n\n        -- Where everything in the URL matches expect the domain, which we expect to be headstart.gov.\n        WHERE\n        r."url" = regexp_replace(\n            n."url", 'headstart.gov', 'eclkc.ohs.acf.hhs.gov'\n        );
Executing (0775c90e-f591-40fd-855a-a277b8a73f0e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250205141016-update-eclkc-maps-to: migrated (0.026s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250206170000-add-uniq-aro-constraint-redo: migrating =======
Executing (633524aa-717a-4a9e-9a43-91d1299e0012): START TRANSACTION;
Connection validated successfully
Executing (633524aa-717a-4a9e-9a43-91d1299e0012): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250206170000-add-uniq-aro-constraint-redo.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This is an updated version of the ARO deduplication logic\n        -- written to accommodate records without audit log entries\n\n        -- Create temporary table for dupe_aro_pairs which is used to create\n        -- dup_aro_sets for DML work and also to use in the "before-after" test\n        DROP TABLE IF EXISTS dupe_aro_pairs;\n        CREATE TEMP TABLE dupe_aro_pairs\n        AS\n        SELECT\n          "activityReportId" arid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        GROUP BY 1,2\n        HAVING COUNT(id) > 1\n        ;\n\n        -- Create temporary table for dup_aro_sets which is used\n        -- in the DML change logic\n        DROP TABLE IF EXISTS temp_dup_aro_sets;\n        CREATE TEMP TABLE temp_dup_aro_sets\n        AS\n        WITH dupe_aros AS (\n        SELECT\n          arid,\n          oid,\n          id aroid,\n          "createdAt" createtime,\n          "updatedAt" updatetime\n        FROM "ActivityReportObjectives"\n        JOIN dupe_aro_pairs\n          ON "activityReportId" = arid\n          AND "objectiveId" = oid\n        )\n        SELECT\n          arid "activityReportId",\n          oid "objectiveId",\n          min(COALESCE(zaro.dml_timestamp, createtime)) "min_dml_timestamp",\n          max(COALESCE(zaro.dml_timestamp, updatetime)) "max_dml_timestamp",\n          COUNT(zaro.id) "count_id",\n          array_agg(aroid ORDER BY zaro.data_id ASC) "aroIds"\n        FROM dupe_aros\n        LEFT JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = aroid\n        GROUP BY 1,2\n        ORDER BY 3 DESC;\n\n        \n\n        -- Create temporary table for reduced_arot\n        DROP TABLE IF EXISTS temp_reduced_arot;\n        CREATE TEMP TABLE temp_reduced_arot\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arot."topicId",\n          MIN(arot."createdAt") "createdAt",\n          MAX(arot."updatedAt") "updatedAt",\n          ARRAY_AGG(arot.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveTopics" arot\n        ON arot."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_updated_topics;\n        CREATE TEMP TABLE temp_updated_topics\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveTopics" t\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arot s\n            WHERE t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            RETURNING t.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_inserted_topics;\n        CREATE TEMP TABLE temp_inserted_topics\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveTopics" (\n                "activityReportObjectiveId",\n                "topicId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."topicId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arot s\n            LEFT JOIN "ActivityReportObjectiveTopics" t\n            ON t."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND t."topicId" = s."topicId"\n            WHERE t."activityReportObjectiveId" IS NULL\n            AND t."topicId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveTopics\n        DROP TABLE IF EXISTS temp_deleted_topics;\n        CREATE TEMP TABLE temp_deleted_topics\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveTopics" t\n            USING temp_reduced_arot r\n            WHERE t."topicId" = r."topicId"\n            AND t.id = ANY (r.ids)\n            AND t."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING t.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aroc\n        DROP TABLE IF EXISTS temp_reduced_aroc;\n        CREATE TEMP TABLE temp_reduced_aroc\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aroc."courseId",\n          MIN(aroc."createdAt") "createdAt",\n          MAX(aroc."updatedAt") "updatedAt",\n          ARRAY_AGG(aroc.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveCourses" aroc\n        ON aroc."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_updated_courses;\n        CREATE TEMP TABLE temp_updated_courses\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveCourses" c\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aroc s\n            WHERE c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            RETURNING c.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_inserted_courses;\n        CREATE TEMP TABLE temp_inserted_courses\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveCourses" (\n                "activityReportObjectiveId",\n                "courseId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."courseId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aroc s\n            LEFT JOIN "ActivityReportObjectiveCourses" c\n            ON c."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND c."courseId" = s."courseId"\n            WHERE c."activityReportObjectiveId" IS NULL\n            AND c."courseId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveCourses\n        DROP TABLE IF EXISTS temp_deleted_courses;\n        CREATE TEMP TABLE temp_deleted_courses\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveCourses" c\n            USING temp_reduced_aroc r\n            WHERE c."courseId" = r."courseId"\n            AND c.id = ANY (r.ids)\n            AND c."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING c.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_arof\n        DROP TABLE IF EXISTS temp_reduced_arof;\n        CREATE TEMP TABLE temp_reduced_arof\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          arof."fileId",\n          MIN(arof."createdAt") "createdAt",\n          MAX(arof."updatedAt") "updatedAt",\n          ARRAY_AGG(arof.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveFiles" arof\n        ON arof."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_updated_files;\n        CREATE TEMP TABLE temp_updated_files\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveFiles" f\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_arof s\n            WHERE f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            RETURNING f.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_inserted_files;\n        CREATE TEMP TABLE temp_inserted_files\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveFiles" (\n                "activityReportObjectiveId",\n                "fileId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."fileId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_arof s\n            LEFT JOIN "ActivityReportObjectiveFiles" f\n            ON f."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND f."fileId" = s."fileId"\n            WHERE f."activityReportObjectiveId" IS NULL\n            AND f."fileId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveFiles\n        DROP TABLE IF EXISTS temp_deleted_files;\n        CREATE TEMP TABLE temp_deleted_files\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveFiles" f\n            USING temp_reduced_arof r\n            WHERE f."fileId" = r."fileId"\n            AND f.id = ANY (r.ids)\n            AND f."activityReportObjectiveId" != r."activityReportObjectiveId"\n            RETURNING f.*\n        )\n        SELECT * FROM deleted_rows;\n\n\n        -- Create temporary table for reduced_aror\n        DROP TABLE IF EXISTS temp_reduced_aror;\n        CREATE TEMP TABLE temp_reduced_aror\n        AS\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          das."aroIds"[1] "activityReportObjectiveId",\n          aror."resourceId",\n          MIN(aror."createdAt") "createdAt",\n          MAX(aror."updatedAt") "updatedAt",\n          ARRAY_AGG(aror.id) ids\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectiveResources" aror\n        ON aror."activityReportObjectiveId" = ANY (das."aroIds")\n        GROUP BY 1,2,3,4;\n\n        -- Update matching records in ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_updated_resources;\n        CREATE TEMP TABLE temp_updated_resources\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectiveResources" r\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt"\n            FROM temp_reduced_aror s\n            WHERE r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            RETURNING r.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_inserted_resources;\n        CREATE TEMP TABLE temp_inserted_resources\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectiveResources" (\n                "activityReportObjectiveId",\n                "resourceId",\n                "createdAt",\n                "updatedAt"\n            )\n            SELECT\n                s."activityReportObjectiveId",\n                s."resourceId",\n                s."createdAt",\n                s."updatedAt"\n            FROM temp_reduced_aror s\n            LEFT JOIN "ActivityReportObjectiveResources" r\n            ON r."activityReportObjectiveId" = s."activityReportObjectiveId"\n            AND r."resourceId" = s."resourceId"\n            WHERE r."activityReportObjectiveId" IS NULL\n            AND r."resourceId" IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectiveResources\n        DROP TABLE IF EXISTS temp_deleted_resources;\n        CREATE TEMP TABLE temp_deleted_resources\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectiveResources" r\n            USING temp_reduced_aror t\n            WHERE r."resourceId" = t."resourceId"\n            AND r.id = ANY (t.ids)\n            AND r."activityReportObjectiveId" != t."activityReportObjectiveId"\n            RETURNING r.*\n        )\n        SELECT * FROM deleted_rows;\n\n        -- Create temporary table for reduced_aro\n        DROP TABLE IF EXISTS temp_reduced_aro;\n        CREATE TEMP TABLE temp_reduced_aro\n        AS\n        WITH ttap_upd_seq AS ( -- get the update list for each aro set\n        SELECT\n          COALESCE(new_row_data->>'ttaProvided',"ttaProvided") ttap,\n          das."aroIds"[1] dest_aroid,\n          MAX(LENGTH(COALESCE(new_row_data->>'ttaProvided',"ttaProvided"))) OVER (PARTITION BY aro."activityReportId", aro."objectiveId") maxlength,\n          zaro.id zaroid\n        FROM temp_dup_aro_sets das\n        JOIN "ActivityReportObjectives" aro\n          ON aro.id = ANY("aroIds")\n        LEFT JOIN "ZALActivityReportObjectives" zaro\n          ON zaro.data_id = aro.id\n          AND new_row_data->'ttaProvided' IS NOT NULL\n        ),\n        ranked_ttap_upd AS ( -- rank the update list per the criteria\n        SELECT\n          ttap,\n          dest_aroid,\n          zaroid,\n          maxlength,\n          ROW_NUMBER() OVER (\n            PARTITION BY dest_aroid\n            ORDER BY (LENGTH(ttap) < 10 AND (maxlength / (LENGTH(ttap)+1)) > 8), zaroid DESC\n          ) select_order\n        FROM ttap_upd_seq\n        )\n        SELECT\n          das."activityReportId",\n          das."objectiveId",\n          rtu.dest_aroid id,\n          MIN(aro."createdAt") "createdAt",\n          MAX(aro."updatedAt") "updatedAt",\n          rtu.ttap "ttaProvided",\n          (ARRAY_AGG(aro."title" ORDER BY LENGTH(aro."title") DESC))[1] "title",\n          CASE MAX(CASE\n              WHEN aro.status = 'Complete' THEN 4\n              WHEN aro.status = 'Suspended' THEN 3\n              WHEN aro.status = 'In Progress' THEN 2\n              WHEN aro.status = 'Not Started' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Complete'\n              WHEN 3 THEN 'Suspended'\n              WHEN 2 THEN 'In Progress'\n              WHEN 1 THEN 'Not Started'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS status,\n          MIN(aro."arOrder") "arOrder",\n          (ARRAY_AGG(aro."closeSuspendReason" ORDER BY LENGTH(aro."closeSuspendReason"::text) DESC))[1] "closeSuspendReason",\n          (ARRAY_AGG(aro."closeSuspendContext" ORDER BY LENGTH(aro."closeSuspendContext") DESC))[1] "closeSuspendContext",\n          (ARRAY_AGG(aro."originalObjectiveId" ORDER BY aro."originalObjectiveId"))[1] "originalObjectiveId",\n          CASE MAX(CASE\n              WHEN aro."supportType" = 'Maintaining' THEN 4\n              WHEN aro."supportType" = 'Implementing' THEN 3\n              WHEN aro."supportType" = 'Introducing' THEN 2\n              WHEN aro."supportType" = 'Planning' THEN 1\n              ELSE 0 -- for handling NULLs if necessary\n          END)\n              WHEN 4 THEN 'Maintaining'\n              WHEN 3 THEN 'Implementing'\n              WHEN 2 THEN 'Introducing'\n              WHEN 1 THEN 'Planning'\n              ELSE NULL -- optional, in case you want to handle cases where all are NULL\n          END AS "supportType",\n          bool_or(aro."objectiveCreatedHere") "objectiveCreatedHere",\n          array_agg(aro.id order by aro.id) "aroIds"\n        FROM temp_dup_aro_sets das\n        JOIN ranked_ttap_upd rtu\n          ON rtu.select_order = 1\n          AND rtu.dest_aroid = ANY (das."aroIds")\n        JOIN "ActivityReportObjectives" aro\n          ON aro.id = ANY (das."aroIds")\n        GROUP BY 1,2,3,6;\n\n        -- Update matching records in ActivityReportObjectives\n        DROP TABLE IF EXISTS temp_updated_aro;\n        CREATE TEMP TABLE temp_updated_aro\n        AS\n        WITH updated_rows AS (\n            UPDATE "ActivityReportObjectives" o\n            SET\n                "createdAt" = s."createdAt",\n                "updatedAt" = s."updatedAt",\n                "ttaProvided" = s."ttaProvided",\n                "title" = s."title",\n                "status" = s."status",\n                "arOrder" = s."arOrder",\n                "closeSuspendReason" = s."closeSuspendReason",\n                "closeSuspendContext" = s."closeSuspendContext",\n                "originalObjectiveId" = s."originalObjectiveId",\n                "supportType" = s."supportType"::"enum_ActivityReportObjectives_supportType",\n                "objectiveCreatedHere" = s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            WHERE o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            RETURNING o.*\n        )\n        SELECT * FROM updated_rows;\n\n        -- Insert non-matching records into ActivityReportObjectives\n        -- There should never be an INSERT performed here, but the code is present to complete the structure UID structure\n        DROP TABLE IF EXISTS temp_inserted_aro;\n        CREATE TEMP TABLE temp_inserted_aro\n        AS\n        WITH inserted_rows AS (\n            INSERT INTO "ActivityReportObjectives" (\n                "activityReportId",\n                "objectiveId",\n                "id",\n                "createdAt",\n                "updatedAt",\n                "ttaProvided",\n                "title",\n                "status",\n                "arOrder",\n                "closeSuspendReason",\n                "closeSuspendContext",\n                "originalObjectiveId",\n                "supportType",\n                "objectiveCreatedHere"\n            )\n            SELECT\n                s."activityReportId",\n                s."objectiveId",\n                s.id,\n                s."createdAt",\n                s."updatedAt",\n                s."ttaProvided",\n                s."title",\n                s."status",\n                s."arOrder",\n                s."closeSuspendReason",\n                s."closeSuspendContext",\n                s."originalObjectiveId",\n                s."supportType"::"enum_ActivityReportObjectives_supportType",\n                s."objectiveCreatedHere"\n            FROM temp_reduced_aro s\n            LEFT JOIN "ActivityReportObjectives" o\n            ON o.id = s.id\n            AND o."objectiveId" = s."objectiveId"\n            AND o."activityReportId" = s."activityReportId"\n            WHERE o.id IS NULL\n            RETURNING *\n        )\n        SELECT * FROM inserted_rows;\n\n        -- Delete operation for ActivityReportObjectives\n        DROP TABLE IF EXISTS temp_deleted_aro;\n        CREATE TEMP TABLE temp_deleted_aro\n        AS\n        WITH deleted_rows AS (\n            DELETE FROM "ActivityReportObjectives" o\n            USING temp_reduced_aro r\n            WHERE o."objectiveId" = r."objectiveId"\n            AND o."activityReportId" = r."activityReportId"\n            AND o.id = ANY (ARRAY_REMOVE(r."aroIds", r."aroIds"[1]))\n            RETURNING o.*\n        )\n        SELECT * FROM deleted_rows;\n\n        --------------------------------------------------------------------------------\n        -- FINISHED Apply the logic for ARO deduplication ------------------------------\n        --------------------------------------------------------------------------------\n\n        -- results of ARO dedupe\n        SELECT\n            'ActivityReportObjectiveTopics' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_topics) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_topics) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_topics) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveCourses' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_courses) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_courses) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_courses) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveFiles' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_files) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_files) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_files) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectiveResources' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_resources) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_resources) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_resources) d\n        UNION ALL\n        SELECT\n            'ActivityReportObjectives' AS table_name,\n            COALESCE(u.updated_count, 0) AS updated_count,\n            COALESCE(i.inserted_count, 0) AS inserted_count,\n            COALESCE(d.deleted_count, 0) AS deleted_count\n        FROM\n            (SELECT COUNT(*) AS updated_count FROM temp_updated_aro) u,\n            (SELECT COUNT(*) AS inserted_count FROM temp_inserted_aro) i,\n            (SELECT COUNT(*) AS deleted_count FROM temp_deleted_aro) d;\n\n        -- Prepare additional test to make sure there are no duplicates remaining\n        DROP TABLE IF EXISTS dupe_aro_pairs_after;\n        CREATE TEMP TABLE dupe_aro_pairs_after\n        AS\n        SELECT\n          "activityReportId" arid,\n          "objectiveId" oid\n        FROM "ActivityReportObjectives"\n        GROUP BY 1,2\n        HAVING COUNT(id) > 1\n        ;\n\n        -- Manual check\n        SELECT 1, 'starting pairs', COUNT(*) FROM dupe_aro_pairs\n        UNION\n        SELECT 2, 'ending pairs', COUNT(*) FROM dupe_aro_pairs_after\n        ORDER BY 1;\n\n        -- Fails the transaction with\n        -- ERROR:  division by zero\n        -- if any dupe pairs remain\n        SELECT 1/ (LEAST(1,(SELECT COUNT(*) FROM dupe_aro_pairs_after)) - 1);
Connection validated successfully
Executing (633524aa-717a-4a9e-9a43-91d1299e0012): DROP INDEX IF EXISTS "activity_report_objectives_activity_report_id_objective_id";\n        CREATE UNIQUE INDEX  "activity_report_objectives_activity_report_id_objective_id_unique" ON "ActivityReportObjectives" ("activityReportId","objectiveId");
Executing (633524aa-717a-4a9e-9a43-91d1299e0012): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250206170000-add-uniq-aro-constraint-redo: migrated (0.099s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250206180000-eo-close-goals-and-objectives: migrating =======
Executing (84d55a38-7c14-4e9a-88b1-cf15af59b5d2): START TRANSACTION;
Connection validated successfully
Executing (84d55a38-7c14-4e9a-88b1-cf15af59b5d2): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250206180000-eo-close-goals-and-objectives.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- This Completes any remaining equity Objectives and Closes any\n        -- remaining equity Goals\n\n        -- Create a list of EO-impacted Goals that are not yet closed\n        DROP TABLE IF EXISTS equity_goals;\n        CREATE TEMP TABLE equity_goals\n        AS\n        SELECT\n          g.id gid,\n          LEFT(name, 30) short_gname,\n          COALESCE(NULLIF(POSITION(' dei' IN LOWER(name)),0),POSITION(' equit' IN LOWER(name))) gissue_loc,\n          status g_status\n        FROM "Goals" g\n        LEFT JOIN "GoalTemplates" gt\n          ON g."goalTemplateId" = gt.id\n        WHERE (\n            LOWER(name) LIKE '% dei%'\n            OR\n            LOWER(name) LIKE '% equit%'\n            OR\n            LOWER(name) LIKE 'dei%'\n            OR\n            LOWER(name) LIKE 'equit%'\n          )\n          AND g.status != 'Closed'\n          AND g."deletedAt" IS NULL\n        ;\n\n        -- Create a list of EO-impacted Objectives that are not yet closed\n        -- and are on a non-deleted Goal. \n        DROP TABLE IF EXISTS equity_objectives;\n        CREATE TEMP TABLE equity_objectives\n        AS\n        SELECT\n          o.id oid,\n          "goalId" ogid,\n          title full_otitle,\n          LEFT(title, 30) short_otitle,\n          COALESCE(NULLIF(POSITION(' dei' IN LOWER(title)),0),POSITION(' equit' IN LOWER(title))) oissue_loc,\n          o.status o_status\n        FROM "Objectives" o\n        JOIN "Goals" g\n          ON o."goalId" = g.id\n        LEFT JOIN equity_goals\n          ON gid = g.id\n        WHERE\n          (\n          gid IS NOT NULL -- Complete objectives on closing Goals\n          OR\n            ( -- Complete objectives with EO-impacted text\n              LOWER(title) LIKE '% dei%'\n              OR\n              LOWER(title) LIKE '% equit%'\n              OR\n              LOWER(title) LIKE 'dei%'\n              OR\n              LOWER(title) LIKE 'equit%'\n            )\n          )\n          AND o.status NOT IN ('Complete','Suspended')\n          AND o."deletedAt" IS NULL\n          AND g."deletedAt" IS NULL\n        ;\n\n        -- Complete the Objectives\n        DROP TABLE IF EXISTS updated_obj;\n        CREATE TEMP TABLE updated_obj\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Objectives"\n        SET\n          "updatedAt" = nowts,\n          status = 'Complete'\n        FROM equity_objectives\n        CROSS JOIN nowtime\n        WHERE oid = id\n        RETURNING id completed_oid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- Complete the Goals\n        DROP TABLE IF EXISTS updated_goals;\n        CREATE TEMP TABLE updated_goals\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "Goals"\n        SET\n          "updatedAt" = nowts,\n          status = 'Closed'\n        FROM equity_goals\n        CROSS JOIN nowtime\n        WHERE gid = id\n        RETURNING id closed_gid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- Insert the status changes\n        DROP TABLE IF EXISTS inserted_goal_changes;\n        CREATE TEMP TABLE inserted_goal_changes\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        INSERT INTO "GoalStatusChanges" (\n          "goalId",\n          "oldStatus",\n          "newStatus",\n          reason\n        )\n        SELECT\n          gid,\n          g_status,\n          'Closed',\n          'Regional Office request'\n        FROM equity_goals\n        CROSS JOIN nowtime\n        RETURNING *\n        )\n        SELECT * FROM updater\n        ;\n        \n\n        -- The first two numbers should match and the last should be 0\n        SELECT 1 ord,'equity Objectives' item, COUNT(*) cnt FROM equity_objectives\n        UNION\n        SELECT 2, 'objectives Completed' , COUNT(*)  FROM updated_obj\n        UNION\n        SELECT 3 ,'equity Goals' item, COUNT(*) cnt FROM equity_goals\n        UNION\n        SELECT 4, 'Goals Closed' , COUNT(*)  FROM updated_goals\n        UNION\n        SELECT 5, 'Goal status changes inserted' , COUNT(*)  FROM inserted_goal_changes\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (84d55a38-7c14-4e9a-88b1-cf15af59b5d2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250206180000-eo-close-goals-and-objectives: migrated (0.030s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250206180355-update-headstart-resource-titles: migrating =======
Executing (aa0dde0f-421c-4c9a-98f8-e21892a2f85f): START TRANSACTION;
Connection validated successfully
Executing (aa0dde0f-421c-4c9a-98f8-e21892a2f85f): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250206180355-update-headstart-resource-titles.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (aa0dde0f-421c-4c9a-98f8-e21892a2f85f): -- Update the title of all headstart.gov resources that are missing a title by mapping them to the eclkc resource.\n        UPDATE "Resources" AS h\n        SET "title" = e."title"\n        FROM "Resources" AS e\n        WHERE h."domain" = 'headstart.gov'\n        AND h."title" IS NULL\n        AND e."mapsTo" = h."id"\n        AND e."domain" = 'eclkc.ohs.acf.hhs.gov'\n        AND e."title" IS NOT NULL;
Executing (aa0dde0f-421c-4c9a-98f8-e21892a2f85f): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250206180355-update-headstart-resource-titles: migrated (0.016s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250211211956-delete-in-progress-goal: migrating =======
Executing (56473402-327c-4557-b8b7-aa74d18b8d33): START TRANSACTION;
Connection validated successfully
Executing (56473402-327c-4557-b8b7-aa74d18b8d33): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250211211956-delete-in-progress-goal.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (56473402-327c-4557-b8b7-aa74d18b8d33): UPDATE "Goals" SET "deletedAt" = NOW() WHERE "id" = 97478;
Executing (56473402-327c-4557-b8b7-aa74d18b8d33): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250211211956-delete-in-progress-goal: migrated (0.017s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250213000000-clean-false-status-changes: migrating =======
Executing (e8422d82-175a-4562-bfe2-0cb6385c6047): START TRANSACTION;
Connection validated successfully
Executing (e8422d82-175a-4562-bfe2-0cb6385c6047): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250213000000-clean-false-status-changes.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- Remove extra GoalStatusChange entries that:\n        --  - were inserted when Goals didn't actually change status\n        --  - are duplicate insertions of the same status change\n        -- Also update Goals that have the incorrect "oldStatus" value.\n        -- This appears to occur most often on the initial status change\n        -- for a Goal when an associated Objective is designated as\n        -- In Progress. Potentially that is also when the Goal was created\n\n        DROP TABLE IF EXISTS marked_changes;\n        CREATE TEMP TABLE marked_changes\n        AS\n        SELECT\n          id gscid,\n          "oldStatus" oldstat,\n          "newStatus" newstat,\n          LAG("newStatus") OVER (\n              PARTITION BY "goalId"\n              ORDER BY "createdAt", id\n          ) real_previous_status,\n          "newStatus" != COALESCE(\n            LAG("newStatus") OVER (\n              PARTITION BY "goalId"\n              ORDER BY "createdAt", id\n            ), 'NULL'\n          ) isrealchange\n        FROM "GoalStatusChanges" g\n        ORDER BY "createdAt"\n        ;\n\n        -- Delete any Goal status changes that don't actually have a different\n        -- newStatus value than the preceding record.\n        DROP TABLE IF EXISTS deleted_gsc;\n        CREATE TEMP TABLE deleted_gsc\n        AS\n        WITH updater AS (\n        DELETE FROM "GoalStatusChanges"\n        USING marked_changes\n        WHERE id = gscid\n          AND NOT isrealchange\n        RETURNING id deleted_gscid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- Correct any real Goal status changes that have incorrect oldStatus values\n        DROP TABLE IF EXISTS updated_gsc;\n        CREATE TEMP TABLE updated_gsc\n        AS\n        WITH nowtime AS (SELECT NOW() nowts)\n        , updater AS (\n        UPDATE "GoalStatusChanges"\n        SET\n          "updatedAt" = nowts,\n          "oldStatus" = real_previous_status\n        FROM marked_changes\n        CROSS JOIN nowtime\n        WHERE id = gscid\n          AND COALESCE("oldStatus",'NULL') != COALESCE(real_previous_status,'NULL')\n        RETURNING id updated_gscid\n        )\n        SELECT * FROM updater\n        ;\n\n        DROP TABLE IF EXISTS remarked_changes;\n        CREATE TEMP TABLE remarked_changes\n        AS\n        SELECT\n          id gscid,\n          "oldStatus" oldstat,\n          "newStatus" newstat,\n          LAG("newStatus") OVER (\n              PARTITION BY "goalId"\n              ORDER BY "createdAt", id\n          ) real_previous_status,\n          "newStatus" != COALESCE(\n            LAG("newStatus") OVER (\n              PARTITION BY "goalId"\n              ORDER BY "createdAt", id\n            ), 'NULL'\n          ) isrealchange\n        FROM "GoalStatusChanges" g\n        ORDER BY "createdAt"\n        ;\n        \n\n        -- Check the math in the total_records column. same_statuses is just context.\n        -- needs_update and needs_delete should also match up and end 0\n        SELECT\n          1 ord,\n          COUNT(*) total_records,\n          COUNT(*) FILTER (WHERE oldstat = newstat) same_statuses,\n          COUNT(*) FILTER (WHERE isrealchange AND COALESCE(oldstat,'NULL') != COALESCE(real_previous_status,'NULL')) needs_update,\n          COUNT(*) FILTER (WHERE NOT isrealchange) needs_delete\n        FROM marked_changes\n        GROUP BY 1\n        UNION\n        SELECT\n          2 ord,\n          -(SELECT COUNT(*) FROM deleted_gsc),\n          NULL,\n          -(SELECT COUNT(*) FROM updated_gsc),\n          -(SELECT COUNT(*) FROM deleted_gsc)\n        UNION\n        SELECT\n          3 ord,\n          COUNT(*) total_records,\n          COUNT(*) FILTER (WHERE oldstat = newstat) same_statuses,\n          COUNT(*) FILTER (WHERE isrealchange AND COALESCE(oldstat,'NULL') != COALESCE(real_previous_status,'NULL'))  needs_update,\n          COUNT(*) FILTER (WHERE NOT isrealchange) needs_delete\n        FROM remarked_changes\n        GROUP BY 1\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (e8422d82-175a-4562-bfe2-0cb6385c6047): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250213000000-clean-false-status-changes: migrated (0.024s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250213194933-communication-log-recipients-one-to-many: migrating =======
Executing (b5749efd-aaff-4bde-9105-c089258f2b35): START TRANSACTION;
Connection validated successfully
Executing (b5749efd-aaff-4bde-9105-c089258f2b35): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250213194933-communication-log-recipients-one-to-many.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'multirecipient_communication_log';
Connection validated successfully
Executing (b5749efd-aaff-4bde-9105-c089258f2b35): CREATE TABLE IF NOT EXISTS "CommunicationLogRecipients" ("id"  SERIAL , "recipientId" INTEGER NOT NULL REFERENCES "Recipients" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "communicationLogId" INTEGER NOT NULL REFERENCES "CommunicationLogs" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), PRIMARY KEY ("id"));
Executing (b5749efd-aaff-4bde-9105-c089258f2b35): INSERT INTO "CommunicationLogRecipients" ("recipientId", "communicationLogId", "createdAt", "updatedAt")\n        SELECT "recipientId", id, "createdAt", "updatedAt" FROM "CommunicationLogs";
Executing (b5749efd-aaff-4bde-9105-c089258f2b35): DROP INDEX IF EXISTS "communication_log_recipients_communication_log_id_recipient_id";\n        CREATE UNIQUE INDEX  "communication_log_recipients_communication_log_id_recipient_id_unique" ON "CommunicationLogRecipients" ("communicationLogId","recipientId");
Executing (b5749efd-aaff-4bde-9105-c089258f2b35): ALTER TABLE "public"."CommunicationLogs" DROP COLUMN "recipientId";
Executing (b5749efd-aaff-4bde-9105-c089258f2b35): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250213194933-communication-log-recipients-one-to-many: migrated (0.058s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250224000000-bring-back-status-for-suspended: migrating =======
Executing (ecfac39c-412e-4856-85d6-00b4afa3ebe2): START TRANSACTION;
Connection validated successfully
Executing (ecfac39c-412e-4856-85d6-00b4afa3ebe2): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250224000000-bring-back-status-for-suspended.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- As a result of the previous migration, we lost the ability to track\n        -- the status of Goals that are suspended. This migration will bring\n        -- that back for the suspended goals by correcting the status changes that were removed.\n\n        UPDATE "GoalStatusChanges" gsc\n        SET "oldStatus" = zal.old_row_data->>'oldStatus'\n        FROM "ZALGoalStatusChanges" zal\n        WHERE gsc.id = zal."data_id"\n          AND zal.old_row_data->>'oldStatus' IS NOT NULL\n          AND gsc."oldStatus" IS NULL\n          AND gsc."newStatus" = 'Suspended'\n          AND gsc."updatedAt" >= '2025-02-14 00:00:00'::timestamp\n          AND gsc."updatedAt" < '2025-02-15 00:00:00'::timestamp;
Connection validated successfully
Executing (ecfac39c-412e-4856-85d6-00b4afa3ebe2): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250224000000-bring-back-status-for-suspended: migrated (0.022s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250228000000-delete-dupe-grant-replacements: migrating =======
Executing (02df33b3-37fa-4b03-92bf-2bf0fd882773): START TRANSACTION;
Connection validated successfully
Executing (02df33b3-37fa-4b03-92bf-2bf0fd882773): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250228000000-delete-dupe-grant-replacements.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): -- There are some old GrantReplacements records with null\n        -- grantReplacementTypeId values that are followed by another\n        -- GrantReplacements record that is the same except the\n        -- grantReplacementTypeId values are set. This removes the\n        -- null grantReplacementTypeId value set.\n\n        -- There are also many other GrantReplacements entries where\n        -- they have the same replacedGrantId and replacingGrantId, but\n        -- different non-null grantReplacementTypeId values.\n        -- This leaves those intact because they are of potential\n        -- future interest.\n\n        -- Find the dupe sets but only choose those with at least one record\n        -- where "grantReplacementTypeId" IS NULL and at least one record is\n        -- NOT null.\n        DROP TABLE IF EXISTS dupe_grant_replacement_sets;\n        CREATE TEMP TABLE dupe_grant_replacement_sets\n        AS\n        SELECT\n          "replacedGrantId" old_grid,\n          "replacingGrantId" new_grid,\n          COUNT(id) FILTER (WHERE "grantReplacementTypeId" IS NULL) nullid_cnt,\n          COUNT(id) cnt\n        FROM "GrantReplacements" gr\n        GROUP BY 1,2\n        HAVING BOOL_OR("grantReplacementTypeId" IS NULL)\n          AND BOOL_OR("grantReplacementTypeId" IS NOT NULL)\n        ;\n\n        -- delete the dupes with null grantReplacementTypeId\n        DROP TABLE IF EXISTS deleted_gr_dupes;\n        CREATE TEMP TABLE deleted_gr_dupes\n        AS\n        WITH updater AS (\n        DELETE FROM "GrantReplacements"\n        USING dupe_grant_replacement_sets\n        WHERE "replacedGrantId" = old_grid\n          AND "replacingGrantId" = new_grid\n          AND "grantReplacementTypeId" IS NULL\n        RETURNING id deleted_grid\n        )\n        SELECT * FROM updater\n        ;\n\n        -- These should match\n        SELECT 1 ord,'dupes to delete' item, SUM(nullid_cnt) cnt FROM dupe_grant_replacement_sets\n        UNION\n        SELECT 2, 'dupes deleted' , COUNT(*)  FROM deleted_gr_dupes\n        ORDER BY 1\n        ;
Connection validated successfully
Executing (02df33b3-37fa-4b03-92bf-2bf0fd882773): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250228000000-delete-dupe-grant-replacements: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250312123255-add-imports-post-processing: migrating =======
Executing (ef795efd-3835-431f-b689-df50bfbe6bd3): START TRANSACTION;
Connection validated successfully
Executing (ef795efd-3835-431f-b689-df50bfbe6bd3): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250312123255-add-imports-post-processing.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (ef795efd-3835-431f-b689-df50bfbe6bd3): ALTER TABLE "public"."Imports" ADD COLUMN "postProcessingActions" JSONB;
Executing (ef795efd-3835-431f-b689-df50bfbe6bd3): UPDATE "Imports"\n              SET "postProcessingActions" = '[{"name": "Monitoring Goal CRON job", "function": "createMonitoringGoals"}]'\n              WHERE "name" = 'ITAMS Monitoring Data';
Executing (ef795efd-3835-431f-b689-df50bfbe6bd3): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250312123255-add-imports-post-processing: migrated (0.027s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250312143130-sync-mailerlog-enum: migrating =======
Executing (f1b8e163-525f-4f66-b6c9-49a8fb57db5e): START TRANSACTION;
Connection validated successfully
Executing (f1b8e163-525f-4f66-b6c9-49a8fb57db5e): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250312143130-sync-mailerlog-enum.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'collaboratorAssigned';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'changesRequested';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'approverAssigned';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'reportApproved';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'collaboratorDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'changesRequestedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'approverAssignedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'reportApprovedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'recipientReportApproved';
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'recipientReportApprovedDigest';
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportCollaboratorAdded';
Connection validated successfully
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportSessionCreated';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportEventCompleted';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportTaskDueNotifications';
Connection validated successfully
Executing (default): ALTER TYPE "enum_MailerLogs_action" ADD VALUE IF NOT EXISTS 'trainingReportEventImported';
Connection validated successfully
Executing (f1b8e163-525f-4f66-b6c9-49a8fb57db5e): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250312143130-sync-mailerlog-enum: migrated (0.056s)

Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC;
Connection validated successfully
== 20250312210326-standard-goals-update-feature-flag: migrating =======
Executing (7aa568cb-bb30-41bc-bc97-07a1e4de9129): START TRANSACTION;
Connection validated successfully
Executing (7aa568cb-bb30-41bc-bc97-07a1e4de9129): SELECT\n      set_config('audit.loggedUser', '0', TRUE) as "loggedUser",\n      set_config('audit.transactionId', NULL, TRUE) as "transactionId",\n      set_config('audit.sessionSig', '/app/src/migrations/20250312210326-standard-goals-update-feature-flag.js', TRUE) as "sessionSig",\n      set_config('audit.auditDescriptor', 'RUN MIGRATIONS', TRUE) as "auditDescriptor";
Executing (default): ALTER TYPE "enum_Users_flags" ADD VALUE IF NOT EXISTS 'standard_goals_update';
Connection validated successfully
Executing (7aa568cb-bb30-41bc-bc97-07a1e4de9129): COMMIT;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'SequelizeMeta'
Connection validated successfully
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Connection validated successfully
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING "name";
Connection validated successfully
== 20250312210326-standard-goals-update-feature-flag: migrated (0.023s)

$ cross-env POSTGRES_USERNAME=postgres POSTGRES_DB=ttasmarthub tsx ./src/tools/logicalDataModelCLI.ts
(node:77) ExperimentalWarning: `--experimental-loader` may be removed in the future; instead use `register()`:
--import 'data:text/javascript,import { register } from "node:module"; import { pathToFileURL } from "node:url"; register("file%3A///app/node_modules/tsx/dist/loader.js", pathToFileURL("./"));'
(Use `node --trace-warnings ...` to show where the warning was created)
(node:77) [DEP0170] DeprecationWarning: The URL redis://null:null is invalid. Future versions of Node.js will throw an error.
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T23:19:26.484Z"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T23:19:26.873Z"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T23:19:26.888Z"}
Executing (default): SELECT\n        table_schema,\n        table_name "table",\n        json_agg(\n          json_build_object(\n            'ordinal', ordinal_position,\n            'name', column_name,\n            'type', CASE\n                  WHEN data_type = 'USER-DEFINED' THEN 'enum'\n                  WHEN data_type = 'character varying' THEN 'varchar(255)'\n                  WHEN data_type = 'ARRAY' THEN\n                    CASE\n                      WHEN SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?') = 'varchar' THEN 'varchar(255)'\n                      WHEN SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?') = 'int4' THEN 'integer'\n                      ELSE SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?')\n                    END || '[]'\n                  WHEN data_type = 'numeric' THEN CONCAT('decimal(', numeric_precision, ',', numeric_scale, ')')\n                  WHEN data_type = 'int4' THEN 'integer'\n                  ELSE data_type\n                END,\n            'subtype', SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?'),\n            'default', CASE\n                  WHEN column_default LIKE 'nextval%' THEN '<generated>'\n                  ELSE column_default\n                END,\n            'allowNull', is_nullable = 'YES',\n            'reference', SUBSTRING(pg_get_constraintdef(oid) FROM 'REFERENCES ([^)]+[)])'),\n            'subtype', SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?'),\n            'enumName', CASE\n                WHEN SUBSTRING(udt_name FROM '^[_]([^_]+)[_]?') = 'enum'\n                THEN SUBSTRING(udt_name FROM '^[_](([^_]+[_]?)+)')\n                else null\n              END,\n            'enums', (\n              SELECT ARRAY_AGG(e.enumlabel ORDER BY e.enumlabel)\n              FROM pg_type t\n              LEFT JOIN pg_enum e\n              ON e.enumtypid = t.oid\n              WHERE '_' || t.typname = col.udt_name\n            )\n          )\n          ORDER BY ordinal_position ASC\n        ) "fields"\n      FROM information_schema.columns col\n      LEFT JOIN pg_constraint con\n      ON col.table_name = regexp_replace(con.conrelid::regclass::TEXT,'"','','g')\n      AND pg_get_constraintdef(oid) LIKE 'FOREIGN KEY ("' || col.column_name || '") REFERENCES %'\n      WHERE table_schema = 'public'\n      AND table_name != 'SequelizeMeta'\n      --AND table_name NOT LIKE 'ZA%'\n      GROUP BY 1,2
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T23:19:26.945Z"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T23:19:27.006Z"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"null","label":"AUDIT","level":"error","message":"Queue encountered an error: getaddrinfo ENOTFOUND null","stack":"Error: getaddrinfo ENOTFOUND null\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26)\n    at GetAddrInfoReqWrap.callbackTrampoline (node:internal/async_hooks:130:17)","syscall":"getaddrinfo","timestamp":"2025-03-28T23:19:27.165Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T23:19:27.374Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T23:19:27.374Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T23:19:27.375Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T23:19:27.375Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T23:19:27.375Z"}
{"label":"AUDIT","level":"error","message":"Queue closed due to an error.","timestamp":"2025-03-28T23:19:27.375Z"}
Done in 53.17s.
Starting all services...
time="2025-03-28T16:19:28-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Running
 Container head-start-ttadp-server-1  Created
 Container head-start-ttadp-similarity_api-1  Recreate
 Container head-start-ttadp-similarity_api-1  Recreated
 Container head-start-ttadp-server-1  Starting
 Container head-start-ttadp-similarity_api-1  Starting
 Container head-start-ttadp-similarity_api-1  Started
 Container head-start-ttadp-server-1  Started
Setup completed successfully.
CONTAINER ID   IMAGE                             COMMAND                  CREATED                  STATUS                  PORTS                              NAMES
bb822f076825   head-start-ttadp-similarity_api   "gunicorn -w 4 -b 0.…"   Less than a second ago   Up Less than a second   5000/tcp, 0.0.0.0:9100->8080/tcp   head-start-ttadp-similarity_api-1
92c4a6abb221   postgres:15.6                     "docker-entrypoint.s…"   4 minutes ago            Up 4 minutes            5432/tcp                           postgres_docker
bb115d89c0c6   head-start-ttadp-server           "docker-entrypoint.s…"   2 hours ago              Up Less than a second   0.0.0.0:8080->8080/tcp             head-start-ttadp-server-1
Starting server setup...
Removing old build directory...
Installing and building Node.js app...
time="2025-03-28T18:15:42-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Created
 Container postgres_docker  Starting
 Container postgres_docker  Started
yarn install v1.22.22
[1/5] Validating package.json...
[2/5] Resolving packages...
warning Resolution field "colors@1.4.0" is incompatible with requested version "colors@1.0.x"
warning Resolution field "colors@1.4.0" is incompatible with requested version "colors@~1.2.1"
success Already up-to-date.
Done in 3.94s.
time="2025-03-28T18:15:54-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Running
yarn install v1.22.22
[1/5] Validating package.json...
[2/5] Resolving packages...
success Already up-to-date.
Done in 3.56s.
time="2025-03-28T18:16:01-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Running
yarn run v1.22.22
$ tsc -p src
Done in 109.63s.
time="2025-03-28T18:17:55-07:00" level=warning msg="Found orphan containers ([head-start-ttadp-worker-1 head-start-ttadp-backend-1 head-start-ttadp-frontend-1 head-start-ttadp-redis-1 head-start-ttadp-testingonly-1 head-start-ttadp-aws-cli-1 head-start-ttadp-minio-1 head-start-ttadp-api-docs-1 head-start-ttadp-mailcatcher-1 head-start-ttadp-sftp-1 head-start-ttadp-clamav-rest-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
 Container postgres_docker  Running
yarn run v1.22.22
$ INLINE_RUNTIME_CHUNK=false react-scripts build && mv build/ ../build/server/client
Creating an optimized production build...
Browserslist: caniuse-lite is outdated. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
